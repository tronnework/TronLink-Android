package org.tron.protos;

import com.alibaba.fastjson.asm.Opcodes;
import com.facebook.imageutils.JfifUtil;
import com.facebook.imageutils.TiffUtil;
import com.google.common.net.HttpHeaders;
import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
import com.google.protobuf.AbstractMessageLite;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.Any;
import com.google.protobuf.AnyOrBuilder;
import com.google.protobuf.AnyProto;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.MapEntry;
import com.google.protobuf.MapField;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilderV3;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.UnknownFieldSet;
import com.google.protobuf.WireFormat;
import com.tron.tron_base.frame.net.SignatureManager;
import com.tron.wallet.business.finance.FinanceFragment;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.tron.protos.Discover;
import org.tron.protos.contract.Common;
public final class Protocol {
    private static Descriptors.FileDescriptor descriptor;
    private static final Descriptors.Descriptor internal_static_protocol_AccountId_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_AccountId_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_AccountResource_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_AccountResource_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_AssetEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_AssetEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_AssetV2Entry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_AssetV2Entry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_FreeAssetNetUsageEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_FreeAssetNetUsageEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_FreeAssetNetUsageV2Entry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_FreeAssetNetUsageV2Entry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_FreezeV2_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_FreezeV2_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_Frozen_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_Frozen_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_LatestAssetOperationTimeEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_LatestAssetOperationTimeEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_LatestAssetOperationTimeV2Entry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_LatestAssetOperationTimeV2Entry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_UnFreezeV2_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_UnFreezeV2_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Account_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Account_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_BlockHeader_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_BlockHeader_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_BlockHeader_raw_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_BlockHeader_raw_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_BlockInventory_BlockId_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_BlockInventory_BlockId_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_BlockInventory_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_BlockInventory_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Block_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Block_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_ChainInventory_BlockId_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_ChainInventory_BlockId_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_ChainInventory_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_ChainInventory_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_ChainParameters_ChainParameter_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_ChainParameters_ChainParameter_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_ChainParameters_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_ChainParameters_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_DelegatedResourceAccountIndex_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_DelegatedResourceAccountIndex_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_DelegatedResource_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_DelegatedResource_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_DisconnectMessage_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_DisconnectMessage_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_DynamicProperties_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_DynamicProperties_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Exchange_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Exchange_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_HelloMessage_BlockId_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_HelloMessage_BlockId_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_HelloMessage_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_HelloMessage_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_InternalTransaction_CallValueInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_InternalTransaction_CallValueInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_InternalTransaction_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_InternalTransaction_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Inventory_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Inventory_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Items_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Items_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Key_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Key_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketAccountOrder_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketAccountOrder_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrderDetail_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrderDetail_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrderIdList_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrderIdList_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrderList_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrderList_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrderPairList_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrderPairList_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrderPair_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrderPair_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketOrder_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketOrder_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketPriceList_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketPriceList_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MarketPrice_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MarketPrice_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_BlockChainInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_BlockChainInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NetInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NetInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_NodeInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_NodeInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_RateInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_RateInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_MetricsInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_MetricsInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_CheatWitnessInfoMapEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_CheatWitnessInfoMapEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_ConfigNodeInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_ConfigNodeInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_MachineInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_MachineInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_PeerInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_PeerInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_NodeInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_NodeInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_PBFTCommitResult_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_PBFTCommitResult_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_PBFTMessage_Raw_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_PBFTMessage_Raw_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_PBFTMessage_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_PBFTMessage_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Permission_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Permission_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Proposal_ParametersEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Proposal_ParametersEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Proposal_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Proposal_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_ResourceReceipt_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_ResourceReceipt_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_SRL_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_SRL_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TXInput_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TXInput_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TXInput_raw_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TXInput_raw_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TXOutput_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TXOutput_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TXOutputs_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TXOutputs_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TransactionInfo_CancelUnfreezeV2AmountEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TransactionInfo_CancelUnfreezeV2AmountEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TransactionInfo_Log_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TransactionInfo_Log_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TransactionInfo_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TransactionInfo_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_TransactionRet_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_TransactionRet_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transaction_Contract_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transaction_Contract_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transaction_Result_CancelUnfreezeV2AmountEntry_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transaction_Result_CancelUnfreezeV2AmountEntry_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transaction_Result_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transaction_Result_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transaction_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transaction_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transaction_raw_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transaction_raw_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Transactions_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Transactions_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Vote_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Vote_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Votes_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Votes_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_Witness_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_Witness_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_protocol_authority_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_protocol_authority_fieldAccessorTable;

    public interface AccountIdOrBuilder extends MessageOrBuilder {
        ByteString getAddress();

        ByteString getName();
    }

    public interface AccountOrBuilder extends MessageOrBuilder {
        boolean containsAsset(String str);

        boolean containsAssetV2(String str);

        boolean containsFreeAssetNetUsage(String str);

        boolean containsFreeAssetNetUsageV2(String str);

        boolean containsLatestAssetOperationTime(String str);

        boolean containsLatestAssetOperationTimeV2(String str);

        ByteString getAccountId();

        ByteString getAccountName();

        Account.AccountResource getAccountResource();

        Account.AccountResourceOrBuilder getAccountResourceOrBuilder();

        long getAcquiredDelegatedFrozenBalanceForBandwidth();

        long getAcquiredDelegatedFrozenV2BalanceForBandwidth();

        Permission getActivePermission(int i);

        int getActivePermissionCount();

        List<Permission> getActivePermissionList();

        PermissionOrBuilder getActivePermissionOrBuilder(int i);

        List<? extends PermissionOrBuilder> getActivePermissionOrBuilderList();

        ByteString getAddress();

        long getAllowance();

        @Deprecated
        Map<String, Long> getAsset();

        int getAssetCount();

        ByteString getAssetIssuedID();

        ByteString getAssetIssuedName();

        Map<String, Long> getAssetMap();

        boolean getAssetOptimized();

        long getAssetOrDefault(String str, long j);

        long getAssetOrThrow(String str);

        @Deprecated
        Map<String, Long> getAssetV2();

        int getAssetV2Count();

        Map<String, Long> getAssetV2Map();

        long getAssetV2OrDefault(String str, long j);

        long getAssetV2OrThrow(String str);

        long getBalance();

        ByteString getCode();

        ByteString getCodeHash();

        long getCreateTime();

        long getDelegatedFrozenBalanceForBandwidth();

        long getDelegatedFrozenV2BalanceForBandwidth();

        @Deprecated
        Map<String, Long> getFreeAssetNetUsage();

        int getFreeAssetNetUsageCount();

        Map<String, Long> getFreeAssetNetUsageMap();

        long getFreeAssetNetUsageOrDefault(String str, long j);

        long getFreeAssetNetUsageOrThrow(String str);

        @Deprecated
        Map<String, Long> getFreeAssetNetUsageV2();

        int getFreeAssetNetUsageV2Count();

        Map<String, Long> getFreeAssetNetUsageV2Map();

        long getFreeAssetNetUsageV2OrDefault(String str, long j);

        long getFreeAssetNetUsageV2OrThrow(String str);

        long getFreeNetUsage();

        Account.Frozen getFrozen(int i);

        int getFrozenCount();

        List<Account.Frozen> getFrozenList();

        Account.FrozenOrBuilder getFrozenOrBuilder(int i);

        List<? extends Account.FrozenOrBuilder> getFrozenOrBuilderList();

        Account.Frozen getFrozenSupply(int i);

        int getFrozenSupplyCount();

        List<Account.Frozen> getFrozenSupplyList();

        Account.FrozenOrBuilder getFrozenSupplyOrBuilder(int i);

        List<? extends Account.FrozenOrBuilder> getFrozenSupplyOrBuilderList();

        Account.FreezeV2 getFrozenV2(int i);

        int getFrozenV2Count();

        List<Account.FreezeV2> getFrozenV2List();

        Account.FreezeV2OrBuilder getFrozenV2OrBuilder(int i);

        List<? extends Account.FreezeV2OrBuilder> getFrozenV2OrBuilderList();

        boolean getIsCommittee();

        boolean getIsWitness();

        @Deprecated
        Map<String, Long> getLatestAssetOperationTime();

        int getLatestAssetOperationTimeCount();

        Map<String, Long> getLatestAssetOperationTimeMap();

        long getLatestAssetOperationTimeOrDefault(String str, long j);

        long getLatestAssetOperationTimeOrThrow(String str);

        @Deprecated
        Map<String, Long> getLatestAssetOperationTimeV2();

        int getLatestAssetOperationTimeV2Count();

        Map<String, Long> getLatestAssetOperationTimeV2Map();

        long getLatestAssetOperationTimeV2OrDefault(String str, long j);

        long getLatestAssetOperationTimeV2OrThrow(String str);

        long getLatestConsumeFreeTime();

        long getLatestConsumeTime();

        long getLatestOprationTime();

        long getLatestWithdrawTime();

        long getNetUsage();

        boolean getNetWindowOptimized();

        long getNetWindowSize();

        long getOldTronPower();

        Permission getOwnerPermission();

        PermissionOrBuilder getOwnerPermissionOrBuilder();

        Account.Frozen getTronPower();

        Account.FrozenOrBuilder getTronPowerOrBuilder();

        AccountType getType();

        int getTypeValue();

        Account.UnFreezeV2 getUnfrozenV2(int i);

        int getUnfrozenV2Count();

        List<Account.UnFreezeV2> getUnfrozenV2List();

        Account.UnFreezeV2OrBuilder getUnfrozenV2OrBuilder(int i);

        List<? extends Account.UnFreezeV2OrBuilder> getUnfrozenV2OrBuilderList();

        Vote getVotes(int i);

        int getVotesCount();

        List<Vote> getVotesList();

        VoteOrBuilder getVotesOrBuilder(int i);

        List<? extends VoteOrBuilder> getVotesOrBuilderList();

        Permission getWitnessPermission();

        PermissionOrBuilder getWitnessPermissionOrBuilder();

        boolean hasAccountResource();

        boolean hasOwnerPermission();

        boolean hasTronPower();

        boolean hasWitnessPermission();
    }

    public interface BlockHeaderOrBuilder extends MessageOrBuilder {
        BlockHeader.raw getRawData();

        BlockHeader.rawOrBuilder getRawDataOrBuilder();

        ByteString getWitnessSignature();

        boolean hasRawData();
    }

    public interface BlockInventoryOrBuilder extends MessageOrBuilder {
        BlockInventory.BlockId getIds(int i);

        int getIdsCount();

        List<BlockInventory.BlockId> getIdsList();

        BlockInventory.BlockIdOrBuilder getIdsOrBuilder(int i);

        List<? extends BlockInventory.BlockIdOrBuilder> getIdsOrBuilderList();

        BlockInventory.Type getType();

        int getTypeValue();
    }

    public interface BlockOrBuilder extends MessageOrBuilder {
        BlockHeader getBlockHeader();

        BlockHeaderOrBuilder getBlockHeaderOrBuilder();

        Transaction getTransactions(int i);

        int getTransactionsCount();

        List<Transaction> getTransactionsList();

        TransactionOrBuilder getTransactionsOrBuilder(int i);

        List<? extends TransactionOrBuilder> getTransactionsOrBuilderList();

        boolean hasBlockHeader();
    }

    public interface ChainInventoryOrBuilder extends MessageOrBuilder {
        ChainInventory.BlockId getIds(int i);

        int getIdsCount();

        List<ChainInventory.BlockId> getIdsList();

        ChainInventory.BlockIdOrBuilder getIdsOrBuilder(int i);

        List<? extends ChainInventory.BlockIdOrBuilder> getIdsOrBuilderList();

        long getRemainNum();
    }

    public interface ChainParametersOrBuilder extends MessageOrBuilder {
        ChainParameters.ChainParameter getChainParameter(int i);

        int getChainParameterCount();

        List<ChainParameters.ChainParameter> getChainParameterList();

        ChainParameters.ChainParameterOrBuilder getChainParameterOrBuilder(int i);

        List<? extends ChainParameters.ChainParameterOrBuilder> getChainParameterOrBuilderList();
    }

    public interface DelegatedResourceAccountIndexOrBuilder extends MessageOrBuilder {
        ByteString getAccount();

        ByteString getFromAccounts(int i);

        int getFromAccountsCount();

        List<ByteString> getFromAccountsList();

        long getTimestamp();

        ByteString getToAccounts(int i);

        int getToAccountsCount();

        List<ByteString> getToAccountsList();
    }

    public interface DelegatedResourceOrBuilder extends MessageOrBuilder {
        long getExpireTimeForBandwidth();

        long getExpireTimeForEnergy();

        ByteString getFrom();

        long getFrozenBalanceForBandwidth();

        long getFrozenBalanceForEnergy();

        ByteString getTo();
    }

    public interface DisconnectMessageOrBuilder extends MessageOrBuilder {
        ReasonCode getReason();

        int getReasonValue();
    }

    public interface DynamicPropertiesOrBuilder extends MessageOrBuilder {
        long getLastSolidityBlockNum();
    }

    public interface ExchangeOrBuilder extends MessageOrBuilder {
        long getCreateTime();

        ByteString getCreatorAddress();

        long getExchangeId();

        long getFirstTokenBalance();

        ByteString getFirstTokenId();

        long getSecondTokenBalance();

        ByteString getSecondTokenId();
    }

    public interface HelloMessageOrBuilder extends MessageOrBuilder {
        ByteString getAddress();

        Discover.Endpoint getFrom();

        Discover.EndpointOrBuilder getFromOrBuilder();

        HelloMessage.BlockId getGenesisBlockId();

        HelloMessage.BlockIdOrBuilder getGenesisBlockIdOrBuilder();

        HelloMessage.BlockId getHeadBlockId();

        HelloMessage.BlockIdOrBuilder getHeadBlockIdOrBuilder();

        long getLowestBlockNum();

        int getNodeType();

        ByteString getSignature();

        HelloMessage.BlockId getSolidBlockId();

        HelloMessage.BlockIdOrBuilder getSolidBlockIdOrBuilder();

        long getTimestamp();

        int getVersion();

        boolean hasFrom();

        boolean hasGenesisBlockId();

        boolean hasHeadBlockId();

        boolean hasSolidBlockId();
    }

    public interface InternalTransactionOrBuilder extends MessageOrBuilder {
        InternalTransaction.CallValueInfo getCallValueInfo(int i);

        int getCallValueInfoCount();

        List<InternalTransaction.CallValueInfo> getCallValueInfoList();

        InternalTransaction.CallValueInfoOrBuilder getCallValueInfoOrBuilder(int i);

        List<? extends InternalTransaction.CallValueInfoOrBuilder> getCallValueInfoOrBuilderList();

        ByteString getCallerAddress();

        String getExtra();

        ByteString getExtraBytes();

        ByteString getHash();

        ByteString getNote();

        boolean getRejected();

        ByteString getTransferToAddress();
    }

    public interface InventoryOrBuilder extends MessageOrBuilder {
        ByteString getIds(int i);

        int getIdsCount();

        List<ByteString> getIdsList();

        Inventory.InventoryType getType();

        int getTypeValue();
    }

    public interface ItemsOrBuilder extends MessageOrBuilder {
        BlockHeader getBlockHeaders(int i);

        int getBlockHeadersCount();

        List<BlockHeader> getBlockHeadersList();

        BlockHeaderOrBuilder getBlockHeadersOrBuilder(int i);

        List<? extends BlockHeaderOrBuilder> getBlockHeadersOrBuilderList();

        Block getBlocks(int i);

        int getBlocksCount();

        List<Block> getBlocksList();

        BlockOrBuilder getBlocksOrBuilder(int i);

        List<? extends BlockOrBuilder> getBlocksOrBuilderList();

        Transaction getTransactions(int i);

        int getTransactionsCount();

        List<Transaction> getTransactionsList();

        TransactionOrBuilder getTransactionsOrBuilder(int i);

        List<? extends TransactionOrBuilder> getTransactionsOrBuilderList();

        Items.ItemType getType();

        int getTypeValue();
    }

    public interface KeyOrBuilder extends MessageOrBuilder {
        ByteString getAddress();

        long getWeight();
    }

    public interface MarketAccountOrderOrBuilder extends MessageOrBuilder {
        long getCount();

        ByteString getOrders(int i);

        int getOrdersCount();

        List<ByteString> getOrdersList();

        ByteString getOwnerAddress();

        long getTotalCount();
    }

    public interface MarketOrderDetailOrBuilder extends MessageOrBuilder {
        long getFillBuyQuantity();

        long getFillSellQuantity();

        ByteString getMakerOrderId();

        ByteString getTakerOrderId();
    }

    public interface MarketOrderIdListOrBuilder extends MessageOrBuilder {
        ByteString getHead();

        ByteString getTail();
    }

    public interface MarketOrderListOrBuilder extends MessageOrBuilder {
        MarketOrder getOrders(int i);

        int getOrdersCount();

        List<MarketOrder> getOrdersList();

        MarketOrderOrBuilder getOrdersOrBuilder(int i);

        List<? extends MarketOrderOrBuilder> getOrdersOrBuilderList();
    }

    public interface MarketOrderOrBuilder extends MessageOrBuilder {
        ByteString getBuyTokenId();

        long getBuyTokenQuantity();

        long getCreateTime();

        ByteString getNext();

        ByteString getOrderId();

        ByteString getOwnerAddress();

        ByteString getPrev();

        ByteString getSellTokenId();

        long getSellTokenQuantity();

        long getSellTokenQuantityRemain();

        long getSellTokenQuantityReturn();

        MarketOrder.State getState();

        int getStateValue();
    }

    public interface MarketOrderPairListOrBuilder extends MessageOrBuilder {
        MarketOrderPair getOrderPair(int i);

        int getOrderPairCount();

        List<MarketOrderPair> getOrderPairList();

        MarketOrderPairOrBuilder getOrderPairOrBuilder(int i);

        List<? extends MarketOrderPairOrBuilder> getOrderPairOrBuilderList();
    }

    public interface MarketOrderPairOrBuilder extends MessageOrBuilder {
        ByteString getBuyTokenId();

        ByteString getSellTokenId();
    }

    public interface MarketPriceListOrBuilder extends MessageOrBuilder {
        ByteString getBuyTokenId();

        MarketPrice getPrices(int i);

        int getPricesCount();

        List<MarketPrice> getPricesList();

        MarketPriceOrBuilder getPricesOrBuilder(int i);

        List<? extends MarketPriceOrBuilder> getPricesOrBuilderList();

        ByteString getSellTokenId();
    }

    public interface MarketPriceOrBuilder extends MessageOrBuilder {
        long getBuyTokenQuantity();

        long getSellTokenQuantity();
    }

    public static final class MetricsInfo extends GeneratedMessageV3 implements MetricsInfoOrBuilder {
        public static final int BLOCKCHAIN_FIELD_NUMBER = 3;
        public static final int INTERVAL_FIELD_NUMBER = 1;
        public static final int NET_FIELD_NUMBER = 4;
        public static final int NODE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private BlockChainInfo blockchain_;
        private long interval_;
        private byte memoizedIsInitialized;
        private NetInfo net_;
        private NodeInfo node_;
        private static final MetricsInfo DEFAULT_INSTANCE = new MetricsInfo();
        private static final Parser<MetricsInfo> PARSER = new AbstractParser<MetricsInfo>() {
            @Override
            public MetricsInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MetricsInfo(codedInputStream, extensionRegistryLite);
            }
        };

        public static final class BlockChainInfo extends GeneratedMessageV3 implements BlockChainInfoOrBuilder {
            public static final int BLOCKPROCESSTIME_FIELD_NUMBER = 6;
            public static final int DUPWITNESS_FIELD_NUMBER = 13;
            public static final int FAILFORKCOUNT_FIELD_NUMBER = 5;
            public static final int FAILPROCESSBLOCKNUM_FIELD_NUMBER = 11;
            public static final int FAILPROCESSBLOCKREASON_FIELD_NUMBER = 12;
            public static final int FORKCOUNT_FIELD_NUMBER = 4;
            public static final int HEADBLOCKHASH_FIELD_NUMBER = 3;
            public static final int HEADBLOCKNUM_FIELD_NUMBER = 1;
            public static final int HEADBLOCKTIMESTAMP_FIELD_NUMBER = 2;
            public static final int MISSEDTRANSACTION_FIELD_NUMBER = 9;
            public static final int TPS_FIELD_NUMBER = 7;
            public static final int TRANSACTIONCACHESIZE_FIELD_NUMBER = 8;
            public static final int WITNESSES_FIELD_NUMBER = 10;
            private static final long serialVersionUID = 0;
            private int bitField0_;
            private RateInfo blockProcessTime_;
            private List<DupWitness> dupWitness_;
            private int failForkCount_;
            private long failProcessBlockNum_;
            private volatile Object failProcessBlockReason_;
            private int forkCount_;
            private volatile Object headBlockHash_;
            private long headBlockNum_;
            private long headBlockTimestamp_;
            private byte memoizedIsInitialized;
            private RateInfo missedTransaction_;
            private RateInfo tps_;
            private int transactionCacheSize_;
            private List<Witness> witnesses_;
            private static final BlockChainInfo DEFAULT_INSTANCE = new BlockChainInfo();
            private static final Parser<BlockChainInfo> PARSER = new AbstractParser<BlockChainInfo>() {
                @Override
                public BlockChainInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new BlockChainInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockChainInfoOrBuilder {
                private int bitField0_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> blockProcessTimeBuilder_;
                private RateInfo blockProcessTime_;
                private RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> dupWitnessBuilder_;
                private List<DupWitness> dupWitness_;
                private int failForkCount_;
                private long failProcessBlockNum_;
                private Object failProcessBlockReason_;
                private int forkCount_;
                private Object headBlockHash_;
                private long headBlockNum_;
                private long headBlockTimestamp_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> missedTransactionBuilder_;
                private RateInfo missedTransaction_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> tpsBuilder_;
                private RateInfo tps_;
                private int transactionCacheSize_;
                private RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> witnessesBuilder_;
                private List<Witness> witnesses_;

                private Builder() {
                    this.headBlockHash_ = "";
                    this.blockProcessTime_ = null;
                    this.tps_ = null;
                    this.missedTransaction_ = null;
                    this.witnesses_ = Collections.emptyList();
                    this.failProcessBlockReason_ = "";
                    this.dupWitness_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.headBlockHash_ = "";
                    this.blockProcessTime_ = null;
                    this.tps_ = null;
                    this.missedTransaction_ = null;
                    this.witnesses_ = Collections.emptyList();
                    this.failProcessBlockReason_ = "";
                    this.dupWitness_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private void ensureDupWitnessIsMutable() {
                    if ((this.bitField0_ & 4096) != 4096) {
                        this.dupWitness_ = new ArrayList(this.dupWitness_);
                        this.bitField0_ |= 4096;
                    }
                }

                private void ensureWitnessesIsMutable() {
                    if ((this.bitField0_ & 512) != 512) {
                        this.witnesses_ = new ArrayList(this.witnesses_);
                        this.bitField0_ |= 512;
                    }
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getBlockProcessTimeFieldBuilder() {
                    if (this.blockProcessTimeBuilder_ == null) {
                        this.blockProcessTimeBuilder_ = new SingleFieldBuilderV3<>(getBlockProcessTime(), getParentForChildren(), isClean());
                        this.blockProcessTime_ = null;
                    }
                    return this.blockProcessTimeBuilder_;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_descriptor;
                }

                private RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> getDupWitnessFieldBuilder() {
                    if (this.dupWitnessBuilder_ == null) {
                        this.dupWitnessBuilder_ = new RepeatedFieldBuilderV3<>(this.dupWitness_, (this.bitField0_ & 4096) == 4096, getParentForChildren(), isClean());
                        this.dupWitness_ = null;
                    }
                    return this.dupWitnessBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getMissedTransactionFieldBuilder() {
                    if (this.missedTransactionBuilder_ == null) {
                        this.missedTransactionBuilder_ = new SingleFieldBuilderV3<>(getMissedTransaction(), getParentForChildren(), isClean());
                        this.missedTransaction_ = null;
                    }
                    return this.missedTransactionBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getTpsFieldBuilder() {
                    if (this.tpsBuilder_ == null) {
                        this.tpsBuilder_ = new SingleFieldBuilderV3<>(getTps(), getParentForChildren(), isClean());
                        this.tps_ = null;
                    }
                    return this.tpsBuilder_;
                }

                private RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> getWitnessesFieldBuilder() {
                    if (this.witnessesBuilder_ == null) {
                        this.witnessesBuilder_ = new RepeatedFieldBuilderV3<>(this.witnesses_, (this.bitField0_ & 512) == 512, getParentForChildren(), isClean());
                        this.witnesses_ = null;
                    }
                    return this.witnessesBuilder_;
                }

                private void maybeForceBuilderInitialization() {
                    if (BlockChainInfo.alwaysUseFieldBuilders) {
                        getWitnessesFieldBuilder();
                        getDupWitnessFieldBuilder();
                    }
                }

                public Builder addAllDupWitness(Iterable<? extends DupWitness> iterable) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDupWitnessIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.dupWitness_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder addAllWitnesses(Iterable<? extends Witness> iterable) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureWitnessesIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.witnesses_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder addDupWitness(int i, DupWitness.Builder builder) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addDupWitness(int i, DupWitness dupWitness) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        dupWitness.getClass();
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.add(i, dupWitness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, dupWitness);
                    }
                    return this;
                }

                public Builder addDupWitness(DupWitness.Builder builder) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addDupWitness(DupWitness dupWitness) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        dupWitness.getClass();
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.add(dupWitness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(dupWitness);
                    }
                    return this;
                }

                public DupWitness.Builder addDupWitnessBuilder() {
                    return getDupWitnessFieldBuilder().addBuilder(DupWitness.getDefaultInstance());
                }

                public DupWitness.Builder addDupWitnessBuilder(int i) {
                    return getDupWitnessFieldBuilder().addBuilder(i, DupWitness.getDefaultInstance());
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                public Builder addWitnesses(int i, Witness.Builder builder) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureWitnessesIsMutable();
                        this.witnesses_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addWitnesses(int i, Witness witness) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        witness.getClass();
                        ensureWitnessesIsMutable();
                        this.witnesses_.add(i, witness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, witness);
                    }
                    return this;
                }

                public Builder addWitnesses(Witness.Builder builder) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureWitnessesIsMutable();
                        this.witnesses_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addWitnesses(Witness witness) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        witness.getClass();
                        ensureWitnessesIsMutable();
                        this.witnesses_.add(witness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(witness);
                    }
                    return this;
                }

                public Witness.Builder addWitnessesBuilder() {
                    return getWitnessesFieldBuilder().addBuilder(Witness.getDefaultInstance());
                }

                public Witness.Builder addWitnessesBuilder(int i) {
                    return getWitnessesFieldBuilder().addBuilder(i, Witness.getDefaultInstance());
                }

                @Override
                public BlockChainInfo build() {
                    BlockChainInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public BlockChainInfo buildPartial() {
                    List<Witness> build;
                    List<DupWitness> build2;
                    BlockChainInfo blockChainInfo = new BlockChainInfo(this);
                    blockChainInfo.headBlockNum_ = this.headBlockNum_;
                    blockChainInfo.headBlockTimestamp_ = this.headBlockTimestamp_;
                    blockChainInfo.headBlockHash_ = this.headBlockHash_;
                    blockChainInfo.forkCount_ = this.forkCount_;
                    blockChainInfo.failForkCount_ = this.failForkCount_;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    blockChainInfo.blockProcessTime_ = singleFieldBuilderV3 == null ? this.blockProcessTime_ : singleFieldBuilderV3.build();
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.tpsBuilder_;
                    blockChainInfo.tps_ = singleFieldBuilderV32 == null ? this.tps_ : singleFieldBuilderV32.build();
                    blockChainInfo.transactionCacheSize_ = this.transactionCacheSize_;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.missedTransactionBuilder_;
                    blockChainInfo.missedTransaction_ = singleFieldBuilderV33 == null ? this.missedTransaction_ : singleFieldBuilderV33.build();
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        if ((this.bitField0_ & 512) == 512) {
                            this.witnesses_ = Collections.unmodifiableList(this.witnesses_);
                            this.bitField0_ &= -513;
                        }
                        build = this.witnesses_;
                    } else {
                        build = repeatedFieldBuilderV3.build();
                    }
                    blockChainInfo.witnesses_ = build;
                    blockChainInfo.failProcessBlockNum_ = this.failProcessBlockNum_;
                    blockChainInfo.failProcessBlockReason_ = this.failProcessBlockReason_;
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV32 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        if ((this.bitField0_ & 4096) == 4096) {
                            this.dupWitness_ = Collections.unmodifiableList(this.dupWitness_);
                            this.bitField0_ &= -4097;
                        }
                        build2 = this.dupWitness_;
                    } else {
                        build2 = repeatedFieldBuilderV32.build();
                    }
                    blockChainInfo.dupWitness_ = build2;
                    blockChainInfo.bitField0_ = 0;
                    onBuilt();
                    return blockChainInfo;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.headBlockNum_ = 0L;
                    this.headBlockTimestamp_ = 0L;
                    this.headBlockHash_ = "";
                    this.forkCount_ = 0;
                    this.failForkCount_ = 0;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    this.blockProcessTime_ = null;
                    if (singleFieldBuilderV3 != null) {
                        this.blockProcessTimeBuilder_ = null;
                    }
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.tpsBuilder_;
                    this.tps_ = null;
                    if (singleFieldBuilderV32 != null) {
                        this.tpsBuilder_ = null;
                    }
                    this.transactionCacheSize_ = 0;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.missedTransactionBuilder_;
                    this.missedTransaction_ = null;
                    if (singleFieldBuilderV33 != null) {
                        this.missedTransactionBuilder_ = null;
                    }
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.witnesses_ = Collections.emptyList();
                        this.bitField0_ &= -513;
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    this.failProcessBlockNum_ = 0L;
                    this.failProcessBlockReason_ = "";
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV32 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        this.dupWitness_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                    } else {
                        repeatedFieldBuilderV32.clear();
                    }
                    return this;
                }

                public Builder clearBlockProcessTime() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    this.blockProcessTime_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.blockProcessTimeBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearDupWitness() {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.dupWitness_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder clearFailForkCount() {
                    this.failForkCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearFailProcessBlockNum() {
                    this.failProcessBlockNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder clearFailProcessBlockReason() {
                    this.failProcessBlockReason_ = BlockChainInfo.getDefaultInstance().getFailProcessBlockReason();
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                public Builder clearForkCount() {
                    this.forkCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearHeadBlockHash() {
                    this.headBlockHash_ = BlockChainInfo.getDefaultInstance().getHeadBlockHash();
                    onChanged();
                    return this;
                }

                public Builder clearHeadBlockNum() {
                    this.headBlockNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder clearHeadBlockTimestamp() {
                    this.headBlockTimestamp_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder clearMissedTransaction() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    this.missedTransaction_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.missedTransactionBuilder_ = null;
                    }
                    return this;
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                public Builder clearTps() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    this.tps_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.tpsBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearTransactionCacheSize() {
                    this.transactionCacheSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearWitnesses() {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.witnesses_ = Collections.emptyList();
                        this.bitField0_ &= -513;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public RateInfo getBlockProcessTime() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.blockProcessTime_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getBlockProcessTimeBuilder() {
                    onChanged();
                    return getBlockProcessTimeFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getBlockProcessTimeOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.blockProcessTime_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public BlockChainInfo getDefaultInstanceForType() {
                    return BlockChainInfo.getDefaultInstance();
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_descriptor;
                }

                @Override
                public DupWitness getDupWitness(int i) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.dupWitness_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                }

                public DupWitness.Builder getDupWitnessBuilder(int i) {
                    return getDupWitnessFieldBuilder().getBuilder(i);
                }

                public List<DupWitness.Builder> getDupWitnessBuilderList() {
                    return getDupWitnessFieldBuilder().getBuilderList();
                }

                @Override
                public int getDupWitnessCount() {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.dupWitness_.size() : repeatedFieldBuilderV3.getCount();
                }

                @Override
                public List<DupWitness> getDupWitnessList() {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.dupWitness_) : repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public DupWitnessOrBuilder getDupWitnessOrBuilder(int i) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    return (DupWitnessOrBuilder) (repeatedFieldBuilderV3 == null ? this.dupWitness_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                }

                @Override
                public List<? extends DupWitnessOrBuilder> getDupWitnessOrBuilderList() {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.dupWitness_);
                }

                @Override
                public int getFailForkCount() {
                    return this.failForkCount_;
                }

                @Override
                public long getFailProcessBlockNum() {
                    return this.failProcessBlockNum_;
                }

                @Override
                public String getFailProcessBlockReason() {
                    Object obj = this.failProcessBlockReason_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.failProcessBlockReason_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getFailProcessBlockReasonBytes() {
                    Object obj = this.failProcessBlockReason_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.failProcessBlockReason_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public int getForkCount() {
                    return this.forkCount_;
                }

                @Override
                public String getHeadBlockHash() {
                    Object obj = this.headBlockHash_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.headBlockHash_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getHeadBlockHashBytes() {
                    Object obj = this.headBlockHash_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.headBlockHash_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public long getHeadBlockNum() {
                    return this.headBlockNum_;
                }

                @Override
                public long getHeadBlockTimestamp() {
                    return this.headBlockTimestamp_;
                }

                @Override
                public RateInfo getMissedTransaction() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.missedTransaction_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getMissedTransactionBuilder() {
                    onChanged();
                    return getMissedTransactionFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getMissedTransactionOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.missedTransaction_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfo getTps() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.tps_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getTpsBuilder() {
                    onChanged();
                    return getTpsFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getTpsOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.tps_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public int getTransactionCacheSize() {
                    return this.transactionCacheSize_;
                }

                @Override
                public Witness getWitnesses(int i) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.witnesses_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                }

                public Witness.Builder getWitnessesBuilder(int i) {
                    return getWitnessesFieldBuilder().getBuilder(i);
                }

                public List<Witness.Builder> getWitnessesBuilderList() {
                    return getWitnessesFieldBuilder().getBuilderList();
                }

                @Override
                public int getWitnessesCount() {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.witnesses_.size() : repeatedFieldBuilderV3.getCount();
                }

                @Override
                public List<Witness> getWitnessesList() {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.witnesses_) : repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public WitnessOrBuilder getWitnessesOrBuilder(int i) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    return (WitnessOrBuilder) (repeatedFieldBuilderV3 == null ? this.witnesses_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                }

                @Override
                public List<? extends WitnessOrBuilder> getWitnessesOrBuilderList() {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.witnesses_);
                }

                @Override
                public boolean hasBlockProcessTime() {
                    return (this.blockProcessTimeBuilder_ == null && this.blockProcessTime_ == null) ? false : true;
                }

                @Override
                public boolean hasMissedTransaction() {
                    return (this.missedTransactionBuilder_ == null && this.missedTransaction_ == null) ? false : true;
                }

                @Override
                public boolean hasTps() {
                    return (this.tpsBuilder_ == null && this.tps_ == null) ? false : true;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockChainInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeBlockProcessTime(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.blockProcessTime_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.blockProcessTime_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$BlockChainInfo$Builder");
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof BlockChainInfo) {
                        return mergeFrom((BlockChainInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(BlockChainInfo blockChainInfo) {
                    if (blockChainInfo == BlockChainInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (blockChainInfo.getHeadBlockNum() != 0) {
                        setHeadBlockNum(blockChainInfo.getHeadBlockNum());
                    }
                    if (blockChainInfo.getHeadBlockTimestamp() != 0) {
                        setHeadBlockTimestamp(blockChainInfo.getHeadBlockTimestamp());
                    }
                    if (!blockChainInfo.getHeadBlockHash().isEmpty()) {
                        this.headBlockHash_ = blockChainInfo.headBlockHash_;
                        onChanged();
                    }
                    if (blockChainInfo.getForkCount() != 0) {
                        setForkCount(blockChainInfo.getForkCount());
                    }
                    if (blockChainInfo.getFailForkCount() != 0) {
                        setFailForkCount(blockChainInfo.getFailForkCount());
                    }
                    if (blockChainInfo.hasBlockProcessTime()) {
                        mergeBlockProcessTime(blockChainInfo.getBlockProcessTime());
                    }
                    if (blockChainInfo.hasTps()) {
                        mergeTps(blockChainInfo.getTps());
                    }
                    if (blockChainInfo.getTransactionCacheSize() != 0) {
                        setTransactionCacheSize(blockChainInfo.getTransactionCacheSize());
                    }
                    if (blockChainInfo.hasMissedTransaction()) {
                        mergeMissedTransaction(blockChainInfo.getMissedTransaction());
                    }
                    if (this.witnessesBuilder_ == null) {
                        if (!blockChainInfo.witnesses_.isEmpty()) {
                            if (this.witnesses_.isEmpty()) {
                                this.witnesses_ = blockChainInfo.witnesses_;
                                this.bitField0_ &= -513;
                            } else {
                                ensureWitnessesIsMutable();
                                this.witnesses_.addAll(blockChainInfo.witnesses_);
                            }
                            onChanged();
                        }
                    } else if (!blockChainInfo.witnesses_.isEmpty()) {
                        if (this.witnessesBuilder_.isEmpty()) {
                            this.witnessesBuilder_.dispose();
                            this.witnessesBuilder_ = null;
                            this.witnesses_ = blockChainInfo.witnesses_;
                            this.bitField0_ &= -513;
                            this.witnessesBuilder_ = BlockChainInfo.alwaysUseFieldBuilders ? getWitnessesFieldBuilder() : null;
                        } else {
                            this.witnessesBuilder_.addAllMessages(blockChainInfo.witnesses_);
                        }
                    }
                    if (blockChainInfo.getFailProcessBlockNum() != 0) {
                        setFailProcessBlockNum(blockChainInfo.getFailProcessBlockNum());
                    }
                    if (!blockChainInfo.getFailProcessBlockReason().isEmpty()) {
                        this.failProcessBlockReason_ = blockChainInfo.failProcessBlockReason_;
                        onChanged();
                    }
                    if (this.dupWitnessBuilder_ == null) {
                        if (!blockChainInfo.dupWitness_.isEmpty()) {
                            if (this.dupWitness_.isEmpty()) {
                                this.dupWitness_ = blockChainInfo.dupWitness_;
                                this.bitField0_ &= -4097;
                            } else {
                                ensureDupWitnessIsMutable();
                                this.dupWitness_.addAll(blockChainInfo.dupWitness_);
                            }
                            onChanged();
                        }
                    } else if (!blockChainInfo.dupWitness_.isEmpty()) {
                        if (this.dupWitnessBuilder_.isEmpty()) {
                            this.dupWitnessBuilder_.dispose();
                            this.dupWitnessBuilder_ = null;
                            this.dupWitness_ = blockChainInfo.dupWitness_;
                            this.bitField0_ &= -4097;
                            this.dupWitnessBuilder_ = BlockChainInfo.alwaysUseFieldBuilders ? getDupWitnessFieldBuilder() : null;
                        } else {
                            this.dupWitnessBuilder_.addAllMessages(blockChainInfo.dupWitness_);
                        }
                    }
                    mergeUnknownFields(blockChainInfo.unknownFields);
                    onChanged();
                    return this;
                }

                public Builder mergeMissedTransaction(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.missedTransaction_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.missedTransaction_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                public Builder mergeTps(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.tps_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.tps_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder removeDupWitness(int i) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Builder removeWitnesses(int i) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureWitnessesIsMutable();
                        this.witnesses_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Builder setBlockProcessTime(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.blockProcessTime_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setBlockProcessTime(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.blockProcessTimeBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.blockProcessTime_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                public Builder setDupWitness(int i, DupWitness.Builder builder) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder setDupWitness(int i, DupWitness dupWitness) {
                    RepeatedFieldBuilderV3<DupWitness, DupWitness.Builder, DupWitnessOrBuilder> repeatedFieldBuilderV3 = this.dupWitnessBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        dupWitness.getClass();
                        ensureDupWitnessIsMutable();
                        this.dupWitness_.set(i, dupWitness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, dupWitness);
                    }
                    return this;
                }

                public Builder setFailForkCount(int i) {
                    this.failForkCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder setFailProcessBlockNum(long j) {
                    this.failProcessBlockNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder setFailProcessBlockReason(String str) {
                    str.getClass();
                    this.failProcessBlockReason_ = str;
                    onChanged();
                    return this;
                }

                public Builder setFailProcessBlockReasonBytes(ByteString byteString) {
                    byteString.getClass();
                    BlockChainInfo.checkByteStringIsUtf8(byteString);
                    this.failProcessBlockReason_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                public Builder setForkCount(int i) {
                    this.forkCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockHash(String str) {
                    str.getClass();
                    this.headBlockHash_ = str;
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockHashBytes(ByteString byteString) {
                    byteString.getClass();
                    BlockChainInfo.checkByteStringIsUtf8(byteString);
                    this.headBlockHash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockNum(long j) {
                    this.headBlockNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockTimestamp(long j) {
                    this.headBlockTimestamp_ = j;
                    onChanged();
                    return this;
                }

                public Builder setMissedTransaction(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.missedTransaction_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setMissedTransaction(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.missedTransactionBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.missedTransaction_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                public Builder setTps(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.tps_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setTps(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tpsBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.tps_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                public Builder setTransactionCacheSize(int i) {
                    this.transactionCacheSize_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                public Builder setWitnesses(int i, Witness.Builder builder) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureWitnessesIsMutable();
                        this.witnesses_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder setWitnesses(int i, Witness witness) {
                    RepeatedFieldBuilderV3<Witness, Witness.Builder, WitnessOrBuilder> repeatedFieldBuilderV3 = this.witnessesBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        witness.getClass();
                        ensureWitnessesIsMutable();
                        this.witnesses_.set(i, witness);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, witness);
                    }
                    return this;
                }
            }

            public static final class DupWitness extends GeneratedMessageV3 implements DupWitnessOrBuilder {
                public static final int ADDRESS_FIELD_NUMBER = 1;
                public static final int BLOCKNUM_FIELD_NUMBER = 2;
                public static final int COUNT_FIELD_NUMBER = 3;
                private static final DupWitness DEFAULT_INSTANCE = new DupWitness();
                private static final Parser<DupWitness> PARSER = new AbstractParser<DupWitness>() {
                    @Override
                    public DupWitness parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new DupWitness(codedInputStream, extensionRegistryLite);
                    }
                };
                private static final long serialVersionUID = 0;
                private volatile Object address_;
                private long blockNum_;
                private int count_;
                private byte memoizedIsInitialized;

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DupWitnessOrBuilder {
                    private Object address_;
                    private long blockNum_;
                    private int count_;

                    private Builder() {
                        this.address_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.address_ = "";
                        maybeForceBuilderInitialization();
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_descriptor;
                    }

                    private void maybeForceBuilderInitialization() {
                        boolean unused = DupWitness.alwaysUseFieldBuilders;
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public DupWitness build() {
                        DupWitness buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public DupWitness buildPartial() {
                        DupWitness dupWitness = new DupWitness(this);
                        dupWitness.address_ = this.address_;
                        dupWitness.blockNum_ = this.blockNum_;
                        dupWitness.count_ = this.count_;
                        onBuilt();
                        return dupWitness;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.address_ = "";
                        this.blockNum_ = 0L;
                        this.count_ = 0;
                        return this;
                    }

                    public Builder clearAddress() {
                        this.address_ = DupWitness.getDefaultInstance().getAddress();
                        onChanged();
                        return this;
                    }

                    public Builder clearBlockNum() {
                        this.blockNum_ = 0L;
                        onChanged();
                        return this;
                    }

                    public Builder clearCount() {
                        this.count_ = 0;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public String getAddress() {
                        Object obj = this.address_;
                        if (obj instanceof String) {
                            return (String) obj;
                        }
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.address_ = stringUtf8;
                        return stringUtf8;
                    }

                    @Override
                    public ByteString getAddressBytes() {
                        Object obj = this.address_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.address_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    @Override
                    public long getBlockNum() {
                        return this.blockNum_;
                    }

                    @Override
                    public int getCount() {
                        return this.count_;
                    }

                    @Override
                    public DupWitness getDefaultInstanceForType() {
                        return DupWitness.getDefaultInstance();
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_descriptor;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_fieldAccessorTable.ensureFieldAccessorsInitialized(DupWitness.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    @Override
                    public org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.DupWitness.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.DupWitness.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$BlockChainInfo$DupWitness$Builder");
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof DupWitness) {
                            return mergeFrom((DupWitness) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(DupWitness dupWitness) {
                        if (dupWitness == DupWitness.getDefaultInstance()) {
                            return this;
                        }
                        if (!dupWitness.getAddress().isEmpty()) {
                            this.address_ = dupWitness.address_;
                            onChanged();
                        }
                        if (dupWitness.getBlockNum() != 0) {
                            setBlockNum(dupWitness.getBlockNum());
                        }
                        if (dupWitness.getCount() != 0) {
                            setCount(dupWitness.getCount());
                        }
                        mergeUnknownFields(dupWitness.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }

                    public Builder setAddress(String str) {
                        str.getClass();
                        this.address_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder setAddressBytes(ByteString byteString) {
                        byteString.getClass();
                        DupWitness.checkByteStringIsUtf8(byteString);
                        this.address_ = byteString;
                        onChanged();
                        return this;
                    }

                    public Builder setBlockNum(long j) {
                        this.blockNum_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder setCount(int i) {
                        this.count_ = i;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }
                }

                private DupWitness() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.address_ = "";
                    this.blockNum_ = 0L;
                    this.count_ = 0;
                }

                private DupWitness(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    while (!z) {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.address_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag == 16) {
                                        this.blockNum_ = codedInputStream.readInt64();
                                    } else if (readTag == 24) {
                                        this.count_ = codedInputStream.readInt32();
                                    } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            } catch (IOException e2) {
                                throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                            }
                        } finally {
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                private DupWitness(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                public static DupWitness getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_descriptor;
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(DupWitness dupWitness) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(dupWitness);
                }

                public static DupWitness parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static DupWitness parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DupWitness parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static DupWitness parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static DupWitness parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static DupWitness parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                public static DupWitness parseFrom(InputStream inputStream) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static DupWitness parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DupWitness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DupWitness parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static DupWitness parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static DupWitness parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static DupWitness parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static Parser<DupWitness> parser() {
                    return PARSER;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (obj instanceof DupWitness) {
                        DupWitness dupWitness = (DupWitness) obj;
                        return getAddress().equals(dupWitness.getAddress()) && getBlockNum() == dupWitness.getBlockNum() && getCount() == dupWitness.getCount() && this.unknownFields.equals(dupWitness.unknownFields);
                    }
                    return super.equals(obj);
                }

                @Override
                public String getAddress() {
                    Object obj = this.address_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.address_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getAddressBytes() {
                    Object obj = this.address_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.address_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public long getBlockNum() {
                    return this.blockNum_;
                }

                @Override
                public int getCount() {
                    return this.count_;
                }

                @Override
                public DupWitness getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public Parser<DupWitness> getParserForType() {
                    return PARSER;
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeStringSize = !getAddressBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.address_) : 0;
                    long j = this.blockNum_;
                    if (j != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(2, j);
                    }
                    int i2 = this.count_;
                    if (i2 != 0) {
                        computeStringSize += CodedOutputStream.computeInt32Size(3, i2);
                    }
                    int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getBlockNum())) * 37) + 3) * 53) + getCount()) * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode;
                    return hashCode;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_fieldAccessorTable.ensureFieldAccessorsInitialized(DupWitness.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (!getAddressBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 1, this.address_);
                    }
                    long j = this.blockNum_;
                    if (j != 0) {
                        codedOutputStream.writeInt64(2, j);
                    }
                    int i = this.count_;
                    if (i != 0) {
                        codedOutputStream.writeInt32(3, i);
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }
            }

            public interface DupWitnessOrBuilder extends MessageOrBuilder {
                String getAddress();

                ByteString getAddressBytes();

                long getBlockNum();

                int getCount();
            }

            public static final class Witness extends GeneratedMessageV3 implements WitnessOrBuilder {
                public static final int ADDRESS_FIELD_NUMBER = 1;
                private static final Witness DEFAULT_INSTANCE = new Witness();
                private static final Parser<Witness> PARSER = new AbstractParser<Witness>() {
                    @Override
                    public Witness parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new Witness(codedInputStream, extensionRegistryLite);
                    }
                };
                public static final int VERSION_FIELD_NUMBER = 2;
                private static final long serialVersionUID = 0;
                private volatile Object address_;
                private byte memoizedIsInitialized;
                private int version_;

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements WitnessOrBuilder {
                    private Object address_;
                    private int version_;

                    private Builder() {
                        this.address_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.address_ = "";
                        maybeForceBuilderInitialization();
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_descriptor;
                    }

                    private void maybeForceBuilderInitialization() {
                        boolean unused = Witness.alwaysUseFieldBuilders;
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public Witness build() {
                        Witness buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public Witness buildPartial() {
                        Witness witness = new Witness(this);
                        witness.address_ = this.address_;
                        witness.version_ = this.version_;
                        onBuilt();
                        return witness;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.address_ = "";
                        this.version_ = 0;
                        return this;
                    }

                    public Builder clearAddress() {
                        this.address_ = Witness.getDefaultInstance().getAddress();
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    public Builder clearVersion() {
                        this.version_ = 0;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public String getAddress() {
                        Object obj = this.address_;
                        if (obj instanceof String) {
                            return (String) obj;
                        }
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.address_ = stringUtf8;
                        return stringUtf8;
                    }

                    @Override
                    public ByteString getAddressBytes() {
                        Object obj = this.address_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.address_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    @Override
                    public Witness getDefaultInstanceForType() {
                        return Witness.getDefaultInstance();
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_descriptor;
                    }

                    @Override
                    public int getVersion() {
                        return this.version_;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_fieldAccessorTable.ensureFieldAccessorsInitialized(Witness.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    @Override
                    public org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.Witness.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.Witness.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$BlockChainInfo$Witness$Builder");
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof Witness) {
                            return mergeFrom((Witness) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(Witness witness) {
                        if (witness == Witness.getDefaultInstance()) {
                            return this;
                        }
                        if (!witness.getAddress().isEmpty()) {
                            this.address_ = witness.address_;
                            onChanged();
                        }
                        if (witness.getVersion() != 0) {
                            setVersion(witness.getVersion());
                        }
                        mergeUnknownFields(witness.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }

                    public Builder setAddress(String str) {
                        str.getClass();
                        this.address_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder setAddressBytes(ByteString byteString) {
                        byteString.getClass();
                        Witness.checkByteStringIsUtf8(byteString);
                        this.address_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }

                    public Builder setVersion(int i) {
                        this.version_ = i;
                        onChanged();
                        return this;
                    }
                }

                private Witness() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.address_ = "";
                    this.version_ = 0;
                }

                private Witness(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    while (!z) {
                        try {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag == 10) {
                                            this.address_ = codedInputStream.readStringRequireUtf8();
                                        } else if (readTag == 16) {
                                            this.version_ = codedInputStream.readInt32();
                                        } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    }
                                    z = true;
                                } catch (IOException e) {
                                    throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                                }
                            } catch (InvalidProtocolBufferException e2) {
                                throw e2.setUnfinishedMessage(this);
                            }
                        } finally {
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                private Witness(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                public static Witness getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_descriptor;
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(Witness witness) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(witness);
                }

                public static Witness parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (Witness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static Witness parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (Witness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static Witness parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static Witness parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static Witness parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static Witness parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                public static Witness parseFrom(InputStream inputStream) throws IOException {
                    return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static Witness parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static Witness parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static Witness parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static Witness parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static Witness parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static Parser<Witness> parser() {
                    return PARSER;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (obj instanceof Witness) {
                        Witness witness = (Witness) obj;
                        return getAddress().equals(witness.getAddress()) && getVersion() == witness.getVersion() && this.unknownFields.equals(witness.unknownFields);
                    }
                    return super.equals(obj);
                }

                @Override
                public String getAddress() {
                    Object obj = this.address_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.address_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getAddressBytes() {
                    Object obj = this.address_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.address_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public Witness getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public Parser<Witness> getParserForType() {
                    return PARSER;
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeStringSize = !getAddressBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.address_) : 0;
                    int i2 = this.version_;
                    if (i2 != 0) {
                        computeStringSize += CodedOutputStream.computeInt32Size(2, i2);
                    }
                    int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                @Override
                public int getVersion() {
                    return this.version_;
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode()) * 37) + 2) * 53) + getVersion()) * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode;
                    return hashCode;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_fieldAccessorTable.ensureFieldAccessorsInitialized(Witness.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (!getAddressBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 1, this.address_);
                    }
                    int i = this.version_;
                    if (i != 0) {
                        codedOutputStream.writeInt32(2, i);
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }
            }

            public interface WitnessOrBuilder extends MessageOrBuilder {
                String getAddress();

                ByteString getAddressBytes();

                int getVersion();
            }

            private BlockChainInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.headBlockNum_ = 0L;
                this.headBlockTimestamp_ = 0L;
                this.headBlockHash_ = "";
                this.forkCount_ = 0;
                this.failForkCount_ = 0;
                this.transactionCacheSize_ = 0;
                this.witnesses_ = Collections.emptyList();
                this.failProcessBlockNum_ = 0L;
                this.failProcessBlockReason_ = "";
                this.dupWitness_ = Collections.emptyList();
            }

            private BlockChainInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                RateInfo.Builder builder;
                List list;
                MessageLite messageLite;
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    ?? r3 = 4096;
                    if (z) {
                        return;
                    }
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    z = true;
                                    break;
                                case 8:
                                    this.headBlockNum_ = codedInputStream.readInt64();
                                    break;
                                case 16:
                                    this.headBlockTimestamp_ = codedInputStream.readInt64();
                                    break;
                                case 26:
                                    this.headBlockHash_ = codedInputStream.readStringRequireUtf8();
                                    break;
                                case 32:
                                    this.forkCount_ = codedInputStream.readInt32();
                                    break;
                                case 40:
                                    this.failForkCount_ = codedInputStream.readInt32();
                                    break;
                                case 50:
                                    RateInfo rateInfo = this.blockProcessTime_;
                                    builder = rateInfo != null ? rateInfo.toBuilder() : null;
                                    RateInfo rateInfo2 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.blockProcessTime_ = rateInfo2;
                                    if (builder == null) {
                                        break;
                                    } else {
                                        builder.mergeFrom(rateInfo2);
                                        this.blockProcessTime_ = builder.buildPartial();
                                        break;
                                    }
                                case 58:
                                    RateInfo rateInfo3 = this.tps_;
                                    builder = rateInfo3 != null ? rateInfo3.toBuilder() : null;
                                    RateInfo rateInfo4 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.tps_ = rateInfo4;
                                    if (builder == null) {
                                        break;
                                    } else {
                                        builder.mergeFrom(rateInfo4);
                                        this.tps_ = builder.buildPartial();
                                        break;
                                    }
                                case 64:
                                    this.transactionCacheSize_ = codedInputStream.readInt32();
                                    break;
                                case 74:
                                    RateInfo rateInfo5 = this.missedTransaction_;
                                    builder = rateInfo5 != null ? rateInfo5.toBuilder() : null;
                                    RateInfo rateInfo6 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.missedTransaction_ = rateInfo6;
                                    if (builder == null) {
                                        break;
                                    } else {
                                        builder.mergeFrom(rateInfo6);
                                        this.missedTransaction_ = builder.buildPartial();
                                        break;
                                    }
                                case 82:
                                    if (!(z2 & true)) {
                                        this.witnesses_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    list = this.witnesses_;
                                    messageLite = (Witness) codedInputStream.readMessage(Witness.parser(), extensionRegistryLite);
                                    list.add(messageLite);
                                    break;
                                case 88:
                                    this.failProcessBlockNum_ = codedInputStream.readInt64();
                                    break;
                                case 98:
                                    this.failProcessBlockReason_ = codedInputStream.readStringRequireUtf8();
                                    break;
                                case 106:
                                    if (!(z2 & true)) {
                                        this.dupWitness_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    list = this.dupWitness_;
                                    messageLite = (DupWitness) codedInputStream.readMessage(DupWitness.parser(), extensionRegistryLite);
                                    list.add(messageLite);
                                    break;
                                default:
                                    r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                    if (r3 != 0) {
                                        break;
                                    } else {
                                        z = true;
                                        break;
                                    }
                            }
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        if (z2 & true) {
                            this.witnesses_ = Collections.unmodifiableList(this.witnesses_);
                        }
                        if ((z2 & true) == r3) {
                            this.dupWitness_ = Collections.unmodifiableList(this.dupWitness_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            private BlockChainInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            public static BlockChainInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_descriptor;
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(BlockChainInfo blockChainInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockChainInfo);
            }

            public static BlockChainInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static BlockChainInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockChainInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static BlockChainInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static BlockChainInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static BlockChainInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            public static BlockChainInfo parseFrom(InputStream inputStream) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static BlockChainInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockChainInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockChainInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static BlockChainInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static BlockChainInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static BlockChainInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Parser<BlockChainInfo> parser() {
                return PARSER;
            }

            @Override
            public boolean equals(java.lang.Object r8) {
                


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.BlockChainInfo.equals(java.lang.Object):boolean");
            }

            @Override
            public RateInfo getBlockProcessTime() {
                RateInfo rateInfo = this.blockProcessTime_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getBlockProcessTimeOrBuilder() {
                return getBlockProcessTime();
            }

            @Override
            public BlockChainInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public DupWitness getDupWitness(int i) {
                return this.dupWitness_.get(i);
            }

            @Override
            public int getDupWitnessCount() {
                return this.dupWitness_.size();
            }

            @Override
            public List<DupWitness> getDupWitnessList() {
                return this.dupWitness_;
            }

            @Override
            public DupWitnessOrBuilder getDupWitnessOrBuilder(int i) {
                return this.dupWitness_.get(i);
            }

            @Override
            public List<? extends DupWitnessOrBuilder> getDupWitnessOrBuilderList() {
                return this.dupWitness_;
            }

            @Override
            public int getFailForkCount() {
                return this.failForkCount_;
            }

            @Override
            public long getFailProcessBlockNum() {
                return this.failProcessBlockNum_;
            }

            @Override
            public String getFailProcessBlockReason() {
                Object obj = this.failProcessBlockReason_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.failProcessBlockReason_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getFailProcessBlockReasonBytes() {
                Object obj = this.failProcessBlockReason_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.failProcessBlockReason_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public int getForkCount() {
                return this.forkCount_;
            }

            @Override
            public String getHeadBlockHash() {
                Object obj = this.headBlockHash_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.headBlockHash_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getHeadBlockHashBytes() {
                Object obj = this.headBlockHash_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.headBlockHash_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public long getHeadBlockNum() {
                return this.headBlockNum_;
            }

            @Override
            public long getHeadBlockTimestamp() {
                return this.headBlockTimestamp_;
            }

            @Override
            public RateInfo getMissedTransaction() {
                RateInfo rateInfo = this.missedTransaction_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getMissedTransactionOrBuilder() {
                return getMissedTransaction();
            }

            @Override
            public Parser<BlockChainInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.headBlockNum_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                long j2 = this.headBlockTimestamp_;
                if (j2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(2, j2);
                }
                if (!getHeadBlockHashBytes().isEmpty()) {
                    computeInt64Size += GeneratedMessageV3.computeStringSize(3, this.headBlockHash_);
                }
                int i2 = this.forkCount_;
                if (i2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt32Size(4, i2);
                }
                int i3 = this.failForkCount_;
                if (i3 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt32Size(5, i3);
                }
                if (this.blockProcessTime_ != null) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(6, getBlockProcessTime());
                }
                if (this.tps_ != null) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(7, getTps());
                }
                int i4 = this.transactionCacheSize_;
                if (i4 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt32Size(8, i4);
                }
                if (this.missedTransaction_ != null) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(9, getMissedTransaction());
                }
                for (int i5 = 0; i5 < this.witnesses_.size(); i5++) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(10, this.witnesses_.get(i5));
                }
                long j3 = this.failProcessBlockNum_;
                if (j3 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(11, j3);
                }
                if (!getFailProcessBlockReasonBytes().isEmpty()) {
                    computeInt64Size += GeneratedMessageV3.computeStringSize(12, this.failProcessBlockReason_);
                }
                for (int i6 = 0; i6 < this.dupWitness_.size(); i6++) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(13, this.dupWitness_.get(i6));
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public RateInfo getTps() {
                RateInfo rateInfo = this.tps_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getTpsOrBuilder() {
                return getTps();
            }

            @Override
            public int getTransactionCacheSize() {
                return this.transactionCacheSize_;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            @Override
            public Witness getWitnesses(int i) {
                return this.witnesses_.get(i);
            }

            @Override
            public int getWitnessesCount() {
                return this.witnesses_.size();
            }

            @Override
            public List<Witness> getWitnessesList() {
                return this.witnesses_;
            }

            @Override
            public WitnessOrBuilder getWitnessesOrBuilder(int i) {
                return this.witnesses_.get(i);
            }

            @Override
            public List<? extends WitnessOrBuilder> getWitnessesOrBuilderList() {
                return this.witnesses_;
            }

            @Override
            public boolean hasBlockProcessTime() {
                return this.blockProcessTime_ != null;
            }

            @Override
            public boolean hasMissedTransaction() {
                return this.missedTransaction_ != null;
            }

            @Override
            public boolean hasTps() {
                return this.tps_ != null;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getHeadBlockNum())) * 37) + 2) * 53) + Internal.hashLong(getHeadBlockTimestamp())) * 37) + 3) * 53) + getHeadBlockHash().hashCode()) * 37) + 4) * 53) + getForkCount()) * 37) + 5) * 53) + getFailForkCount();
                if (hasBlockProcessTime()) {
                    hashCode = (((hashCode * 37) + 6) * 53) + getBlockProcessTime().hashCode();
                }
                if (hasTps()) {
                    hashCode = (((hashCode * 37) + 7) * 53) + getTps().hashCode();
                }
                int transactionCacheSize = (((hashCode * 37) + 8) * 53) + getTransactionCacheSize();
                if (hasMissedTransaction()) {
                    transactionCacheSize = (((transactionCacheSize * 37) + 9) * 53) + getMissedTransaction().hashCode();
                }
                if (getWitnessesCount() > 0) {
                    transactionCacheSize = (((transactionCacheSize * 37) + 10) * 53) + getWitnessesList().hashCode();
                }
                int hashLong = (((((((transactionCacheSize * 37) + 11) * 53) + Internal.hashLong(getFailProcessBlockNum())) * 37) + 12) * 53) + getFailProcessBlockReason().hashCode();
                if (getDupWitnessCount() > 0) {
                    hashLong = (((hashLong * 37) + 13) * 53) + getDupWitnessList().hashCode();
                }
                int hashCode2 = (hashLong * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MetricsInfo_BlockChainInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockChainInfo.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.headBlockNum_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                long j2 = this.headBlockTimestamp_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(2, j2);
                }
                if (!getHeadBlockHashBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 3, this.headBlockHash_);
                }
                int i = this.forkCount_;
                if (i != 0) {
                    codedOutputStream.writeInt32(4, i);
                }
                int i2 = this.failForkCount_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(5, i2);
                }
                if (this.blockProcessTime_ != null) {
                    codedOutputStream.writeMessage(6, getBlockProcessTime());
                }
                if (this.tps_ != null) {
                    codedOutputStream.writeMessage(7, getTps());
                }
                int i3 = this.transactionCacheSize_;
                if (i3 != 0) {
                    codedOutputStream.writeInt32(8, i3);
                }
                if (this.missedTransaction_ != null) {
                    codedOutputStream.writeMessage(9, getMissedTransaction());
                }
                for (int i4 = 0; i4 < this.witnesses_.size(); i4++) {
                    codedOutputStream.writeMessage(10, this.witnesses_.get(i4));
                }
                long j3 = this.failProcessBlockNum_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(11, j3);
                }
                if (!getFailProcessBlockReasonBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 12, this.failProcessBlockReason_);
                }
                for (int i5 = 0; i5 < this.dupWitness_.size(); i5++) {
                    codedOutputStream.writeMessage(13, this.dupWitness_.get(i5));
                }
                this.unknownFields.writeTo(codedOutputStream);
            }
        }

        public interface BlockChainInfoOrBuilder extends MessageOrBuilder {
            RateInfo getBlockProcessTime();

            RateInfoOrBuilder getBlockProcessTimeOrBuilder();

            BlockChainInfo.DupWitness getDupWitness(int i);

            int getDupWitnessCount();

            List<BlockChainInfo.DupWitness> getDupWitnessList();

            BlockChainInfo.DupWitnessOrBuilder getDupWitnessOrBuilder(int i);

            List<? extends BlockChainInfo.DupWitnessOrBuilder> getDupWitnessOrBuilderList();

            int getFailForkCount();

            long getFailProcessBlockNum();

            String getFailProcessBlockReason();

            ByteString getFailProcessBlockReasonBytes();

            int getForkCount();

            String getHeadBlockHash();

            ByteString getHeadBlockHashBytes();

            long getHeadBlockNum();

            long getHeadBlockTimestamp();

            RateInfo getMissedTransaction();

            RateInfoOrBuilder getMissedTransactionOrBuilder();

            RateInfo getTps();

            RateInfoOrBuilder getTpsOrBuilder();

            int getTransactionCacheSize();

            BlockChainInfo.Witness getWitnesses(int i);

            int getWitnessesCount();

            List<BlockChainInfo.Witness> getWitnessesList();

            BlockChainInfo.WitnessOrBuilder getWitnessesOrBuilder(int i);

            List<? extends BlockChainInfo.WitnessOrBuilder> getWitnessesOrBuilderList();

            boolean hasBlockProcessTime();

            boolean hasMissedTransaction();

            boolean hasTps();
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MetricsInfoOrBuilder {
            private SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> blockchainBuilder_;
            private BlockChainInfo blockchain_;
            private long interval_;
            private SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> netBuilder_;
            private NetInfo net_;
            private SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> nodeBuilder_;
            private NodeInfo node_;

            private Builder() {
                this.node_ = null;
                this.blockchain_ = null;
                this.net_ = null;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.node_ = null;
                this.blockchain_ = null;
                this.net_ = null;
                maybeForceBuilderInitialization();
            }

            private SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> getBlockchainFieldBuilder() {
                if (this.blockchainBuilder_ == null) {
                    this.blockchainBuilder_ = new SingleFieldBuilderV3<>(getBlockchain(), getParentForChildren(), isClean());
                    this.blockchain_ = null;
                }
                return this.blockchainBuilder_;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MetricsInfo_descriptor;
            }

            private SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> getNetFieldBuilder() {
                if (this.netBuilder_ == null) {
                    this.netBuilder_ = new SingleFieldBuilderV3<>(getNet(), getParentForChildren(), isClean());
                    this.net_ = null;
                }
                return this.netBuilder_;
            }

            private SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> getNodeFieldBuilder() {
                if (this.nodeBuilder_ == null) {
                    this.nodeBuilder_ = new SingleFieldBuilderV3<>(getNode(), getParentForChildren(), isClean());
                    this.node_ = null;
                }
                return this.nodeBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MetricsInfo.alwaysUseFieldBuilders;
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public MetricsInfo build() {
                MetricsInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MetricsInfo buildPartial() {
                MetricsInfo metricsInfo = new MetricsInfo(this);
                metricsInfo.interval_ = this.interval_;
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                metricsInfo.node_ = singleFieldBuilderV3 == null ? this.node_ : singleFieldBuilderV3.build();
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV32 = this.blockchainBuilder_;
                metricsInfo.blockchain_ = singleFieldBuilderV32 == null ? this.blockchain_ : singleFieldBuilderV32.build();
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV33 = this.netBuilder_;
                metricsInfo.net_ = singleFieldBuilderV33 == null ? this.net_ : singleFieldBuilderV33.build();
                onBuilt();
                return metricsInfo;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.interval_ = 0L;
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                this.node_ = null;
                if (singleFieldBuilderV3 != null) {
                    this.nodeBuilder_ = null;
                }
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV32 = this.blockchainBuilder_;
                this.blockchain_ = null;
                if (singleFieldBuilderV32 != null) {
                    this.blockchainBuilder_ = null;
                }
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV33 = this.netBuilder_;
                this.net_ = null;
                if (singleFieldBuilderV33 != null) {
                    this.netBuilder_ = null;
                }
                return this;
            }

            public Builder clearBlockchain() {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                this.blockchain_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.blockchainBuilder_ = null;
                }
                return this;
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            public Builder clearInterval() {
                this.interval_ = 0L;
                onChanged();
                return this;
            }

            public Builder clearNet() {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                this.net_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.netBuilder_ = null;
                }
                return this;
            }

            public Builder clearNode() {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                this.node_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.nodeBuilder_ = null;
                }
                return this;
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public BlockChainInfo getBlockchain() {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockChainInfo blockChainInfo = this.blockchain_;
                    return blockChainInfo == null ? BlockChainInfo.getDefaultInstance() : blockChainInfo;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public BlockChainInfo.Builder getBlockchainBuilder() {
                onChanged();
                return getBlockchainFieldBuilder().getBuilder();
            }

            @Override
            public BlockChainInfoOrBuilder getBlockchainOrBuilder() {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                BlockChainInfo blockChainInfo = this.blockchain_;
                return blockChainInfo == null ? BlockChainInfo.getDefaultInstance() : blockChainInfo;
            }

            @Override
            public MetricsInfo getDefaultInstanceForType() {
                return MetricsInfo.getDefaultInstance();
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MetricsInfo_descriptor;
            }

            @Override
            public long getInterval() {
                return this.interval_;
            }

            @Override
            public NetInfo getNet() {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                if (singleFieldBuilderV3 == null) {
                    NetInfo netInfo = this.net_;
                    return netInfo == null ? NetInfo.getDefaultInstance() : netInfo;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public NetInfo.Builder getNetBuilder() {
                onChanged();
                return getNetFieldBuilder().getBuilder();
            }

            @Override
            public NetInfoOrBuilder getNetOrBuilder() {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                NetInfo netInfo = this.net_;
                return netInfo == null ? NetInfo.getDefaultInstance() : netInfo;
            }

            @Override
            public NodeInfo getNode() {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                if (singleFieldBuilderV3 == null) {
                    NodeInfo nodeInfo = this.node_;
                    return nodeInfo == null ? NodeInfo.getDefaultInstance() : nodeInfo;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public NodeInfo.Builder getNodeBuilder() {
                onChanged();
                return getNodeFieldBuilder().getBuilder();
            }

            @Override
            public NodeInfoOrBuilder getNodeOrBuilder() {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                NodeInfo nodeInfo = this.node_;
                return nodeInfo == null ? NodeInfo.getDefaultInstance() : nodeInfo;
            }

            @Override
            public boolean hasBlockchain() {
                return (this.blockchainBuilder_ == null && this.blockchain_ == null) ? false : true;
            }

            @Override
            public boolean hasNet() {
                return (this.netBuilder_ == null && this.net_ == null) ? false : true;
            }

            @Override
            public boolean hasNode() {
                return (this.nodeBuilder_ == null && this.node_ == null) ? false : true;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MetricsInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MetricsInfo.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeBlockchain(BlockChainInfo blockChainInfo) {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockChainInfo blockChainInfo2 = this.blockchain_;
                    if (blockChainInfo2 != null) {
                        blockChainInfo = BlockChainInfo.newBuilder(blockChainInfo2).mergeFrom(blockChainInfo).buildPartial();
                    }
                    this.blockchain_ = blockChainInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(blockChainInfo);
                }
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MetricsInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$Builder");
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MetricsInfo) {
                    return mergeFrom((MetricsInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MetricsInfo metricsInfo) {
                if (metricsInfo == MetricsInfo.getDefaultInstance()) {
                    return this;
                }
                if (metricsInfo.getInterval() != 0) {
                    setInterval(metricsInfo.getInterval());
                }
                if (metricsInfo.hasNode()) {
                    mergeNode(metricsInfo.getNode());
                }
                if (metricsInfo.hasBlockchain()) {
                    mergeBlockchain(metricsInfo.getBlockchain());
                }
                if (metricsInfo.hasNet()) {
                    mergeNet(metricsInfo.getNet());
                }
                mergeUnknownFields(metricsInfo.unknownFields);
                onChanged();
                return this;
            }

            public Builder mergeNet(NetInfo netInfo) {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                if (singleFieldBuilderV3 == null) {
                    NetInfo netInfo2 = this.net_;
                    if (netInfo2 != null) {
                        netInfo = NetInfo.newBuilder(netInfo2).mergeFrom(netInfo).buildPartial();
                    }
                    this.net_ = netInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(netInfo);
                }
                return this;
            }

            public Builder mergeNode(NodeInfo nodeInfo) {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                if (singleFieldBuilderV3 == null) {
                    NodeInfo nodeInfo2 = this.node_;
                    if (nodeInfo2 != null) {
                        nodeInfo = NodeInfo.newBuilder(nodeInfo2).mergeFrom(nodeInfo).buildPartial();
                    }
                    this.node_ = nodeInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(nodeInfo);
                }
                return this;
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }

            public Builder setBlockchain(BlockChainInfo.Builder builder) {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                BlockChainInfo build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.blockchain_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setBlockchain(BlockChainInfo blockChainInfo) {
                SingleFieldBuilderV3<BlockChainInfo, BlockChainInfo.Builder, BlockChainInfoOrBuilder> singleFieldBuilderV3 = this.blockchainBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockChainInfo.getClass();
                    this.blockchain_ = blockChainInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(blockChainInfo);
                }
                return this;
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            public Builder setInterval(long j) {
                this.interval_ = j;
                onChanged();
                return this;
            }

            public Builder setNet(NetInfo.Builder builder) {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                NetInfo build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.net_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setNet(NetInfo netInfo) {
                SingleFieldBuilderV3<NetInfo, NetInfo.Builder, NetInfoOrBuilder> singleFieldBuilderV3 = this.netBuilder_;
                if (singleFieldBuilderV3 == null) {
                    netInfo.getClass();
                    this.net_ = netInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(netInfo);
                }
                return this;
            }

            public Builder setNode(NodeInfo.Builder builder) {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                NodeInfo build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.node_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setNode(NodeInfo nodeInfo) {
                SingleFieldBuilderV3<NodeInfo, NodeInfo.Builder, NodeInfoOrBuilder> singleFieldBuilderV3 = this.nodeBuilder_;
                if (singleFieldBuilderV3 == null) {
                    nodeInfo.getClass();
                    this.node_ = nodeInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(nodeInfo);
                }
                return this;
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }
        }

        public static final class NetInfo extends GeneratedMessageV3 implements NetInfoOrBuilder {
            public static final int API_FIELD_NUMBER = 2;
            public static final int CONNECTIONCOUNT_FIELD_NUMBER = 3;
            public static final int DISCONNECTIONCOUNT_FIELD_NUMBER = 7;
            public static final int DISCONNECTIONDETAIL_FIELD_NUMBER = 8;
            public static final int ERRORPROTOCOUNT_FIELD_NUMBER = 1;
            public static final int LATENCY_FIELD_NUMBER = 11;
            public static final int TCPINTRAFFIC_FIELD_NUMBER = 5;
            public static final int TCPOUTTRAFFIC_FIELD_NUMBER = 6;
            public static final int UDPINTRAFFIC_FIELD_NUMBER = 9;
            public static final int UDPOUTTRAFFIC_FIELD_NUMBER = 10;
            public static final int VALIDCONNECTIONCOUNT_FIELD_NUMBER = 4;
            private static final long serialVersionUID = 0;
            private ApiInfo api_;
            private int bitField0_;
            private int connectionCount_;
            private int disconnectionCount_;
            private List<DisconnectionDetailInfo> disconnectionDetail_;
            private int errorProtoCount_;
            private LatencyInfo latency_;
            private byte memoizedIsInitialized;
            private RateInfo tcpInTraffic_;
            private RateInfo tcpOutTraffic_;
            private RateInfo udpInTraffic_;
            private RateInfo udpOutTraffic_;
            private int validConnectionCount_;
            private static final NetInfo DEFAULT_INSTANCE = new NetInfo();
            private static final Parser<NetInfo> PARSER = new AbstractParser<NetInfo>() {
                @Override
                public NetInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new NetInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static final class ApiInfo extends GeneratedMessageV3 implements ApiInfoOrBuilder {
                public static final int DETAIL_FIELD_NUMBER = 4;
                public static final int FAILQPS_FIELD_NUMBER = 2;
                public static final int OUTTRAFFIC_FIELD_NUMBER = 3;
                public static final int QPS_FIELD_NUMBER = 1;
                private static final long serialVersionUID = 0;
                private int bitField0_;
                private List<ApiDetailInfo> detail_;
                private RateInfo failQps_;
                private byte memoizedIsInitialized;
                private RateInfo outTraffic_;
                private RateInfo qps_;
                private static final ApiInfo DEFAULT_INSTANCE = new ApiInfo();
                private static final Parser<ApiInfo> PARSER = new AbstractParser<ApiInfo>() {
                    @Override
                    public ApiInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new ApiInfo(codedInputStream, extensionRegistryLite);
                    }
                };

                public static final class ApiDetailInfo extends GeneratedMessageV3 implements ApiDetailInfoOrBuilder {
                    public static final int FAILQPS_FIELD_NUMBER = 3;
                    public static final int NAME_FIELD_NUMBER = 1;
                    public static final int OUTTRAFFIC_FIELD_NUMBER = 4;
                    public static final int QPS_FIELD_NUMBER = 2;
                    private static final long serialVersionUID = 0;
                    private RateInfo failQps_;
                    private byte memoizedIsInitialized;
                    private volatile Object name_;
                    private RateInfo outTraffic_;
                    private RateInfo qps_;
                    private static final ApiDetailInfo DEFAULT_INSTANCE = new ApiDetailInfo();
                    private static final Parser<ApiDetailInfo> PARSER = new AbstractParser<ApiDetailInfo>() {
                        @Override
                        public ApiDetailInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                            return new ApiDetailInfo(codedInputStream, extensionRegistryLite);
                        }
                    };

                    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ApiDetailInfoOrBuilder {
                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> failQpsBuilder_;
                        private RateInfo failQps_;
                        private Object name_;
                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> outTrafficBuilder_;
                        private RateInfo outTraffic_;
                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> qpsBuilder_;
                        private RateInfo qps_;

                        private Builder() {
                            this.name_ = "";
                            this.qps_ = null;
                            this.failQps_ = null;
                            this.outTraffic_ = null;
                            maybeForceBuilderInitialization();
                        }

                        private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                            super(builderParent);
                            this.name_ = "";
                            this.qps_ = null;
                            this.failQps_ = null;
                            this.outTraffic_ = null;
                            maybeForceBuilderInitialization();
                        }

                        public static final Descriptors.Descriptor getDescriptor() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_descriptor;
                        }

                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getFailQpsFieldBuilder() {
                            if (this.failQpsBuilder_ == null) {
                                this.failQpsBuilder_ = new SingleFieldBuilderV3<>(getFailQps(), getParentForChildren(), isClean());
                                this.failQps_ = null;
                            }
                            return this.failQpsBuilder_;
                        }

                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getOutTrafficFieldBuilder() {
                            if (this.outTrafficBuilder_ == null) {
                                this.outTrafficBuilder_ = new SingleFieldBuilderV3<>(getOutTraffic(), getParentForChildren(), isClean());
                                this.outTraffic_ = null;
                            }
                            return this.outTrafficBuilder_;
                        }

                        private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getQpsFieldBuilder() {
                            if (this.qpsBuilder_ == null) {
                                this.qpsBuilder_ = new SingleFieldBuilderV3<>(getQps(), getParentForChildren(), isClean());
                                this.qps_ = null;
                            }
                            return this.qpsBuilder_;
                        }

                        private void maybeForceBuilderInitialization() {
                            boolean unused = ApiDetailInfo.alwaysUseFieldBuilders;
                        }

                        @Override
                        public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                            return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                        }

                        @Override
                        public ApiDetailInfo build() {
                            ApiDetailInfo buildPartial = buildPartial();
                            if (buildPartial.isInitialized()) {
                                return buildPartial;
                            }
                            throw newUninitializedMessageException((Message) buildPartial);
                        }

                        @Override
                        public ApiDetailInfo buildPartial() {
                            ApiDetailInfo apiDetailInfo = new ApiDetailInfo(this);
                            apiDetailInfo.name_ = this.name_;
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            apiDetailInfo.qps_ = singleFieldBuilderV3 == null ? this.qps_ : singleFieldBuilderV3.build();
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.failQpsBuilder_;
                            apiDetailInfo.failQps_ = singleFieldBuilderV32 == null ? this.failQps_ : singleFieldBuilderV32.build();
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.outTrafficBuilder_;
                            apiDetailInfo.outTraffic_ = singleFieldBuilderV33 == null ? this.outTraffic_ : singleFieldBuilderV33.build();
                            onBuilt();
                            return apiDetailInfo;
                        }

                        @Override
                        public Builder clear() {
                            super.clear();
                            this.name_ = "";
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            this.qps_ = null;
                            if (singleFieldBuilderV3 != null) {
                                this.qpsBuilder_ = null;
                            }
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.failQpsBuilder_;
                            this.failQps_ = null;
                            if (singleFieldBuilderV32 != null) {
                                this.failQpsBuilder_ = null;
                            }
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.outTrafficBuilder_;
                            this.outTraffic_ = null;
                            if (singleFieldBuilderV33 != null) {
                                this.outTrafficBuilder_ = null;
                            }
                            return this;
                        }

                        public Builder clearFailQps() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            this.failQps_ = null;
                            if (singleFieldBuilderV3 == null) {
                                onChanged();
                            } else {
                                this.failQpsBuilder_ = null;
                            }
                            return this;
                        }

                        @Override
                        public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                            return (Builder) super.clearField(fieldDescriptor);
                        }

                        public Builder clearName() {
                            this.name_ = ApiDetailInfo.getDefaultInstance().getName();
                            onChanged();
                            return this;
                        }

                        @Override
                        public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                            return (Builder) super.clearOneof(oneofDescriptor);
                        }

                        public Builder clearOutTraffic() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            this.outTraffic_ = null;
                            if (singleFieldBuilderV3 == null) {
                                onChanged();
                            } else {
                                this.outTrafficBuilder_ = null;
                            }
                            return this;
                        }

                        public Builder clearQps() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            this.qps_ = null;
                            if (singleFieldBuilderV3 == null) {
                                onChanged();
                            } else {
                                this.qpsBuilder_ = null;
                            }
                            return this;
                        }

                        @Override
                        public Builder clone() {
                            return (Builder) super.clone();
                        }

                        @Override
                        public ApiDetailInfo getDefaultInstanceForType() {
                            return ApiDetailInfo.getDefaultInstance();
                        }

                        @Override
                        public Descriptors.Descriptor getDescriptorForType() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_descriptor;
                        }

                        @Override
                        public RateInfo getFailQps() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo = this.failQps_;
                                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                            }
                            return singleFieldBuilderV3.getMessage();
                        }

                        public RateInfo.Builder getFailQpsBuilder() {
                            onChanged();
                            return getFailQpsFieldBuilder().getBuilder();
                        }

                        @Override
                        public RateInfoOrBuilder getFailQpsOrBuilder() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            if (singleFieldBuilderV3 != null) {
                                return singleFieldBuilderV3.getMessageOrBuilder();
                            }
                            RateInfo rateInfo = this.failQps_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }

                        @Override
                        public String getName() {
                            Object obj = this.name_;
                            if (obj instanceof String) {
                                return (String) obj;
                            }
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.name_ = stringUtf8;
                            return stringUtf8;
                        }

                        @Override
                        public ByteString getNameBytes() {
                            Object obj = this.name_;
                            if (obj instanceof String) {
                                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                                this.name_ = copyFromUtf8;
                                return copyFromUtf8;
                            }
                            return (ByteString) obj;
                        }

                        @Override
                        public RateInfo getOutTraffic() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo = this.outTraffic_;
                                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                            }
                            return singleFieldBuilderV3.getMessage();
                        }

                        public RateInfo.Builder getOutTrafficBuilder() {
                            onChanged();
                            return getOutTrafficFieldBuilder().getBuilder();
                        }

                        @Override
                        public RateInfoOrBuilder getOutTrafficOrBuilder() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            if (singleFieldBuilderV3 != null) {
                                return singleFieldBuilderV3.getMessageOrBuilder();
                            }
                            RateInfo rateInfo = this.outTraffic_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }

                        @Override
                        public RateInfo getQps() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo = this.qps_;
                                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                            }
                            return singleFieldBuilderV3.getMessage();
                        }

                        public RateInfo.Builder getQpsBuilder() {
                            onChanged();
                            return getQpsFieldBuilder().getBuilder();
                        }

                        @Override
                        public RateInfoOrBuilder getQpsOrBuilder() {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            if (singleFieldBuilderV3 != null) {
                                return singleFieldBuilderV3.getMessageOrBuilder();
                            }
                            RateInfo rateInfo = this.qps_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }

                        @Override
                        public boolean hasFailQps() {
                            return (this.failQpsBuilder_ == null && this.failQps_ == null) ? false : true;
                        }

                        @Override
                        public boolean hasOutTraffic() {
                            return (this.outTrafficBuilder_ == null && this.outTraffic_ == null) ? false : true;
                        }

                        @Override
                        public boolean hasQps() {
                            return (this.qpsBuilder_ == null && this.qps_ == null) ? false : true;
                        }

                        @Override
                        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApiDetailInfo.class, Builder.class);
                        }

                        @Override
                        public final boolean isInitialized() {
                            return true;
                        }

                        public Builder mergeFailQps(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo2 = this.failQps_;
                                if (rateInfo2 != null) {
                                    rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                                }
                                this.failQps_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.mergeFrom(rateInfo);
                            }
                            return this;
                        }

                        @Override
                        public org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                            


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$ApiInfo$ApiDetailInfo$Builder");
                        }

                        @Override
                        public Builder mergeFrom(Message message) {
                            if (message instanceof ApiDetailInfo) {
                                return mergeFrom((ApiDetailInfo) message);
                            }
                            super.mergeFrom(message);
                            return this;
                        }

                        public Builder mergeFrom(ApiDetailInfo apiDetailInfo) {
                            if (apiDetailInfo == ApiDetailInfo.getDefaultInstance()) {
                                return this;
                            }
                            if (!apiDetailInfo.getName().isEmpty()) {
                                this.name_ = apiDetailInfo.name_;
                                onChanged();
                            }
                            if (apiDetailInfo.hasQps()) {
                                mergeQps(apiDetailInfo.getQps());
                            }
                            if (apiDetailInfo.hasFailQps()) {
                                mergeFailQps(apiDetailInfo.getFailQps());
                            }
                            if (apiDetailInfo.hasOutTraffic()) {
                                mergeOutTraffic(apiDetailInfo.getOutTraffic());
                            }
                            mergeUnknownFields(apiDetailInfo.unknownFields);
                            onChanged();
                            return this;
                        }

                        public Builder mergeOutTraffic(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo2 = this.outTraffic_;
                                if (rateInfo2 != null) {
                                    rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                                }
                                this.outTraffic_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.mergeFrom(rateInfo);
                            }
                            return this;
                        }

                        public Builder mergeQps(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                RateInfo rateInfo2 = this.qps_;
                                if (rateInfo2 != null) {
                                    rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                                }
                                this.qps_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.mergeFrom(rateInfo);
                            }
                            return this;
                        }

                        @Override
                        public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                            return (Builder) super.mergeUnknownFields(unknownFieldSet);
                        }

                        public Builder setFailQps(RateInfo.Builder builder) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            RateInfo build = builder.build();
                            if (singleFieldBuilderV3 == null) {
                                this.failQps_ = build;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(build);
                            }
                            return this;
                        }

                        public Builder setFailQps(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                rateInfo.getClass();
                                this.failQps_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(rateInfo);
                            }
                            return this;
                        }

                        @Override
                        public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                            return (Builder) super.setField(fieldDescriptor, obj);
                        }

                        public Builder setName(String str) {
                            str.getClass();
                            this.name_ = str;
                            onChanged();
                            return this;
                        }

                        public Builder setNameBytes(ByteString byteString) {
                            byteString.getClass();
                            ApiDetailInfo.checkByteStringIsUtf8(byteString);
                            this.name_ = byteString;
                            onChanged();
                            return this;
                        }

                        public Builder setOutTraffic(RateInfo.Builder builder) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            RateInfo build = builder.build();
                            if (singleFieldBuilderV3 == null) {
                                this.outTraffic_ = build;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(build);
                            }
                            return this;
                        }

                        public Builder setOutTraffic(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                rateInfo.getClass();
                                this.outTraffic_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(rateInfo);
                            }
                            return this;
                        }

                        public Builder setQps(RateInfo.Builder builder) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            RateInfo build = builder.build();
                            if (singleFieldBuilderV3 == null) {
                                this.qps_ = build;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(build);
                            }
                            return this;
                        }

                        public Builder setQps(RateInfo rateInfo) {
                            SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                            if (singleFieldBuilderV3 == null) {
                                rateInfo.getClass();
                                this.qps_ = rateInfo;
                                onChanged();
                            } else {
                                singleFieldBuilderV3.setMessage(rateInfo);
                            }
                            return this;
                        }

                        @Override
                        public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                            return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                        }

                        @Override
                        public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                            return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                        }
                    }

                    private ApiDetailInfo() {
                        this.memoizedIsInitialized = (byte) -1;
                        this.name_ = "";
                    }

                    private ApiDetailInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        this();
                        RateInfo.Builder builder;
                        extensionRegistryLite.getClass();
                        UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                        boolean z = false;
                        while (!z) {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag != 10) {
                                            if (readTag == 18) {
                                                RateInfo rateInfo = this.qps_;
                                                builder = rateInfo != null ? rateInfo.toBuilder() : null;
                                                RateInfo rateInfo2 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                                this.qps_ = rateInfo2;
                                                if (builder != null) {
                                                    builder.mergeFrom(rateInfo2);
                                                    this.qps_ = builder.buildPartial();
                                                }
                                            } else if (readTag == 26) {
                                                RateInfo rateInfo3 = this.failQps_;
                                                builder = rateInfo3 != null ? rateInfo3.toBuilder() : null;
                                                RateInfo rateInfo4 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                                this.failQps_ = rateInfo4;
                                                if (builder != null) {
                                                    builder.mergeFrom(rateInfo4);
                                                    this.failQps_ = builder.buildPartial();
                                                }
                                            } else if (readTag == 34) {
                                                RateInfo rateInfo5 = this.outTraffic_;
                                                builder = rateInfo5 != null ? rateInfo5.toBuilder() : null;
                                                RateInfo rateInfo6 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                                this.outTraffic_ = rateInfo6;
                                                if (builder != null) {
                                                    builder.mergeFrom(rateInfo6);
                                                    this.outTraffic_ = builder.buildPartial();
                                                }
                                            } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                            }
                                        } else {
                                            this.name_ = codedInputStream.readStringRequireUtf8();
                                        }
                                    }
                                    z = true;
                                } catch (InvalidProtocolBufferException e) {
                                    throw e.setUnfinishedMessage(this);
                                } catch (IOException e2) {
                                    throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                                }
                            } finally {
                                this.unknownFields = newBuilder.build();
                                makeExtensionsImmutable();
                            }
                        }
                    }

                    private ApiDetailInfo(GeneratedMessageV3.Builder<?> builder) {
                        super(builder);
                        this.memoizedIsInitialized = (byte) -1;
                    }

                    public static ApiDetailInfo getDefaultInstance() {
                        return DEFAULT_INSTANCE;
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_descriptor;
                    }

                    public static Builder newBuilder() {
                        return DEFAULT_INSTANCE.toBuilder();
                    }

                    public static Builder newBuilder(ApiDetailInfo apiDetailInfo) {
                        return DEFAULT_INSTANCE.toBuilder().mergeFrom(apiDetailInfo);
                    }

                    public static ApiDetailInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                    }

                    public static ApiDetailInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                    }

                    public static ApiDetailInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteString);
                    }

                    public static ApiDetailInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteString, extensionRegistryLite);
                    }

                    public static ApiDetailInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                    }

                    public static ApiDetailInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                    }

                    public static ApiDetailInfo parseFrom(InputStream inputStream) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                    }

                    public static ApiDetailInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (ApiDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                    }

                    public static ApiDetailInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteBuffer);
                    }

                    public static ApiDetailInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                    }

                    public static ApiDetailInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(bArr);
                    }

                    public static ApiDetailInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(bArr, extensionRegistryLite);
                    }

                    public static Parser<ApiDetailInfo> parser() {
                        return PARSER;
                    }

                    @Override
                    public boolean equals(java.lang.Object r5) {
                        


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo.equals(java.lang.Object):boolean");
                    }

                    @Override
                    public ApiDetailInfo getDefaultInstanceForType() {
                        return DEFAULT_INSTANCE;
                    }

                    @Override
                    public RateInfo getFailQps() {
                        RateInfo rateInfo = this.failQps_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public RateInfoOrBuilder getFailQpsOrBuilder() {
                        return getFailQps();
                    }

                    @Override
                    public String getName() {
                        Object obj = this.name_;
                        if (obj instanceof String) {
                            return (String) obj;
                        }
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.name_ = stringUtf8;
                        return stringUtf8;
                    }

                    @Override
                    public ByteString getNameBytes() {
                        Object obj = this.name_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.name_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    @Override
                    public RateInfo getOutTraffic() {
                        RateInfo rateInfo = this.outTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public RateInfoOrBuilder getOutTrafficOrBuilder() {
                        return getOutTraffic();
                    }

                    @Override
                    public Parser<ApiDetailInfo> getParserForType() {
                        return PARSER;
                    }

                    @Override
                    public RateInfo getQps() {
                        RateInfo rateInfo = this.qps_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public RateInfoOrBuilder getQpsOrBuilder() {
                        return getQps();
                    }

                    @Override
                    public int getSerializedSize() {
                        int i = this.memoizedSize;
                        if (i != -1) {
                            return i;
                        }
                        int computeStringSize = !getNameBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.name_) : 0;
                        if (this.qps_ != null) {
                            computeStringSize += CodedOutputStream.computeMessageSize(2, getQps());
                        }
                        if (this.failQps_ != null) {
                            computeStringSize += CodedOutputStream.computeMessageSize(3, getFailQps());
                        }
                        if (this.outTraffic_ != null) {
                            computeStringSize += CodedOutputStream.computeMessageSize(4, getOutTraffic());
                        }
                        int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                        this.memoizedSize = serializedSize;
                        return serializedSize;
                    }

                    @Override
                    public final UnknownFieldSet getUnknownFields() {
                        return this.unknownFields;
                    }

                    @Override
                    public boolean hasFailQps() {
                        return this.failQps_ != null;
                    }

                    @Override
                    public boolean hasOutTraffic() {
                        return this.outTraffic_ != null;
                    }

                    @Override
                    public boolean hasQps() {
                        return this.qps_ != null;
                    }

                    @Override
                    public int hashCode() {
                        if (this.memoizedHashCode != 0) {
                            return this.memoizedHashCode;
                        }
                        int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getName().hashCode();
                        if (hasQps()) {
                            hashCode = (((hashCode * 37) + 2) * 53) + getQps().hashCode();
                        }
                        if (hasFailQps()) {
                            hashCode = (((hashCode * 37) + 3) * 53) + getFailQps().hashCode();
                        }
                        if (hasOutTraffic()) {
                            hashCode = (((hashCode * 37) + 4) * 53) + getOutTraffic().hashCode();
                        }
                        int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
                        this.memoizedHashCode = hashCode2;
                        return hashCode2;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApiDetailInfo.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        byte b = this.memoizedIsInitialized;
                        if (b == 1) {
                            return true;
                        }
                        if (b == 0) {
                            return false;
                        }
                        this.memoizedIsInitialized = (byte) 1;
                        return true;
                    }

                    @Override
                    public Builder newBuilderForType() {
                        return newBuilder();
                    }

                    @Override
                    public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                        return new Builder(builderParent);
                    }

                    @Override
                    public Builder toBuilder() {
                        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                    }

                    @Override
                    public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                        if (!getNameBytes().isEmpty()) {
                            GeneratedMessageV3.writeString(codedOutputStream, 1, this.name_);
                        }
                        if (this.qps_ != null) {
                            codedOutputStream.writeMessage(2, getQps());
                        }
                        if (this.failQps_ != null) {
                            codedOutputStream.writeMessage(3, getFailQps());
                        }
                        if (this.outTraffic_ != null) {
                            codedOutputStream.writeMessage(4, getOutTraffic());
                        }
                        this.unknownFields.writeTo(codedOutputStream);
                    }
                }

                public interface ApiDetailInfoOrBuilder extends MessageOrBuilder {
                    RateInfo getFailQps();

                    RateInfoOrBuilder getFailQpsOrBuilder();

                    String getName();

                    ByteString getNameBytes();

                    RateInfo getOutTraffic();

                    RateInfoOrBuilder getOutTrafficOrBuilder();

                    RateInfo getQps();

                    RateInfoOrBuilder getQpsOrBuilder();

                    boolean hasFailQps();

                    boolean hasOutTraffic();

                    boolean hasQps();
                }

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ApiInfoOrBuilder {
                    private int bitField0_;
                    private RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> detailBuilder_;
                    private List<ApiDetailInfo> detail_;
                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> failQpsBuilder_;
                    private RateInfo failQps_;
                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> outTrafficBuilder_;
                    private RateInfo outTraffic_;
                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> qpsBuilder_;
                    private RateInfo qps_;

                    private Builder() {
                        this.qps_ = null;
                        this.failQps_ = null;
                        this.outTraffic_ = null;
                        this.detail_ = Collections.emptyList();
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.qps_ = null;
                        this.failQps_ = null;
                        this.outTraffic_ = null;
                        this.detail_ = Collections.emptyList();
                        maybeForceBuilderInitialization();
                    }

                    private void ensureDetailIsMutable() {
                        if ((this.bitField0_ & 8) != 8) {
                            this.detail_ = new ArrayList(this.detail_);
                            this.bitField0_ |= 8;
                        }
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_descriptor;
                    }

                    private RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> getDetailFieldBuilder() {
                        if (this.detailBuilder_ == null) {
                            this.detailBuilder_ = new RepeatedFieldBuilderV3<>(this.detail_, (this.bitField0_ & 8) == 8, getParentForChildren(), isClean());
                            this.detail_ = null;
                        }
                        return this.detailBuilder_;
                    }

                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getFailQpsFieldBuilder() {
                        if (this.failQpsBuilder_ == null) {
                            this.failQpsBuilder_ = new SingleFieldBuilderV3<>(getFailQps(), getParentForChildren(), isClean());
                            this.failQps_ = null;
                        }
                        return this.failQpsBuilder_;
                    }

                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getOutTrafficFieldBuilder() {
                        if (this.outTrafficBuilder_ == null) {
                            this.outTrafficBuilder_ = new SingleFieldBuilderV3<>(getOutTraffic(), getParentForChildren(), isClean());
                            this.outTraffic_ = null;
                        }
                        return this.outTrafficBuilder_;
                    }

                    private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getQpsFieldBuilder() {
                        if (this.qpsBuilder_ == null) {
                            this.qpsBuilder_ = new SingleFieldBuilderV3<>(getQps(), getParentForChildren(), isClean());
                            this.qps_ = null;
                        }
                        return this.qpsBuilder_;
                    }

                    private void maybeForceBuilderInitialization() {
                        if (ApiInfo.alwaysUseFieldBuilders) {
                            getDetailFieldBuilder();
                        }
                    }

                    public Builder addAllDetail(Iterable<? extends ApiDetailInfo> iterable) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.detail_);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addAllMessages(iterable);
                        }
                        return this;
                    }

                    public Builder addDetail(int i, ApiDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.add(i, builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(i, builder.build());
                        }
                        return this;
                    }

                    public Builder addDetail(int i, ApiDetailInfo apiDetailInfo) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            apiDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.add(i, apiDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(i, apiDetailInfo);
                        }
                        return this;
                    }

                    public Builder addDetail(ApiDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.add(builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(builder.build());
                        }
                        return this;
                    }

                    public Builder addDetail(ApiDetailInfo apiDetailInfo) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            apiDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.add(apiDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(apiDetailInfo);
                        }
                        return this;
                    }

                    public ApiDetailInfo.Builder addDetailBuilder() {
                        return getDetailFieldBuilder().addBuilder(ApiDetailInfo.getDefaultInstance());
                    }

                    public ApiDetailInfo.Builder addDetailBuilder(int i) {
                        return getDetailFieldBuilder().addBuilder(i, ApiDetailInfo.getDefaultInstance());
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public ApiInfo build() {
                        ApiInfo buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public ApiInfo buildPartial() {
                        List<ApiDetailInfo> build;
                        ApiInfo apiInfo = new ApiInfo(this);
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        apiInfo.qps_ = singleFieldBuilderV3 == null ? this.qps_ : singleFieldBuilderV3.build();
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.failQpsBuilder_;
                        apiInfo.failQps_ = singleFieldBuilderV32 == null ? this.failQps_ : singleFieldBuilderV32.build();
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.outTrafficBuilder_;
                        apiInfo.outTraffic_ = singleFieldBuilderV33 == null ? this.outTraffic_ : singleFieldBuilderV33.build();
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            if ((this.bitField0_ & 8) == 8) {
                                this.detail_ = Collections.unmodifiableList(this.detail_);
                                this.bitField0_ &= -9;
                            }
                            build = this.detail_;
                        } else {
                            build = repeatedFieldBuilderV3.build();
                        }
                        apiInfo.detail_ = build;
                        apiInfo.bitField0_ = 0;
                        onBuilt();
                        return apiInfo;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        this.qps_ = null;
                        if (singleFieldBuilderV3 != null) {
                            this.qpsBuilder_ = null;
                        }
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.failQpsBuilder_;
                        this.failQps_ = null;
                        if (singleFieldBuilderV32 != null) {
                            this.failQpsBuilder_ = null;
                        }
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.outTrafficBuilder_;
                        this.outTraffic_ = null;
                        if (singleFieldBuilderV33 != null) {
                            this.outTrafficBuilder_ = null;
                        }
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            this.detail_ = Collections.emptyList();
                            this.bitField0_ &= -9;
                        } else {
                            repeatedFieldBuilderV3.clear();
                        }
                        return this;
                    }

                    public Builder clearDetail() {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            this.detail_ = Collections.emptyList();
                            this.bitField0_ &= -9;
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.clear();
                        }
                        return this;
                    }

                    public Builder clearFailQps() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        this.failQps_ = null;
                        if (singleFieldBuilderV3 == null) {
                            onChanged();
                        } else {
                            this.failQpsBuilder_ = null;
                        }
                        return this;
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    public Builder clearOutTraffic() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        this.outTraffic_ = null;
                        if (singleFieldBuilderV3 == null) {
                            onChanged();
                        } else {
                            this.outTrafficBuilder_ = null;
                        }
                        return this;
                    }

                    public Builder clearQps() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        this.qps_ = null;
                        if (singleFieldBuilderV3 == null) {
                            onChanged();
                        } else {
                            this.qpsBuilder_ = null;
                        }
                        return this;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public ApiInfo getDefaultInstanceForType() {
                        return ApiInfo.getDefaultInstance();
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_descriptor;
                    }

                    @Override
                    public ApiDetailInfo getDetail(int i) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? this.detail_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                    }

                    public ApiDetailInfo.Builder getDetailBuilder(int i) {
                        return getDetailFieldBuilder().getBuilder(i);
                    }

                    public List<ApiDetailInfo.Builder> getDetailBuilderList() {
                        return getDetailFieldBuilder().getBuilderList();
                    }

                    @Override
                    public int getDetailCount() {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? this.detail_.size() : repeatedFieldBuilderV3.getCount();
                    }

                    @Override
                    public List<ApiDetailInfo> getDetailList() {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.detail_) : repeatedFieldBuilderV3.getMessageList();
                    }

                    @Override
                    public ApiDetailInfoOrBuilder getDetailOrBuilder(int i) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return (ApiDetailInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.detail_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                    }

                    @Override
                    public List<? extends ApiDetailInfoOrBuilder> getDetailOrBuilderList() {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.detail_);
                    }

                    @Override
                    public RateInfo getFailQps() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo = this.failQps_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }
                        return singleFieldBuilderV3.getMessage();
                    }

                    public RateInfo.Builder getFailQpsBuilder() {
                        onChanged();
                        return getFailQpsFieldBuilder().getBuilder();
                    }

                    @Override
                    public RateInfoOrBuilder getFailQpsOrBuilder() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        if (singleFieldBuilderV3 != null) {
                            return singleFieldBuilderV3.getMessageOrBuilder();
                        }
                        RateInfo rateInfo = this.failQps_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public RateInfo getOutTraffic() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo = this.outTraffic_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }
                        return singleFieldBuilderV3.getMessage();
                    }

                    public RateInfo.Builder getOutTrafficBuilder() {
                        onChanged();
                        return getOutTrafficFieldBuilder().getBuilder();
                    }

                    @Override
                    public RateInfoOrBuilder getOutTrafficOrBuilder() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        if (singleFieldBuilderV3 != null) {
                            return singleFieldBuilderV3.getMessageOrBuilder();
                        }
                        RateInfo rateInfo = this.outTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public RateInfo getQps() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo = this.qps_;
                            return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                        }
                        return singleFieldBuilderV3.getMessage();
                    }

                    public RateInfo.Builder getQpsBuilder() {
                        onChanged();
                        return getQpsFieldBuilder().getBuilder();
                    }

                    @Override
                    public RateInfoOrBuilder getQpsOrBuilder() {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        if (singleFieldBuilderV3 != null) {
                            return singleFieldBuilderV3.getMessageOrBuilder();
                        }
                        RateInfo rateInfo = this.qps_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }

                    @Override
                    public boolean hasFailQps() {
                        return (this.failQpsBuilder_ == null && this.failQps_ == null) ? false : true;
                    }

                    @Override
                    public boolean hasOutTraffic() {
                        return (this.outTrafficBuilder_ == null && this.outTraffic_ == null) ? false : true;
                    }

                    @Override
                    public boolean hasQps() {
                        return (this.qpsBuilder_ == null && this.qps_ == null) ? false : true;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApiInfo.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    public Builder mergeFailQps(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo2 = this.failQps_;
                            if (rateInfo2 != null) {
                                rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                            }
                            this.failQps_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.mergeFrom(rateInfo);
                        }
                        return this;
                    }

                    @Override
                    public org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$ApiInfo$Builder");
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof ApiInfo) {
                            return mergeFrom((ApiInfo) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(ApiInfo apiInfo) {
                        if (apiInfo == ApiInfo.getDefaultInstance()) {
                            return this;
                        }
                        if (apiInfo.hasQps()) {
                            mergeQps(apiInfo.getQps());
                        }
                        if (apiInfo.hasFailQps()) {
                            mergeFailQps(apiInfo.getFailQps());
                        }
                        if (apiInfo.hasOutTraffic()) {
                            mergeOutTraffic(apiInfo.getOutTraffic());
                        }
                        if (this.detailBuilder_ == null) {
                            if (!apiInfo.detail_.isEmpty()) {
                                if (this.detail_.isEmpty()) {
                                    this.detail_ = apiInfo.detail_;
                                    this.bitField0_ &= -9;
                                } else {
                                    ensureDetailIsMutable();
                                    this.detail_.addAll(apiInfo.detail_);
                                }
                                onChanged();
                            }
                        } else if (!apiInfo.detail_.isEmpty()) {
                            if (this.detailBuilder_.isEmpty()) {
                                this.detailBuilder_.dispose();
                                this.detailBuilder_ = null;
                                this.detail_ = apiInfo.detail_;
                                this.bitField0_ &= -9;
                                this.detailBuilder_ = ApiInfo.alwaysUseFieldBuilders ? getDetailFieldBuilder() : null;
                            } else {
                                this.detailBuilder_.addAllMessages(apiInfo.detail_);
                            }
                        }
                        mergeUnknownFields(apiInfo.unknownFields);
                        onChanged();
                        return this;
                    }

                    public Builder mergeOutTraffic(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo2 = this.outTraffic_;
                            if (rateInfo2 != null) {
                                rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                            }
                            this.outTraffic_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.mergeFrom(rateInfo);
                        }
                        return this;
                    }

                    public Builder mergeQps(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            RateInfo rateInfo2 = this.qps_;
                            if (rateInfo2 != null) {
                                rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                            }
                            this.qps_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.mergeFrom(rateInfo);
                        }
                        return this;
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }

                    public Builder removeDetail(int i) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.remove(i);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.remove(i);
                        }
                        return this;
                    }

                    public Builder setDetail(int i, ApiDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.set(i, builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.setMessage(i, builder.build());
                        }
                        return this;
                    }

                    public Builder setDetail(int i, ApiDetailInfo apiDetailInfo) {
                        RepeatedFieldBuilderV3<ApiDetailInfo, ApiDetailInfo.Builder, ApiDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            apiDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.set(i, apiDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.setMessage(i, apiDetailInfo);
                        }
                        return this;
                    }

                    public Builder setFailQps(RateInfo.Builder builder) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        RateInfo build = builder.build();
                        if (singleFieldBuilderV3 == null) {
                            this.failQps_ = build;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(build);
                        }
                        return this;
                    }

                    public Builder setFailQps(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.failQpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            rateInfo.getClass();
                            this.failQps_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(rateInfo);
                        }
                        return this;
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    public Builder setOutTraffic(RateInfo.Builder builder) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        RateInfo build = builder.build();
                        if (singleFieldBuilderV3 == null) {
                            this.outTraffic_ = build;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(build);
                        }
                        return this;
                    }

                    public Builder setOutTraffic(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.outTrafficBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            rateInfo.getClass();
                            this.outTraffic_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(rateInfo);
                        }
                        return this;
                    }

                    public Builder setQps(RateInfo.Builder builder) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        RateInfo build = builder.build();
                        if (singleFieldBuilderV3 == null) {
                            this.qps_ = build;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(build);
                        }
                        return this;
                    }

                    public Builder setQps(RateInfo rateInfo) {
                        SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.qpsBuilder_;
                        if (singleFieldBuilderV3 == null) {
                            rateInfo.getClass();
                            this.qps_ = rateInfo;
                            onChanged();
                        } else {
                            singleFieldBuilderV3.setMessage(rateInfo);
                        }
                        return this;
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }
                }

                private ApiInfo() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.detail_ = Collections.emptyList();
                }

                private ApiInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    RateInfo.Builder builder;
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    boolean z2 = false;
                    while (true) {
                        if (z) {
                            break;
                        }
                        try {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag == 10) {
                                            RateInfo rateInfo = this.qps_;
                                            builder = rateInfo != null ? rateInfo.toBuilder() : null;
                                            RateInfo rateInfo2 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                            this.qps_ = rateInfo2;
                                            if (builder != null) {
                                                builder.mergeFrom(rateInfo2);
                                                this.qps_ = builder.buildPartial();
                                            }
                                        } else if (readTag == 18) {
                                            RateInfo rateInfo3 = this.failQps_;
                                            builder = rateInfo3 != null ? rateInfo3.toBuilder() : null;
                                            RateInfo rateInfo4 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                            this.failQps_ = rateInfo4;
                                            if (builder != null) {
                                                builder.mergeFrom(rateInfo4);
                                                this.failQps_ = builder.buildPartial();
                                            }
                                        } else if (readTag == 26) {
                                            RateInfo rateInfo5 = this.outTraffic_;
                                            builder = rateInfo5 != null ? rateInfo5.toBuilder() : null;
                                            RateInfo rateInfo6 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                            this.outTraffic_ = rateInfo6;
                                            if (builder != null) {
                                                builder.mergeFrom(rateInfo6);
                                                this.outTraffic_ = builder.buildPartial();
                                            }
                                        } else if (readTag == 34) {
                                            if (!(z2 & true)) {
                                                this.detail_ = new ArrayList();
                                                z2 |= true;
                                            }
                                            this.detail_.add((ApiDetailInfo) codedInputStream.readMessage(ApiDetailInfo.parser(), extensionRegistryLite));
                                        } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    }
                                    z = true;
                                } catch (IOException e) {
                                    throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                                }
                            } catch (InvalidProtocolBufferException e2) {
                                throw e2.setUnfinishedMessage(this);
                            }
                        } finally {
                            if (z2 & true) {
                                this.detail_ = Collections.unmodifiableList(this.detail_);
                            }
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                private ApiInfo(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                public static ApiInfo getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_descriptor;
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(ApiInfo apiInfo) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(apiInfo);
                }

                public static ApiInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static ApiInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static ApiInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static ApiInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static ApiInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static ApiInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                public static ApiInfo parseFrom(InputStream inputStream) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static ApiInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (ApiInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static ApiInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static ApiInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static ApiInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static ApiInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static Parser<ApiInfo> parser() {
                    return PARSER;
                }

                @Override
                public boolean equals(java.lang.Object r5) {
                    


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.ApiInfo.equals(java.lang.Object):boolean");
                }

                @Override
                public ApiInfo getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public ApiDetailInfo getDetail(int i) {
                    return this.detail_.get(i);
                }

                @Override
                public int getDetailCount() {
                    return this.detail_.size();
                }

                @Override
                public List<ApiDetailInfo> getDetailList() {
                    return this.detail_;
                }

                @Override
                public ApiDetailInfoOrBuilder getDetailOrBuilder(int i) {
                    return this.detail_.get(i);
                }

                @Override
                public List<? extends ApiDetailInfoOrBuilder> getDetailOrBuilderList() {
                    return this.detail_;
                }

                @Override
                public RateInfo getFailQps() {
                    RateInfo rateInfo = this.failQps_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfoOrBuilder getFailQpsOrBuilder() {
                    return getFailQps();
                }

                @Override
                public RateInfo getOutTraffic() {
                    RateInfo rateInfo = this.outTraffic_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfoOrBuilder getOutTrafficOrBuilder() {
                    return getOutTraffic();
                }

                @Override
                public Parser<ApiInfo> getParserForType() {
                    return PARSER;
                }

                @Override
                public RateInfo getQps() {
                    RateInfo rateInfo = this.qps_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfoOrBuilder getQpsOrBuilder() {
                    return getQps();
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeMessageSize = this.qps_ != null ? CodedOutputStream.computeMessageSize(1, getQps()) : 0;
                    if (this.failQps_ != null) {
                        computeMessageSize += CodedOutputStream.computeMessageSize(2, getFailQps());
                    }
                    if (this.outTraffic_ != null) {
                        computeMessageSize += CodedOutputStream.computeMessageSize(3, getOutTraffic());
                    }
                    for (int i2 = 0; i2 < this.detail_.size(); i2++) {
                        computeMessageSize += CodedOutputStream.computeMessageSize(4, this.detail_.get(i2));
                    }
                    int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                @Override
                public boolean hasFailQps() {
                    return this.failQps_ != null;
                }

                @Override
                public boolean hasOutTraffic() {
                    return this.outTraffic_ != null;
                }

                @Override
                public boolean hasQps() {
                    return this.qps_ != null;
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = 779 + getDescriptor().hashCode();
                    if (hasQps()) {
                        hashCode = (((hashCode * 37) + 1) * 53) + getQps().hashCode();
                    }
                    if (hasFailQps()) {
                        hashCode = (((hashCode * 37) + 2) * 53) + getFailQps().hashCode();
                    }
                    if (hasOutTraffic()) {
                        hashCode = (((hashCode * 37) + 3) * 53) + getOutTraffic().hashCode();
                    }
                    if (getDetailCount() > 0) {
                        hashCode = (((hashCode * 37) + 4) * 53) + getDetailList().hashCode();
                    }
                    int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode2;
                    return hashCode2;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApiInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (this.qps_ != null) {
                        codedOutputStream.writeMessage(1, getQps());
                    }
                    if (this.failQps_ != null) {
                        codedOutputStream.writeMessage(2, getFailQps());
                    }
                    if (this.outTraffic_ != null) {
                        codedOutputStream.writeMessage(3, getOutTraffic());
                    }
                    for (int i = 0; i < this.detail_.size(); i++) {
                        codedOutputStream.writeMessage(4, this.detail_.get(i));
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }
            }

            public interface ApiInfoOrBuilder extends MessageOrBuilder {
                ApiInfo.ApiDetailInfo getDetail(int i);

                int getDetailCount();

                List<ApiInfo.ApiDetailInfo> getDetailList();

                ApiInfo.ApiDetailInfoOrBuilder getDetailOrBuilder(int i);

                List<? extends ApiInfo.ApiDetailInfoOrBuilder> getDetailOrBuilderList();

                RateInfo getFailQps();

                RateInfoOrBuilder getFailQpsOrBuilder();

                RateInfo getOutTraffic();

                RateInfoOrBuilder getOutTrafficOrBuilder();

                RateInfo getQps();

                RateInfoOrBuilder getQpsOrBuilder();

                boolean hasFailQps();

                boolean hasOutTraffic();

                boolean hasQps();
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements NetInfoOrBuilder {
                private SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> apiBuilder_;
                private ApiInfo api_;
                private int bitField0_;
                private int connectionCount_;
                private int disconnectionCount_;
                private RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> disconnectionDetailBuilder_;
                private List<DisconnectionDetailInfo> disconnectionDetail_;
                private int errorProtoCount_;
                private SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> latencyBuilder_;
                private LatencyInfo latency_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> tcpInTrafficBuilder_;
                private RateInfo tcpInTraffic_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> tcpOutTrafficBuilder_;
                private RateInfo tcpOutTraffic_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> udpInTrafficBuilder_;
                private RateInfo udpInTraffic_;
                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> udpOutTrafficBuilder_;
                private RateInfo udpOutTraffic_;
                private int validConnectionCount_;

                private Builder() {
                    this.api_ = null;
                    this.tcpInTraffic_ = null;
                    this.tcpOutTraffic_ = null;
                    this.disconnectionDetail_ = Collections.emptyList();
                    this.udpInTraffic_ = null;
                    this.udpOutTraffic_ = null;
                    this.latency_ = null;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.api_ = null;
                    this.tcpInTraffic_ = null;
                    this.tcpOutTraffic_ = null;
                    this.disconnectionDetail_ = Collections.emptyList();
                    this.udpInTraffic_ = null;
                    this.udpOutTraffic_ = null;
                    this.latency_ = null;
                    maybeForceBuilderInitialization();
                }

                private void ensureDisconnectionDetailIsMutable() {
                    if ((this.bitField0_ & 128) != 128) {
                        this.disconnectionDetail_ = new ArrayList(this.disconnectionDetail_);
                        this.bitField0_ |= 128;
                    }
                }

                private SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> getApiFieldBuilder() {
                    if (this.apiBuilder_ == null) {
                        this.apiBuilder_ = new SingleFieldBuilderV3<>(getApi(), getParentForChildren(), isClean());
                        this.api_ = null;
                    }
                    return this.apiBuilder_;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_descriptor;
                }

                private RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> getDisconnectionDetailFieldBuilder() {
                    if (this.disconnectionDetailBuilder_ == null) {
                        this.disconnectionDetailBuilder_ = new RepeatedFieldBuilderV3<>(this.disconnectionDetail_, (this.bitField0_ & 128) == 128, getParentForChildren(), isClean());
                        this.disconnectionDetail_ = null;
                    }
                    return this.disconnectionDetailBuilder_;
                }

                private SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> getLatencyFieldBuilder() {
                    if (this.latencyBuilder_ == null) {
                        this.latencyBuilder_ = new SingleFieldBuilderV3<>(getLatency(), getParentForChildren(), isClean());
                        this.latency_ = null;
                    }
                    return this.latencyBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getTcpInTrafficFieldBuilder() {
                    if (this.tcpInTrafficBuilder_ == null) {
                        this.tcpInTrafficBuilder_ = new SingleFieldBuilderV3<>(getTcpInTraffic(), getParentForChildren(), isClean());
                        this.tcpInTraffic_ = null;
                    }
                    return this.tcpInTrafficBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getTcpOutTrafficFieldBuilder() {
                    if (this.tcpOutTrafficBuilder_ == null) {
                        this.tcpOutTrafficBuilder_ = new SingleFieldBuilderV3<>(getTcpOutTraffic(), getParentForChildren(), isClean());
                        this.tcpOutTraffic_ = null;
                    }
                    return this.tcpOutTrafficBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getUdpInTrafficFieldBuilder() {
                    if (this.udpInTrafficBuilder_ == null) {
                        this.udpInTrafficBuilder_ = new SingleFieldBuilderV3<>(getUdpInTraffic(), getParentForChildren(), isClean());
                        this.udpInTraffic_ = null;
                    }
                    return this.udpInTrafficBuilder_;
                }

                private SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> getUdpOutTrafficFieldBuilder() {
                    if (this.udpOutTrafficBuilder_ == null) {
                        this.udpOutTrafficBuilder_ = new SingleFieldBuilderV3<>(getUdpOutTraffic(), getParentForChildren(), isClean());
                        this.udpOutTraffic_ = null;
                    }
                    return this.udpOutTrafficBuilder_;
                }

                private void maybeForceBuilderInitialization() {
                    if (NetInfo.alwaysUseFieldBuilders) {
                        getDisconnectionDetailFieldBuilder();
                    }
                }

                public Builder addAllDisconnectionDetail(Iterable<? extends DisconnectionDetailInfo> iterable) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDisconnectionDetailIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.disconnectionDetail_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder addDisconnectionDetail(int i, DisconnectionDetailInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addDisconnectionDetail(int i, DisconnectionDetailInfo disconnectionDetailInfo) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        disconnectionDetailInfo.getClass();
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.add(i, disconnectionDetailInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, disconnectionDetailInfo);
                    }
                    return this;
                }

                public Builder addDisconnectionDetail(DisconnectionDetailInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addDisconnectionDetail(DisconnectionDetailInfo disconnectionDetailInfo) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        disconnectionDetailInfo.getClass();
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.add(disconnectionDetailInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(disconnectionDetailInfo);
                    }
                    return this;
                }

                public DisconnectionDetailInfo.Builder addDisconnectionDetailBuilder() {
                    return getDisconnectionDetailFieldBuilder().addBuilder(DisconnectionDetailInfo.getDefaultInstance());
                }

                public DisconnectionDetailInfo.Builder addDisconnectionDetailBuilder(int i) {
                    return getDisconnectionDetailFieldBuilder().addBuilder(i, DisconnectionDetailInfo.getDefaultInstance());
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public NetInfo build() {
                    NetInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public NetInfo buildPartial() {
                    List<DisconnectionDetailInfo> build;
                    NetInfo netInfo = new NetInfo(this);
                    netInfo.errorProtoCount_ = this.errorProtoCount_;
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    netInfo.api_ = singleFieldBuilderV3 == null ? this.api_ : singleFieldBuilderV3.build();
                    netInfo.connectionCount_ = this.connectionCount_;
                    netInfo.validConnectionCount_ = this.validConnectionCount_;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.tcpInTrafficBuilder_;
                    netInfo.tcpInTraffic_ = singleFieldBuilderV32 == null ? this.tcpInTraffic_ : singleFieldBuilderV32.build();
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.tcpOutTrafficBuilder_;
                    netInfo.tcpOutTraffic_ = singleFieldBuilderV33 == null ? this.tcpOutTraffic_ : singleFieldBuilderV33.build();
                    netInfo.disconnectionCount_ = this.disconnectionCount_;
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        if ((this.bitField0_ & 128) == 128) {
                            this.disconnectionDetail_ = Collections.unmodifiableList(this.disconnectionDetail_);
                            this.bitField0_ &= -129;
                        }
                        build = this.disconnectionDetail_;
                    } else {
                        build = repeatedFieldBuilderV3.build();
                    }
                    netInfo.disconnectionDetail_ = build;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV34 = this.udpInTrafficBuilder_;
                    netInfo.udpInTraffic_ = singleFieldBuilderV34 == null ? this.udpInTraffic_ : singleFieldBuilderV34.build();
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV35 = this.udpOutTrafficBuilder_;
                    netInfo.udpOutTraffic_ = singleFieldBuilderV35 == null ? this.udpOutTraffic_ : singleFieldBuilderV35.build();
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV36 = this.latencyBuilder_;
                    netInfo.latency_ = singleFieldBuilderV36 == null ? this.latency_ : singleFieldBuilderV36.build();
                    netInfo.bitField0_ = 0;
                    onBuilt();
                    return netInfo;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.errorProtoCount_ = 0;
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    this.api_ = null;
                    if (singleFieldBuilderV3 != null) {
                        this.apiBuilder_ = null;
                    }
                    this.connectionCount_ = 0;
                    this.validConnectionCount_ = 0;
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV32 = this.tcpInTrafficBuilder_;
                    this.tcpInTraffic_ = null;
                    if (singleFieldBuilderV32 != null) {
                        this.tcpInTrafficBuilder_ = null;
                    }
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV33 = this.tcpOutTrafficBuilder_;
                    this.tcpOutTraffic_ = null;
                    if (singleFieldBuilderV33 != null) {
                        this.tcpOutTrafficBuilder_ = null;
                    }
                    this.disconnectionCount_ = 0;
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.disconnectionDetail_ = Collections.emptyList();
                        this.bitField0_ &= -129;
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV34 = this.udpInTrafficBuilder_;
                    this.udpInTraffic_ = null;
                    if (singleFieldBuilderV34 != null) {
                        this.udpInTrafficBuilder_ = null;
                    }
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV35 = this.udpOutTrafficBuilder_;
                    this.udpOutTraffic_ = null;
                    if (singleFieldBuilderV35 != null) {
                        this.udpOutTrafficBuilder_ = null;
                    }
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV36 = this.latencyBuilder_;
                    this.latency_ = null;
                    if (singleFieldBuilderV36 != null) {
                        this.latencyBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearApi() {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    this.api_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.apiBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearConnectionCount() {
                    this.connectionCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearDisconnectionCount() {
                    this.disconnectionCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearDisconnectionDetail() {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.disconnectionDetail_ = Collections.emptyList();
                        this.bitField0_ &= -129;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder clearErrorProtoCount() {
                    this.errorProtoCount_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                public Builder clearLatency() {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    this.latency_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.latencyBuilder_ = null;
                    }
                    return this;
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                public Builder clearTcpInTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    this.tcpInTraffic_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.tcpInTrafficBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearTcpOutTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    this.tcpOutTraffic_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.tcpOutTrafficBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearUdpInTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    this.udpInTraffic_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.udpInTrafficBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearUdpOutTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    this.udpOutTraffic_ = null;
                    if (singleFieldBuilderV3 == null) {
                        onChanged();
                    } else {
                        this.udpOutTrafficBuilder_ = null;
                    }
                    return this;
                }

                public Builder clearValidConnectionCount() {
                    this.validConnectionCount_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public ApiInfo getApi() {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        ApiInfo apiInfo = this.api_;
                        return apiInfo == null ? ApiInfo.getDefaultInstance() : apiInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public ApiInfo.Builder getApiBuilder() {
                    onChanged();
                    return getApiFieldBuilder().getBuilder();
                }

                @Override
                public ApiInfoOrBuilder getApiOrBuilder() {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    ApiInfo apiInfo = this.api_;
                    return apiInfo == null ? ApiInfo.getDefaultInstance() : apiInfo;
                }

                @Override
                public int getConnectionCount() {
                    return this.connectionCount_;
                }

                @Override
                public NetInfo getDefaultInstanceForType() {
                    return NetInfo.getDefaultInstance();
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_descriptor;
                }

                @Override
                public int getDisconnectionCount() {
                    return this.disconnectionCount_;
                }

                @Override
                public DisconnectionDetailInfo getDisconnectionDetail(int i) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.disconnectionDetail_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                }

                public DisconnectionDetailInfo.Builder getDisconnectionDetailBuilder(int i) {
                    return getDisconnectionDetailFieldBuilder().getBuilder(i);
                }

                public List<DisconnectionDetailInfo.Builder> getDisconnectionDetailBuilderList() {
                    return getDisconnectionDetailFieldBuilder().getBuilderList();
                }

                @Override
                public int getDisconnectionDetailCount() {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.disconnectionDetail_.size() : repeatedFieldBuilderV3.getCount();
                }

                @Override
                public List<DisconnectionDetailInfo> getDisconnectionDetailList() {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.disconnectionDetail_) : repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public DisconnectionDetailInfoOrBuilder getDisconnectionDetailOrBuilder(int i) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    return (DisconnectionDetailInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.disconnectionDetail_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                }

                @Override
                public List<? extends DisconnectionDetailInfoOrBuilder> getDisconnectionDetailOrBuilderList() {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.disconnectionDetail_);
                }

                @Override
                public int getErrorProtoCount() {
                    return this.errorProtoCount_;
                }

                @Override
                public LatencyInfo getLatency() {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        LatencyInfo latencyInfo = this.latency_;
                        return latencyInfo == null ? LatencyInfo.getDefaultInstance() : latencyInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public LatencyInfo.Builder getLatencyBuilder() {
                    onChanged();
                    return getLatencyFieldBuilder().getBuilder();
                }

                @Override
                public LatencyInfoOrBuilder getLatencyOrBuilder() {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    LatencyInfo latencyInfo = this.latency_;
                    return latencyInfo == null ? LatencyInfo.getDefaultInstance() : latencyInfo;
                }

                @Override
                public RateInfo getTcpInTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.tcpInTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getTcpInTrafficBuilder() {
                    onChanged();
                    return getTcpInTrafficFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getTcpInTrafficOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.tcpInTraffic_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfo getTcpOutTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.tcpOutTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getTcpOutTrafficBuilder() {
                    onChanged();
                    return getTcpOutTrafficFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getTcpOutTrafficOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.tcpOutTraffic_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfo getUdpInTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.udpInTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getUdpInTrafficBuilder() {
                    onChanged();
                    return getUdpInTrafficFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getUdpInTrafficOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.udpInTraffic_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public RateInfo getUdpOutTraffic() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo = this.udpOutTraffic_;
                        return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public RateInfo.Builder getUdpOutTrafficBuilder() {
                    onChanged();
                    return getUdpOutTrafficFieldBuilder().getBuilder();
                }

                @Override
                public RateInfoOrBuilder getUdpOutTrafficOrBuilder() {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    RateInfo rateInfo = this.udpOutTraffic_;
                    return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
                }

                @Override
                public int getValidConnectionCount() {
                    return this.validConnectionCount_;
                }

                @Override
                public boolean hasApi() {
                    return (this.apiBuilder_ == null && this.api_ == null) ? false : true;
                }

                @Override
                public boolean hasLatency() {
                    return (this.latencyBuilder_ == null && this.latency_ == null) ? false : true;
                }

                @Override
                public boolean hasTcpInTraffic() {
                    return (this.tcpInTrafficBuilder_ == null && this.tcpInTraffic_ == null) ? false : true;
                }

                @Override
                public boolean hasTcpOutTraffic() {
                    return (this.tcpOutTrafficBuilder_ == null && this.tcpOutTraffic_ == null) ? false : true;
                }

                @Override
                public boolean hasUdpInTraffic() {
                    return (this.udpInTrafficBuilder_ == null && this.udpInTraffic_ == null) ? false : true;
                }

                @Override
                public boolean hasUdpOutTraffic() {
                    return (this.udpOutTrafficBuilder_ == null && this.udpOutTraffic_ == null) ? false : true;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NetInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public Builder mergeApi(ApiInfo apiInfo) {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        ApiInfo apiInfo2 = this.api_;
                        if (apiInfo2 != null) {
                            apiInfo = ApiInfo.newBuilder(apiInfo2).mergeFrom(apiInfo).buildPartial();
                        }
                        this.api_ = apiInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(apiInfo);
                    }
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.MetricsInfo.NetInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$Builder");
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof NetInfo) {
                        return mergeFrom((NetInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(NetInfo netInfo) {
                    if (netInfo == NetInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (netInfo.getErrorProtoCount() != 0) {
                        setErrorProtoCount(netInfo.getErrorProtoCount());
                    }
                    if (netInfo.hasApi()) {
                        mergeApi(netInfo.getApi());
                    }
                    if (netInfo.getConnectionCount() != 0) {
                        setConnectionCount(netInfo.getConnectionCount());
                    }
                    if (netInfo.getValidConnectionCount() != 0) {
                        setValidConnectionCount(netInfo.getValidConnectionCount());
                    }
                    if (netInfo.hasTcpInTraffic()) {
                        mergeTcpInTraffic(netInfo.getTcpInTraffic());
                    }
                    if (netInfo.hasTcpOutTraffic()) {
                        mergeTcpOutTraffic(netInfo.getTcpOutTraffic());
                    }
                    if (netInfo.getDisconnectionCount() != 0) {
                        setDisconnectionCount(netInfo.getDisconnectionCount());
                    }
                    if (this.disconnectionDetailBuilder_ == null) {
                        if (!netInfo.disconnectionDetail_.isEmpty()) {
                            if (this.disconnectionDetail_.isEmpty()) {
                                this.disconnectionDetail_ = netInfo.disconnectionDetail_;
                                this.bitField0_ &= -129;
                            } else {
                                ensureDisconnectionDetailIsMutable();
                                this.disconnectionDetail_.addAll(netInfo.disconnectionDetail_);
                            }
                            onChanged();
                        }
                    } else if (!netInfo.disconnectionDetail_.isEmpty()) {
                        if (this.disconnectionDetailBuilder_.isEmpty()) {
                            this.disconnectionDetailBuilder_.dispose();
                            this.disconnectionDetailBuilder_ = null;
                            this.disconnectionDetail_ = netInfo.disconnectionDetail_;
                            this.bitField0_ &= -129;
                            this.disconnectionDetailBuilder_ = NetInfo.alwaysUseFieldBuilders ? getDisconnectionDetailFieldBuilder() : null;
                        } else {
                            this.disconnectionDetailBuilder_.addAllMessages(netInfo.disconnectionDetail_);
                        }
                    }
                    if (netInfo.hasUdpInTraffic()) {
                        mergeUdpInTraffic(netInfo.getUdpInTraffic());
                    }
                    if (netInfo.hasUdpOutTraffic()) {
                        mergeUdpOutTraffic(netInfo.getUdpOutTraffic());
                    }
                    if (netInfo.hasLatency()) {
                        mergeLatency(netInfo.getLatency());
                    }
                    mergeUnknownFields(netInfo.unknownFields);
                    onChanged();
                    return this;
                }

                public Builder mergeLatency(LatencyInfo latencyInfo) {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        LatencyInfo latencyInfo2 = this.latency_;
                        if (latencyInfo2 != null) {
                            latencyInfo = LatencyInfo.newBuilder(latencyInfo2).mergeFrom(latencyInfo).buildPartial();
                        }
                        this.latency_ = latencyInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(latencyInfo);
                    }
                    return this;
                }

                public Builder mergeTcpInTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.tcpInTraffic_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.tcpInTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                public Builder mergeTcpOutTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.tcpOutTraffic_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.tcpOutTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                public Builder mergeUdpInTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.udpInTraffic_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.udpInTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                public Builder mergeUdpOutTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        RateInfo rateInfo2 = this.udpOutTraffic_;
                        if (rateInfo2 != null) {
                            rateInfo = RateInfo.newBuilder(rateInfo2).mergeFrom(rateInfo).buildPartial();
                        }
                        this.udpOutTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(rateInfo);
                    }
                    return this;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder removeDisconnectionDetail(int i) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Builder setApi(ApiInfo.Builder builder) {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    ApiInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.api_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setApi(ApiInfo apiInfo) {
                    SingleFieldBuilderV3<ApiInfo, ApiInfo.Builder, ApiInfoOrBuilder> singleFieldBuilderV3 = this.apiBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        apiInfo.getClass();
                        this.api_ = apiInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(apiInfo);
                    }
                    return this;
                }

                public Builder setConnectionCount(int i) {
                    this.connectionCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder setDisconnectionCount(int i) {
                    this.disconnectionCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder setDisconnectionDetail(int i, DisconnectionDetailInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder setDisconnectionDetail(int i, DisconnectionDetailInfo disconnectionDetailInfo) {
                    RepeatedFieldBuilderV3<DisconnectionDetailInfo, DisconnectionDetailInfo.Builder, DisconnectionDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.disconnectionDetailBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        disconnectionDetailInfo.getClass();
                        ensureDisconnectionDetailIsMutable();
                        this.disconnectionDetail_.set(i, disconnectionDetailInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, disconnectionDetailInfo);
                    }
                    return this;
                }

                public Builder setErrorProtoCount(int i) {
                    this.errorProtoCount_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                public Builder setLatency(LatencyInfo.Builder builder) {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    LatencyInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.latency_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setLatency(LatencyInfo latencyInfo) {
                    SingleFieldBuilderV3<LatencyInfo, LatencyInfo.Builder, LatencyInfoOrBuilder> singleFieldBuilderV3 = this.latencyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        latencyInfo.getClass();
                        this.latency_ = latencyInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(latencyInfo);
                    }
                    return this;
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                public Builder setTcpInTraffic(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.tcpInTraffic_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setTcpInTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.tcpInTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                public Builder setTcpOutTraffic(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.tcpOutTraffic_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setTcpOutTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.tcpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.tcpOutTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                public Builder setUdpInTraffic(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.udpInTraffic_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setUdpInTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpInTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.udpInTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                public Builder setUdpOutTraffic(RateInfo.Builder builder) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    RateInfo build = builder.build();
                    if (singleFieldBuilderV3 == null) {
                        this.udpOutTraffic_ = build;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(build);
                    }
                    return this;
                }

                public Builder setUdpOutTraffic(RateInfo rateInfo) {
                    SingleFieldBuilderV3<RateInfo, RateInfo.Builder, RateInfoOrBuilder> singleFieldBuilderV3 = this.udpOutTrafficBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        rateInfo.getClass();
                        this.udpOutTraffic_ = rateInfo;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(rateInfo);
                    }
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                public Builder setValidConnectionCount(int i) {
                    this.validConnectionCount_ = i;
                    onChanged();
                    return this;
                }
            }

            public static final class DisconnectionDetailInfo extends GeneratedMessageV3 implements DisconnectionDetailInfoOrBuilder {
                public static final int COUNT_FIELD_NUMBER = 2;
                private static final DisconnectionDetailInfo DEFAULT_INSTANCE = new DisconnectionDetailInfo();
                private static final Parser<DisconnectionDetailInfo> PARSER = new AbstractParser<DisconnectionDetailInfo>() {
                    @Override
                    public DisconnectionDetailInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new DisconnectionDetailInfo(codedInputStream, extensionRegistryLite);
                    }
                };
                public static final int REASON_FIELD_NUMBER = 1;
                private static final long serialVersionUID = 0;
                private int count_;
                private byte memoizedIsInitialized;
                private volatile Object reason_;

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DisconnectionDetailInfoOrBuilder {
                    private int count_;
                    private Object reason_;

                    private Builder() {
                        this.reason_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.reason_ = "";
                        maybeForceBuilderInitialization();
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_descriptor;
                    }

                    private void maybeForceBuilderInitialization() {
                        boolean unused = DisconnectionDetailInfo.alwaysUseFieldBuilders;
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public DisconnectionDetailInfo build() {
                        DisconnectionDetailInfo buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public DisconnectionDetailInfo buildPartial() {
                        DisconnectionDetailInfo disconnectionDetailInfo = new DisconnectionDetailInfo(this);
                        disconnectionDetailInfo.reason_ = this.reason_;
                        disconnectionDetailInfo.count_ = this.count_;
                        onBuilt();
                        return disconnectionDetailInfo;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.reason_ = "";
                        this.count_ = 0;
                        return this;
                    }

                    public Builder clearCount() {
                        this.count_ = 0;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    public Builder clearReason() {
                        this.reason_ = DisconnectionDetailInfo.getDefaultInstance().getReason();
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public int getCount() {
                        return this.count_;
                    }

                    @Override
                    public DisconnectionDetailInfo getDefaultInstanceForType() {
                        return DisconnectionDetailInfo.getDefaultInstance();
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_descriptor;
                    }

                    @Override
                    public String getReason() {
                        Object obj = this.reason_;
                        if (obj instanceof String) {
                            return (String) obj;
                        }
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.reason_ = stringUtf8;
                        return stringUtf8;
                    }

                    @Override
                    public ByteString getReasonBytes() {
                        Object obj = this.reason_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.reason_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DisconnectionDetailInfo.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    @Override
                    public org.tron.protos.Protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$DisconnectionDetailInfo$Builder");
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof DisconnectionDetailInfo) {
                            return mergeFrom((DisconnectionDetailInfo) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(DisconnectionDetailInfo disconnectionDetailInfo) {
                        if (disconnectionDetailInfo == DisconnectionDetailInfo.getDefaultInstance()) {
                            return this;
                        }
                        if (!disconnectionDetailInfo.getReason().isEmpty()) {
                            this.reason_ = disconnectionDetailInfo.reason_;
                            onChanged();
                        }
                        if (disconnectionDetailInfo.getCount() != 0) {
                            setCount(disconnectionDetailInfo.getCount());
                        }
                        mergeUnknownFields(disconnectionDetailInfo.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }

                    public Builder setCount(int i) {
                        this.count_ = i;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    public Builder setReason(String str) {
                        str.getClass();
                        this.reason_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder setReasonBytes(ByteString byteString) {
                        byteString.getClass();
                        DisconnectionDetailInfo.checkByteStringIsUtf8(byteString);
                        this.reason_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }
                }

                private DisconnectionDetailInfo() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.reason_ = "";
                    this.count_ = 0;
                }

                private DisconnectionDetailInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    while (!z) {
                        try {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag == 10) {
                                            this.reason_ = codedInputStream.readStringRequireUtf8();
                                        } else if (readTag == 16) {
                                            this.count_ = codedInputStream.readInt32();
                                        } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    }
                                    z = true;
                                } catch (IOException e) {
                                    throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                                }
                            } catch (InvalidProtocolBufferException e2) {
                                throw e2.setUnfinishedMessage(this);
                            }
                        } finally {
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                private DisconnectionDetailInfo(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                public static DisconnectionDetailInfo getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_descriptor;
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(DisconnectionDetailInfo disconnectionDetailInfo) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(disconnectionDetailInfo);
                }

                public static DisconnectionDetailInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static DisconnectionDetailInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DisconnectionDetailInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static DisconnectionDetailInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static DisconnectionDetailInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static DisconnectionDetailInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                public static DisconnectionDetailInfo parseFrom(InputStream inputStream) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static DisconnectionDetailInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DisconnectionDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DisconnectionDetailInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static DisconnectionDetailInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static DisconnectionDetailInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static DisconnectionDetailInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static Parser<DisconnectionDetailInfo> parser() {
                    return PARSER;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (obj instanceof DisconnectionDetailInfo) {
                        DisconnectionDetailInfo disconnectionDetailInfo = (DisconnectionDetailInfo) obj;
                        return getReason().equals(disconnectionDetailInfo.getReason()) && getCount() == disconnectionDetailInfo.getCount() && this.unknownFields.equals(disconnectionDetailInfo.unknownFields);
                    }
                    return super.equals(obj);
                }

                @Override
                public int getCount() {
                    return this.count_;
                }

                @Override
                public DisconnectionDetailInfo getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public Parser<DisconnectionDetailInfo> getParserForType() {
                    return PARSER;
                }

                @Override
                public String getReason() {
                    Object obj = this.reason_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.reason_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getReasonBytes() {
                    Object obj = this.reason_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.reason_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeStringSize = !getReasonBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.reason_) : 0;
                    int i2 = this.count_;
                    if (i2 != 0) {
                        computeStringSize += CodedOutputStream.computeInt32Size(2, i2);
                    }
                    int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getReason().hashCode()) * 37) + 2) * 53) + getCount()) * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode;
                    return hashCode;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DisconnectionDetailInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (!getReasonBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 1, this.reason_);
                    }
                    int i = this.count_;
                    if (i != 0) {
                        codedOutputStream.writeInt32(2, i);
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }
            }

            public interface DisconnectionDetailInfoOrBuilder extends MessageOrBuilder {
                int getCount();

                String getReason();

                ByteString getReasonBytes();
            }

            public static final class LatencyInfo extends GeneratedMessageV3 implements LatencyInfoOrBuilder {
                public static final int DELAY1S_FIELD_NUMBER = 5;
                public static final int DELAY2S_FIELD_NUMBER = 6;
                public static final int DELAY3S_FIELD_NUMBER = 7;
                public static final int DETAIL_FIELD_NUMBER = 8;
                public static final int TOP75_FIELD_NUMBER = 3;
                public static final int TOP95_FIELD_NUMBER = 2;
                public static final int TOP99_FIELD_NUMBER = 1;
                public static final int TOTALCOUNT_FIELD_NUMBER = 4;
                private static final long serialVersionUID = 0;
                private int bitField0_;
                private int delay1S_;
                private int delay2S_;
                private int delay3S_;
                private List<LatencyDetailInfo> detail_;
                private byte memoizedIsInitialized;
                private int top75_;
                private int top95_;
                private int top99_;
                private int totalCount_;
                private static final LatencyInfo DEFAULT_INSTANCE = new LatencyInfo();
                private static final Parser<LatencyInfo> PARSER = new AbstractParser<LatencyInfo>() {
                    @Override
                    public LatencyInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new LatencyInfo(codedInputStream, extensionRegistryLite);
                    }
                };

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements LatencyInfoOrBuilder {
                    private int bitField0_;
                    private int delay1S_;
                    private int delay2S_;
                    private int delay3S_;
                    private RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> detailBuilder_;
                    private List<LatencyDetailInfo> detail_;
                    private int top75_;
                    private int top95_;
                    private int top99_;
                    private int totalCount_;

                    private Builder() {
                        this.detail_ = Collections.emptyList();
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.detail_ = Collections.emptyList();
                        maybeForceBuilderInitialization();
                    }

                    private void ensureDetailIsMutable() {
                        if ((this.bitField0_ & 128) != 128) {
                            this.detail_ = new ArrayList(this.detail_);
                            this.bitField0_ |= 128;
                        }
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_descriptor;
                    }

                    private RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> getDetailFieldBuilder() {
                        if (this.detailBuilder_ == null) {
                            this.detailBuilder_ = new RepeatedFieldBuilderV3<>(this.detail_, (this.bitField0_ & 128) == 128, getParentForChildren(), isClean());
                            this.detail_ = null;
                        }
                        return this.detailBuilder_;
                    }

                    private void maybeForceBuilderInitialization() {
                        if (LatencyInfo.alwaysUseFieldBuilders) {
                            getDetailFieldBuilder();
                        }
                    }

                    public Builder addAllDetail(Iterable<? extends LatencyDetailInfo> iterable) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.detail_);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addAllMessages(iterable);
                        }
                        return this;
                    }

                    public Builder addDetail(int i, LatencyDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.add(i, builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(i, builder.build());
                        }
                        return this;
                    }

                    public Builder addDetail(int i, LatencyDetailInfo latencyDetailInfo) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            latencyDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.add(i, latencyDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(i, latencyDetailInfo);
                        }
                        return this;
                    }

                    public Builder addDetail(LatencyDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.add(builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(builder.build());
                        }
                        return this;
                    }

                    public Builder addDetail(LatencyDetailInfo latencyDetailInfo) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            latencyDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.add(latencyDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.addMessage(latencyDetailInfo);
                        }
                        return this;
                    }

                    public LatencyDetailInfo.Builder addDetailBuilder() {
                        return getDetailFieldBuilder().addBuilder(LatencyDetailInfo.getDefaultInstance());
                    }

                    public LatencyDetailInfo.Builder addDetailBuilder(int i) {
                        return getDetailFieldBuilder().addBuilder(i, LatencyDetailInfo.getDefaultInstance());
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public LatencyInfo build() {
                        LatencyInfo buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public LatencyInfo buildPartial() {
                        List<LatencyDetailInfo> build;
                        LatencyInfo latencyInfo = new LatencyInfo(this);
                        latencyInfo.top99_ = this.top99_;
                        latencyInfo.top95_ = this.top95_;
                        latencyInfo.top75_ = this.top75_;
                        latencyInfo.totalCount_ = this.totalCount_;
                        latencyInfo.delay1S_ = this.delay1S_;
                        latencyInfo.delay2S_ = this.delay2S_;
                        latencyInfo.delay3S_ = this.delay3S_;
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            if ((this.bitField0_ & 128) == 128) {
                                this.detail_ = Collections.unmodifiableList(this.detail_);
                                this.bitField0_ &= -129;
                            }
                            build = this.detail_;
                        } else {
                            build = repeatedFieldBuilderV3.build();
                        }
                        latencyInfo.detail_ = build;
                        latencyInfo.bitField0_ = 0;
                        onBuilt();
                        return latencyInfo;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.top99_ = 0;
                        this.top95_ = 0;
                        this.top75_ = 0;
                        this.totalCount_ = 0;
                        this.delay1S_ = 0;
                        this.delay2S_ = 0;
                        this.delay3S_ = 0;
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            this.detail_ = Collections.emptyList();
                            this.bitField0_ &= -129;
                        } else {
                            repeatedFieldBuilderV3.clear();
                        }
                        return this;
                    }

                    public Builder clearDelay1S() {
                        this.delay1S_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearDelay2S() {
                        this.delay2S_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearDelay3S() {
                        this.delay3S_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearDetail() {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            this.detail_ = Collections.emptyList();
                            this.bitField0_ &= -129;
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.clear();
                        }
                        return this;
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    public Builder clearTop75() {
                        this.top75_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearTop95() {
                        this.top95_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearTop99() {
                        this.top99_ = 0;
                        onChanged();
                        return this;
                    }

                    public Builder clearTotalCount() {
                        this.totalCount_ = 0;
                        onChanged();
                        return this;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public LatencyInfo getDefaultInstanceForType() {
                        return LatencyInfo.getDefaultInstance();
                    }

                    @Override
                    public int getDelay1S() {
                        return this.delay1S_;
                    }

                    @Override
                    public int getDelay2S() {
                        return this.delay2S_;
                    }

                    @Override
                    public int getDelay3S() {
                        return this.delay3S_;
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_descriptor;
                    }

                    @Override
                    public LatencyDetailInfo getDetail(int i) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? this.detail_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                    }

                    public LatencyDetailInfo.Builder getDetailBuilder(int i) {
                        return getDetailFieldBuilder().getBuilder(i);
                    }

                    public List<LatencyDetailInfo.Builder> getDetailBuilderList() {
                        return getDetailFieldBuilder().getBuilderList();
                    }

                    @Override
                    public int getDetailCount() {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? this.detail_.size() : repeatedFieldBuilderV3.getCount();
                    }

                    @Override
                    public List<LatencyDetailInfo> getDetailList() {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.detail_) : repeatedFieldBuilderV3.getMessageList();
                    }

                    @Override
                    public LatencyDetailInfoOrBuilder getDetailOrBuilder(int i) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return (LatencyDetailInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.detail_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                    }

                    @Override
                    public List<? extends LatencyDetailInfoOrBuilder> getDetailOrBuilderList() {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.detail_);
                    }

                    @Override
                    public int getTop75() {
                        return this.top75_;
                    }

                    @Override
                    public int getTop95() {
                        return this.top95_;
                    }

                    @Override
                    public int getTop99() {
                        return this.top99_;
                    }

                    @Override
                    public int getTotalCount() {
                        return this.totalCount_;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(LatencyInfo.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    @Override
                    public org.tron.protos.Protocol.MetricsInfo.NetInfo.LatencyInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.LatencyInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$LatencyInfo$Builder");
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof LatencyInfo) {
                            return mergeFrom((LatencyInfo) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(LatencyInfo latencyInfo) {
                        if (latencyInfo == LatencyInfo.getDefaultInstance()) {
                            return this;
                        }
                        if (latencyInfo.getTop99() != 0) {
                            setTop99(latencyInfo.getTop99());
                        }
                        if (latencyInfo.getTop95() != 0) {
                            setTop95(latencyInfo.getTop95());
                        }
                        if (latencyInfo.getTop75() != 0) {
                            setTop75(latencyInfo.getTop75());
                        }
                        if (latencyInfo.getTotalCount() != 0) {
                            setTotalCount(latencyInfo.getTotalCount());
                        }
                        if (latencyInfo.getDelay1S() != 0) {
                            setDelay1S(latencyInfo.getDelay1S());
                        }
                        if (latencyInfo.getDelay2S() != 0) {
                            setDelay2S(latencyInfo.getDelay2S());
                        }
                        if (latencyInfo.getDelay3S() != 0) {
                            setDelay3S(latencyInfo.getDelay3S());
                        }
                        if (this.detailBuilder_ == null) {
                            if (!latencyInfo.detail_.isEmpty()) {
                                if (this.detail_.isEmpty()) {
                                    this.detail_ = latencyInfo.detail_;
                                    this.bitField0_ &= -129;
                                } else {
                                    ensureDetailIsMutable();
                                    this.detail_.addAll(latencyInfo.detail_);
                                }
                                onChanged();
                            }
                        } else if (!latencyInfo.detail_.isEmpty()) {
                            if (this.detailBuilder_.isEmpty()) {
                                this.detailBuilder_.dispose();
                                this.detailBuilder_ = null;
                                this.detail_ = latencyInfo.detail_;
                                this.bitField0_ &= -129;
                                this.detailBuilder_ = LatencyInfo.alwaysUseFieldBuilders ? getDetailFieldBuilder() : null;
                            } else {
                                this.detailBuilder_.addAllMessages(latencyInfo.detail_);
                            }
                        }
                        mergeUnknownFields(latencyInfo.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }

                    public Builder removeDetail(int i) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.remove(i);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.remove(i);
                        }
                        return this;
                    }

                    public Builder setDelay1S(int i) {
                        this.delay1S_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setDelay2S(int i) {
                        this.delay2S_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setDelay3S(int i) {
                        this.delay3S_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setDetail(int i, LatencyDetailInfo.Builder builder) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            ensureDetailIsMutable();
                            this.detail_.set(i, builder.build());
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.setMessage(i, builder.build());
                        }
                        return this;
                    }

                    public Builder setDetail(int i, LatencyDetailInfo latencyDetailInfo) {
                        RepeatedFieldBuilderV3<LatencyDetailInfo, LatencyDetailInfo.Builder, LatencyDetailInfoOrBuilder> repeatedFieldBuilderV3 = this.detailBuilder_;
                        if (repeatedFieldBuilderV3 == null) {
                            latencyDetailInfo.getClass();
                            ensureDetailIsMutable();
                            this.detail_.set(i, latencyDetailInfo);
                            onChanged();
                        } else {
                            repeatedFieldBuilderV3.setMessage(i, latencyDetailInfo);
                        }
                        return this;
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    public Builder setTop75(int i) {
                        this.top75_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setTop95(int i) {
                        this.top95_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setTop99(int i) {
                        this.top99_ = i;
                        onChanged();
                        return this;
                    }

                    public Builder setTotalCount(int i) {
                        this.totalCount_ = i;
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }
                }

                public static final class LatencyDetailInfo extends GeneratedMessageV3 implements LatencyDetailInfoOrBuilder {
                    public static final int COUNT_FIELD_NUMBER = 5;
                    public static final int DELAY1S_FIELD_NUMBER = 6;
                    public static final int DELAY2S_FIELD_NUMBER = 7;
                    public static final int DELAY3S_FIELD_NUMBER = 8;
                    public static final int TOP75_FIELD_NUMBER = 4;
                    public static final int TOP95_FIELD_NUMBER = 3;
                    public static final int TOP99_FIELD_NUMBER = 2;
                    public static final int WITNESS_FIELD_NUMBER = 1;
                    private static final long serialVersionUID = 0;
                    private int count_;
                    private int delay1S_;
                    private int delay2S_;
                    private int delay3S_;
                    private byte memoizedIsInitialized;
                    private int top75_;
                    private int top95_;
                    private int top99_;
                    private volatile Object witness_;
                    private static final LatencyDetailInfo DEFAULT_INSTANCE = new LatencyDetailInfo();
                    private static final Parser<LatencyDetailInfo> PARSER = new AbstractParser<LatencyDetailInfo>() {
                        @Override
                        public LatencyDetailInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                            return new LatencyDetailInfo(codedInputStream, extensionRegistryLite);
                        }
                    };

                    public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements LatencyDetailInfoOrBuilder {
                        private int count_;
                        private int delay1S_;
                        private int delay2S_;
                        private int delay3S_;
                        private int top75_;
                        private int top95_;
                        private int top99_;
                        private Object witness_;

                        private Builder() {
                            this.witness_ = "";
                            maybeForceBuilderInitialization();
                        }

                        private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                            super(builderParent);
                            this.witness_ = "";
                            maybeForceBuilderInitialization();
                        }

                        public static final Descriptors.Descriptor getDescriptor() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_descriptor;
                        }

                        private void maybeForceBuilderInitialization() {
                            boolean unused = LatencyDetailInfo.alwaysUseFieldBuilders;
                        }

                        @Override
                        public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                            return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                        }

                        @Override
                        public LatencyDetailInfo build() {
                            LatencyDetailInfo buildPartial = buildPartial();
                            if (buildPartial.isInitialized()) {
                                return buildPartial;
                            }
                            throw newUninitializedMessageException((Message) buildPartial);
                        }

                        @Override
                        public LatencyDetailInfo buildPartial() {
                            LatencyDetailInfo latencyDetailInfo = new LatencyDetailInfo(this);
                            latencyDetailInfo.witness_ = this.witness_;
                            latencyDetailInfo.top99_ = this.top99_;
                            latencyDetailInfo.top95_ = this.top95_;
                            latencyDetailInfo.top75_ = this.top75_;
                            latencyDetailInfo.count_ = this.count_;
                            latencyDetailInfo.delay1S_ = this.delay1S_;
                            latencyDetailInfo.delay2S_ = this.delay2S_;
                            latencyDetailInfo.delay3S_ = this.delay3S_;
                            onBuilt();
                            return latencyDetailInfo;
                        }

                        @Override
                        public Builder clear() {
                            super.clear();
                            this.witness_ = "";
                            this.top99_ = 0;
                            this.top95_ = 0;
                            this.top75_ = 0;
                            this.count_ = 0;
                            this.delay1S_ = 0;
                            this.delay2S_ = 0;
                            this.delay3S_ = 0;
                            return this;
                        }

                        public Builder clearCount() {
                            this.count_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearDelay1S() {
                            this.delay1S_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearDelay2S() {
                            this.delay2S_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearDelay3S() {
                            this.delay3S_ = 0;
                            onChanged();
                            return this;
                        }

                        @Override
                        public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                            return (Builder) super.clearField(fieldDescriptor);
                        }

                        @Override
                        public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                            return (Builder) super.clearOneof(oneofDescriptor);
                        }

                        public Builder clearTop75() {
                            this.top75_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearTop95() {
                            this.top95_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearTop99() {
                            this.top99_ = 0;
                            onChanged();
                            return this;
                        }

                        public Builder clearWitness() {
                            this.witness_ = LatencyDetailInfo.getDefaultInstance().getWitness();
                            onChanged();
                            return this;
                        }

                        @Override
                        public Builder clone() {
                            return (Builder) super.clone();
                        }

                        @Override
                        public int getCount() {
                            return this.count_;
                        }

                        @Override
                        public LatencyDetailInfo getDefaultInstanceForType() {
                            return LatencyDetailInfo.getDefaultInstance();
                        }

                        @Override
                        public int getDelay1S() {
                            return this.delay1S_;
                        }

                        @Override
                        public int getDelay2S() {
                            return this.delay2S_;
                        }

                        @Override
                        public int getDelay3S() {
                            return this.delay3S_;
                        }

                        @Override
                        public Descriptors.Descriptor getDescriptorForType() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_descriptor;
                        }

                        @Override
                        public int getTop75() {
                            return this.top75_;
                        }

                        @Override
                        public int getTop95() {
                            return this.top95_;
                        }

                        @Override
                        public int getTop99() {
                            return this.top99_;
                        }

                        @Override
                        public String getWitness() {
                            Object obj = this.witness_;
                            if (obj instanceof String) {
                                return (String) obj;
                            }
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.witness_ = stringUtf8;
                            return stringUtf8;
                        }

                        @Override
                        public ByteString getWitnessBytes() {
                            Object obj = this.witness_;
                            if (obj instanceof String) {
                                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                                this.witness_ = copyFromUtf8;
                                return copyFromUtf8;
                            }
                            return (ByteString) obj;
                        }

                        @Override
                        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                            return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(LatencyDetailInfo.class, Builder.class);
                        }

                        @Override
                        public final boolean isInitialized() {
                            return true;
                        }

                        @Override
                        public org.tron.protos.Protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                            


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.LatencyInfo.LatencyDetailInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NetInfo$LatencyInfo$LatencyDetailInfo$Builder");
                        }

                        @Override
                        public Builder mergeFrom(Message message) {
                            if (message instanceof LatencyDetailInfo) {
                                return mergeFrom((LatencyDetailInfo) message);
                            }
                            super.mergeFrom(message);
                            return this;
                        }

                        public Builder mergeFrom(LatencyDetailInfo latencyDetailInfo) {
                            if (latencyDetailInfo == LatencyDetailInfo.getDefaultInstance()) {
                                return this;
                            }
                            if (!latencyDetailInfo.getWitness().isEmpty()) {
                                this.witness_ = latencyDetailInfo.witness_;
                                onChanged();
                            }
                            if (latencyDetailInfo.getTop99() != 0) {
                                setTop99(latencyDetailInfo.getTop99());
                            }
                            if (latencyDetailInfo.getTop95() != 0) {
                                setTop95(latencyDetailInfo.getTop95());
                            }
                            if (latencyDetailInfo.getTop75() != 0) {
                                setTop75(latencyDetailInfo.getTop75());
                            }
                            if (latencyDetailInfo.getCount() != 0) {
                                setCount(latencyDetailInfo.getCount());
                            }
                            if (latencyDetailInfo.getDelay1S() != 0) {
                                setDelay1S(latencyDetailInfo.getDelay1S());
                            }
                            if (latencyDetailInfo.getDelay2S() != 0) {
                                setDelay2S(latencyDetailInfo.getDelay2S());
                            }
                            if (latencyDetailInfo.getDelay3S() != 0) {
                                setDelay3S(latencyDetailInfo.getDelay3S());
                            }
                            mergeUnknownFields(latencyDetailInfo.unknownFields);
                            onChanged();
                            return this;
                        }

                        @Override
                        public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                            return (Builder) super.mergeUnknownFields(unknownFieldSet);
                        }

                        public Builder setCount(int i) {
                            this.count_ = i;
                            onChanged();
                            return this;
                        }

                        public Builder setDelay1S(int i) {
                            this.delay1S_ = i;
                            onChanged();
                            return this;
                        }

                        public Builder setDelay2S(int i) {
                            this.delay2S_ = i;
                            onChanged();
                            return this;
                        }

                        public Builder setDelay3S(int i) {
                            this.delay3S_ = i;
                            onChanged();
                            return this;
                        }

                        @Override
                        public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                            return (Builder) super.setField(fieldDescriptor, obj);
                        }

                        @Override
                        public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                            return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                        }

                        public Builder setTop75(int i) {
                            this.top75_ = i;
                            onChanged();
                            return this;
                        }

                        public Builder setTop95(int i) {
                            this.top95_ = i;
                            onChanged();
                            return this;
                        }

                        public Builder setTop99(int i) {
                            this.top99_ = i;
                            onChanged();
                            return this;
                        }

                        @Override
                        public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                            return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                        }

                        public Builder setWitness(String str) {
                            str.getClass();
                            this.witness_ = str;
                            onChanged();
                            return this;
                        }

                        public Builder setWitnessBytes(ByteString byteString) {
                            byteString.getClass();
                            LatencyDetailInfo.checkByteStringIsUtf8(byteString);
                            this.witness_ = byteString;
                            onChanged();
                            return this;
                        }
                    }

                    private LatencyDetailInfo() {
                        this.memoizedIsInitialized = (byte) -1;
                        this.witness_ = "";
                        this.top99_ = 0;
                        this.top95_ = 0;
                        this.top75_ = 0;
                        this.count_ = 0;
                        this.delay1S_ = 0;
                        this.delay2S_ = 0;
                        this.delay3S_ = 0;
                    }

                    private LatencyDetailInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        this();
                        extensionRegistryLite.getClass();
                        UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                        boolean z = false;
                        while (!z) {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag == 10) {
                                            this.witness_ = codedInputStream.readStringRequireUtf8();
                                        } else if (readTag == 16) {
                                            this.top99_ = codedInputStream.readInt32();
                                        } else if (readTag == 24) {
                                            this.top95_ = codedInputStream.readInt32();
                                        } else if (readTag == 32) {
                                            this.top75_ = codedInputStream.readInt32();
                                        } else if (readTag == 40) {
                                            this.count_ = codedInputStream.readInt32();
                                        } else if (readTag == 48) {
                                            this.delay1S_ = codedInputStream.readInt32();
                                        } else if (readTag == 56) {
                                            this.delay2S_ = codedInputStream.readInt32();
                                        } else if (readTag == 64) {
                                            this.delay3S_ = codedInputStream.readInt32();
                                        } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    }
                                    z = true;
                                } catch (InvalidProtocolBufferException e) {
                                    throw e.setUnfinishedMessage(this);
                                } catch (IOException e2) {
                                    throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                                }
                            } finally {
                                this.unknownFields = newBuilder.build();
                                makeExtensionsImmutable();
                            }
                        }
                    }

                    private LatencyDetailInfo(GeneratedMessageV3.Builder<?> builder) {
                        super(builder);
                        this.memoizedIsInitialized = (byte) -1;
                    }

                    public static LatencyDetailInfo getDefaultInstance() {
                        return DEFAULT_INSTANCE;
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_descriptor;
                    }

                    public static Builder newBuilder() {
                        return DEFAULT_INSTANCE.toBuilder();
                    }

                    public static Builder newBuilder(LatencyDetailInfo latencyDetailInfo) {
                        return DEFAULT_INSTANCE.toBuilder().mergeFrom(latencyDetailInfo);
                    }

                    public static LatencyDetailInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                    }

                    public static LatencyDetailInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                    }

                    public static LatencyDetailInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteString);
                    }

                    public static LatencyDetailInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteString, extensionRegistryLite);
                    }

                    public static LatencyDetailInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                    }

                    public static LatencyDetailInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                    }

                    public static LatencyDetailInfo parseFrom(InputStream inputStream) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                    }

                    public static LatencyDetailInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                        return (LatencyDetailInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                    }

                    public static LatencyDetailInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteBuffer);
                    }

                    public static LatencyDetailInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                    }

                    public static LatencyDetailInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(bArr);
                    }

                    public static LatencyDetailInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return PARSER.parseFrom(bArr, extensionRegistryLite);
                    }

                    public static Parser<LatencyDetailInfo> parser() {
                        return PARSER;
                    }

                    @Override
                    public boolean equals(Object obj) {
                        if (obj == this) {
                            return true;
                        }
                        if (obj instanceof LatencyDetailInfo) {
                            LatencyDetailInfo latencyDetailInfo = (LatencyDetailInfo) obj;
                            return getWitness().equals(latencyDetailInfo.getWitness()) && getTop99() == latencyDetailInfo.getTop99() && getTop95() == latencyDetailInfo.getTop95() && getTop75() == latencyDetailInfo.getTop75() && getCount() == latencyDetailInfo.getCount() && getDelay1S() == latencyDetailInfo.getDelay1S() && getDelay2S() == latencyDetailInfo.getDelay2S() && getDelay3S() == latencyDetailInfo.getDelay3S() && this.unknownFields.equals(latencyDetailInfo.unknownFields);
                        }
                        return super.equals(obj);
                    }

                    @Override
                    public int getCount() {
                        return this.count_;
                    }

                    @Override
                    public LatencyDetailInfo getDefaultInstanceForType() {
                        return DEFAULT_INSTANCE;
                    }

                    @Override
                    public int getDelay1S() {
                        return this.delay1S_;
                    }

                    @Override
                    public int getDelay2S() {
                        return this.delay2S_;
                    }

                    @Override
                    public int getDelay3S() {
                        return this.delay3S_;
                    }

                    @Override
                    public Parser<LatencyDetailInfo> getParserForType() {
                        return PARSER;
                    }

                    @Override
                    public int getSerializedSize() {
                        int i = this.memoizedSize;
                        if (i != -1) {
                            return i;
                        }
                        int computeStringSize = !getWitnessBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.witness_) : 0;
                        int i2 = this.top99_;
                        if (i2 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(2, i2);
                        }
                        int i3 = this.top95_;
                        if (i3 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(3, i3);
                        }
                        int i4 = this.top75_;
                        if (i4 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(4, i4);
                        }
                        int i5 = this.count_;
                        if (i5 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(5, i5);
                        }
                        int i6 = this.delay1S_;
                        if (i6 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(6, i6);
                        }
                        int i7 = this.delay2S_;
                        if (i7 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(7, i7);
                        }
                        int i8 = this.delay3S_;
                        if (i8 != 0) {
                            computeStringSize += CodedOutputStream.computeInt32Size(8, i8);
                        }
                        int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                        this.memoizedSize = serializedSize;
                        return serializedSize;
                    }

                    @Override
                    public int getTop75() {
                        return this.top75_;
                    }

                    @Override
                    public int getTop95() {
                        return this.top95_;
                    }

                    @Override
                    public int getTop99() {
                        return this.top99_;
                    }

                    @Override
                    public final UnknownFieldSet getUnknownFields() {
                        return this.unknownFields;
                    }

                    @Override
                    public String getWitness() {
                        Object obj = this.witness_;
                        if (obj instanceof String) {
                            return (String) obj;
                        }
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.witness_ = stringUtf8;
                        return stringUtf8;
                    }

                    @Override
                    public ByteString getWitnessBytes() {
                        Object obj = this.witness_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.witness_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    @Override
                    public int hashCode() {
                        if (this.memoizedHashCode != 0) {
                            return this.memoizedHashCode;
                        }
                        int hashCode = ((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getWitness().hashCode()) * 37) + 2) * 53) + getTop99()) * 37) + 3) * 53) + getTop95()) * 37) + 4) * 53) + getTop75()) * 37) + 5) * 53) + getCount()) * 37) + 6) * 53) + getDelay1S()) * 37) + 7) * 53) + getDelay2S()) * 37) + 8) * 53) + getDelay3S()) * 29) + this.unknownFields.hashCode();
                        this.memoizedHashCode = hashCode;
                        return hashCode;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(LatencyDetailInfo.class, Builder.class);
                    }

                    @Override
                    public final boolean isInitialized() {
                        byte b = this.memoizedIsInitialized;
                        if (b == 1) {
                            return true;
                        }
                        if (b == 0) {
                            return false;
                        }
                        this.memoizedIsInitialized = (byte) 1;
                        return true;
                    }

                    @Override
                    public Builder newBuilderForType() {
                        return newBuilder();
                    }

                    @Override
                    public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                        return new Builder(builderParent);
                    }

                    @Override
                    public Builder toBuilder() {
                        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                    }

                    @Override
                    public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                        if (!getWitnessBytes().isEmpty()) {
                            GeneratedMessageV3.writeString(codedOutputStream, 1, this.witness_);
                        }
                        int i = this.top99_;
                        if (i != 0) {
                            codedOutputStream.writeInt32(2, i);
                        }
                        int i2 = this.top95_;
                        if (i2 != 0) {
                            codedOutputStream.writeInt32(3, i2);
                        }
                        int i3 = this.top75_;
                        if (i3 != 0) {
                            codedOutputStream.writeInt32(4, i3);
                        }
                        int i4 = this.count_;
                        if (i4 != 0) {
                            codedOutputStream.writeInt32(5, i4);
                        }
                        int i5 = this.delay1S_;
                        if (i5 != 0) {
                            codedOutputStream.writeInt32(6, i5);
                        }
                        int i6 = this.delay2S_;
                        if (i6 != 0) {
                            codedOutputStream.writeInt32(7, i6);
                        }
                        int i7 = this.delay3S_;
                        if (i7 != 0) {
                            codedOutputStream.writeInt32(8, i7);
                        }
                        this.unknownFields.writeTo(codedOutputStream);
                    }
                }

                public interface LatencyDetailInfoOrBuilder extends MessageOrBuilder {
                    int getCount();

                    int getDelay1S();

                    int getDelay2S();

                    int getDelay3S();

                    int getTop75();

                    int getTop95();

                    int getTop99();

                    String getWitness();

                    ByteString getWitnessBytes();
                }

                private LatencyInfo() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.top99_ = 0;
                    this.top95_ = 0;
                    this.top75_ = 0;
                    this.totalCount_ = 0;
                    this.delay1S_ = 0;
                    this.delay2S_ = 0;
                    this.delay3S_ = 0;
                    this.detail_ = Collections.emptyList();
                }

                private LatencyInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    boolean z2 = false;
                    while (true) {
                        if (z) {
                            break;
                        }
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.top99_ = codedInputStream.readInt32();
                                    } else if (readTag == 16) {
                                        this.top95_ = codedInputStream.readInt32();
                                    } else if (readTag == 24) {
                                        this.top75_ = codedInputStream.readInt32();
                                    } else if (readTag == 32) {
                                        this.totalCount_ = codedInputStream.readInt32();
                                    } else if (readTag == 40) {
                                        this.delay1S_ = codedInputStream.readInt32();
                                    } else if (readTag == 48) {
                                        this.delay2S_ = codedInputStream.readInt32();
                                    } else if (readTag == 56) {
                                        this.delay3S_ = codedInputStream.readInt32();
                                    } else if (readTag == 66) {
                                        if (!(z2 & true)) {
                                            this.detail_ = new ArrayList();
                                            z2 |= true;
                                        }
                                        this.detail_.add((LatencyDetailInfo) codedInputStream.readMessage(LatencyDetailInfo.parser(), extensionRegistryLite));
                                    } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            } catch (IOException e2) {
                                throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                            }
                        } finally {
                            if (z2 & true) {
                                this.detail_ = Collections.unmodifiableList(this.detail_);
                            }
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                private LatencyInfo(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                public static LatencyInfo getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_descriptor;
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(LatencyInfo latencyInfo) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(latencyInfo);
                }

                public static LatencyInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static LatencyInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static LatencyInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static LatencyInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static LatencyInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static LatencyInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                public static LatencyInfo parseFrom(InputStream inputStream) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static LatencyInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (LatencyInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static LatencyInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static LatencyInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static LatencyInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static LatencyInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static Parser<LatencyInfo> parser() {
                    return PARSER;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (obj instanceof LatencyInfo) {
                        LatencyInfo latencyInfo = (LatencyInfo) obj;
                        return getTop99() == latencyInfo.getTop99() && getTop95() == latencyInfo.getTop95() && getTop75() == latencyInfo.getTop75() && getTotalCount() == latencyInfo.getTotalCount() && getDelay1S() == latencyInfo.getDelay1S() && getDelay2S() == latencyInfo.getDelay2S() && getDelay3S() == latencyInfo.getDelay3S() && getDetailList().equals(latencyInfo.getDetailList()) && this.unknownFields.equals(latencyInfo.unknownFields);
                    }
                    return super.equals(obj);
                }

                @Override
                public LatencyInfo getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public int getDelay1S() {
                    return this.delay1S_;
                }

                @Override
                public int getDelay2S() {
                    return this.delay2S_;
                }

                @Override
                public int getDelay3S() {
                    return this.delay3S_;
                }

                @Override
                public LatencyDetailInfo getDetail(int i) {
                    return this.detail_.get(i);
                }

                @Override
                public int getDetailCount() {
                    return this.detail_.size();
                }

                @Override
                public List<LatencyDetailInfo> getDetailList() {
                    return this.detail_;
                }

                @Override
                public LatencyDetailInfoOrBuilder getDetailOrBuilder(int i) {
                    return this.detail_.get(i);
                }

                @Override
                public List<? extends LatencyDetailInfoOrBuilder> getDetailOrBuilderList() {
                    return this.detail_;
                }

                @Override
                public Parser<LatencyInfo> getParserForType() {
                    return PARSER;
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int i2 = this.top99_;
                    int computeInt32Size = i2 != 0 ? CodedOutputStream.computeInt32Size(1, i2) : 0;
                    int i3 = this.top95_;
                    if (i3 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(2, i3);
                    }
                    int i4 = this.top75_;
                    if (i4 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(3, i4);
                    }
                    int i5 = this.totalCount_;
                    if (i5 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(4, i5);
                    }
                    int i6 = this.delay1S_;
                    if (i6 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(5, i6);
                    }
                    int i7 = this.delay2S_;
                    if (i7 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(6, i7);
                    }
                    int i8 = this.delay3S_;
                    if (i8 != 0) {
                        computeInt32Size += CodedOutputStream.computeInt32Size(7, i8);
                    }
                    for (int i9 = 0; i9 < this.detail_.size(); i9++) {
                        computeInt32Size += CodedOutputStream.computeMessageSize(8, this.detail_.get(i9));
                    }
                    int serializedSize = computeInt32Size + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public int getTop75() {
                    return this.top75_;
                }

                @Override
                public int getTop95() {
                    return this.top95_;
                }

                @Override
                public int getTop99() {
                    return this.top99_;
                }

                @Override
                public int getTotalCount() {
                    return this.totalCount_;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getTop99()) * 37) + 2) * 53) + getTop95()) * 37) + 3) * 53) + getTop75()) * 37) + 4) * 53) + getTotalCount()) * 37) + 5) * 53) + getDelay1S()) * 37) + 6) * 53) + getDelay2S()) * 37) + 7) * 53) + getDelay3S();
                    if (getDetailCount() > 0) {
                        hashCode = (((hashCode * 37) + 8) * 53) + getDetailList().hashCode();
                    }
                    int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode2;
                    return hashCode2;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(LatencyInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    int i = this.top99_;
                    if (i != 0) {
                        codedOutputStream.writeInt32(1, i);
                    }
                    int i2 = this.top95_;
                    if (i2 != 0) {
                        codedOutputStream.writeInt32(2, i2);
                    }
                    int i3 = this.top75_;
                    if (i3 != 0) {
                        codedOutputStream.writeInt32(3, i3);
                    }
                    int i4 = this.totalCount_;
                    if (i4 != 0) {
                        codedOutputStream.writeInt32(4, i4);
                    }
                    int i5 = this.delay1S_;
                    if (i5 != 0) {
                        codedOutputStream.writeInt32(5, i5);
                    }
                    int i6 = this.delay2S_;
                    if (i6 != 0) {
                        codedOutputStream.writeInt32(6, i6);
                    }
                    int i7 = this.delay3S_;
                    if (i7 != 0) {
                        codedOutputStream.writeInt32(7, i7);
                    }
                    for (int i8 = 0; i8 < this.detail_.size(); i8++) {
                        codedOutputStream.writeMessage(8, this.detail_.get(i8));
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }
            }

            public interface LatencyInfoOrBuilder extends MessageOrBuilder {
                int getDelay1S();

                int getDelay2S();

                int getDelay3S();

                LatencyInfo.LatencyDetailInfo getDetail(int i);

                int getDetailCount();

                List<LatencyInfo.LatencyDetailInfo> getDetailList();

                LatencyInfo.LatencyDetailInfoOrBuilder getDetailOrBuilder(int i);

                List<? extends LatencyInfo.LatencyDetailInfoOrBuilder> getDetailOrBuilderList();

                int getTop75();

                int getTop95();

                int getTop99();

                int getTotalCount();
            }

            private NetInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.errorProtoCount_ = 0;
                this.connectionCount_ = 0;
                this.validConnectionCount_ = 0;
                this.disconnectionCount_ = 0;
                this.disconnectionDetail_ = Collections.emptyList();
            }

            private NetInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    ?? r3 = 128;
                    if (z) {
                        return;
                    }
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 8:
                                    this.errorProtoCount_ = codedInputStream.readInt32();
                                    continue;
                                case 18:
                                    ApiInfo apiInfo = this.api_;
                                    ApiInfo.Builder builder = apiInfo != null ? apiInfo.toBuilder() : null;
                                    ApiInfo apiInfo2 = (ApiInfo) codedInputStream.readMessage(ApiInfo.parser(), extensionRegistryLite);
                                    this.api_ = apiInfo2;
                                    if (builder != null) {
                                        builder.mergeFrom(apiInfo2);
                                        this.api_ = builder.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 24:
                                    this.connectionCount_ = codedInputStream.readInt32();
                                    continue;
                                case 32:
                                    this.validConnectionCount_ = codedInputStream.readInt32();
                                    continue;
                                case 42:
                                    RateInfo rateInfo = this.tcpInTraffic_;
                                    RateInfo.Builder builder2 = rateInfo != null ? rateInfo.toBuilder() : null;
                                    RateInfo rateInfo2 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.tcpInTraffic_ = rateInfo2;
                                    if (builder2 != null) {
                                        builder2.mergeFrom(rateInfo2);
                                        this.tcpInTraffic_ = builder2.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 50:
                                    RateInfo rateInfo3 = this.tcpOutTraffic_;
                                    RateInfo.Builder builder3 = rateInfo3 != null ? rateInfo3.toBuilder() : null;
                                    RateInfo rateInfo4 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.tcpOutTraffic_ = rateInfo4;
                                    if (builder3 != null) {
                                        builder3.mergeFrom(rateInfo4);
                                        this.tcpOutTraffic_ = builder3.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 56:
                                    this.disconnectionCount_ = codedInputStream.readInt32();
                                    continue;
                                case 66:
                                    if (!(z2 & true)) {
                                        this.disconnectionDetail_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.disconnectionDetail_.add((DisconnectionDetailInfo) codedInputStream.readMessage(DisconnectionDetailInfo.parser(), extensionRegistryLite));
                                    continue;
                                case 74:
                                    RateInfo rateInfo5 = this.udpInTraffic_;
                                    RateInfo.Builder builder4 = rateInfo5 != null ? rateInfo5.toBuilder() : null;
                                    RateInfo rateInfo6 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.udpInTraffic_ = rateInfo6;
                                    if (builder4 != null) {
                                        builder4.mergeFrom(rateInfo6);
                                        this.udpInTraffic_ = builder4.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 82:
                                    RateInfo rateInfo7 = this.udpOutTraffic_;
                                    RateInfo.Builder builder5 = rateInfo7 != null ? rateInfo7.toBuilder() : null;
                                    RateInfo rateInfo8 = (RateInfo) codedInputStream.readMessage(RateInfo.parser(), extensionRegistryLite);
                                    this.udpOutTraffic_ = rateInfo8;
                                    if (builder5 != null) {
                                        builder5.mergeFrom(rateInfo8);
                                        this.udpOutTraffic_ = builder5.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 90:
                                    LatencyInfo latencyInfo = this.latency_;
                                    LatencyInfo.Builder builder6 = latencyInfo != null ? latencyInfo.toBuilder() : null;
                                    LatencyInfo latencyInfo2 = (LatencyInfo) codedInputStream.readMessage(LatencyInfo.parser(), extensionRegistryLite);
                                    this.latency_ = latencyInfo2;
                                    if (builder6 != null) {
                                        builder6.mergeFrom(latencyInfo2);
                                        this.latency_ = builder6.buildPartial();
                                    } else {
                                        continue;
                                    }
                                default:
                                    r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                    if (r3 == 0) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        if ((z2 & true) == r3) {
                            this.disconnectionDetail_ = Collections.unmodifiableList(this.disconnectionDetail_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            private NetInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            public static NetInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MetricsInfo_NetInfo_descriptor;
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(NetInfo netInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(netInfo);
            }

            public static NetInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static NetInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static NetInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static NetInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static NetInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static NetInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            public static NetInfo parseFrom(InputStream inputStream) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static NetInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NetInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static NetInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static NetInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static NetInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static NetInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Parser<NetInfo> parser() {
                return PARSER;
            }

            @Override
            public boolean equals(java.lang.Object r5) {
                


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NetInfo.equals(java.lang.Object):boolean");
            }

            @Override
            public ApiInfo getApi() {
                ApiInfo apiInfo = this.api_;
                return apiInfo == null ? ApiInfo.getDefaultInstance() : apiInfo;
            }

            @Override
            public ApiInfoOrBuilder getApiOrBuilder() {
                return getApi();
            }

            @Override
            public int getConnectionCount() {
                return this.connectionCount_;
            }

            @Override
            public NetInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public int getDisconnectionCount() {
                return this.disconnectionCount_;
            }

            @Override
            public DisconnectionDetailInfo getDisconnectionDetail(int i) {
                return this.disconnectionDetail_.get(i);
            }

            @Override
            public int getDisconnectionDetailCount() {
                return this.disconnectionDetail_.size();
            }

            @Override
            public List<DisconnectionDetailInfo> getDisconnectionDetailList() {
                return this.disconnectionDetail_;
            }

            @Override
            public DisconnectionDetailInfoOrBuilder getDisconnectionDetailOrBuilder(int i) {
                return this.disconnectionDetail_.get(i);
            }

            @Override
            public List<? extends DisconnectionDetailInfoOrBuilder> getDisconnectionDetailOrBuilderList() {
                return this.disconnectionDetail_;
            }

            @Override
            public int getErrorProtoCount() {
                return this.errorProtoCount_;
            }

            @Override
            public LatencyInfo getLatency() {
                LatencyInfo latencyInfo = this.latency_;
                return latencyInfo == null ? LatencyInfo.getDefaultInstance() : latencyInfo;
            }

            @Override
            public LatencyInfoOrBuilder getLatencyOrBuilder() {
                return getLatency();
            }

            @Override
            public Parser<NetInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int i2 = this.errorProtoCount_;
                int computeInt32Size = i2 != 0 ? CodedOutputStream.computeInt32Size(1, i2) : 0;
                if (this.api_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(2, getApi());
                }
                int i3 = this.connectionCount_;
                if (i3 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt32Size(3, i3);
                }
                int i4 = this.validConnectionCount_;
                if (i4 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt32Size(4, i4);
                }
                if (this.tcpInTraffic_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(5, getTcpInTraffic());
                }
                if (this.tcpOutTraffic_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(6, getTcpOutTraffic());
                }
                int i5 = this.disconnectionCount_;
                if (i5 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt32Size(7, i5);
                }
                for (int i6 = 0; i6 < this.disconnectionDetail_.size(); i6++) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(8, this.disconnectionDetail_.get(i6));
                }
                if (this.udpInTraffic_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(9, getUdpInTraffic());
                }
                if (this.udpOutTraffic_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(10, getUdpOutTraffic());
                }
                if (this.latency_ != null) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(11, getLatency());
                }
                int serializedSize = computeInt32Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public RateInfo getTcpInTraffic() {
                RateInfo rateInfo = this.tcpInTraffic_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getTcpInTrafficOrBuilder() {
                return getTcpInTraffic();
            }

            @Override
            public RateInfo getTcpOutTraffic() {
                RateInfo rateInfo = this.tcpOutTraffic_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getTcpOutTrafficOrBuilder() {
                return getTcpOutTraffic();
            }

            @Override
            public RateInfo getUdpInTraffic() {
                RateInfo rateInfo = this.udpInTraffic_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getUdpInTrafficOrBuilder() {
                return getUdpInTraffic();
            }

            @Override
            public RateInfo getUdpOutTraffic() {
                RateInfo rateInfo = this.udpOutTraffic_;
                return rateInfo == null ? RateInfo.getDefaultInstance() : rateInfo;
            }

            @Override
            public RateInfoOrBuilder getUdpOutTrafficOrBuilder() {
                return getUdpOutTraffic();
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            @Override
            public int getValidConnectionCount() {
                return this.validConnectionCount_;
            }

            @Override
            public boolean hasApi() {
                return this.api_ != null;
            }

            @Override
            public boolean hasLatency() {
                return this.latency_ != null;
            }

            @Override
            public boolean hasTcpInTraffic() {
                return this.tcpInTraffic_ != null;
            }

            @Override
            public boolean hasTcpOutTraffic() {
                return this.tcpOutTraffic_ != null;
            }

            @Override
            public boolean hasUdpInTraffic() {
                return this.udpInTraffic_ != null;
            }

            @Override
            public boolean hasUdpOutTraffic() {
                return this.udpOutTraffic_ != null;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getErrorProtoCount();
                if (hasApi()) {
                    hashCode = (((hashCode * 37) + 2) * 53) + getApi().hashCode();
                }
                int connectionCount = (((((((hashCode * 37) + 3) * 53) + getConnectionCount()) * 37) + 4) * 53) + getValidConnectionCount();
                if (hasTcpInTraffic()) {
                    connectionCount = (((connectionCount * 37) + 5) * 53) + getTcpInTraffic().hashCode();
                }
                if (hasTcpOutTraffic()) {
                    connectionCount = (((connectionCount * 37) + 6) * 53) + getTcpOutTraffic().hashCode();
                }
                int disconnectionCount = (((connectionCount * 37) + 7) * 53) + getDisconnectionCount();
                if (getDisconnectionDetailCount() > 0) {
                    disconnectionCount = (((disconnectionCount * 37) + 8) * 53) + getDisconnectionDetailList().hashCode();
                }
                if (hasUdpInTraffic()) {
                    disconnectionCount = (((disconnectionCount * 37) + 9) * 53) + getUdpInTraffic().hashCode();
                }
                if (hasUdpOutTraffic()) {
                    disconnectionCount = (((disconnectionCount * 37) + 10) * 53) + getUdpOutTraffic().hashCode();
                }
                if (hasLatency()) {
                    disconnectionCount = (((disconnectionCount * 37) + 11) * 53) + getLatency().hashCode();
                }
                int hashCode2 = (disconnectionCount * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MetricsInfo_NetInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NetInfo.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                int i = this.errorProtoCount_;
                if (i != 0) {
                    codedOutputStream.writeInt32(1, i);
                }
                if (this.api_ != null) {
                    codedOutputStream.writeMessage(2, getApi());
                }
                int i2 = this.connectionCount_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(3, i2);
                }
                int i3 = this.validConnectionCount_;
                if (i3 != 0) {
                    codedOutputStream.writeInt32(4, i3);
                }
                if (this.tcpInTraffic_ != null) {
                    codedOutputStream.writeMessage(5, getTcpInTraffic());
                }
                if (this.tcpOutTraffic_ != null) {
                    codedOutputStream.writeMessage(6, getTcpOutTraffic());
                }
                int i4 = this.disconnectionCount_;
                if (i4 != 0) {
                    codedOutputStream.writeInt32(7, i4);
                }
                for (int i5 = 0; i5 < this.disconnectionDetail_.size(); i5++) {
                    codedOutputStream.writeMessage(8, this.disconnectionDetail_.get(i5));
                }
                if (this.udpInTraffic_ != null) {
                    codedOutputStream.writeMessage(9, getUdpInTraffic());
                }
                if (this.udpOutTraffic_ != null) {
                    codedOutputStream.writeMessage(10, getUdpOutTraffic());
                }
                if (this.latency_ != null) {
                    codedOutputStream.writeMessage(11, getLatency());
                }
                this.unknownFields.writeTo(codedOutputStream);
            }
        }

        public interface NetInfoOrBuilder extends MessageOrBuilder {
            NetInfo.ApiInfo getApi();

            NetInfo.ApiInfoOrBuilder getApiOrBuilder();

            int getConnectionCount();

            int getDisconnectionCount();

            NetInfo.DisconnectionDetailInfo getDisconnectionDetail(int i);

            int getDisconnectionDetailCount();

            List<NetInfo.DisconnectionDetailInfo> getDisconnectionDetailList();

            NetInfo.DisconnectionDetailInfoOrBuilder getDisconnectionDetailOrBuilder(int i);

            List<? extends NetInfo.DisconnectionDetailInfoOrBuilder> getDisconnectionDetailOrBuilderList();

            int getErrorProtoCount();

            NetInfo.LatencyInfo getLatency();

            NetInfo.LatencyInfoOrBuilder getLatencyOrBuilder();

            RateInfo getTcpInTraffic();

            RateInfoOrBuilder getTcpInTrafficOrBuilder();

            RateInfo getTcpOutTraffic();

            RateInfoOrBuilder getTcpOutTrafficOrBuilder();

            RateInfo getUdpInTraffic();

            RateInfoOrBuilder getUdpInTrafficOrBuilder();

            RateInfo getUdpOutTraffic();

            RateInfoOrBuilder getUdpOutTrafficOrBuilder();

            int getValidConnectionCount();

            boolean hasApi();

            boolean hasLatency();

            boolean hasTcpInTraffic();

            boolean hasTcpOutTraffic();

            boolean hasUdpInTraffic();

            boolean hasUdpOutTraffic();
        }

        public static final class NodeInfo extends GeneratedMessageV3 implements NodeInfoOrBuilder {
            public static final int BACKUPSTATUS_FIELD_NUMBER = 4;
            public static final int IP_FIELD_NUMBER = 1;
            public static final int NODETYPE_FIELD_NUMBER = 2;
            public static final int VERSION_FIELD_NUMBER = 3;
            private static final long serialVersionUID = 0;
            private int backupStatus_;
            private volatile Object ip_;
            private byte memoizedIsInitialized;
            private int nodeType_;
            private volatile Object version_;
            private static final NodeInfo DEFAULT_INSTANCE = new NodeInfo();
            private static final Parser<NodeInfo> PARSER = new AbstractParser<NodeInfo>() {
                @Override
                public NodeInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new NodeInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements NodeInfoOrBuilder {
                private int backupStatus_;
                private Object ip_;
                private int nodeType_;
                private Object version_;

                private Builder() {
                    this.ip_ = "";
                    this.version_ = "";
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.ip_ = "";
                    this.version_ = "";
                    maybeForceBuilderInitialization();
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_NodeInfo_descriptor;
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = NodeInfo.alwaysUseFieldBuilders;
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public NodeInfo build() {
                    NodeInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public NodeInfo buildPartial() {
                    NodeInfo nodeInfo = new NodeInfo(this);
                    nodeInfo.ip_ = this.ip_;
                    nodeInfo.nodeType_ = this.nodeType_;
                    nodeInfo.version_ = this.version_;
                    nodeInfo.backupStatus_ = this.backupStatus_;
                    onBuilt();
                    return nodeInfo;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.ip_ = "";
                    this.nodeType_ = 0;
                    this.version_ = "";
                    this.backupStatus_ = 0;
                    return this;
                }

                public Builder clearBackupStatus() {
                    this.backupStatus_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                public Builder clearIp() {
                    this.ip_ = NodeInfo.getDefaultInstance().getIp();
                    onChanged();
                    return this;
                }

                public Builder clearNodeType() {
                    this.nodeType_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                public Builder clearVersion() {
                    this.version_ = NodeInfo.getDefaultInstance().getVersion();
                    onChanged();
                    return this;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public int getBackupStatus() {
                    return this.backupStatus_;
                }

                @Override
                public NodeInfo getDefaultInstanceForType() {
                    return NodeInfo.getDefaultInstance();
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_MetricsInfo_NodeInfo_descriptor;
                }

                @Override
                public String getIp() {
                    Object obj = this.ip_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.ip_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getIpBytes() {
                    Object obj = this.ip_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.ip_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public int getNodeType() {
                    return this.nodeType_;
                }

                @Override
                public String getVersion() {
                    Object obj = this.version_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.version_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getVersionBytes() {
                    Object obj = this.version_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.version_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_NodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NodeInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public org.tron.protos.Protocol.MetricsInfo.NodeInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.NodeInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$NodeInfo$Builder");
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof NodeInfo) {
                        return mergeFrom((NodeInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(NodeInfo nodeInfo) {
                    if (nodeInfo == NodeInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (!nodeInfo.getIp().isEmpty()) {
                        this.ip_ = nodeInfo.ip_;
                        onChanged();
                    }
                    if (nodeInfo.getNodeType() != 0) {
                        setNodeType(nodeInfo.getNodeType());
                    }
                    if (!nodeInfo.getVersion().isEmpty()) {
                        this.version_ = nodeInfo.version_;
                        onChanged();
                    }
                    if (nodeInfo.getBackupStatus() != 0) {
                        setBackupStatus(nodeInfo.getBackupStatus());
                    }
                    mergeUnknownFields(nodeInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder setBackupStatus(int i) {
                    this.backupStatus_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                public Builder setIp(String str) {
                    str.getClass();
                    this.ip_ = str;
                    onChanged();
                    return this;
                }

                public Builder setIpBytes(ByteString byteString) {
                    byteString.getClass();
                    NodeInfo.checkByteStringIsUtf8(byteString);
                    this.ip_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setNodeType(int i) {
                    this.nodeType_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                public Builder setVersion(String str) {
                    str.getClass();
                    this.version_ = str;
                    onChanged();
                    return this;
                }

                public Builder setVersionBytes(ByteString byteString) {
                    byteString.getClass();
                    NodeInfo.checkByteStringIsUtf8(byteString);
                    this.version_ = byteString;
                    onChanged();
                    return this;
                }
            }

            private NodeInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.ip_ = "";
                this.nodeType_ = 0;
                this.version_ = "";
                this.backupStatus_ = 0;
            }

            private NodeInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.ip_ = codedInputStream.readStringRequireUtf8();
                                } else if (readTag == 16) {
                                    this.nodeType_ = codedInputStream.readInt32();
                                } else if (readTag == 26) {
                                    this.version_ = codedInputStream.readStringRequireUtf8();
                                } else if (readTag == 32) {
                                    this.backupStatus_ = codedInputStream.readInt32();
                                } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            private NodeInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            public static NodeInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MetricsInfo_NodeInfo_descriptor;
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(NodeInfo nodeInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(nodeInfo);
            }

            public static NodeInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static NodeInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static NodeInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static NodeInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static NodeInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static NodeInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            public static NodeInfo parseFrom(InputStream inputStream) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static NodeInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static NodeInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static NodeInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static NodeInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static NodeInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Parser<NodeInfo> parser() {
                return PARSER;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (obj instanceof NodeInfo) {
                    NodeInfo nodeInfo = (NodeInfo) obj;
                    return getIp().equals(nodeInfo.getIp()) && getNodeType() == nodeInfo.getNodeType() && getVersion().equals(nodeInfo.getVersion()) && getBackupStatus() == nodeInfo.getBackupStatus() && this.unknownFields.equals(nodeInfo.unknownFields);
                }
                return super.equals(obj);
            }

            @Override
            public int getBackupStatus() {
                return this.backupStatus_;
            }

            @Override
            public NodeInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public String getIp() {
                Object obj = this.ip_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.ip_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getIpBytes() {
                Object obj = this.ip_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.ip_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public int getNodeType() {
                return this.nodeType_;
            }

            @Override
            public Parser<NodeInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeStringSize = !getIpBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.ip_) : 0;
                int i2 = this.nodeType_;
                if (i2 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(2, i2);
                }
                if (!getVersionBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(3, this.version_);
                }
                int i3 = this.backupStatus_;
                if (i3 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(4, i3);
                }
                int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            @Override
            public String getVersion() {
                Object obj = this.version_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.version_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getVersionBytes() {
                Object obj = this.version_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.version_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getIp().hashCode()) * 37) + 2) * 53) + getNodeType()) * 37) + 3) * 53) + getVersion().hashCode()) * 37) + 4) * 53) + getBackupStatus()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MetricsInfo_NodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NodeInfo.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!getIpBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 1, this.ip_);
                }
                int i = this.nodeType_;
                if (i != 0) {
                    codedOutputStream.writeInt32(2, i);
                }
                if (!getVersionBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 3, this.version_);
                }
                int i2 = this.backupStatus_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(4, i2);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }
        }

        public interface NodeInfoOrBuilder extends MessageOrBuilder {
            int getBackupStatus();

            String getIp();

            ByteString getIpBytes();

            int getNodeType();

            String getVersion();

            ByteString getVersionBytes();
        }

        public static final class RateInfo extends GeneratedMessageV3 implements RateInfoOrBuilder {
            public static final int COUNT_FIELD_NUMBER = 1;
            public static final int FIFTEENMINUTERATE_FIELD_NUMBER = 5;
            public static final int FIVEMINUTERATE_FIELD_NUMBER = 4;
            public static final int MEANRATE_FIELD_NUMBER = 2;
            public static final int ONEMINUTERATE_FIELD_NUMBER = 3;
            private static final long serialVersionUID = 0;
            private long count_;
            private double fifteenMinuteRate_;
            private double fiveMinuteRate_;
            private double meanRate_;
            private byte memoizedIsInitialized;
            private double oneMinuteRate_;
            private static final RateInfo DEFAULT_INSTANCE = new RateInfo();
            private static final Parser<RateInfo> PARSER = new AbstractParser<RateInfo>() {
                @Override
                public RateInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new RateInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements RateInfoOrBuilder {
                private long count_;
                private double fifteenMinuteRate_;
                private double fiveMinuteRate_;
                private double meanRate_;
                private double oneMinuteRate_;

                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    maybeForceBuilderInitialization();
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_MetricsInfo_RateInfo_descriptor;
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = RateInfo.alwaysUseFieldBuilders;
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public RateInfo build() {
                    RateInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public RateInfo buildPartial() {
                    RateInfo rateInfo = new RateInfo(this);
                    rateInfo.count_ = this.count_;
                    rateInfo.meanRate_ = this.meanRate_;
                    rateInfo.oneMinuteRate_ = this.oneMinuteRate_;
                    rateInfo.fiveMinuteRate_ = this.fiveMinuteRate_;
                    rateInfo.fifteenMinuteRate_ = this.fifteenMinuteRate_;
                    onBuilt();
                    return rateInfo;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.count_ = 0L;
                    this.meanRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.oneMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.fiveMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.fifteenMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    return this;
                }

                public Builder clearCount() {
                    this.count_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                public Builder clearFifteenMinuteRate() {
                    this.fifteenMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder clearFiveMinuteRate() {
                    this.fiveMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder clearMeanRate() {
                    this.meanRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder clearOneMinuteRate() {
                    this.oneMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public long getCount() {
                    return this.count_;
                }

                @Override
                public RateInfo getDefaultInstanceForType() {
                    return RateInfo.getDefaultInstance();
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_MetricsInfo_RateInfo_descriptor;
                }

                @Override
                public double getFifteenMinuteRate() {
                    return this.fifteenMinuteRate_;
                }

                @Override
                public double getFiveMinuteRate() {
                    return this.fiveMinuteRate_;
                }

                @Override
                public double getMeanRate() {
                    return this.meanRate_;
                }

                @Override
                public double getOneMinuteRate() {
                    return this.oneMinuteRate_;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_MetricsInfo_RateInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RateInfo.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public org.tron.protos.Protocol.MetricsInfo.RateInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.RateInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MetricsInfo$RateInfo$Builder");
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof RateInfo) {
                        return mergeFrom((RateInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(RateInfo rateInfo) {
                    if (rateInfo == RateInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (rateInfo.getCount() != 0) {
                        setCount(rateInfo.getCount());
                    }
                    if (rateInfo.getMeanRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setMeanRate(rateInfo.getMeanRate());
                    }
                    if (rateInfo.getOneMinuteRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setOneMinuteRate(rateInfo.getOneMinuteRate());
                    }
                    if (rateInfo.getFiveMinuteRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setFiveMinuteRate(rateInfo.getFiveMinuteRate());
                    }
                    if (rateInfo.getFifteenMinuteRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setFifteenMinuteRate(rateInfo.getFifteenMinuteRate());
                    }
                    mergeUnknownFields(rateInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder setCount(long j) {
                    this.count_ = j;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                public Builder setFifteenMinuteRate(double d) {
                    this.fifteenMinuteRate_ = d;
                    onChanged();
                    return this;
                }

                public Builder setFiveMinuteRate(double d) {
                    this.fiveMinuteRate_ = d;
                    onChanged();
                    return this;
                }

                public Builder setMeanRate(double d) {
                    this.meanRate_ = d;
                    onChanged();
                    return this;
                }

                public Builder setOneMinuteRate(double d) {
                    this.oneMinuteRate_ = d;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }
            }

            private RateInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.count_ = 0L;
                this.meanRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.oneMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.fiveMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.fifteenMinuteRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
            }

            private RateInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.count_ = codedInputStream.readInt64();
                                    } else if (readTag == 17) {
                                        this.meanRate_ = codedInputStream.readDouble();
                                    } else if (readTag == 25) {
                                        this.oneMinuteRate_ = codedInputStream.readDouble();
                                    } else if (readTag == 33) {
                                        this.fiveMinuteRate_ = codedInputStream.readDouble();
                                    } else if (readTag == 41) {
                                        this.fifteenMinuteRate_ = codedInputStream.readDouble();
                                    } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            }
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            private RateInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            public static RateInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MetricsInfo_RateInfo_descriptor;
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(RateInfo rateInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(rateInfo);
            }

            public static RateInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static RateInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static RateInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static RateInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static RateInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static RateInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            public static RateInfo parseFrom(InputStream inputStream) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static RateInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (RateInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static RateInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static RateInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static RateInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static RateInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Parser<RateInfo> parser() {
                return PARSER;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (obj instanceof RateInfo) {
                    RateInfo rateInfo = (RateInfo) obj;
                    return getCount() == rateInfo.getCount() && Double.doubleToLongBits(getMeanRate()) == Double.doubleToLongBits(rateInfo.getMeanRate()) && Double.doubleToLongBits(getOneMinuteRate()) == Double.doubleToLongBits(rateInfo.getOneMinuteRate()) && Double.doubleToLongBits(getFiveMinuteRate()) == Double.doubleToLongBits(rateInfo.getFiveMinuteRate()) && Double.doubleToLongBits(getFifteenMinuteRate()) == Double.doubleToLongBits(rateInfo.getFifteenMinuteRate()) && this.unknownFields.equals(rateInfo.unknownFields);
                }
                return super.equals(obj);
            }

            @Override
            public long getCount() {
                return this.count_;
            }

            @Override
            public RateInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public double getFifteenMinuteRate() {
                return this.fifteenMinuteRate_;
            }

            @Override
            public double getFiveMinuteRate() {
                return this.fiveMinuteRate_;
            }

            @Override
            public double getMeanRate() {
                return this.meanRate_;
            }

            @Override
            public double getOneMinuteRate() {
                return this.oneMinuteRate_;
            }

            @Override
            public Parser<RateInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.count_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                double d = this.meanRate_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt64Size += CodedOutputStream.computeDoubleSize(2, d);
                }
                double d2 = this.oneMinuteRate_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt64Size += CodedOutputStream.computeDoubleSize(3, d2);
                }
                double d3 = this.fiveMinuteRate_;
                if (d3 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt64Size += CodedOutputStream.computeDoubleSize(4, d3);
                }
                double d4 = this.fifteenMinuteRate_;
                if (d4 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt64Size += CodedOutputStream.computeDoubleSize(5, d4);
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getCount())) * 37) + 2) * 53) + Internal.hashLong(Double.doubleToLongBits(getMeanRate()))) * 37) + 3) * 53) + Internal.hashLong(Double.doubleToLongBits(getOneMinuteRate()))) * 37) + 4) * 53) + Internal.hashLong(Double.doubleToLongBits(getFiveMinuteRate()))) * 37) + 5) * 53) + Internal.hashLong(Double.doubleToLongBits(getFifteenMinuteRate()))) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MetricsInfo_RateInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RateInfo.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.count_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                double d = this.meanRate_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(2, d);
                }
                double d2 = this.oneMinuteRate_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(3, d2);
                }
                double d3 = this.fiveMinuteRate_;
                if (d3 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(4, d3);
                }
                double d4 = this.fifteenMinuteRate_;
                if (d4 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(5, d4);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }
        }

        public interface RateInfoOrBuilder extends MessageOrBuilder {
            long getCount();

            double getFifteenMinuteRate();

            double getFiveMinuteRate();

            double getMeanRate();

            double getOneMinuteRate();
        }

        private MetricsInfo() {
            this.memoizedIsInitialized = (byte) -1;
            this.interval_ = 0L;
        }

        private MetricsInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 8) {
                                if (readTag == 18) {
                                    NodeInfo nodeInfo = this.node_;
                                    NodeInfo.Builder builder = nodeInfo != null ? nodeInfo.toBuilder() : null;
                                    NodeInfo nodeInfo2 = (NodeInfo) codedInputStream.readMessage(NodeInfo.parser(), extensionRegistryLite);
                                    this.node_ = nodeInfo2;
                                    if (builder != null) {
                                        builder.mergeFrom(nodeInfo2);
                                        this.node_ = builder.buildPartial();
                                    }
                                } else if (readTag == 26) {
                                    BlockChainInfo blockChainInfo = this.blockchain_;
                                    BlockChainInfo.Builder builder2 = blockChainInfo != null ? blockChainInfo.toBuilder() : null;
                                    BlockChainInfo blockChainInfo2 = (BlockChainInfo) codedInputStream.readMessage(BlockChainInfo.parser(), extensionRegistryLite);
                                    this.blockchain_ = blockChainInfo2;
                                    if (builder2 != null) {
                                        builder2.mergeFrom(blockChainInfo2);
                                        this.blockchain_ = builder2.buildPartial();
                                    }
                                } else if (readTag == 34) {
                                    NetInfo netInfo = this.net_;
                                    NetInfo.Builder builder3 = netInfo != null ? netInfo.toBuilder() : null;
                                    NetInfo netInfo2 = (NetInfo) codedInputStream.readMessage(NetInfo.parser(), extensionRegistryLite);
                                    this.net_ = netInfo2;
                                    if (builder3 != null) {
                                        builder3.mergeFrom(netInfo2);
                                        this.net_ = builder3.buildPartial();
                                    }
                                } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.interval_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        private MetricsInfo(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        public static MetricsInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MetricsInfo_descriptor;
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MetricsInfo metricsInfo) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(metricsInfo);
        }

        public static MetricsInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MetricsInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MetricsInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MetricsInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MetricsInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MetricsInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        public static MetricsInfo parseFrom(InputStream inputStream) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MetricsInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MetricsInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MetricsInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MetricsInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MetricsInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MetricsInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Parser<MetricsInfo> parser() {
            return PARSER;
        }

        @Override
        public boolean equals(java.lang.Object r8) {
            


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MetricsInfo.equals(java.lang.Object):boolean");
        }

        @Override
        public BlockChainInfo getBlockchain() {
            BlockChainInfo blockChainInfo = this.blockchain_;
            return blockChainInfo == null ? BlockChainInfo.getDefaultInstance() : blockChainInfo;
        }

        @Override
        public BlockChainInfoOrBuilder getBlockchainOrBuilder() {
            return getBlockchain();
        }

        @Override
        public MetricsInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getInterval() {
            return this.interval_;
        }

        @Override
        public NetInfo getNet() {
            NetInfo netInfo = this.net_;
            return netInfo == null ? NetInfo.getDefaultInstance() : netInfo;
        }

        @Override
        public NetInfoOrBuilder getNetOrBuilder() {
            return getNet();
        }

        @Override
        public NodeInfo getNode() {
            NodeInfo nodeInfo = this.node_;
            return nodeInfo == null ? NodeInfo.getDefaultInstance() : nodeInfo;
        }

        @Override
        public NodeInfoOrBuilder getNodeOrBuilder() {
            return getNode();
        }

        @Override
        public Parser<MetricsInfo> getParserForType() {
            return PARSER;
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.interval_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            if (this.node_ != null) {
                computeInt64Size += CodedOutputStream.computeMessageSize(2, getNode());
            }
            if (this.blockchain_ != null) {
                computeInt64Size += CodedOutputStream.computeMessageSize(3, getBlockchain());
            }
            if (this.net_ != null) {
                computeInt64Size += CodedOutputStream.computeMessageSize(4, getNet());
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        public boolean hasBlockchain() {
            return this.blockchain_ != null;
        }

        @Override
        public boolean hasNet() {
            return this.net_ != null;
        }

        @Override
        public boolean hasNode() {
            return this.node_ != null;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getInterval());
            if (hasNode()) {
                hashCode = (((hashCode * 37) + 2) * 53) + getNode().hashCode();
            }
            if (hasBlockchain()) {
                hashCode = (((hashCode * 37) + 3) * 53) + getBlockchain().hashCode();
            }
            if (hasNet()) {
                hashCode = (((hashCode * 37) + 4) * 53) + getNet().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MetricsInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MetricsInfo.class, Builder.class);
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.interval_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            if (this.node_ != null) {
                codedOutputStream.writeMessage(2, getNode());
            }
            if (this.blockchain_ != null) {
                codedOutputStream.writeMessage(3, getBlockchain());
            }
            if (this.net_ != null) {
                codedOutputStream.writeMessage(4, getNet());
            }
            this.unknownFields.writeTo(codedOutputStream);
        }
    }

    public interface MetricsInfoOrBuilder extends MessageOrBuilder {
        MetricsInfo.BlockChainInfo getBlockchain();

        MetricsInfo.BlockChainInfoOrBuilder getBlockchainOrBuilder();

        long getInterval();

        MetricsInfo.NetInfo getNet();

        MetricsInfo.NetInfoOrBuilder getNetOrBuilder();

        MetricsInfo.NodeInfo getNode();

        MetricsInfo.NodeInfoOrBuilder getNodeOrBuilder();

        boolean hasBlockchain();

        boolean hasNet();

        boolean hasNode();
    }

    public interface NodeInfoOrBuilder extends MessageOrBuilder {
        boolean containsCheatWitnessInfoMap(String str);

        int getActiveConnectCount();

        long getBeginSyncNum();

        String getBlock();

        ByteString getBlockBytes();

        @Deprecated
        Map<String, String> getCheatWitnessInfoMap();

        int getCheatWitnessInfoMapCount();

        Map<String, String> getCheatWitnessInfoMapMap();

        String getCheatWitnessInfoMapOrDefault(String str, String str2);

        String getCheatWitnessInfoMapOrThrow(String str);

        NodeInfo.ConfigNodeInfo getConfigNodeInfo();

        NodeInfo.ConfigNodeInfoOrBuilder getConfigNodeInfoOrBuilder();

        int getCurrentConnectCount();

        NodeInfo.MachineInfo getMachineInfo();

        NodeInfo.MachineInfoOrBuilder getMachineInfoOrBuilder();

        int getPassiveConnectCount();

        NodeInfo.PeerInfo getPeerInfoList(int i);

        int getPeerInfoListCount();

        List<NodeInfo.PeerInfo> getPeerInfoListList();

        NodeInfo.PeerInfoOrBuilder getPeerInfoListOrBuilder(int i);

        List<? extends NodeInfo.PeerInfoOrBuilder> getPeerInfoListOrBuilderList();

        String getSolidityBlock();

        ByteString getSolidityBlockBytes();

        long getTotalFlow();

        boolean hasConfigNodeInfo();

        boolean hasMachineInfo();
    }

    public static final class PBFTCommitResult extends GeneratedMessageV3 implements PBFTCommitResultOrBuilder {
        public static final int DATA_FIELD_NUMBER = 1;
        private static final PBFTCommitResult DEFAULT_INSTANCE = new PBFTCommitResult();
        private static final Parser<PBFTCommitResult> PARSER = new AbstractParser<PBFTCommitResult>() {
            @Override
            public PBFTCommitResult parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PBFTCommitResult(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int SIGNATURE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private ByteString data_;
        private byte memoizedIsInitialized;
        private List<ByteString> signature_;

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements PBFTCommitResultOrBuilder {
            private int bitField0_;
            private ByteString data_;
            private List<ByteString> signature_;

            private Builder() {
                this.data_ = ByteString.EMPTY;
                this.signature_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.data_ = ByteString.EMPTY;
                this.signature_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void ensureSignatureIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.signature_ = new ArrayList(this.signature_);
                    this.bitField0_ |= 2;
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_PBFTCommitResult_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = PBFTCommitResult.alwaysUseFieldBuilders;
            }

            public Builder addAllSignature(Iterable<? extends ByteString> iterable) {
                ensureSignatureIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.signature_);
                onChanged();
                return this;
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            public Builder addSignature(ByteString byteString) {
                byteString.getClass();
                ensureSignatureIsMutable();
                this.signature_.add(byteString);
                onChanged();
                return this;
            }

            @Override
            public PBFTCommitResult build() {
                PBFTCommitResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public PBFTCommitResult buildPartial() {
                PBFTCommitResult pBFTCommitResult = new PBFTCommitResult(this);
                pBFTCommitResult.data_ = this.data_;
                if ((this.bitField0_ & 2) == 2) {
                    this.signature_ = Collections.unmodifiableList(this.signature_);
                    this.bitField0_ &= -3;
                }
                pBFTCommitResult.signature_ = this.signature_;
                pBFTCommitResult.bitField0_ = 0;
                onBuilt();
                return pBFTCommitResult;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.data_ = ByteString.EMPTY;
                this.signature_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            public Builder clearData() {
                this.data_ = PBFTCommitResult.getDefaultInstance().getData();
                onChanged();
                return this;
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            public Builder clearSignature() {
                this.signature_ = Collections.emptyList();
                this.bitField0_ &= -3;
                onChanged();
                return this;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public ByteString getData() {
                return this.data_;
            }

            @Override
            public PBFTCommitResult getDefaultInstanceForType() {
                return PBFTCommitResult.getDefaultInstance();
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_PBFTCommitResult_descriptor;
            }

            @Override
            public ByteString getSignature(int i) {
                return this.signature_.get(i);
            }

            @Override
            public int getSignatureCount() {
                return this.signature_.size();
            }

            @Override
            public List<ByteString> getSignatureList() {
                return Collections.unmodifiableList(this.signature_);
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_PBFTCommitResult_fieldAccessorTable.ensureFieldAccessorsInitialized(PBFTCommitResult.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public org.tron.protos.Protocol.PBFTCommitResult.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.PBFTCommitResult.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$PBFTCommitResult$Builder");
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof PBFTCommitResult) {
                    return mergeFrom((PBFTCommitResult) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(PBFTCommitResult pBFTCommitResult) {
                if (pBFTCommitResult == PBFTCommitResult.getDefaultInstance()) {
                    return this;
                }
                if (pBFTCommitResult.getData() != ByteString.EMPTY) {
                    setData(pBFTCommitResult.getData());
                }
                if (!pBFTCommitResult.signature_.isEmpty()) {
                    if (this.signature_.isEmpty()) {
                        this.signature_ = pBFTCommitResult.signature_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureSignatureIsMutable();
                        this.signature_.addAll(pBFTCommitResult.signature_);
                    }
                    onChanged();
                }
                mergeUnknownFields(pBFTCommitResult.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }

            public Builder setData(ByteString byteString) {
                byteString.getClass();
                this.data_ = byteString;
                onChanged();
                return this;
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            public Builder setSignature(int i, ByteString byteString) {
                byteString.getClass();
                ensureSignatureIsMutable();
                this.signature_.set(i, byteString);
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }
        }

        private PBFTCommitResult() {
            this.memoizedIsInitialized = (byte) -1;
            this.data_ = ByteString.EMPTY;
            this.signature_ = Collections.emptyList();
        }

        private PBFTCommitResult(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.data_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                if (!(z2 & true)) {
                                    this.signature_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.signature_.add(codedInputStream.readBytes());
                            } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.signature_ = Collections.unmodifiableList(this.signature_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        private PBFTCommitResult(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        public static PBFTCommitResult getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_PBFTCommitResult_descriptor;
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(PBFTCommitResult pBFTCommitResult) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(pBFTCommitResult);
        }

        public static PBFTCommitResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static PBFTCommitResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static PBFTCommitResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PBFTCommitResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PBFTCommitResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static PBFTCommitResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        public static PBFTCommitResult parseFrom(InputStream inputStream) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static PBFTCommitResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTCommitResult) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static PBFTCommitResult parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static PBFTCommitResult parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static PBFTCommitResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PBFTCommitResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Parser<PBFTCommitResult> parser() {
            return PARSER;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (obj instanceof PBFTCommitResult) {
                PBFTCommitResult pBFTCommitResult = (PBFTCommitResult) obj;
                return getData().equals(pBFTCommitResult.getData()) && getSignatureList().equals(pBFTCommitResult.getSignatureList()) && this.unknownFields.equals(pBFTCommitResult.unknownFields);
            }
            return super.equals(obj);
        }

        @Override
        public ByteString getData() {
            return this.data_;
        }

        @Override
        public PBFTCommitResult getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<PBFTCommitResult> getParserForType() {
            return PARSER;
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.data_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.data_) : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.signature_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.signature_.get(i3));
            }
            int size = computeBytesSize + i2 + getSignatureList().size() + this.unknownFields.getSerializedSize();
            this.memoizedSize = size;
            return size;
        }

        @Override
        public ByteString getSignature(int i) {
            return this.signature_.get(i);
        }

        @Override
        public int getSignatureCount() {
            return this.signature_.size();
        }

        @Override
        public List<ByteString> getSignatureList() {
            return this.signature_;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getData().hashCode();
            if (getSignatureCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getSignatureList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_PBFTCommitResult_fieldAccessorTable.ensureFieldAccessorsInitialized(PBFTCommitResult.class, Builder.class);
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.data_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.data_);
            }
            for (int i = 0; i < this.signature_.size(); i++) {
                codedOutputStream.writeBytes(2, this.signature_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }
    }

    public interface PBFTCommitResultOrBuilder extends MessageOrBuilder {
        ByteString getData();

        ByteString getSignature(int i);

        int getSignatureCount();

        List<ByteString> getSignatureList();
    }

    public static final class PBFTMessage extends GeneratedMessageV3 implements PBFTMessageOrBuilder {
        private static final PBFTMessage DEFAULT_INSTANCE = new PBFTMessage();
        private static final Parser<PBFTMessage> PARSER = new AbstractParser<PBFTMessage>() {
            @Override
            public PBFTMessage parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PBFTMessage(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RAW_DATA_FIELD_NUMBER = 1;
        public static final int SIGNATURE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private Raw rawData_;
        private ByteString signature_;

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements PBFTMessageOrBuilder {
            private SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> rawDataBuilder_;
            private Raw rawData_;
            private ByteString signature_;

            private Builder() {
                this.rawData_ = null;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.rawData_ = null;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_PBFTMessage_descriptor;
            }

            private SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> getRawDataFieldBuilder() {
                if (this.rawDataBuilder_ == null) {
                    this.rawDataBuilder_ = new SingleFieldBuilderV3<>(getRawData(), getParentForChildren(), isClean());
                    this.rawData_ = null;
                }
                return this.rawDataBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = PBFTMessage.alwaysUseFieldBuilders;
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public PBFTMessage build() {
                PBFTMessage buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public PBFTMessage buildPartial() {
                PBFTMessage pBFTMessage = new PBFTMessage(this);
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                pBFTMessage.rawData_ = singleFieldBuilderV3 == null ? this.rawData_ : singleFieldBuilderV3.build();
                pBFTMessage.signature_ = this.signature_;
                onBuilt();
                return pBFTMessage;
            }

            @Override
            public Builder clear() {
                super.clear();
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                this.rawData_ = null;
                if (singleFieldBuilderV3 != null) {
                    this.rawDataBuilder_ = null;
                }
                this.signature_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            public Builder clearRawData() {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                this.rawData_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.rawDataBuilder_ = null;
                }
                return this;
            }

            public Builder clearSignature() {
                this.signature_ = PBFTMessage.getDefaultInstance().getSignature();
                onChanged();
                return this;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public PBFTMessage getDefaultInstanceForType() {
                return PBFTMessage.getDefaultInstance();
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_PBFTMessage_descriptor;
            }

            @Override
            public Raw getRawData() {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Raw raw = this.rawData_;
                    return raw == null ? Raw.getDefaultInstance() : raw;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Raw.Builder getRawDataBuilder() {
                onChanged();
                return getRawDataFieldBuilder().getBuilder();
            }

            @Override
            public RawOrBuilder getRawDataOrBuilder() {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                Raw raw = this.rawData_;
                return raw == null ? Raw.getDefaultInstance() : raw;
            }

            @Override
            public ByteString getSignature() {
                return this.signature_;
            }

            @Override
            public boolean hasRawData() {
                return (this.rawDataBuilder_ == null && this.rawData_ == null) ? false : true;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_PBFTMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(PBFTMessage.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public org.tron.protos.Protocol.PBFTMessage.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.PBFTMessage.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$PBFTMessage$Builder");
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof PBFTMessage) {
                    return mergeFrom((PBFTMessage) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(PBFTMessage pBFTMessage) {
                if (pBFTMessage == PBFTMessage.getDefaultInstance()) {
                    return this;
                }
                if (pBFTMessage.hasRawData()) {
                    mergeRawData(pBFTMessage.getRawData());
                }
                if (pBFTMessage.getSignature() != ByteString.EMPTY) {
                    setSignature(pBFTMessage.getSignature());
                }
                mergeUnknownFields(pBFTMessage.unknownFields);
                onChanged();
                return this;
            }

            public Builder mergeRawData(Raw raw) {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Raw raw2 = this.rawData_;
                    if (raw2 != null) {
                        raw = Raw.newBuilder(raw2).mergeFrom(raw).buildPartial();
                    }
                    this.rawData_ = raw;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(raw);
                }
                return this;
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            public Builder setRawData(Raw.Builder builder) {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                Raw build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.rawData_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setRawData(Raw raw) {
                SingleFieldBuilderV3<Raw, Raw.Builder, RawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw.getClass();
                    this.rawData_ = raw;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(raw);
                }
                return this;
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            public Builder setSignature(ByteString byteString) {
                byteString.getClass();
                this.signature_ = byteString;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }
        }

        public enum DataType implements ProtocolMessageEnum {
            BLOCK(0),
            SRL(1),
            UNRECOGNIZED(-1);
            
            public static final int BLOCK_VALUE = 0;
            public static final int SRL_VALUE = 1;
            private final int value;
            private static final Internal.EnumLiteMap<DataType> internalValueMap = new Internal.EnumLiteMap<DataType>() {
                @Override
                public DataType findValueByNumber(int i) {
                    return DataType.forNumber(i);
                }
            };
            private static final DataType[] VALUES = values();

            DataType(int i) {
                this.value = i;
            }

            public static DataType forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        return null;
                    }
                    return SRL;
                }
                return BLOCK;
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return PBFTMessage.getDescriptor().getEnumTypes().get(1);
            }

            public static Internal.EnumLiteMap<DataType> internalGetValueMap() {
                return internalValueMap;
            }

            @Deprecated
            public static DataType valueOf(int i) {
                return forNumber(i);
            }

            public static DataType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
        }

        public enum MsgType implements ProtocolMessageEnum {
            VIEW_CHANGE(0),
            REQUEST(1),
            PREPREPARE(2),
            PREPARE(3),
            COMMIT(4),
            UNRECOGNIZED(-1);
            
            public static final int COMMIT_VALUE = 4;
            public static final int PREPARE_VALUE = 3;
            public static final int PREPREPARE_VALUE = 2;
            public static final int REQUEST_VALUE = 1;
            public static final int VIEW_CHANGE_VALUE = 0;
            private final int value;
            private static final Internal.EnumLiteMap<MsgType> internalValueMap = new Internal.EnumLiteMap<MsgType>() {
                @Override
                public MsgType findValueByNumber(int i) {
                    return MsgType.forNumber(i);
                }
            };
            private static final MsgType[] VALUES = values();

            MsgType(int i) {
                this.value = i;
            }

            public static MsgType forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            if (i != 3) {
                                if (i != 4) {
                                    return null;
                                }
                                return COMMIT;
                            }
                            return PREPARE;
                        }
                        return PREPREPARE;
                    }
                    return REQUEST;
                }
                return VIEW_CHANGE;
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return PBFTMessage.getDescriptor().getEnumTypes().get(0);
            }

            public static Internal.EnumLiteMap<MsgType> internalGetValueMap() {
                return internalValueMap;
            }

            @Deprecated
            public static MsgType valueOf(int i) {
                return forNumber(i);
            }

            public static MsgType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }
        }

        public static final class Raw extends GeneratedMessageV3 implements RawOrBuilder {
            public static final int DATA_FIELD_NUMBER = 5;
            public static final int DATA_TYPE_FIELD_NUMBER = 2;
            public static final int EPOCH_FIELD_NUMBER = 4;
            public static final int MSG_TYPE_FIELD_NUMBER = 1;
            public static final int VIEW_N_FIELD_NUMBER = 3;
            private static final long serialVersionUID = 0;
            private int dataType_;
            private ByteString data_;
            private long epoch_;
            private byte memoizedIsInitialized;
            private int msgType_;
            private long viewN_;
            private static final Raw DEFAULT_INSTANCE = new Raw();
            private static final Parser<Raw> PARSER = new AbstractParser<Raw>() {
                @Override
                public Raw parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new Raw(codedInputStream, extensionRegistryLite);
                }
            };

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements RawOrBuilder {
                private int dataType_;
                private ByteString data_;
                private long epoch_;
                private int msgType_;
                private long viewN_;

                private Builder() {
                    this.msgType_ = 0;
                    this.dataType_ = 0;
                    this.data_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.msgType_ = 0;
                    this.dataType_ = 0;
                    this.data_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_PBFTMessage_Raw_descriptor;
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = Raw.alwaysUseFieldBuilders;
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Raw build() {
                    Raw buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public Raw buildPartial() {
                    Raw raw = new Raw(this);
                    raw.msgType_ = this.msgType_;
                    raw.dataType_ = this.dataType_;
                    raw.viewN_ = this.viewN_;
                    raw.epoch_ = this.epoch_;
                    raw.data_ = this.data_;
                    onBuilt();
                    return raw;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.msgType_ = 0;
                    this.dataType_ = 0;
                    this.viewN_ = 0L;
                    this.epoch_ = 0L;
                    this.data_ = ByteString.EMPTY;
                    return this;
                }

                public Builder clearData() {
                    this.data_ = Raw.getDefaultInstance().getData();
                    onChanged();
                    return this;
                }

                public Builder clearDataType() {
                    this.dataType_ = 0;
                    onChanged();
                    return this;
                }

                public Builder clearEpoch() {
                    this.epoch_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                public Builder clearMsgType() {
                    this.msgType_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                public Builder clearViewN() {
                    this.viewN_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public ByteString getData() {
                    return this.data_;
                }

                @Override
                public DataType getDataType() {
                    DataType valueOf = DataType.valueOf(this.dataType_);
                    return valueOf == null ? DataType.UNRECOGNIZED : valueOf;
                }

                @Override
                public int getDataTypeValue() {
                    return this.dataType_;
                }

                @Override
                public Raw getDefaultInstanceForType() {
                    return Raw.getDefaultInstance();
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_PBFTMessage_Raw_descriptor;
                }

                @Override
                public long getEpoch() {
                    return this.epoch_;
                }

                @Override
                public MsgType getMsgType() {
                    MsgType valueOf = MsgType.valueOf(this.msgType_);
                    return valueOf == null ? MsgType.UNRECOGNIZED : valueOf;
                }

                @Override
                public int getMsgTypeValue() {
                    return this.msgType_;
                }

                @Override
                public long getViewN() {
                    return this.viewN_;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_PBFTMessage_Raw_fieldAccessorTable.ensureFieldAccessorsInitialized(Raw.class, Builder.class);
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public org.tron.protos.Protocol.PBFTMessage.Raw.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.PBFTMessage.Raw.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$PBFTMessage$Raw$Builder");
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof Raw) {
                        return mergeFrom((Raw) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(Raw raw) {
                    if (raw == Raw.getDefaultInstance()) {
                        return this;
                    }
                    if (raw.msgType_ != 0) {
                        setMsgTypeValue(raw.getMsgTypeValue());
                    }
                    if (raw.dataType_ != 0) {
                        setDataTypeValue(raw.getDataTypeValue());
                    }
                    if (raw.getViewN() != 0) {
                        setViewN(raw.getViewN());
                    }
                    if (raw.getEpoch() != 0) {
                        setEpoch(raw.getEpoch());
                    }
                    if (raw.getData() != ByteString.EMPTY) {
                        setData(raw.getData());
                    }
                    mergeUnknownFields(raw.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder setData(ByteString byteString) {
                    byteString.getClass();
                    this.data_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setDataType(DataType dataType) {
                    dataType.getClass();
                    this.dataType_ = dataType.getNumber();
                    onChanged();
                    return this;
                }

                public Builder setDataTypeValue(int i) {
                    this.dataType_ = i;
                    onChanged();
                    return this;
                }

                public Builder setEpoch(long j) {
                    this.epoch_ = j;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                public Builder setMsgType(MsgType msgType) {
                    msgType.getClass();
                    this.msgType_ = msgType.getNumber();
                    onChanged();
                    return this;
                }

                public Builder setMsgTypeValue(int i) {
                    this.msgType_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                public Builder setViewN(long j) {
                    this.viewN_ = j;
                    onChanged();
                    return this;
                }
            }

            private Raw() {
                this.memoizedIsInitialized = (byte) -1;
                this.msgType_ = 0;
                this.dataType_ = 0;
                this.viewN_ = 0L;
                this.epoch_ = 0L;
                this.data_ = ByteString.EMPTY;
            }

            private Raw(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.msgType_ = codedInputStream.readEnum();
                                    } else if (readTag == 16) {
                                        this.dataType_ = codedInputStream.readEnum();
                                    } else if (readTag == 24) {
                                        this.viewN_ = codedInputStream.readInt64();
                                    } else if (readTag == 32) {
                                        this.epoch_ = codedInputStream.readInt64();
                                    } else if (readTag == 42) {
                                        this.data_ = codedInputStream.readBytes();
                                    } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            }
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            private Raw(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            public static Raw getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_PBFTMessage_Raw_descriptor;
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Raw raw) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(raw);
            }

            public static Raw parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (Raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static Raw parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Raw parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static Raw parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static Raw parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (Raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static Raw parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            public static Raw parseFrom(InputStream inputStream) throws IOException {
                return (Raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static Raw parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Raw parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static Raw parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static Raw parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static Raw parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Parser<Raw> parser() {
                return PARSER;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (obj instanceof Raw) {
                    Raw raw = (Raw) obj;
                    return this.msgType_ == raw.msgType_ && this.dataType_ == raw.dataType_ && getViewN() == raw.getViewN() && getEpoch() == raw.getEpoch() && getData().equals(raw.getData()) && this.unknownFields.equals(raw.unknownFields);
                }
                return super.equals(obj);
            }

            @Override
            public ByteString getData() {
                return this.data_;
            }

            @Override
            public DataType getDataType() {
                DataType valueOf = DataType.valueOf(this.dataType_);
                return valueOf == null ? DataType.UNRECOGNIZED : valueOf;
            }

            @Override
            public int getDataTypeValue() {
                return this.dataType_;
            }

            @Override
            public Raw getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getEpoch() {
                return this.epoch_;
            }

            @Override
            public MsgType getMsgType() {
                MsgType valueOf = MsgType.valueOf(this.msgType_);
                return valueOf == null ? MsgType.UNRECOGNIZED : valueOf;
            }

            @Override
            public int getMsgTypeValue() {
                return this.msgType_;
            }

            @Override
            public Parser<Raw> getParserForType() {
                return PARSER;
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeEnumSize = this.msgType_ != MsgType.VIEW_CHANGE.getNumber() ? CodedOutputStream.computeEnumSize(1, this.msgType_) : 0;
                if (this.dataType_ != DataType.BLOCK.getNumber()) {
                    computeEnumSize += CodedOutputStream.computeEnumSize(2, this.dataType_);
                }
                long j = this.viewN_;
                if (j != 0) {
                    computeEnumSize += CodedOutputStream.computeInt64Size(3, j);
                }
                long j2 = this.epoch_;
                if (j2 != 0) {
                    computeEnumSize += CodedOutputStream.computeInt64Size(4, j2);
                }
                if (!this.data_.isEmpty()) {
                    computeEnumSize += CodedOutputStream.computeBytesSize(5, this.data_);
                }
                int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            @Override
            public long getViewN() {
                return this.viewN_;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.msgType_) * 37) + 2) * 53) + this.dataType_) * 37) + 3) * 53) + Internal.hashLong(getViewN())) * 37) + 4) * 53) + Internal.hashLong(getEpoch())) * 37) + 5) * 53) + getData().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_PBFTMessage_Raw_fieldAccessorTable.ensureFieldAccessorsInitialized(Raw.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (this.msgType_ != MsgType.VIEW_CHANGE.getNumber()) {
                    codedOutputStream.writeEnum(1, this.msgType_);
                }
                if (this.dataType_ != DataType.BLOCK.getNumber()) {
                    codedOutputStream.writeEnum(2, this.dataType_);
                }
                long j = this.viewN_;
                if (j != 0) {
                    codedOutputStream.writeInt64(3, j);
                }
                long j2 = this.epoch_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(4, j2);
                }
                if (!this.data_.isEmpty()) {
                    codedOutputStream.writeBytes(5, this.data_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }
        }

        public interface RawOrBuilder extends MessageOrBuilder {
            ByteString getData();

            DataType getDataType();

            int getDataTypeValue();

            long getEpoch();

            MsgType getMsgType();

            int getMsgTypeValue();

            long getViewN();
        }

        private PBFTMessage() {
            this.memoizedIsInitialized = (byte) -1;
            this.signature_ = ByteString.EMPTY;
        }

        private PBFTMessage(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                Raw raw = this.rawData_;
                                Raw.Builder builder = raw != null ? raw.toBuilder() : null;
                                Raw raw2 = (Raw) codedInputStream.readMessage(Raw.parser(), extensionRegistryLite);
                                this.rawData_ = raw2;
                                if (builder != null) {
                                    builder.mergeFrom(raw2);
                                    this.rawData_ = builder.buildPartial();
                                }
                            } else if (readTag == 18) {
                                this.signature_ = codedInputStream.readBytes();
                            } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        private PBFTMessage(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        public static PBFTMessage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_PBFTMessage_descriptor;
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(PBFTMessage pBFTMessage) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(pBFTMessage);
        }

        public static PBFTMessage parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static PBFTMessage parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static PBFTMessage parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PBFTMessage parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PBFTMessage parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static PBFTMessage parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        public static PBFTMessage parseFrom(InputStream inputStream) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static PBFTMessage parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (PBFTMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static PBFTMessage parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static PBFTMessage parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static PBFTMessage parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PBFTMessage parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Parser<PBFTMessage> parser() {
            return PARSER;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (obj instanceof PBFTMessage) {
                PBFTMessage pBFTMessage = (PBFTMessage) obj;
                boolean z = hasRawData() == pBFTMessage.hasRawData();
                if (!hasRawData() ? z : !(!z || !getRawData().equals(pBFTMessage.getRawData()))) {
                    if (getSignature().equals(pBFTMessage.getSignature()) && this.unknownFields.equals(pBFTMessage.unknownFields)) {
                        return true;
                    }
                }
                return false;
            }
            return super.equals(obj);
        }

        @Override
        public PBFTMessage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<PBFTMessage> getParserForType() {
            return PARSER;
        }

        @Override
        public Raw getRawData() {
            Raw raw = this.rawData_;
            return raw == null ? Raw.getDefaultInstance() : raw;
        }

        @Override
        public RawOrBuilder getRawDataOrBuilder() {
            return getRawData();
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.rawData_ != null ? CodedOutputStream.computeMessageSize(1, getRawData()) : 0;
            if (!this.signature_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(2, this.signature_);
            }
            int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public ByteString getSignature() {
            return this.signature_;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        public boolean hasRawData() {
            return this.rawData_ != null;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasRawData()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getRawData().hashCode();
            }
            int hashCode2 = (((((hashCode * 37) + 2) * 53) + getSignature().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_PBFTMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(PBFTMessage.class, Builder.class);
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.rawData_ != null) {
                codedOutputStream.writeMessage(1, getRawData());
            }
            if (!this.signature_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.signature_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }
    }

    public interface PBFTMessageOrBuilder extends MessageOrBuilder {
        PBFTMessage.Raw getRawData();

        PBFTMessage.RawOrBuilder getRawDataOrBuilder();

        ByteString getSignature();

        boolean hasRawData();
    }

    public interface PermissionOrBuilder extends MessageOrBuilder {
        int getId();

        Key getKeys(int i);

        int getKeysCount();

        List<Key> getKeysList();

        KeyOrBuilder getKeysOrBuilder(int i);

        List<? extends KeyOrBuilder> getKeysOrBuilderList();

        ByteString getOperations();

        int getParentId();

        String getPermissionName();

        ByteString getPermissionNameBytes();

        long getThreshold();

        Permission.PermissionType getType();

        int getTypeValue();
    }

    public interface ProposalOrBuilder extends MessageOrBuilder {
        boolean containsParameters(long j);

        ByteString getApprovals(int i);

        int getApprovalsCount();

        List<ByteString> getApprovalsList();

        long getCreateTime();

        long getExpirationTime();

        @Deprecated
        Map<Long, Long> getParameters();

        int getParametersCount();

        Map<Long, Long> getParametersMap();

        long getParametersOrDefault(long j, long j2);

        long getParametersOrThrow(long j);

        long getProposalId();

        ByteString getProposerAddress();

        Proposal.State getState();

        int getStateValue();
    }

    public interface ResourceReceiptOrBuilder extends MessageOrBuilder {
        long getEnergyFee();

        long getEnergyPenaltyTotal();

        long getEnergyUsage();

        long getEnergyUsageTotal();

        long getNetFee();

        long getNetUsage();

        long getOriginEnergyUsage();

        Transaction.Result.contractResult getResult();

        int getResultValue();
    }

    public static final class SRL extends GeneratedMessageV3 implements SRLOrBuilder {
        private static final SRL DEFAULT_INSTANCE = new SRL();
        private static final Parser<SRL> PARSER = new AbstractParser<SRL>() {
            @Override
            public SRL parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SRL(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int SRADDRESS_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private List<ByteString> srAddress_;

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SRLOrBuilder {
            private int bitField0_;
            private List<ByteString> srAddress_;

            private Builder() {
                this.srAddress_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.srAddress_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void ensureSrAddressIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.srAddress_ = new ArrayList(this.srAddress_);
                    this.bitField0_ |= 1;
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_SRL_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = SRL.alwaysUseFieldBuilders;
            }

            public Builder addAllSrAddress(Iterable<? extends ByteString> iterable) {
                ensureSrAddressIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.srAddress_);
                onChanged();
                return this;
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            public Builder addSrAddress(ByteString byteString) {
                byteString.getClass();
                ensureSrAddressIsMutable();
                this.srAddress_.add(byteString);
                onChanged();
                return this;
            }

            @Override
            public SRL build() {
                SRL buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public SRL buildPartial() {
                SRL srl = new SRL(this);
                if ((this.bitField0_ & 1) == 1) {
                    this.srAddress_ = Collections.unmodifiableList(this.srAddress_);
                    this.bitField0_ &= -2;
                }
                srl.srAddress_ = this.srAddress_;
                onBuilt();
                return srl;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.srAddress_ = Collections.emptyList();
                this.bitField0_ &= -2;
                return this;
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            public Builder clearSrAddress() {
                this.srAddress_ = Collections.emptyList();
                this.bitField0_ &= -2;
                onChanged();
                return this;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public SRL getDefaultInstanceForType() {
                return SRL.getDefaultInstance();
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_SRL_descriptor;
            }

            @Override
            public ByteString getSrAddress(int i) {
                return this.srAddress_.get(i);
            }

            @Override
            public int getSrAddressCount() {
                return this.srAddress_.size();
            }

            @Override
            public List<ByteString> getSrAddressList() {
                return Collections.unmodifiableList(this.srAddress_);
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_SRL_fieldAccessorTable.ensureFieldAccessorsInitialized(SRL.class, Builder.class);
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            @Override
            public org.tron.protos.Protocol.SRL.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.SRL.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$SRL$Builder");
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof SRL) {
                    return mergeFrom((SRL) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(SRL srl) {
                if (srl == SRL.getDefaultInstance()) {
                    return this;
                }
                if (!srl.srAddress_.isEmpty()) {
                    if (this.srAddress_.isEmpty()) {
                        this.srAddress_ = srl.srAddress_;
                        this.bitField0_ &= -2;
                    } else {
                        ensureSrAddressIsMutable();
                        this.srAddress_.addAll(srl.srAddress_);
                    }
                    onChanged();
                }
                mergeUnknownFields(srl.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            public Builder setSrAddress(int i, ByteString byteString) {
                byteString.getClass();
                ensureSrAddressIsMutable();
                this.srAddress_.set(i, byteString);
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }
        }

        private SRL() {
            this.memoizedIsInitialized = (byte) -1;
            this.srAddress_ = Collections.emptyList();
        }

        private SRL(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                if (!(z2 & true)) {
                                    this.srAddress_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.srAddress_.add(codedInputStream.readBytes());
                            } else if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.srAddress_ = Collections.unmodifiableList(this.srAddress_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        private SRL(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        public static SRL getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_SRL_descriptor;
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SRL srl) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(srl);
        }

        public static SRL parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (SRL) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static SRL parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (SRL) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static SRL parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SRL parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SRL parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (SRL) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static SRL parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (SRL) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        public static SRL parseFrom(InputStream inputStream) throws IOException {
            return (SRL) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static SRL parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (SRL) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static SRL parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static SRL parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static SRL parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SRL parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Parser<SRL> parser() {
            return PARSER;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (obj instanceof SRL) {
                SRL srl = (SRL) obj;
                return getSrAddressList().equals(srl.getSrAddressList()) && this.unknownFields.equals(srl.unknownFields);
            }
            return super.equals(obj);
        }

        @Override
        public SRL getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<SRL> getParserForType() {
            return PARSER;
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.srAddress_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.srAddress_.get(i3));
            }
            int size = i2 + getSrAddressList().size() + this.unknownFields.getSerializedSize();
            this.memoizedSize = size;
            return size;
        }

        @Override
        public ByteString getSrAddress(int i) {
            return this.srAddress_.get(i);
        }

        @Override
        public int getSrAddressCount() {
            return this.srAddress_.size();
        }

        @Override
        public List<ByteString> getSrAddressList() {
            return this.srAddress_;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getSrAddressCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getSrAddressList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_SRL_fieldAccessorTable.ensureFieldAccessorsInitialized(SRL.class, Builder.class);
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.srAddress_.size(); i++) {
                codedOutputStream.writeBytes(1, this.srAddress_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }
    }

    public interface SRLOrBuilder extends MessageOrBuilder {
        ByteString getSrAddress(int i);

        int getSrAddressCount();

        List<ByteString> getSrAddressList();
    }

    public interface TXInputOrBuilder extends MessageOrBuilder {
        TXInput.raw getRawData();

        TXInput.rawOrBuilder getRawDataOrBuilder();

        ByteString getSignature();

        boolean hasRawData();
    }

    public interface TXOutputOrBuilder extends MessageOrBuilder {
        ByteString getPubKeyHash();

        long getValue();
    }

    public interface TXOutputsOrBuilder extends MessageOrBuilder {
        TXOutput getOutputs(int i);

        int getOutputsCount();

        List<TXOutput> getOutputsList();

        TXOutputOrBuilder getOutputsOrBuilder(int i);

        List<? extends TXOutputOrBuilder> getOutputsOrBuilderList();
    }

    public interface TransactionInfoOrBuilder extends MessageOrBuilder {
        boolean containsCancelUnfreezeV2Amount(String str);

        String getAssetIssueID();

        ByteString getAssetIssueIDBytes();

        long getBlockNumber();

        long getBlockTimeStamp();

        @Deprecated
        Map<String, Long> getCancelUnfreezeV2Amount();

        int getCancelUnfreezeV2AmountCount();

        Map<String, Long> getCancelUnfreezeV2AmountMap();

        long getCancelUnfreezeV2AmountOrDefault(String str, long j);

        long getCancelUnfreezeV2AmountOrThrow(String str);

        ByteString getContractAddress();

        ByteString getContractResult(int i);

        int getContractResultCount();

        List<ByteString> getContractResultList();

        long getExchangeId();

        long getExchangeInjectAnotherAmount();

        long getExchangeReceivedAmount();

        long getExchangeWithdrawAnotherAmount();

        long getFee();

        ByteString getId();

        InternalTransaction getInternalTransactions(int i);

        int getInternalTransactionsCount();

        List<InternalTransaction> getInternalTransactionsList();

        InternalTransactionOrBuilder getInternalTransactionsOrBuilder(int i);

        List<? extends InternalTransactionOrBuilder> getInternalTransactionsOrBuilderList();

        TransactionInfo.Log getLog(int i);

        int getLogCount();

        List<TransactionInfo.Log> getLogList();

        TransactionInfo.LogOrBuilder getLogOrBuilder(int i);

        List<? extends TransactionInfo.LogOrBuilder> getLogOrBuilderList();

        MarketOrderDetail getOrderDetails(int i);

        int getOrderDetailsCount();

        List<MarketOrderDetail> getOrderDetailsList();

        MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i);

        List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList();

        ByteString getOrderId();

        long getPackingFee();

        ResourceReceipt getReceipt();

        ResourceReceiptOrBuilder getReceiptOrBuilder();

        ByteString getResMessage();

        TransactionInfo.code getResult();

        int getResultValue();

        long getShieldedTransactionFee();

        long getUnfreezeAmount();

        long getWithdrawAmount();

        long getWithdrawExpireAmount();

        boolean hasReceipt();
    }

    public interface TransactionOrBuilder extends MessageOrBuilder {
        Transaction.raw getRawData();

        Transaction.rawOrBuilder getRawDataOrBuilder();

        Transaction.Result getRet(int i);

        int getRetCount();

        List<Transaction.Result> getRetList();

        Transaction.ResultOrBuilder getRetOrBuilder(int i);

        List<? extends Transaction.ResultOrBuilder> getRetOrBuilderList();

        ByteString getSignature(int i);

        int getSignatureCount();

        List<ByteString> getSignatureList();

        boolean hasRawData();
    }

    public interface TransactionRetOrBuilder extends MessageOrBuilder {
        long getBlockNumber();

        long getBlockTimeStamp();

        TransactionInfo getTransactioninfo(int i);

        int getTransactioninfoCount();

        List<TransactionInfo> getTransactioninfoList();

        TransactionInfoOrBuilder getTransactioninfoOrBuilder(int i);

        List<? extends TransactionInfoOrBuilder> getTransactioninfoOrBuilderList();
    }

    public interface TransactionsOrBuilder extends MessageOrBuilder {
        Transaction getTransactions(int i);

        int getTransactionsCount();

        List<Transaction> getTransactionsList();

        TransactionOrBuilder getTransactionsOrBuilder(int i);

        List<? extends TransactionOrBuilder> getTransactionsOrBuilderList();
    }

    public interface VoteOrBuilder extends MessageOrBuilder {
        ByteString getVoteAddress();

        long getVoteCount();
    }

    public interface VotesOrBuilder extends MessageOrBuilder {
        ByteString getAddress();

        Vote getNewVotes(int i);

        int getNewVotesCount();

        List<Vote> getNewVotesList();

        VoteOrBuilder getNewVotesOrBuilder(int i);

        List<? extends VoteOrBuilder> getNewVotesOrBuilderList();

        Vote getOldVotes(int i);

        int getOldVotesCount();

        List<Vote> getOldVotesList();

        VoteOrBuilder getOldVotesOrBuilder(int i);

        List<? extends VoteOrBuilder> getOldVotesOrBuilderList();
    }

    public interface WitnessOrBuilder extends MessageOrBuilder {
        ByteString getAddress();

        boolean getIsJobs();

        long getLatestBlockNum();

        long getLatestSlotNum();

        ByteString getPubKey();

        long getTotalMissed();

        long getTotalProduced();

        String getUrl();

        ByteString getUrlBytes();

        long getVoteCount();
    }

    public interface authorityOrBuilder extends MessageOrBuilder {
        AccountId getAccount();

        AccountIdOrBuilder getAccountOrBuilder();

        ByteString getPermissionName();

        boolean hasAccount();
    }

    static {
        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(new String[]{"\n\u000fcore/Tron.proto\u0012\bprotocol\u001a\u0019google/protobuf/any.proto\u001a\u0013core/Discover.proto\u001a\u001acore/contract/common.proto\"*\n\tAccountId\u0012\f\n\u0004name\u0018\u0001 \u0001(\f\u0012\u000f\n\u0007address\u0018\u0002 \u0001(\f\"0\n\u0004Vote\u0012\u0014\n\fvote_address\u0018\u0001 \u0001(\f\u0012\u0012\n\nvote_count\u0018\u0002 \u0001(\u0003\"Ñ\u0002\n\bProposal\u0012\u0013\n\u000bproposal_id\u0018\u0001 \u0001(\u0003\u0012\u0018\n\u0010proposer_address\u0018\u0002 \u0001(\f\u00126\n\nparameters\u0018\u0003 \u0003(\u000b2\".protocol.Proposal.ParametersEntry\u0012\u0017\n\u000fexpiration_time\u0018\u0004 \u0001(\u0003\u0012\u0013\n\u000bcreate_time\u0018\u0005 \u0001(\u0003\u0012\u0011\n\tapprovals\u0018\u0006 \u0003(\f\u0012'\n\u0005state\u0018\u0007 \u0001(\u000e2\u0018.protocol.Proposal.State\u001a1\n\u000fParametersEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\"A\n\u0005State\u0012\u000b\n\u0007PENDING\u0010\u0000\u0012\u000f\n\u000bDISAPPROVED\u0010\u0001\u0012\f\n\bAPPROVED\u0010\u0002\u0012\f\n\bCANCELED\u0010\u0003\"¹\u0001\n\bExchange\u0012\u0013\n\u000bexchange_id\u0018\u0001 \u0001(\u0003\u0012\u0017\n\u000fcreator_address\u0018\u0002 \u0001(\f\u0012\u0013\n\u000bcreate_time\u0018\u0003 \u0001(\u0003\u0012\u0016\n\u000efirst_token_id\u0018\u0006 \u0001(\f\u0012\u001b\n\u0013first_token_balance\u0018\u0007 \u0001(\u0003\u0012\u0017\n\u000fsecond_token_id\u0018\b \u0001(\f\u0012\u001c\n\u0014second_token_balance\u0018\t \u0001(\u0003\"ò\u0002\n\u000bMarketOrder\u0012\u0010\n\border_id\u0018\u0001 \u0001(\f\u0012\u0015\n\rowner_address\u0018\u0002 \u0001(\f\u0012\u0013\n\u000bcreate_time\u0018\u0003 \u0001(\u0003\u0012\u0015\n\rsell_token_id\u0018\u0004 \u0001(\f\u0012\u001b\n\u0013sell_token_quantity\u0018\u0005 \u0001(\u0003\u0012\u0014\n\fbuy_token_id\u0018\u0006 \u0001(\f\u0012\u001a\n\u0012buy_token_quantity\u0018\u0007 \u0001(\u0003\u0012\"\n\u001asell_token_quantity_remain\u0018\t \u0001(\u0003\u0012\"\n\u001asell_token_quantity_return\u0018\n \u0001(\u0003\u0012*\n\u0005state\u0018\u000b \u0001(\u000e2\u001b.protocol.MarketOrder.State\u0012\f\n\u0004prev\u0018\f \u0001(\f\u0012\f\n\u0004next\u0018\r \u0001(\f\"/\n\u0005State\u0012\n\n\u0006ACTIVE\u0010\u0000\u0012\f\n\bINACTIVE\u0010\u0001\u0012\f\n\bCANCELED\u0010\u0002\"8\n\u000fMarketOrderList\u0012%\n\u0006orders\u0018\u0001 \u0003(\u000b2\u0015.protocol.MarketOrder\"C\n\u0013MarketOrderPairList\u0012,\n\torderPair\u0018\u0001 \u0003(\u000b2\u0019.protocol.MarketOrderPair\">\n\u000fMarketOrderPair\u0012\u0015\n\rsell_token_id\u0018\u0001 \u0001(\f\u0012\u0014\n\fbuy_token_id\u0018\u0002 \u0001(\f\"_\n\u0012MarketAccountOrder\u0012\u0015\n\rowner_address\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006orders\u0018\u0002 \u0003(\f\u0012\r\n\u0005count\u0018\u0003 \u0001(\u0003\u0012\u0013\n\u000btotal_count\u0018\u0004 \u0001(\u0003\"F\n\u000bMarketPrice\u0012\u001b\n\u0013sell_token_quantity\u0018\u0001 \u0001(\u0003\u0012\u001a\n\u0012buy_token_quantity\u0018\u0002 \u0001(\u0003\"e\n\u000fMarketPriceList\u0012\u0015\n\rsell_token_id\u0018\u0001 \u0001(\f\u0012\u0014\n\fbuy_token_id\u0018\u0002 \u0001(\f\u0012%\n\u0006prices\u0018\u0003 \u0003(\u000b2\u0015.protocol.MarketPrice\"/\n\u0011MarketOrderIdList\u0012\f\n\u0004head\u0018\u0001 \u0001(\f\u0012\f\n\u0004tail\u0018\u0002 \u0001(\f\"\u0081\u0001\n\u000fChainParameters\u0012@\n\u000echainParameter\u0018\u0001 \u0003(\u000b2(.protocol.ChainParameters.ChainParameter\u001a,\n\u000eChainParameter\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003\"¤\u0015\n\u0007Account\u0012\u0014\n\faccount_name\u0018\u0001 \u0001(\f\u0012#\n\u0004type\u0018\u0002 \u0001(\u000e2\u0015.protocol.AccountType\u0012\u000f\n\u0007address\u0018\u0003 \u0001(\f\u0012\u000f\n\u0007balance\u0018\u0004 \u0001(\u0003\u0012\u001d\n\u0005votes\u0018\u0005 \u0003(\u000b2\u000e.protocol.Vote\u0012+\n\u0005asset\u0018\u0006 \u0003(\u000b2\u001c.protocol.Account.AssetEntry\u0012/\n\u0007assetV2\u00188 \u0003(\u000b2\u001e.protocol.Account.AssetV2Entry\u0012(\n\u0006frozen\u0018\u0007 \u0003(\u000b2\u0018.protocol.Account.Frozen\u0012\u0011\n\tnet_usage\u0018\b \u0001(\u0003\u00127\n/acquired_delegated_frozen_balance_for_bandwidth\u0018) \u0001(\u0003\u0012.\n&delegated_frozen_balance_for_bandwidth\u0018* \u0001(\u0003\u0012\u0016\n\u000eold_tron_power\u0018. \u0001(\u0003\u0012,\n\ntron_power\u0018/ \u0001(\u000b2\u0018.protocol.Account.Frozen\u0012\u0017\n\u000fasset_optimized\u0018< \u0001(\b\u0012\u0013\n\u000bcreate_time\u0018\t \u0001(\u0003\u0012\u001c\n\u0014latest_opration_time\u0018\n \u0001(\u0003\u0012\u0011\n\tallowance\u0018\u000b \u0001(\u0003\u0012\u001c\n\u0014latest_withdraw_time\u0018\f \u0001(\u0003\u0012\f\n\u0004code\u0018\r \u0001(\f\u0012\u0012\n\nis_witness\u0018\u000e \u0001(\b\u0012\u0014\n\fis_committee\u0018\u000f \u0001(\b\u0012/\n\rfrozen_supply\u0018\u0010 \u0003(\u000b2\u0018.protocol.Account.Frozen\u0012\u0019\n\u0011asset_issued_name\u0018\u0011 \u0001(\f\u0012\u0017\n\u000fasset_issued_ID\u00189 \u0001(\f\u0012T\n\u001blatest_asset_operation_time\u0018\u0012 \u0003(\u000b2/.protocol.Account.LatestAssetOperationTimeEntry\u0012X\n\u001dlatest_asset_operation_timeV2\u0018: \u0003(\u000b21.protocol.Account.LatestAssetOperationTimeV2Entry\u0012\u0016\n\u000efree_net_usage\u0018\u0013 \u0001(\u0003\u0012F\n\u0014free_asset_net_usage\u0018\u0014 \u0003(\u000b2(.protocol.Account.FreeAssetNetUsageEntry\u0012J\n\u0016free_asset_net_usageV2\u0018; \u0003(\u000b2*.protocol.Account.FreeAssetNetUsageV2Entry\u0012\u001b\n\u0013latest_consume_time\u0018\u0015 \u0001(\u0003\u0012 \n\u0018latest_consume_free_time\u0018\u0016 \u0001(\u0003\u0012\u0012\n\naccount_id\u0018\u0017 \u0001(\f\u0012\u0017\n\u000fnet_window_size\u0018\u0018 \u0001(\u0003\u0012\u001c\n\u0014net_window_optimized\u0018\u0019 \u0001(\b\u0012;\n\u0010account_resource\u0018\u001a \u0001(\u000b2!.protocol.Account.AccountResource\u0012\u0010\n\bcodeHash\u0018\u001e \u0001(\f\u0012.\n\u0010owner_permission\u0018\u001f \u0001(\u000b2\u0014.protocol.Permission\u00120\n\u0012witness_permission\u0018  \u0001(\u000b2\u0014.protocol.Permission\u0012/\n\u0011active_permission\u0018! \u0003(\u000b2\u0014.protocol.Permission\u0012,\n\bfrozenV2\u0018\" \u0003(\u000b2\u001a.protocol.Account.FreezeV2\u00120\n\nunfrozenV2\u0018# \u0003(\u000b2\u001c.protocol.Account.UnFreezeV2\u00120\n(delegated_frozenV2_balance_for_bandwidth\u0018$ \u0001(\u0003\u00129\n1acquired_delegated_frozenV2_balance_for_bandwidth\u0018% \u0001(\u0003\u001a5\n\u0006Frozen\u0012\u0016\n\u000efrozen_balance\u0018\u0001 \u0001(\u0003\u0012\u0013\n\u000bexpire_time\u0018\u0002 \u0001(\u0003\u001a,\n\nAssetEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001a.\n\fAssetV2Entry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001a?\n\u001dLatestAssetOperationTimeEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001aA\n\u001fLatestAssetOperationTimeV2Entry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001a8\n\u0016FreeAssetNetUsageEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001a:\n\u0018FreeAssetNetUsageV2Entry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001aç\u0003\n\u000fAccountResource\u0012\u0014\n\fenergy_usage\u0018\u0001 \u0001(\u0003\u0012;\n\u0019frozen_balance_for_energy\u0018\u0002 \u0001(\u000b2\u0018.protocol.Account.Frozen\u0012&\n\u001elatest_consume_time_for_energy\u0018\u0003 \u0001(\u0003\u00124\n,acquired_delegated_frozen_balance_for_energy\u0018\u0004 \u0001(\u0003\u0012+\n#delegated_frozen_balance_for_energy\u0018\u0005 \u0001(\u0003\u0012\u0015\n\rstorage_limit\u0018\u0006 \u0001(\u0003\u0012\u0015\n\rstorage_usage\u0018\u0007 \u0001(\u0003\u0012$\n\u001clatest_exchange_storage_time\u0018\b \u0001(\u0003\u0012\u001a\n\u0012energy_window_size\u0018\t \u0001(\u0003\u0012-\n%delegated_frozenV2_balance_for_energy\u0018\n \u0001(\u0003\u00126\n.acquired_delegated_frozenV2_balance_for_energy\u0018\u000b \u0001(\u0003\u0012\u001f\n\u0017energy_window_optimized\u0018\f \u0001(\b\u001a@\n\bFreezeV2\u0012$\n\u0004type\u0018\u0001 \u0001(\u000e2\u0016.protocol.ResourceCode\u0012\u000e\n\u0006amount\u0018\u0002 \u0001(\u0003\u001ai\n\nUnFreezeV2\u0012$\n\u0004type\u0018\u0001 \u0001(\u000e2\u0016.protocol.ResourceCode\u0012\u0017\n\u000funfreeze_amount\u0018\u0003 \u0001(\u0003\u0012\u001c\n\u0014unfreeze_expire_time\u0018\u0004 \u0001(\u0003\"&\n\u0003Key\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006weight\u0018\u0002 \u0001(\u0003\"¹\u0001\n\u0011DelegatedResource\u0012\f\n\u0004from\u0018\u0001 \u0001(\f\u0012\n\n\u0002to\u0018\u0002 \u0001(\f\u0012$\n\u001cfrozen_balance_for_bandwidth\u0018\u0003 \u0001(\u0003\u0012!\n\u0019frozen_balance_for_energy\u0018\u0004 \u0001(\u0003\u0012!\n\u0019expire_time_for_bandwidth\u0018\u0005 \u0001(\u0003\u0012\u001e\n\u0016expire_time_for_energy\u0018\u0006 \u0001(\u0003\"J\n\tauthority\u0012$\n\u0007account\u0018\u0001 \u0001(\u000b2\u0013.protocol.AccountId\u0012\u0017\n\u000fpermission_name\u0018\u0002 \u0001(\f\"ñ\u0001\n\nPermission\u00121\n\u0004type\u0018\u0001 \u0001(\u000e2#.protocol.Permission.PermissionType\u0012\n\n\u0002id\u0018\u0002 \u0001(\u0005\u0012\u0017\n\u000fpermission_name\u0018\u0003 \u0001(\t\u0012\u0011\n\tthreshold\u0018\u0004 \u0001(\u0003\u0012\u0011\n\tparent_id\u0018\u0005 \u0001(\u0005\u0012\u0012\n\noperations\u0018\u0006 \u0001(\f\u0012\u001b\n\u0004keys\u0018\u0007 \u0003(\u000b2\r.protocol.Key\"4\n\u000ePermissionType\u0012\t\n\u0005Owner\u0010\u0000\u0012\u000b\n\u0007Witness\u0010\u0001\u0012\n\n\u0006Active\u0010\u0002\"µ\u0001\n\u0007Witness\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\f\u0012\u0011\n\tvoteCount\u0018\u0002 \u0001(\u0003\u0012\u000e\n\u0006pubKey\u0018\u0003 \u0001(\f\u0012\u000b\n\u0003url\u0018\u0004 \u0001(\t\u0012\u0015\n\rtotalProduced\u0018\u0005 \u0001(\u0003\u0012\u0013\n\u000btotalMissed\u0018\u0006 \u0001(\u0003\u0012\u0016\n\u000elatestBlockNum\u0018\u0007 \u0001(\u0003\u0012\u0015\n\rlatestSlotNum\u0018\b \u0001(\u0003\u0012\u000e\n\u0006isJobs\u0018\t \u0001(\b\"^\n\u0005Votes\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\f\u0012!\n\told_votes\u0018\u0002 \u0003(\u000b2\u000e.protocol.Vote\u0012!\n\tnew_votes\u0018\u0003 \u0003(\u000b2\u000e.protocol.Vote\"-\n\bTXOutput\u0012\r\n\u0005value\u0018\u0001 \u0001(\u0003\u0012\u0012\n\npubKeyHash\u0018\u0002 \u0001(\f\"x\n\u0007TXInput\u0012'\n\braw_data\u0018\u0001 \u0001(\u000b2\u0015.protocol.TXInput.raw\u0012\u0011\n\tsignature\u0018\u0004 \u0001(\f\u001a1\n\u0003raw\u0012\f\n\u0004txID\u0018\u0001 \u0001(\f\u0012\f\n\u0004vout\u0018\u0002 \u0001(\u0003\u0012\u000e\n\u0006pubKey\u0018\u0003 \u0001(\f\"0\n\tTXOutputs\u0012#\n\u0007outputs\u0018\u0001 \u0003(\u000b2\u0012.protocol.TXOutput\"ó\u0001\n\u000fResourceReceipt\u0012\u0014\n\fenergy_usage\u0018\u0001 \u0001(\u0003\u0012\u0012\n\nenergy_fee\u0018\u0002 \u0001(\u0003\u0012\u001b\n\u0013origin_energy_usage\u0018\u0003 \u0001(\u0003\u0012\u001a\n\u0012energy_usage_total\u0018\u0004 \u0001(\u0003\u0012\u0011\n\tnet_usage\u0018\u0005 \u0001(\u0003\u0012\u000f\n\u0007net_fee\u0018\u0006 \u0001(\u0003\u0012;\n\u0006result\u0018\u0007 \u0001(\u000e2+.protocol.Transaction.Result.contractResult\u0012\u001c\n\u0014energy_penalty_total\u0018\b \u0001(\u0003\"r\n\u0011MarketOrderDetail\u0012\u0014\n\fmakerOrderId\u0018\u0001 \u0001(\f\u0012\u0014\n\ftakerOrderId\u0018\u0002 \u0001(\f\u0012\u0018\n\u0010fillSellQuantity\u0018\u0003 \u0001(\u0003\u0012\u0017\n\u000ffillBuyQuantity\u0018\u0004 \u0001(\u0003\"\u0094\u0015\n\u000bTransaction\u0012+\n\braw_data\u0018\u0001 \u0001(\u000b2\u0019.protocol.Transaction.raw\u0012\u0011\n\tsignature\u0018\u0002 \u0003(\f\u0012)\n\u0003ret\u0018\u0005 \u0003(\u000b2\u001c.protocol.Transaction.Result\u001a¸\n\n\bContract\u00129\n\u0004type\u0018\u0001 \u0001(\u000e2+.protocol.Transaction.Contract.ContractType\u0012'\n\tparameter\u0018\u0002 \u0001(\u000b2\u0014.google.protobuf.Any\u0012\u0010\n\bprovider\u0018\u0003 \u0001(\f\u0012\u0014\n\fContractName\u0018\u0004 \u0001(\f\u0012\u0015\n\rPermission_id\u0018\u0005 \u0001(\u0005\"\u0088\t\n\fContractType\u0012\u0019\n\u0015AccountCreateContract\u0010\u0000\u0012\u0014\n\u0010TransferContract\u0010\u0001\u0012\u0019\n\u0015TransferAssetContract\u0010\u0002\u0012\u0015\n\u0011VoteAssetContract\u0010\u0003\u0012\u0017\n\u0013VoteWitnessContract\u0010\u0004\u0012\u0019\n\u0015WitnessCreateContract\u0010\u0005\u0012\u0016\n\u0012AssetIssueContract\u0010\u0006\u0012\u0019\n\u0015WitnessUpdateContract\u0010\b\u0012!\n\u001dParticipateAssetIssueContract\u0010\t\u0012\u0019\n\u0015AccountUpdateContract\u0010\n\u0012\u0019\n\u0015FreezeBalanceContract\u0010\u000b\u0012\u001b\n\u0017UnfreezeBalanceContract\u0010\f\u0012\u001b\n\u0017WithdrawBalanceContract\u0010\r\u0012\u0019\n\u0015UnfreezeAssetContract\u0010\u000e\u0012\u0017\n\u0013UpdateAssetContract\u0010\u000f\u0012\u001a\n\u0016ProposalCreateContract\u0010\u0010\u0012\u001b\n\u0017ProposalApproveContract\u0010\u0011\u0012\u001a\n\u0016ProposalDeleteContract\u0010\u0012\u0012\u0018\n\u0014SetAccountIdContract\u0010\u0013\u0012\u0012\n\u000eCustomContract\u0010\u0014\u0012\u0017\n\u0013CreateSmartContract\u0010\u001e\u0012\u0018\n\u0014TriggerSmartContract\u0010\u001f\u0012\u000f\n\u000bGetContract\u0010 \u0012\u0019\n\u0015UpdateSettingContract\u0010!\u0012\u001a\n\u0016ExchangeCreateContract\u0010)\u0012\u001a\n\u0016ExchangeInjectContract\u0010*\u0012\u001c\n\u0018ExchangeWithdrawContract\u0010+\u0012\u001f\n\u001bExchangeTransactionContract\u0010,\u0012\u001d\n\u0019UpdateEnergyLimitContract\u0010-\u0012#\n\u001fAccountPermissionUpdateContract\u0010.\u0012\u0014\n\u0010ClearABIContract\u00100\u0012\u001b\n\u0017UpdateBrokerageContract\u00101\u0012\u001c\n\u0018ShieldedTransferContract\u00103\u0012\u001b\n\u0017MarketSellAssetContract\u00104\u0012\u001d\n\u0019MarketCancelOrderContract\u00105\u0012\u001b\n\u0017FreezeBalanceV2Contract\u00106\u0012\u001d\n\u0019UnfreezeBalanceV2Contract\u00107\u0012\"\n\u001eWithdrawExpireUnfreezeContract\u00108\u0012\u001c\n\u0018DelegateResourceContract\u00109\u0012\u001e\n\u001aUnDelegateResourceContract\u0010:\u0012\u001f\n\u001bCancelAllUnfreezeV2Contract\u0010;\u001aß\u0007\n\u0006Result\u0012\u000b\n\u0003fee\u0018\u0001 \u0001(\u0003\u0012.\n\u0003ret\u0018\u0002 \u0001(\u000e2!.protocol.Transaction.Result.code\u0012@\n\u000bcontractRet\u0018\u0003 \u0001(\u000e2+.protocol.Transaction.Result.contractResult\u0012\u0014\n\fassetIssueID\u0018\u000e \u0001(\t\u0012\u0017\n\u000fwithdraw_amount\u0018\u000f \u0001(\u0003\u0012\u0017\n\u000funfreeze_amount\u0018\u0010 \u0001(\u0003\u0012 \n\u0018exchange_received_amount\u0018\u0012 \u0001(\u0003\u0012&\n\u001eexchange_inject_another_amount\u0018\u0013 \u0001(\u0003\u0012(\n exchange_withdraw_another_amount\u0018\u0014 \u0001(\u0003\u0012\u0013\n\u000bexchange_id\u0018\u0015 \u0001(\u0003\u0012 \n\u0018shielded_transaction_fee\u0018\u0016 \u0001(\u0003\u0012\u000f\n\u0007orderId\u0018\u0019 \u0001(\f\u00121\n\forderDetails\u0018\u001a \u0003(\u000b2\u001b.protocol.MarketOrderDetail\u0012\u001e\n\u0016withdraw_expire_amount\u0018\u001b \u0001(\u0003\u0012Z\n\u0018cancel_unfreezeV2_amount\u0018\u001c \u0003(\u000b28.protocol.Transaction.Result.CancelUnfreezeV2AmountEntry\u001a=\n\u001bCancelUnfreezeV2AmountEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\"\u001e\n\u0004code\u0012\n\n\u0006SUCESS\u0010\u0000\u0012\n\n\u0006FAILED\u0010\u0001\"Ã\u0002\n\u000econtractResult\u0012\u000b\n\u0007DEFAULT\u0010\u0000\u0012\u000b\n\u0007SUCCESS\u0010\u0001\u0012\n\n\u0006REVERT\u0010\u0002\u0012\u0018\n\u0014BAD_JUMP_DESTINATION\u0010\u0003\u0012\u0011\n\rOUT_OF_MEMORY\u0010\u0004\u0012\u0018\n\u0014PRECOMPILED_CONTRACT\u0010\u0005\u0012\u0013\n\u000fSTACK_TOO_SMALL\u0010\u0006\u0012\u0013\n\u000fSTACK_TOO_LARGE\u0010\u0007\u0012\u0015\n\u0011ILLEGAL_OPERATION\u0010\b\u0012\u0012\n\u000eSTACK_OVERFLOW\u0010\t\u0012\u0011\n\rOUT_OF_ENERGY\u0010\n\u0012\u000f\n\u000bOUT_OF_TIME\u0010\u000b\u0012\u0017\n\u0013JVM_STACK_OVER_FLOW\u0010\f\u0012\u000b\n\u0007UNKNOWN\u0010\r\u0012\u0013\n\u000fTRANSFER_FAILED\u0010\u000e\u0012\u0010\n\fINVALID_CODE\u0010\u000f\u001aü\u0001\n\u0003raw\u0012\u0017\n\u000fref_block_bytes\u0018\u0001 \u0001(\f\u0012\u0015\n\rref_block_num\u0018\u0003 \u0001(\u0003\u0012\u0016\n\u000eref_block_hash\u0018\u0004 \u0001(\f\u0012\u0012\n\nexpiration\u0018\b \u0001(\u0003\u0012\"\n\u0005auths\u0018\t \u0003(\u000b2\u0013.protocol.authority\u0012\f\n\u0004data\u0018\n \u0001(\f\u00120\n\bcontract\u0018\u000b \u0003(\u000b2\u001e.protocol.Transaction.Contract\u0012\u000f\n\u0007scripts\u0018\f \u0001(\f\u0012\u0011\n\ttimestamp\u0018\u000e \u0001(\u0003\u0012\u0011\n\tfee_limit\u0018\u0012 \u0001(\u0003\"¼\u0007\n\u000fTransactionInfo\u0012\n\n\u0002id\u0018\u0001 \u0001(\f\u0012\u000b\n\u0003fee\u0018\u0002 \u0001(\u0003\u0012\u0013\n\u000bblockNumber\u0018\u0003 \u0001(\u0003\u0012\u0016\n\u000eblockTimeStamp\u0018\u0004 \u0001(\u0003\u0012\u0016\n\u000econtractResult\u0018\u0005 \u0003(\f\u0012\u0018\n\u0010contract_address\u0018\u0006 \u0001(\f\u0012*\n\u0007receipt\u0018\u0007 \u0001(\u000b2\u0019.protocol.ResourceReceipt\u0012*\n\u0003log\u0018\b \u0003(\u000b2\u001d.protocol.TransactionInfo.Log\u0012.\n\u0006result\u0018\t \u0001(\u000e2\u001e.protocol.TransactionInfo.code\u0012\u0012\n\nresMessage\u0018\n \u0001(\f\u0012\u0014\n\fassetIssueID\u0018\u000e \u0001(\t\u0012\u0017\n\u000fwithdraw_amount\u0018\u000f \u0001(\u0003\u0012\u0017\n\u000funfreeze_amount\u0018\u0010 \u0001(\u0003\u0012<\n\u0015internal_transactions\u0018\u0011 \u0003(\u000b2\u001d.protocol.InternalTransaction\u0012 \n\u0018exchange_received_amount\u0018\u0012 \u0001(\u0003\u0012&\n\u001eexchange_inject_another_amount\u0018\u0013 \u0001(\u0003\u0012(\n exchange_withdraw_another_amount\u0018\u0014 \u0001(\u0003\u0012\u0013\n\u000bexchange_id\u0018\u0015 \u0001(\u0003\u0012 \n\u0018shielded_transaction_fee\u0018\u0016 \u0001(\u0003\u0012\u000f\n\u0007orderId\u0018\u0019 \u0001(\f\u00121\n\forderDetails\u0018\u001a \u0003(\u000b2\u001b.protocol.MarketOrderDetail\u0012\u0012\n\npackingFee\u0018\u001b \u0001(\u0003\u0012\u001e\n\u0016withdraw_expire_amount\u0018\u001c \u0001(\u0003\u0012W\n\u0018cancel_unfreezeV2_amount\u0018\u001d \u0003(\u000b25.protocol.TransactionInfo.CancelUnfreezeV2AmountEntry\u001a4\n\u0003Log\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006topics\u0018\u0002 \u0003(\f\u0012\f\n\u0004data\u0018\u0003 \u0001(\f\u001a=\n\u001bCancelUnfreezeV2AmountEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\"\u001e\n\u0004code\u0012\n\n\u0006SUCESS\u0010\u0000\u0012\n\n\u0006FAILED\u0010\u0001\"q\n\u000eTransactionRet\u0012\u0013\n\u000bblockNumber\u0018\u0001 \u0001(\u0003\u0012\u0016\n\u000eblockTimeStamp\u0018\u0002 \u0001(\u0003\u00122\n\u000ftransactioninfo\u0018\u0003 \u0003(\u000b2\u0019.protocol.TransactionInfo\";\n\fTransactions\u0012+\n\ftransactions\u0018\u0001 \u0003(\u000b2\u0015.protocol.Transaction\"\u0080\u0002\n\u000bBlockHeader\u0012+\n\braw_data\u0018\u0001 \u0001(\u000b2\u0019.protocol.BlockHeader.raw\u0012\u0019\n\u0011witness_signature\u0018\u0002 \u0001(\f\u001a¨\u0001\n\u0003raw\u0012\u0011\n\ttimestamp\u0018\u0001 \u0001(\u0003\u0012\u0012\n\ntxTrieRoot\u0018\u0002 \u0001(\f\u0012\u0012\n\nparentHash\u0018\u0003 \u0001(\f\u0012\u000e\n\u0006number\u0018\u0007 \u0001(\u0003\u0012\u0012\n\nwitness_id\u0018\b \u0001(\u0003\u0012\u0017\n\u000fwitness_address\u0018\t \u0001(\f\u0012\u000f\n\u0007version\u0018\n \u0001(\u0005\u0012\u0018\n\u0010accountStateRoot\u0018\u000b \u0001(\f\"a\n\u0005Block\u0012+\n\ftransactions\u0018\u0001 \u0003(\u000b2\u0015.protocol.Transaction\u0012+\n\fblock_header\u0018\u0002 \u0001(\u000b2\u0015.protocol.BlockHeader\"|\n\u000eChainInventory\u0012-\n\u0003ids\u0018\u0001 \u0003(\u000b2 .protocol.ChainInventory.BlockId\u0012\u0012\n\nremain_num\u0018\u0002 \u0001(\u0003\u001a'\n\u0007BlockId\u0012\f\n\u0004hash\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006number\u0018\u0002 \u0001(\u0003\"¿\u0001\n\u000eBlockInventory\u0012-\n\u0003ids\u0018\u0001 \u0003(\u000b2 .protocol.BlockInventory.BlockId\u0012+\n\u0004type\u0018\u0002 \u0001(\u000e2\u001d.protocol.BlockInventory.Type\u001a'\n\u0007BlockId\u0012\f\n\u0004hash\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006number\u0018\u0002 \u0001(\u0003\"(\n\u0004Type\u0012\b\n\u0004SYNC\u0010\u0000\u0012\u000b\n\u0007ADVTISE\u0010\u0001\u0012\t\n\u0005FETCH\u0010\u0002\"n\n\tInventory\u0012/\n\u0004type\u0018\u0001 \u0001(\u000e2!.protocol.Inventory.InventoryType\u0012\u000b\n\u0003ids\u0018\u0002 \u0003(\f\"#\n\rInventoryType\u0012\u0007\n\u0003TRX\u0010\u0000\u0012\t\n\u0005BLOCK\u0010\u0001\"å\u0001\n\u0005Items\u0012&\n\u0004type\u0018\u0001 \u0001(\u000e2\u0018.protocol.Items.ItemType\u0012\u001f\n\u0006blocks\u0018\u0002 \u0003(\u000b2\u000f.protocol.Block\u0012,\n\rblock_headers\u0018\u0003 \u0003(\u000b2\u0015.protocol.BlockHeader\u0012+\n\ftransactions\u0018\u0004 \u0003(\u000b2\u0015.protocol.Transaction\"8\n\bItemType\u0012\u0007\n\u0003ERR\u0010\u0000\u0012\u0007\n\u0003TRX\u0010\u0001\u0012\t\n\u0005BLOCK\u0010\u0002\u0012\u000f\n\u000bBLOCKHEADER\u0010\u0003\"4\n\u0011DynamicProperties\u0012\u001f\n\u0017last_solidity_block_num\u0018\u0001 \u0001(\u0003\"9\n\u0011DisconnectMessage\u0012$\n\u0006reason\u0018\u0001 \u0001(\u000e2\u0014.protocol.ReasonCode\"î\u0002\n\fHelloMessage\u0012 \n\u0004from\u0018\u0001 \u0001(\u000b2\u0012.protocol.Endpoint\u0012\u000f\n\u0007version\u0018\u0002 \u0001(\u0005\u0012\u0011\n\ttimestamp\u0018\u0003 \u0001(\u0003\u00126\n\u000egenesisBlockId\u0018\u0004 \u0001(\u000b2\u001e.protocol.HelloMessage.BlockId\u00124\n\fsolidBlockId\u0018\u0005 \u0001(\u000b2\u001e.protocol.HelloMessage.BlockId\u00123\n\u000bheadBlockId\u0018\u0006 \u0001(\u000b2\u001e.protocol.HelloMessage.BlockId\u0012\u000f\n\u0007address\u0018\u0007 \u0001(\f\u0012\u0011\n\tsignature\u0018\b \u0001(\f\u0012\u0010\n\bnodeType\u0018\t \u0001(\u0005\u0012\u0016\n\u000elowestBlockNum\u0018\n \u0001(\u0003\u001a'\n\u0007BlockId\u0012\f\n\u0004hash\u0018\u0001 \u0001(\f\u0012\u000e\n\u0006number\u0018\u0002 \u0001(\u0003\"ÿ\u0001\n\u0013InternalTransaction\u0012\f\n\u0004hash\u0018\u0001 \u0001(\f\u0012\u0016\n\u000ecaller_address\u0018\u0002 \u0001(\f\u0012\u001a\n\u0012transferTo_address\u0018\u0003 \u0001(\f\u0012B\n\rcallValueInfo\u0018\u0004 \u0003(\u000b2+.protocol.InternalTransaction.CallValueInfo\u0012\f\n\u0004note\u0018\u0005 \u0001(\f\u0012\u0010\n\brejected\u0018\u0006 \u0001(\b\u0012\r\n\u0005extra\u0018\u0007 \u0001(\t\u001a3\n\rCallValueInfo\u0012\u0011\n\tcallValue\u0018\u0001 \u0001(\u0003\u0012\u000f\n\u0007tokenId\u0018\u0002 \u0001(\t\"m\n\u001dDelegatedResourceAccountIndex\u0012\u000f\n\u0007account\u0018\u0001 \u0001(\f\u0012\u0014\n\ffromAccounts\u0018\u0002 \u0003(\f\u0012\u0012\n\ntoAccounts\u0018\u0003 \u0003(\f\u0012\u0011\n\ttimestamp\u0018\u0004 \u0001(\u0003\"\u009f\u0011\n\bNodeInfo\u0012\u0014\n\fbeginSyncNum\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005block\u0018\u0002 \u0001(\t\u0012\u0015\n\rsolidityBlock\u0018\u0003 \u0001(\t\u0012\u001b\n\u0013currentConnectCount\u0018\u0004 \u0001(\u0005\u0012\u001a\n\u0012activeConnectCount\u0018\u0005 \u0001(\u0005\u0012\u001b\n\u0013passiveConnectCount\u0018\u0006 \u0001(\u0005\u0012\u0011\n\ttotalFlow\u0018\u0007 \u0001(\u0003\u00121\n\fpeerInfoList\u0018\b \u0003(\u000b2\u001b.protocol.NodeInfo.PeerInfo\u00129\n\u000econfigNodeInfo\u0018\t \u0001(\u000b2!.protocol.NodeInfo.ConfigNodeInfo\u00123\n\u000bmachineInfo\u0018\n \u0001(\u000b2\u001e.protocol.NodeInfo.MachineInfo\u0012H\n\u0013cheatWitnessInfoMap\u0018\u000b \u0003(\u000b2+.protocol.NodeInfo.CheatWitnessInfoMapEntry\u001a:\n\u0018CheatWitnessInfoMapEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001\u001aÍ\u0004\n\bPeerInfo\u0012\u0015\n\rlastSyncBlock\u0018\u0001 \u0001(\t\u0012\u0011\n\tremainNum\u0018\u0002 \u0001(\u0003\u0012\u001b\n\u0013lastBlockUpdateTime\u0018\u0003 \u0001(\u0003\u0012\u0010\n\bsyncFlag\u0018\u0004 \u0001(\b\u0012\u001f\n\u0017headBlockTimeWeBothHave\u0018\u0005 \u0001(\u0003\u0012\u0018\n\u0010needSyncFromPeer\u0018\u0006 \u0001(\b\u0012\u0016\n\u000eneedSyncFromUs\u0018\u0007 \u0001(\b\u0012\f\n\u0004host\u0018\b \u0001(\t\u0012\f\n\u0004port\u0018\t \u0001(\u0005\u0012\u000e\n\u0006nodeId\u0018\n \u0001(\t\u0012\u0013\n\u000bconnectTime\u0018\u000b \u0001(\u0003\u0012\u0012\n\navgLatency\u0018\f \u0001(\u0001\u0012\u0017\n\u000fsyncToFetchSize\u0018\r \u0001(\u0005\u0012\u001e\n\u0016syncToFetchSizePeekNum\u0018\u000e \u0001(\u0003\u0012\u001e\n\u0016syncBlockRequestedSize\u0018\u000f \u0001(\u0005\u0012\u0015\n\runFetchSynNum\u0018\u0010 \u0001(\u0003\u0012\u0017\n\u000fblockInPorcSize\u0018\u0011 \u0001(\u0005\u0012\u001b\n\u0013headBlockWeBothHave\u0018\u0012 \u0001(\t\u0012\u0010\n\bisActive\u0018\u0013 \u0001(\b\u0012\r\n\u0005score\u0018\u0014 \u0001(\u0005\u0012\u0011\n\tnodeCount\u0018\u0015 \u0001(\u0005\u0012\u000e\n\u0006inFlow\u0018\u0016 \u0001(\u0003\u0012\u0017\n\u000fdisconnectTimes\u0018\u0017 \u0001(\u0005\u0012\u001d\n\u0015localDisconnectReason\u0018\u0018 \u0001(\t\u0012\u001e\n\u0016remoteDisconnectReason\u0018\u0019 \u0001(\t\u001aå\u0003\n\u000eConfigNodeInfo\u0012\u0013\n\u000bcodeVersion\u0018\u0001 \u0001(\t\u0012\u0012\n\np2pVersion\u0018\u0002 \u0001(\t\u0012\u0012\n\nlistenPort\u0018\u0003 \u0001(\u0005\u0012\u0016\n\u000ediscoverEnable\u0018\u0004 \u0001(\b\u0012\u0016\n\u000eactiveNodeSize\u0018\u0005 \u0001(\u0005\u0012\u0017\n\u000fpassiveNodeSize\u0018\u0006 \u0001(\u0005\u0012\u0014\n\fsendNodeSize\u0018\u0007 \u0001(\u0005\u0012\u0017\n\u000fmaxConnectCount\u0018\b \u0001(\u0005\u0012\u001d\n\u0015sameIpMaxConnectCount\u0018\t \u0001(\u0005\u0012\u0018\n\u0010backupListenPort\u0018\n \u0001(\u0005\u0012\u0018\n\u0010backupMemberSize\u0018\u000b \u0001(\u0005\u0012\u0016\n\u000ebackupPriority\u0018\f \u0001(\u0005\u0012\u0011\n\tdbVersion\u0018\r \u0001(\u0005\u0012\u001c\n\u0014minParticipationRate\u0018\u000e \u0001(\u0005\u0012\u0017\n\u000fsupportConstant\u0018\u000f \u0001(\b\u0012\u0014\n\fminTimeRatio\u0018\u0010 \u0001(\u0001\u0012\u0014\n\fmaxTimeRatio\u0018\u0011 \u0001(\u0001\u0012 \n\u0018allowCreationOfContracts\u0018\u0012 \u0001(\u0003\u0012\u001b\n\u0013allowAdaptiveEnergy\u0018\u0013 \u0001(\u0003\u001a\u008c\u0005\n\u000bMachineInfo\u0012\u0013\n\u000bthreadCount\u0018\u0001 \u0001(\u0005\u0012\u001b\n\u0013deadLockThreadCount\u0018\u0002 \u0001(\u0005\u0012\u0010\n\bcpuCount\u0018\u0003 \u0001(\u0005\u0012\u0013\n\u000btotalMemory\u0018\u0004 \u0001(\u0003\u0012\u0012\n\nfreeMemory\u0018\u0005 \u0001(\u0003\u0012\u000f\n\u0007cpuRate\u0018\u0006 \u0001(\u0001\u0012\u0013\n\u000bjavaVersion\u0018\u0007 \u0001(\t\u0012\u000e\n\u0006osName\u0018\b \u0001(\t\u0012\u0016\n\u000ejvmTotalMemory\u0018\t \u0001(\u0003\u0012\u0015\n\rjvmFreeMemory\u0018\n \u0001(\u0003\u0012\u0016\n\u000eprocessCpuRate\u0018\u000b \u0001(\u0001\u0012I\n\u0012memoryDescInfoList\u0018\f \u0003(\u000b2-.protocol.NodeInfo.MachineInfo.MemoryDescInfo\u0012Q\n\u0016deadLockThreadInfoList\u0018\r \u0003(\u000b21.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo\u001ac\n\u000eMemoryDescInfo\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u0010\n\binitSize\u0018\u0002 \u0001(\u0003\u0012\u000f\n\u0007useSize\u0018\u0003 \u0001(\u0003\u0012\u000f\n\u0007maxSize\u0018\u0004 \u0001(\u0003\u0012\u000f\n\u0007useRate\u0018\u0005 \u0001(\u0001\u001a\u008f\u0001\n\u0012DeadLockThreadInfo\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u0010\n\blockName\u0018\u0002 \u0001(\t\u0012\u0011\n\tlockOwner\u0018\u0003 \u0001(\t\u0012\r\n\u0005state\u0018\u0004 \u0001(\t\u0012\u0011\n\tblockTime\u0018\u0005 \u0001(\u0003\u0012\u0010\n\bwaitTime\u0018\u0006 \u0001(\u0003\u0012\u0012\n\nstackTrace\u0018\u0007 \u0001(\t\"½\u0012\n\u000bMetricsInfo\u0012\u0010\n\binterval\u0018\u0001 \u0001(\u0003\u0012,\n\u0004node\u0018\u0002 \u0001(\u000b2\u001e.protocol.MetricsInfo.NodeInfo\u00128\n\nblockchain\u0018\u0003 \u0001(\u000b2$.protocol.MetricsInfo.BlockChainInfo\u0012*\n\u0003net\u0018\u0004 \u0001(\u000b2\u001d.protocol.MetricsInfo.NetInfo\u001aO\n\bNodeInfo\u0012\n\n\u0002ip\u0018\u0001 \u0001(\t\u0012\u0010\n\bnodeType\u0018\u0002 \u0001(\u0005\u0012\u000f\n\u0007version\u0018\u0003 \u0001(\t\u0012\u0014\n\fbackupStatus\u0018\u0004 \u0001(\u0005\u001aó\u0004\n\u000eBlockChainInfo\u0012\u0014\n\fheadBlockNum\u0018\u0001 \u0001(\u0003\u0012\u001a\n\u0012headBlockTimestamp\u0018\u0002 \u0001(\u0003\u0012\u0015\n\rheadBlockHash\u0018\u0003 \u0001(\t\u0012\u0011\n\tforkCount\u0018\u0004 \u0001(\u0005\u0012\u0015\n\rfailForkCount\u0018\u0005 \u0001(\u0005\u00128\n\u0010blockProcessTime\u0018\u0006 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012+\n\u0003tps\u0018\u0007 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012\u001c\n\u0014transactionCacheSize\u0018\b \u0001(\u0005\u00129\n\u0011missedTransaction\u0018\t \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012?\n\twitnesses\u0018\n \u0003(\u000b2,.protocol.MetricsInfo.BlockChainInfo.Witness\u0012\u001b\n\u0013failProcessBlockNum\u0018\u000b \u0001(\u0003\u0012\u001e\n\u0016failProcessBlockReason\u0018\f \u0001(\t\u0012C\n\ndupWitness\u0018\r \u0003(\u000b2/.protocol.MetricsInfo.BlockChainInfo.DupWitness\u001a+\n\u0007Witness\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\t\u0012\u000f\n\u0007version\u0018\u0002 \u0001(\u0005\u001a>\n\nDupWitness\u0012\u000f\n\u0007address\u0018\u0001 \u0001(\t\u0012\u0010\n\bblockNum\u0018\u0002 \u0001(\u0003\u0012\r\n\u0005count\u0018\u0003 \u0001(\u0005\u001au\n\bRateInfo\u0012\r\n\u0005count\u0018\u0001 \u0001(\u0003\u0012\u0010\n\bmeanRate\u0018\u0002 \u0001(\u0001\u0012\u0015\n\roneMinuteRate\u0018\u0003 \u0001(\u0001\u0012\u0016\n\u000efiveMinuteRate\u0018\u0004 \u0001(\u0001\u0012\u0019\n\u0011fifteenMinuteRate\u0018\u0005 \u0001(\u0001\u001aÉ\n\n\u0007NetInfo\u0012\u0017\n\u000ferrorProtoCount\u0018\u0001 \u0001(\u0005\u00122\n\u0003api\u0018\u0002 \u0001(\u000b2%.protocol.MetricsInfo.NetInfo.ApiInfo\u0012\u0017\n\u000fconnectionCount\u0018\u0003 \u0001(\u0005\u0012\u001c\n\u0014validConnectionCount\u0018\u0004 \u0001(\u0005\u00124\n\ftcpInTraffic\u0018\u0005 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u00125\n\rtcpOutTraffic\u0018\u0006 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012\u001a\n\u0012disconnectionCount\u0018\u0007 \u0001(\u0005\u0012R\n\u0013disconnectionDetail\u0018\b \u0003(\u000b25.protocol.MetricsInfo.NetInfo.DisconnectionDetailInfo\u00124\n\fudpInTraffic\u0018\t \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u00125\n\rudpOutTraffic\u0018\n \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012:\n\u0007latency\u0018\u000b \u0001(\u000b2).protocol.MetricsInfo.NetInfo.LatencyInfo\u001a\u0092\u0003\n\u0007ApiInfo\u0012+\n\u0003qps\u0018\u0001 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012/\n\u0007failQps\u0018\u0002 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u00122\n\noutTraffic\u0018\u0003 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012C\n\u0006detail\u0018\u0004 \u0003(\u000b23.protocol.MetricsInfo.NetInfo.ApiInfo.ApiDetailInfo\u001a¯\u0001\n\rApiDetailInfo\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012+\n\u0003qps\u0018\u0002 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u0012/\n\u0007failQps\u0018\u0003 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u00122\n\noutTraffic\u0018\u0004 \u0001(\u000b2\u001e.protocol.MetricsInfo.RateInfo\u001a8\n\u0017DisconnectionDetailInfo\u0012\u000e\n\u0006reason\u0018\u0001 \u0001(\t\u0012\r\n\u0005count\u0018\u0002 \u0001(\u0005\u001aä\u0002\n\u000bLatencyInfo\u0012\r\n\u0005top99\u0018\u0001 \u0001(\u0005\u0012\r\n\u0005top95\u0018\u0002 \u0001(\u0005\u0012\r\n\u0005top75\u0018\u0003 \u0001(\u0005\u0012\u0012\n\ntotalCount\u0018\u0004 \u0001(\u0005\u0012\u000f\n\u0007delay1S\u0018\u0005 \u0001(\u0005\u0012\u000f\n\u0007delay2S\u0018\u0006 \u0001(\u0005\u0012\u000f\n\u0007delay3S\u0018\u0007 \u0001(\u0005\u0012K\n\u0006detail\u0018\b \u0003(\u000b2;.protocol.MetricsInfo.NetInfo.Late", "ncyInfo.LatencyDetailInfo\u001a\u0093\u0001\n\u0011LatencyDetailInfo\u0012\u000f\n\u0007witness\u0018\u0001 \u0001(\t\u0012\r\n\u0005top99\u0018\u0002 \u0001(\u0005\u0012\r\n\u0005top95\u0018\u0003 \u0001(\u0005\u0012\r\n\u0005top75\u0018\u0004 \u0001(\u0005\u0012\r\n\u0005count\u0018\u0005 \u0001(\u0005\u0012\u000f\n\u0007delay1S\u0018\u0006 \u0001(\u0005\u0012\u000f\n\u0007delay2S\u0018\u0007 \u0001(\u0005\u0012\u000f\n\u0007delay3S\u0018\b \u0001(\u0005\"Ø\u0002\n\u000bPBFTMessage\u0012+\n\braw_data\u0018\u0001 \u0001(\u000b2\u0019.protocol.PBFTMessage.Raw\u0012\u0011\n\tsignature\u0018\u0002 \u0001(\f\u001a\u0096\u0001\n\u0003Raw\u0012/\n\bmsg_type\u0018\u0001 \u0001(\u000e2\u001d.protocol.PBFTMessage.MsgType\u00121\n\tdata_type\u0018\u0002 \u0001(\u000e2\u001e.protocol.PBFTMessage.DataType\u0012\u000e\n\u0006view_n\u0018\u0003 \u0001(\u0003\u0012\r\n\u0005epoch\u0018\u0004 \u0001(\u0003\u0012\f\n\u0004data\u0018\u0005 \u0001(\f\"P\n\u0007MsgType\u0012\u000f\n\u000bVIEW_CHANGE\u0010\u0000\u0012\u000b\n\u0007REQUEST\u0010\u0001\u0012\u000e\n\nPREPREPARE\u0010\u0002\u0012\u000b\n\u0007PREPARE\u0010\u0003\u0012\n\n\u0006COMMIT\u0010\u0004\"\u001e\n\bDataType\u0012\t\n\u0005BLOCK\u0010\u0000\u0012\u0007\n\u0003SRL\u0010\u0001\"3\n\u0010PBFTCommitResult\u0012\f\n\u0004data\u0018\u0001 \u0001(\f\u0012\u0011\n\tsignature\u0018\u0002 \u0003(\f\"\u0018\n\u0003SRL\u0012\u0011\n\tsrAddress\u0018\u0001 \u0003(\f*7\n\u000bAccountType\u0012\n\n\u0006Normal\u0010\u0000\u0012\u000e\n\nAssetIssue\u0010\u0001\u0012\f\n\bContract\u0010\u0002*ù\u0003\n\nReasonCode\u0012\r\n\tREQUESTED\u0010\u0000\u0012\u0010\n\fBAD_PROTOCOL\u0010\u0002\u0012\u0012\n\u000eTOO_MANY_PEERS\u0010\u0004\u0012\u0012\n\u000eDUPLICATE_PEER\u0010\u0005\u0012\u0019\n\u0015INCOMPATIBLE_PROTOCOL\u0010\u0006\u0012\u0016\n\u0012RANDOM_ELIMINATION\u0010\u0007\u0012\u0010\n\fPEER_QUITING\u0010\b\u0012\u0017\n\u0013UNEXPECTED_IDENTITY\u0010\t\u0012\u0012\n\u000eLOCAL_IDENTITY\u0010\n\u0012\u0010\n\fPING_TIMEOUT\u0010\u000b\u0012\u000f\n\u000bUSER_REASON\u0010\u0010\u0012\t\n\u0005RESET\u0010\u0011\u0012\r\n\tSYNC_FAIL\u0010\u0012\u0012\u000e\n\nFETCH_FAIL\u0010\u0013\u0012\n\n\u0006BAD_TX\u0010\u0014\u0012\r\n\tBAD_BLOCK\u0010\u0015\u0012\n\n\u0006FORKED\u0010\u0016\u0012\u000e\n\nUNLINKABLE\u0010\u0017\u0012\u0018\n\u0014INCOMPATIBLE_VERSION\u0010\u0018\u0012\u0016\n\u0012INCOMPATIBLE_CHAIN\u0010\u0019\u0012\f\n\bTIME_OUT\u0010 \u0012\u0010\n\fCONNECT_FAIL\u0010!\u0012\u001f\n\u001bTOO_MANY_PEERS_WITH_SAME_IP\u0010\"\u0012\u0018\n\u0014LIGHT_NODE_SYNC_FAIL\u0010#\u0012\u0011\n\rBELOW_THAN_ME\u0010$\u0012\f\n\u0007UNKNOWN\u0010ÿ\u0001BF\n\u000forg.tron.protosB\bProtocolZ)github.com/tronprotocol/grpc-gateway/coreb\u0006proto3"}, new Descriptors.FileDescriptor[]{AnyProto.getDescriptor(), Discover.getDescriptor(), Common.getDescriptor()}, new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            @Override
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor fileDescriptor) {
                Descriptors.FileDescriptor unused = Protocol.descriptor = fileDescriptor;
                return null;
            }
        });
        Descriptors.Descriptor descriptor2 = getDescriptor().getMessageTypes().get(0);
        internal_static_protocol_AccountId_descriptor = descriptor2;
        internal_static_protocol_AccountId_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor2, new String[]{"Name", "Address"});
        Descriptors.Descriptor descriptor3 = getDescriptor().getMessageTypes().get(1);
        internal_static_protocol_Vote_descriptor = descriptor3;
        internal_static_protocol_Vote_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor3, new String[]{"VoteAddress", "VoteCount"});
        Descriptors.Descriptor descriptor4 = getDescriptor().getMessageTypes().get(2);
        internal_static_protocol_Proposal_descriptor = descriptor4;
        internal_static_protocol_Proposal_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor4, new String[]{"ProposalId", "ProposerAddress", "Parameters", "ExpirationTime", "CreateTime", "Approvals", "State"});
        Descriptors.Descriptor descriptor5 = descriptor4.getNestedTypes().get(0);
        internal_static_protocol_Proposal_ParametersEntry_descriptor = descriptor5;
        internal_static_protocol_Proposal_ParametersEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor5, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor6 = getDescriptor().getMessageTypes().get(3);
        internal_static_protocol_Exchange_descriptor = descriptor6;
        internal_static_protocol_Exchange_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor6, new String[]{"ExchangeId", "CreatorAddress", "CreateTime", "FirstTokenId", "FirstTokenBalance", "SecondTokenId", "SecondTokenBalance"});
        Descriptors.Descriptor descriptor7 = getDescriptor().getMessageTypes().get(4);
        internal_static_protocol_MarketOrder_descriptor = descriptor7;
        internal_static_protocol_MarketOrder_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor7, new String[]{"OrderId", "OwnerAddress", "CreateTime", "SellTokenId", "SellTokenQuantity", "BuyTokenId", "BuyTokenQuantity", "SellTokenQuantityRemain", "SellTokenQuantityReturn", "State", "Prev", "Next"});
        Descriptors.Descriptor descriptor8 = getDescriptor().getMessageTypes().get(5);
        internal_static_protocol_MarketOrderList_descriptor = descriptor8;
        internal_static_protocol_MarketOrderList_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor8, new String[]{"Orders"});
        Descriptors.Descriptor descriptor9 = getDescriptor().getMessageTypes().get(6);
        internal_static_protocol_MarketOrderPairList_descriptor = descriptor9;
        internal_static_protocol_MarketOrderPairList_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor9, new String[]{"OrderPair"});
        Descriptors.Descriptor descriptor10 = getDescriptor().getMessageTypes().get(7);
        internal_static_protocol_MarketOrderPair_descriptor = descriptor10;
        internal_static_protocol_MarketOrderPair_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor10, new String[]{"SellTokenId", "BuyTokenId"});
        Descriptors.Descriptor descriptor11 = getDescriptor().getMessageTypes().get(8);
        internal_static_protocol_MarketAccountOrder_descriptor = descriptor11;
        internal_static_protocol_MarketAccountOrder_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor11, new String[]{"OwnerAddress", "Orders", "Count", "TotalCount"});
        Descriptors.Descriptor descriptor12 = getDescriptor().getMessageTypes().get(9);
        internal_static_protocol_MarketPrice_descriptor = descriptor12;
        internal_static_protocol_MarketPrice_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor12, new String[]{"SellTokenQuantity", "BuyTokenQuantity"});
        Descriptors.Descriptor descriptor13 = getDescriptor().getMessageTypes().get(10);
        internal_static_protocol_MarketPriceList_descriptor = descriptor13;
        internal_static_protocol_MarketPriceList_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor13, new String[]{"SellTokenId", "BuyTokenId", "Prices"});
        Descriptors.Descriptor descriptor14 = getDescriptor().getMessageTypes().get(11);
        internal_static_protocol_MarketOrderIdList_descriptor = descriptor14;
        internal_static_protocol_MarketOrderIdList_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor14, new String[]{"Head", "Tail"});
        Descriptors.Descriptor descriptor15 = getDescriptor().getMessageTypes().get(12);
        internal_static_protocol_ChainParameters_descriptor = descriptor15;
        internal_static_protocol_ChainParameters_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor15, new String[]{"ChainParameter"});
        Descriptors.Descriptor descriptor16 = descriptor15.getNestedTypes().get(0);
        internal_static_protocol_ChainParameters_ChainParameter_descriptor = descriptor16;
        internal_static_protocol_ChainParameters_ChainParameter_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor16, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor17 = getDescriptor().getMessageTypes().get(13);
        internal_static_protocol_Account_descriptor = descriptor17;
        internal_static_protocol_Account_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor17, new String[]{"AccountName", "Type", "Address", "Balance", "Votes", "Asset", "AssetV2", "Frozen", "NetUsage", "AcquiredDelegatedFrozenBalanceForBandwidth", "DelegatedFrozenBalanceForBandwidth", "OldTronPower", "TronPower", "AssetOptimized", "CreateTime", "LatestOprationTime", "Allowance", "LatestWithdrawTime", "Code", "IsWitness", "IsCommittee", "FrozenSupply", "AssetIssuedName", "AssetIssuedID", "LatestAssetOperationTime", "LatestAssetOperationTimeV2", "FreeNetUsage", "FreeAssetNetUsage", "FreeAssetNetUsageV2", "LatestConsumeTime", "LatestConsumeFreeTime", "AccountId", "NetWindowSize", "NetWindowOptimized", "AccountResource", "CodeHash", "OwnerPermission", "WitnessPermission", "ActivePermission", "FrozenV2", "UnfrozenV2", "DelegatedFrozenV2BalanceForBandwidth", "AcquiredDelegatedFrozenV2BalanceForBandwidth"});
        Descriptors.Descriptor descriptor18 = descriptor17.getNestedTypes().get(0);
        internal_static_protocol_Account_Frozen_descriptor = descriptor18;
        internal_static_protocol_Account_Frozen_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor18, new String[]{"FrozenBalance", "ExpireTime"});
        Descriptors.Descriptor descriptor19 = descriptor17.getNestedTypes().get(1);
        internal_static_protocol_Account_AssetEntry_descriptor = descriptor19;
        internal_static_protocol_Account_AssetEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor19, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor20 = descriptor17.getNestedTypes().get(2);
        internal_static_protocol_Account_AssetV2Entry_descriptor = descriptor20;
        internal_static_protocol_Account_AssetV2Entry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor20, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor21 = descriptor17.getNestedTypes().get(3);
        internal_static_protocol_Account_LatestAssetOperationTimeEntry_descriptor = descriptor21;
        internal_static_protocol_Account_LatestAssetOperationTimeEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor21, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor22 = descriptor17.getNestedTypes().get(4);
        internal_static_protocol_Account_LatestAssetOperationTimeV2Entry_descriptor = descriptor22;
        internal_static_protocol_Account_LatestAssetOperationTimeV2Entry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor22, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor23 = descriptor17.getNestedTypes().get(5);
        internal_static_protocol_Account_FreeAssetNetUsageEntry_descriptor = descriptor23;
        internal_static_protocol_Account_FreeAssetNetUsageEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor23, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor24 = descriptor17.getNestedTypes().get(6);
        internal_static_protocol_Account_FreeAssetNetUsageV2Entry_descriptor = descriptor24;
        internal_static_protocol_Account_FreeAssetNetUsageV2Entry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor24, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor25 = descriptor17.getNestedTypes().get(7);
        internal_static_protocol_Account_AccountResource_descriptor = descriptor25;
        internal_static_protocol_Account_AccountResource_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor25, new String[]{"EnergyUsage", "FrozenBalanceForEnergy", "LatestConsumeTimeForEnergy", "AcquiredDelegatedFrozenBalanceForEnergy", "DelegatedFrozenBalanceForEnergy", "StorageLimit", "StorageUsage", "LatestExchangeStorageTime", "EnergyWindowSize", "DelegatedFrozenV2BalanceForEnergy", "AcquiredDelegatedFrozenV2BalanceForEnergy", "EnergyWindowOptimized"});
        Descriptors.Descriptor descriptor26 = descriptor17.getNestedTypes().get(8);
        internal_static_protocol_Account_FreezeV2_descriptor = descriptor26;
        internal_static_protocol_Account_FreezeV2_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor26, new String[]{"Type", "Amount"});
        Descriptors.Descriptor descriptor27 = descriptor17.getNestedTypes().get(9);
        internal_static_protocol_Account_UnFreezeV2_descriptor = descriptor27;
        internal_static_protocol_Account_UnFreezeV2_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor27, new String[]{"Type", "UnfreezeAmount", "UnfreezeExpireTime"});
        Descriptors.Descriptor descriptor28 = getDescriptor().getMessageTypes().get(14);
        internal_static_protocol_Key_descriptor = descriptor28;
        internal_static_protocol_Key_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor28, new String[]{"Address", "Weight"});
        Descriptors.Descriptor descriptor29 = getDescriptor().getMessageTypes().get(15);
        internal_static_protocol_DelegatedResource_descriptor = descriptor29;
        internal_static_protocol_DelegatedResource_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor29, new String[]{HttpHeaders.FROM, "To", "FrozenBalanceForBandwidth", "FrozenBalanceForEnergy", "ExpireTimeForBandwidth", "ExpireTimeForEnergy"});
        Descriptors.Descriptor descriptor30 = getDescriptor().getMessageTypes().get(16);
        internal_static_protocol_authority_descriptor = descriptor30;
        internal_static_protocol_authority_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor30, new String[]{"Account", "PermissionName"});
        Descriptors.Descriptor descriptor31 = getDescriptor().getMessageTypes().get(17);
        internal_static_protocol_Permission_descriptor = descriptor31;
        internal_static_protocol_Permission_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor31, new String[]{"Type", "Id", "PermissionName", "Threshold", "ParentId", "Operations", "Keys"});
        Descriptors.Descriptor descriptor32 = getDescriptor().getMessageTypes().get(18);
        internal_static_protocol_Witness_descriptor = descriptor32;
        internal_static_protocol_Witness_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor32, new String[]{"Address", "VoteCount", "PubKey", "Url", "TotalProduced", "TotalMissed", "LatestBlockNum", "LatestSlotNum", "IsJobs"});
        Descriptors.Descriptor descriptor33 = getDescriptor().getMessageTypes().get(19);
        internal_static_protocol_Votes_descriptor = descriptor33;
        internal_static_protocol_Votes_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor33, new String[]{"Address", "OldVotes", "NewVotes"});
        Descriptors.Descriptor descriptor34 = getDescriptor().getMessageTypes().get(20);
        internal_static_protocol_TXOutput_descriptor = descriptor34;
        internal_static_protocol_TXOutput_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor34, new String[]{"Value", "PubKeyHash"});
        Descriptors.Descriptor descriptor35 = getDescriptor().getMessageTypes().get(21);
        internal_static_protocol_TXInput_descriptor = descriptor35;
        internal_static_protocol_TXInput_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor35, new String[]{"RawData", "Signature"});
        Descriptors.Descriptor descriptor36 = descriptor35.getNestedTypes().get(0);
        internal_static_protocol_TXInput_raw_descriptor = descriptor36;
        internal_static_protocol_TXInput_raw_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor36, new String[]{"TxID", "Vout", "PubKey"});
        Descriptors.Descriptor descriptor37 = getDescriptor().getMessageTypes().get(22);
        internal_static_protocol_TXOutputs_descriptor = descriptor37;
        internal_static_protocol_TXOutputs_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor37, new String[]{"Outputs"});
        Descriptors.Descriptor descriptor38 = getDescriptor().getMessageTypes().get(23);
        internal_static_protocol_ResourceReceipt_descriptor = descriptor38;
        internal_static_protocol_ResourceReceipt_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor38, new String[]{"EnergyUsage", "EnergyFee", "OriginEnergyUsage", "EnergyUsageTotal", "NetUsage", "NetFee", "Result", "EnergyPenaltyTotal"});
        Descriptors.Descriptor descriptor39 = getDescriptor().getMessageTypes().get(24);
        internal_static_protocol_MarketOrderDetail_descriptor = descriptor39;
        internal_static_protocol_MarketOrderDetail_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor39, new String[]{"MakerOrderId", "TakerOrderId", "FillSellQuantity", "FillBuyQuantity"});
        Descriptors.Descriptor descriptor40 = getDescriptor().getMessageTypes().get(25);
        internal_static_protocol_Transaction_descriptor = descriptor40;
        internal_static_protocol_Transaction_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor40, new String[]{"RawData", "Signature", "Ret"});
        Descriptors.Descriptor descriptor41 = descriptor40.getNestedTypes().get(0);
        internal_static_protocol_Transaction_Contract_descriptor = descriptor41;
        internal_static_protocol_Transaction_Contract_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor41, new String[]{"Type", "Parameter", "Provider", "ContractName", "PermissionId"});
        Descriptors.Descriptor descriptor42 = descriptor40.getNestedTypes().get(1);
        internal_static_protocol_Transaction_Result_descriptor = descriptor42;
        internal_static_protocol_Transaction_Result_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor42, new String[]{"Fee", "Ret", "ContractRet", "AssetIssueID", "WithdrawAmount", "UnfreezeAmount", "ExchangeReceivedAmount", "ExchangeInjectAnotherAmount", "ExchangeWithdrawAnotherAmount", "ExchangeId", "ShieldedTransactionFee", "OrderId", "OrderDetails", "WithdrawExpireAmount", "CancelUnfreezeV2Amount"});
        Descriptors.Descriptor descriptor43 = descriptor42.getNestedTypes().get(0);
        internal_static_protocol_Transaction_Result_CancelUnfreezeV2AmountEntry_descriptor = descriptor43;
        internal_static_protocol_Transaction_Result_CancelUnfreezeV2AmountEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor43, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor44 = descriptor40.getNestedTypes().get(2);
        internal_static_protocol_Transaction_raw_descriptor = descriptor44;
        internal_static_protocol_Transaction_raw_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor44, new String[]{"RefBlockBytes", "RefBlockNum", "RefBlockHash", "Expiration", "Auths", "Data", "Contract", "Scripts", "Timestamp", "FeeLimit"});
        Descriptors.Descriptor descriptor45 = getDescriptor().getMessageTypes().get(26);
        internal_static_protocol_TransactionInfo_descriptor = descriptor45;
        internal_static_protocol_TransactionInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor45, new String[]{"Id", "Fee", "BlockNumber", "BlockTimeStamp", "ContractResult", "ContractAddress", "Receipt", "Log", "Result", "ResMessage", "AssetIssueID", "WithdrawAmount", "UnfreezeAmount", "InternalTransactions", "ExchangeReceivedAmount", "ExchangeInjectAnotherAmount", "ExchangeWithdrawAnotherAmount", "ExchangeId", "ShieldedTransactionFee", "OrderId", "OrderDetails", "PackingFee", "WithdrawExpireAmount", "CancelUnfreezeV2Amount"});
        Descriptors.Descriptor descriptor46 = descriptor45.getNestedTypes().get(0);
        internal_static_protocol_TransactionInfo_Log_descriptor = descriptor46;
        internal_static_protocol_TransactionInfo_Log_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor46, new String[]{"Address", "Topics", "Data"});
        Descriptors.Descriptor descriptor47 = descriptor45.getNestedTypes().get(1);
        internal_static_protocol_TransactionInfo_CancelUnfreezeV2AmountEntry_descriptor = descriptor47;
        internal_static_protocol_TransactionInfo_CancelUnfreezeV2AmountEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor47, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor48 = getDescriptor().getMessageTypes().get(27);
        internal_static_protocol_TransactionRet_descriptor = descriptor48;
        internal_static_protocol_TransactionRet_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor48, new String[]{"BlockNumber", "BlockTimeStamp", "Transactioninfo"});
        Descriptors.Descriptor descriptor49 = getDescriptor().getMessageTypes().get(28);
        internal_static_protocol_Transactions_descriptor = descriptor49;
        internal_static_protocol_Transactions_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor49, new String[]{"Transactions"});
        Descriptors.Descriptor descriptor50 = getDescriptor().getMessageTypes().get(29);
        internal_static_protocol_BlockHeader_descriptor = descriptor50;
        internal_static_protocol_BlockHeader_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor50, new String[]{"RawData", "WitnessSignature"});
        Descriptors.Descriptor descriptor51 = descriptor50.getNestedTypes().get(0);
        internal_static_protocol_BlockHeader_raw_descriptor = descriptor51;
        internal_static_protocol_BlockHeader_raw_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor51, new String[]{"Timestamp", "TxTrieRoot", "ParentHash", "Number", "WitnessId", "WitnessAddress", SignatureManager.Constants.Version, "AccountStateRoot"});
        Descriptors.Descriptor descriptor52 = getDescriptor().getMessageTypes().get(30);
        internal_static_protocol_Block_descriptor = descriptor52;
        internal_static_protocol_Block_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor52, new String[]{"Transactions", "BlockHeader"});
        Descriptors.Descriptor descriptor53 = getDescriptor().getMessageTypes().get(31);
        internal_static_protocol_ChainInventory_descriptor = descriptor53;
        internal_static_protocol_ChainInventory_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor53, new String[]{"Ids", "RemainNum"});
        Descriptors.Descriptor descriptor54 = descriptor53.getNestedTypes().get(0);
        internal_static_protocol_ChainInventory_BlockId_descriptor = descriptor54;
        internal_static_protocol_ChainInventory_BlockId_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor54, new String[]{"Hash", "Number"});
        Descriptors.Descriptor descriptor55 = getDescriptor().getMessageTypes().get(32);
        internal_static_protocol_BlockInventory_descriptor = descriptor55;
        internal_static_protocol_BlockInventory_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor55, new String[]{"Ids", "Type"});
        Descriptors.Descriptor descriptor56 = descriptor55.getNestedTypes().get(0);
        internal_static_protocol_BlockInventory_BlockId_descriptor = descriptor56;
        internal_static_protocol_BlockInventory_BlockId_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor56, new String[]{"Hash", "Number"});
        Descriptors.Descriptor descriptor57 = getDescriptor().getMessageTypes().get(33);
        internal_static_protocol_Inventory_descriptor = descriptor57;
        internal_static_protocol_Inventory_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor57, new String[]{"Type", "Ids"});
        Descriptors.Descriptor descriptor58 = getDescriptor().getMessageTypes().get(34);
        internal_static_protocol_Items_descriptor = descriptor58;
        internal_static_protocol_Items_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor58, new String[]{"Type", "Blocks", "BlockHeaders", "Transactions"});
        Descriptors.Descriptor descriptor59 = getDescriptor().getMessageTypes().get(35);
        internal_static_protocol_DynamicProperties_descriptor = descriptor59;
        internal_static_protocol_DynamicProperties_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor59, new String[]{"LastSolidityBlockNum"});
        Descriptors.Descriptor descriptor60 = getDescriptor().getMessageTypes().get(36);
        internal_static_protocol_DisconnectMessage_descriptor = descriptor60;
        internal_static_protocol_DisconnectMessage_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor60, new String[]{"Reason"});
        Descriptors.Descriptor descriptor61 = getDescriptor().getMessageTypes().get(37);
        internal_static_protocol_HelloMessage_descriptor = descriptor61;
        internal_static_protocol_HelloMessage_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor61, new String[]{HttpHeaders.FROM, SignatureManager.Constants.Version, "Timestamp", "GenesisBlockId", "SolidBlockId", "HeadBlockId", "Address", "Signature", "NodeType", "LowestBlockNum"});
        Descriptors.Descriptor descriptor62 = descriptor61.getNestedTypes().get(0);
        internal_static_protocol_HelloMessage_BlockId_descriptor = descriptor62;
        internal_static_protocol_HelloMessage_BlockId_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor62, new String[]{"Hash", "Number"});
        Descriptors.Descriptor descriptor63 = getDescriptor().getMessageTypes().get(38);
        internal_static_protocol_InternalTransaction_descriptor = descriptor63;
        internal_static_protocol_InternalTransaction_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor63, new String[]{"Hash", "CallerAddress", "TransferToAddress", "CallValueInfo", "Note", "Rejected", "Extra"});
        Descriptors.Descriptor descriptor64 = descriptor63.getNestedTypes().get(0);
        internal_static_protocol_InternalTransaction_CallValueInfo_descriptor = descriptor64;
        internal_static_protocol_InternalTransaction_CallValueInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor64, new String[]{"CallValue", "TokenId"});
        Descriptors.Descriptor descriptor65 = getDescriptor().getMessageTypes().get(39);
        internal_static_protocol_DelegatedResourceAccountIndex_descriptor = descriptor65;
        internal_static_protocol_DelegatedResourceAccountIndex_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor65, new String[]{"Account", "FromAccounts", "ToAccounts", "Timestamp"});
        Descriptors.Descriptor descriptor66 = getDescriptor().getMessageTypes().get(40);
        internal_static_protocol_NodeInfo_descriptor = descriptor66;
        internal_static_protocol_NodeInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor66, new String[]{"BeginSyncNum", "Block", "SolidityBlock", "CurrentConnectCount", "ActiveConnectCount", "PassiveConnectCount", "TotalFlow", "PeerInfoList", "ConfigNodeInfo", "MachineInfo", "CheatWitnessInfoMap"});
        Descriptors.Descriptor descriptor67 = descriptor66.getNestedTypes().get(0);
        internal_static_protocol_NodeInfo_CheatWitnessInfoMapEntry_descriptor = descriptor67;
        internal_static_protocol_NodeInfo_CheatWitnessInfoMapEntry_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor67, new String[]{"Key", "Value"});
        Descriptors.Descriptor descriptor68 = descriptor66.getNestedTypes().get(1);
        internal_static_protocol_NodeInfo_PeerInfo_descriptor = descriptor68;
        internal_static_protocol_NodeInfo_PeerInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor68, new String[]{"LastSyncBlock", "RemainNum", "LastBlockUpdateTime", "SyncFlag", "HeadBlockTimeWeBothHave", "NeedSyncFromPeer", "NeedSyncFromUs", HttpHeaders.HOST, "Port", "NodeId", "ConnectTime", "AvgLatency", "SyncToFetchSize", "SyncToFetchSizePeekNum", "SyncBlockRequestedSize", "UnFetchSynNum", "BlockInPorcSize", "HeadBlockWeBothHave", "IsActive", "Score", "NodeCount", "InFlow", "DisconnectTimes", "LocalDisconnectReason", "RemoteDisconnectReason"});
        Descriptors.Descriptor descriptor69 = descriptor66.getNestedTypes().get(2);
        internal_static_protocol_NodeInfo_ConfigNodeInfo_descriptor = descriptor69;
        internal_static_protocol_NodeInfo_ConfigNodeInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor69, new String[]{"CodeVersion", "P2PVersion", "ListenPort", "DiscoverEnable", "ActiveNodeSize", "PassiveNodeSize", "SendNodeSize", "MaxConnectCount", "SameIpMaxConnectCount", "BackupListenPort", "BackupMemberSize", "BackupPriority", "DbVersion", "MinParticipationRate", "SupportConstant", "MinTimeRatio", "MaxTimeRatio", "AllowCreationOfContracts", "AllowAdaptiveEnergy"});
        Descriptors.Descriptor descriptor70 = descriptor66.getNestedTypes().get(3);
        internal_static_protocol_NodeInfo_MachineInfo_descriptor = descriptor70;
        internal_static_protocol_NodeInfo_MachineInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor70, new String[]{"ThreadCount", "DeadLockThreadCount", "CpuCount", "TotalMemory", "FreeMemory", "CpuRate", "JavaVersion", "OsName", "JvmTotalMemory", "JvmFreeMemory", "ProcessCpuRate", "MemoryDescInfoList", "DeadLockThreadInfoList"});
        Descriptors.Descriptor descriptor71 = descriptor70.getNestedTypes().get(0);
        internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_descriptor = descriptor71;
        internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor71, new String[]{"Name", "InitSize", "UseSize", "MaxSize", "UseRate"});
        Descriptors.Descriptor descriptor72 = descriptor70.getNestedTypes().get(1);
        internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_descriptor = descriptor72;
        internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor72, new String[]{"Name", "LockName", "LockOwner", "State", "BlockTime", "WaitTime", "StackTrace"});
        Descriptors.Descriptor descriptor73 = getDescriptor().getMessageTypes().get(41);
        internal_static_protocol_MetricsInfo_descriptor = descriptor73;
        internal_static_protocol_MetricsInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor73, new String[]{"Interval", "Node", "Blockchain", "Net"});
        Descriptors.Descriptor descriptor74 = descriptor73.getNestedTypes().get(0);
        internal_static_protocol_MetricsInfo_NodeInfo_descriptor = descriptor74;
        internal_static_protocol_MetricsInfo_NodeInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor74, new String[]{"Ip", "NodeType", SignatureManager.Constants.Version, "BackupStatus"});
        Descriptors.Descriptor descriptor75 = descriptor73.getNestedTypes().get(1);
        internal_static_protocol_MetricsInfo_BlockChainInfo_descriptor = descriptor75;
        internal_static_protocol_MetricsInfo_BlockChainInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor75, new String[]{"HeadBlockNum", "HeadBlockTimestamp", "HeadBlockHash", "ForkCount", "FailForkCount", "BlockProcessTime", "Tps", "TransactionCacheSize", "MissedTransaction", "Witnesses", "FailProcessBlockNum", "FailProcessBlockReason", "DupWitness"});
        Descriptors.Descriptor descriptor76 = descriptor75.getNestedTypes().get(0);
        internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_descriptor = descriptor76;
        internal_static_protocol_MetricsInfo_BlockChainInfo_Witness_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor76, new String[]{"Address", SignatureManager.Constants.Version});
        Descriptors.Descriptor descriptor77 = descriptor75.getNestedTypes().get(1);
        internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_descriptor = descriptor77;
        internal_static_protocol_MetricsInfo_BlockChainInfo_DupWitness_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor77, new String[]{"Address", "BlockNum", "Count"});
        Descriptors.Descriptor descriptor78 = descriptor73.getNestedTypes().get(2);
        internal_static_protocol_MetricsInfo_RateInfo_descriptor = descriptor78;
        internal_static_protocol_MetricsInfo_RateInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor78, new String[]{"Count", "MeanRate", "OneMinuteRate", "FiveMinuteRate", "FifteenMinuteRate"});
        Descriptors.Descriptor descriptor79 = descriptor73.getNestedTypes().get(3);
        internal_static_protocol_MetricsInfo_NetInfo_descriptor = descriptor79;
        internal_static_protocol_MetricsInfo_NetInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor79, new String[]{"ErrorProtoCount", "Api", "ConnectionCount", "ValidConnectionCount", "TcpInTraffic", "TcpOutTraffic", "DisconnectionCount", "DisconnectionDetail", "UdpInTraffic", "UdpOutTraffic", "Latency"});
        Descriptors.Descriptor descriptor80 = descriptor79.getNestedTypes().get(0);
        internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_descriptor = descriptor80;
        internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor80, new String[]{"Qps", "FailQps", "OutTraffic", "Detail"});
        Descriptors.Descriptor descriptor81 = descriptor80.getNestedTypes().get(0);
        internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_descriptor = descriptor81;
        internal_static_protocol_MetricsInfo_NetInfo_ApiInfo_ApiDetailInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor81, new String[]{"Name", "Qps", "FailQps", "OutTraffic"});
        Descriptors.Descriptor descriptor82 = descriptor79.getNestedTypes().get(1);
        internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_descriptor = descriptor82;
        internal_static_protocol_MetricsInfo_NetInfo_DisconnectionDetailInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor82, new String[]{"Reason", "Count"});
        Descriptors.Descriptor descriptor83 = descriptor79.getNestedTypes().get(2);
        internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_descriptor = descriptor83;
        internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor83, new String[]{"Top99", "Top95", "Top75", "TotalCount", "Delay1S", "Delay2S", "Delay3S", "Detail"});
        Descriptors.Descriptor descriptor84 = descriptor83.getNestedTypes().get(0);
        internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_descriptor = descriptor84;
        internal_static_protocol_MetricsInfo_NetInfo_LatencyInfo_LatencyDetailInfo_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor84, new String[]{"Witness", "Top99", "Top95", "Top75", "Count", "Delay1S", "Delay2S", "Delay3S"});
        Descriptors.Descriptor descriptor85 = getDescriptor().getMessageTypes().get(42);
        internal_static_protocol_PBFTMessage_descriptor = descriptor85;
        internal_static_protocol_PBFTMessage_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor85, new String[]{"RawData", "Signature"});
        Descriptors.Descriptor descriptor86 = descriptor85.getNestedTypes().get(0);
        internal_static_protocol_PBFTMessage_Raw_descriptor = descriptor86;
        internal_static_protocol_PBFTMessage_Raw_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor86, new String[]{"MsgType", "DataType", "ViewN", "Epoch", "Data"});
        Descriptors.Descriptor descriptor87 = getDescriptor().getMessageTypes().get(43);
        internal_static_protocol_PBFTCommitResult_descriptor = descriptor87;
        internal_static_protocol_PBFTCommitResult_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor87, new String[]{"Data", "Signature"});
        Descriptors.Descriptor descriptor88 = getDescriptor().getMessageTypes().get(44);
        internal_static_protocol_SRL_descriptor = descriptor88;
        internal_static_protocol_SRL_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(descriptor88, new String[]{"SrAddress"});
        AnyProto.getDescriptor();
        Discover.getDescriptor();
        Common.getDescriptor();
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    public static void registerAllExtensions(ExtensionRegistryLite extensionRegistryLite) {
    }

    private Protocol() {
    }

    public static void registerAllExtensions(ExtensionRegistry extensionRegistry) {
        registerAllExtensions((ExtensionRegistryLite) extensionRegistry);
    }

    public enum AccountType implements ProtocolMessageEnum {
        Normal(0),
        AssetIssue(1),
        Contract(2),
        UNRECOGNIZED(-1);
        
        public static final int AssetIssue_VALUE = 1;
        public static final int Contract_VALUE = 2;
        public static final int Normal_VALUE = 0;
        private final int value;
        private static final Internal.EnumLiteMap<AccountType> internalValueMap = new Internal.EnumLiteMap<AccountType>() {
            @Override
            public AccountType findValueByNumber(int i) {
                return AccountType.forNumber(i);
            }
        };
        private static final AccountType[] VALUES = values();

        public static AccountType forNumber(int i) {
            if (i != 0) {
                if (i != 1) {
                    if (i != 2) {
                        return null;
                    }
                    return Contract;
                }
                return AssetIssue;
            }
            return Normal;
        }

        public static Internal.EnumLiteMap<AccountType> internalGetValueMap() {
            return internalValueMap;
        }

        @Override
        public final int getNumber() {
            if (this != UNRECOGNIZED) {
                return this.value;
            }
            throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
        }

        @Deprecated
        public static AccountType valueOf(int i) {
            return forNumber(i);
        }

        @Override
        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        @Override
        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return Protocol.getDescriptor().getEnumTypes().get(0);
        }

        public static AccountType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        AccountType(int i) {
            this.value = i;
        }
    }

    public enum ReasonCode implements ProtocolMessageEnum {
        REQUESTED(0),
        BAD_PROTOCOL(2),
        TOO_MANY_PEERS(4),
        DUPLICATE_PEER(5),
        INCOMPATIBLE_PROTOCOL(6),
        RANDOM_ELIMINATION(7),
        PEER_QUITING(8),
        UNEXPECTED_IDENTITY(9),
        LOCAL_IDENTITY(10),
        PING_TIMEOUT(11),
        USER_REASON(16),
        RESET(17),
        SYNC_FAIL(18),
        FETCH_FAIL(19),
        BAD_TX(20),
        BAD_BLOCK(21),
        FORKED(22),
        UNLINKABLE(23),
        INCOMPATIBLE_VERSION(24),
        INCOMPATIBLE_CHAIN(25),
        TIME_OUT(32),
        CONNECT_FAIL(33),
        TOO_MANY_PEERS_WITH_SAME_IP(34),
        LIGHT_NODE_SYNC_FAIL(35),
        BELOW_THAN_ME(36),
        UNKNOWN(255),
        UNRECOGNIZED(-1);
        
        public static final int BAD_BLOCK_VALUE = 21;
        public static final int BAD_PROTOCOL_VALUE = 2;
        public static final int BAD_TX_VALUE = 20;
        public static final int BELOW_THAN_ME_VALUE = 36;
        public static final int CONNECT_FAIL_VALUE = 33;
        public static final int DUPLICATE_PEER_VALUE = 5;
        public static final int FETCH_FAIL_VALUE = 19;
        public static final int FORKED_VALUE = 22;
        public static final int INCOMPATIBLE_CHAIN_VALUE = 25;
        public static final int INCOMPATIBLE_PROTOCOL_VALUE = 6;
        public static final int INCOMPATIBLE_VERSION_VALUE = 24;
        public static final int LIGHT_NODE_SYNC_FAIL_VALUE = 35;
        public static final int LOCAL_IDENTITY_VALUE = 10;
        public static final int PEER_QUITING_VALUE = 8;
        public static final int PING_TIMEOUT_VALUE = 11;
        public static final int RANDOM_ELIMINATION_VALUE = 7;
        public static final int REQUESTED_VALUE = 0;
        public static final int RESET_VALUE = 17;
        public static final int SYNC_FAIL_VALUE = 18;
        public static final int TIME_OUT_VALUE = 32;
        public static final int TOO_MANY_PEERS_VALUE = 4;
        public static final int TOO_MANY_PEERS_WITH_SAME_IP_VALUE = 34;
        public static final int UNEXPECTED_IDENTITY_VALUE = 9;
        public static final int UNKNOWN_VALUE = 255;
        public static final int UNLINKABLE_VALUE = 23;
        public static final int USER_REASON_VALUE = 16;
        private final int value;
        private static final Internal.EnumLiteMap<ReasonCode> internalValueMap = new Internal.EnumLiteMap<ReasonCode>() {
            @Override
            public ReasonCode findValueByNumber(int i) {
                return ReasonCode.forNumber(i);
            }
        };
        private static final ReasonCode[] VALUES = values();

        public static ReasonCode forNumber(int i) {
            if (i != 0) {
                if (i != 2) {
                    if (i != 255) {
                        switch (i) {
                            case 4:
                                return TOO_MANY_PEERS;
                            case 5:
                                return DUPLICATE_PEER;
                            case 6:
                                return INCOMPATIBLE_PROTOCOL;
                            case 7:
                                return RANDOM_ELIMINATION;
                            case 8:
                                return PEER_QUITING;
                            case 9:
                                return UNEXPECTED_IDENTITY;
                            case 10:
                                return LOCAL_IDENTITY;
                            case 11:
                                return PING_TIMEOUT;
                            default:
                                switch (i) {
                                    case 16:
                                        return USER_REASON;
                                    case 17:
                                        return RESET;
                                    case 18:
                                        return SYNC_FAIL;
                                    case 19:
                                        return FETCH_FAIL;
                                    case 20:
                                        return BAD_TX;
                                    case 21:
                                        return BAD_BLOCK;
                                    case 22:
                                        return FORKED;
                                    case 23:
                                        return UNLINKABLE;
                                    case 24:
                                        return INCOMPATIBLE_VERSION;
                                    case 25:
                                        return INCOMPATIBLE_CHAIN;
                                    default:
                                        switch (i) {
                                            case 32:
                                                return TIME_OUT;
                                            case 33:
                                                return CONNECT_FAIL;
                                            case 34:
                                                return TOO_MANY_PEERS_WITH_SAME_IP;
                                            case 35:
                                                return LIGHT_NODE_SYNC_FAIL;
                                            case 36:
                                                return BELOW_THAN_ME;
                                            default:
                                                return null;
                                        }
                                }
                        }
                    }
                    return UNKNOWN;
                }
                return BAD_PROTOCOL;
            }
            return REQUESTED;
        }

        public static Internal.EnumLiteMap<ReasonCode> internalGetValueMap() {
            return internalValueMap;
        }

        @Override
        public final int getNumber() {
            if (this != UNRECOGNIZED) {
                return this.value;
            }
            throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
        }

        @Deprecated
        public static ReasonCode valueOf(int i) {
            return forNumber(i);
        }

        @Override
        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        @Override
        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return Protocol.getDescriptor().getEnumTypes().get(1);
        }

        public static ReasonCode valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        ReasonCode(int i) {
            this.value = i;
        }
    }

    public static final class AccountId extends GeneratedMessageV3 implements AccountIdOrBuilder {
        public static final int ADDRESS_FIELD_NUMBER = 2;
        public static final int NAME_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private ByteString address_;
        private byte memoizedIsInitialized;
        private ByteString name_;
        private static final AccountId DEFAULT_INSTANCE = new AccountId();
        private static final Parser<AccountId> PARSER = new AbstractParser<AccountId>() {
            @Override
            public AccountId parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new AccountId(codedInputStream, extensionRegistryLite);
            }
        };

        public static AccountId getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<AccountId> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public AccountId getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public ByteString getName() {
            return this.name_;
        }

        @Override
        public Parser<AccountId> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private AccountId(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private AccountId() {
            this.memoizedIsInitialized = (byte) -1;
            this.name_ = ByteString.EMPTY;
            this.address_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private AccountId(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.name_ = codedInputStream.readBytes();
                                } else if (readTag != 18) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.address_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_AccountId_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_AccountId_fieldAccessorTable.ensureFieldAccessorsInitialized(AccountId.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.name_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.name_);
            }
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.address_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.name_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.name_) : 0;
            if (!this.address_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.address_);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof AccountId)) {
                return super.equals(obj);
            }
            AccountId accountId = (AccountId) obj;
            return getName().equals(accountId.getName()) && getAddress().equals(accountId.getAddress()) && this.unknownFields.equals(accountId.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getName().hashCode()) * 37) + 2) * 53) + getAddress().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static AccountId parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static AccountId parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static AccountId parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static AccountId parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static AccountId parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static AccountId parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static AccountId parseFrom(InputStream inputStream) throws IOException {
            return (AccountId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static AccountId parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (AccountId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static AccountId parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (AccountId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static AccountId parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (AccountId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static AccountId parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (AccountId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static AccountId parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (AccountId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(AccountId accountId) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(accountId);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements AccountIdOrBuilder {
            private ByteString address_;
            private ByteString name_;

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public ByteString getName() {
                return this.name_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_AccountId_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_AccountId_fieldAccessorTable.ensureFieldAccessorsInitialized(AccountId.class, Builder.class);
            }

            private Builder() {
                this.name_ = ByteString.EMPTY;
                this.address_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.name_ = ByteString.EMPTY;
                this.address_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = AccountId.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.name_ = ByteString.EMPTY;
                this.address_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_AccountId_descriptor;
            }

            @Override
            public AccountId getDefaultInstanceForType() {
                return AccountId.getDefaultInstance();
            }

            @Override
            public AccountId build() {
                AccountId buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public AccountId buildPartial() {
                AccountId accountId = new AccountId(this);
                accountId.name_ = this.name_;
                accountId.address_ = this.address_;
                onBuilt();
                return accountId;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof AccountId) {
                    return mergeFrom((AccountId) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(AccountId accountId) {
                if (accountId == AccountId.getDefaultInstance()) {
                    return this;
                }
                if (accountId.getName() != ByteString.EMPTY) {
                    setName(accountId.getName());
                }
                if (accountId.getAddress() != ByteString.EMPTY) {
                    setAddress(accountId.getAddress());
                }
                mergeUnknownFields(accountId.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.AccountId.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.AccountId.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$AccountId$Builder");
            }

            public Builder setName(ByteString byteString) {
                byteString.getClass();
                this.name_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearName() {
                this.name_ = AccountId.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = AccountId.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Vote extends GeneratedMessageV3 implements VoteOrBuilder {
        private static final Vote DEFAULT_INSTANCE = new Vote();
        private static final Parser<Vote> PARSER = new AbstractParser<Vote>() {
            @Override
            public Vote parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Vote(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int VOTE_ADDRESS_FIELD_NUMBER = 1;
        public static final int VOTE_COUNT_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private ByteString voteAddress_;
        private long voteCount_;

        public static Vote getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Vote> parser() {
            return PARSER;
        }

        @Override
        public Vote getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Vote> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getVoteAddress() {
            return this.voteAddress_;
        }

        @Override
        public long getVoteCount() {
            return this.voteCount_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Vote(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Vote() {
            this.memoizedIsInitialized = (byte) -1;
            this.voteAddress_ = ByteString.EMPTY;
            this.voteCount_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Vote(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.voteAddress_ = codedInputStream.readBytes();
                                } else if (readTag != 16) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.voteCount_ = codedInputStream.readInt64();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Vote_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Vote_fieldAccessorTable.ensureFieldAccessorsInitialized(Vote.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.voteAddress_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.voteAddress_);
            }
            long j = this.voteCount_;
            if (j != 0) {
                codedOutputStream.writeInt64(2, j);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.voteAddress_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.voteAddress_) : 0;
            long j = this.voteCount_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Vote)) {
                return super.equals(obj);
            }
            Vote vote = (Vote) obj;
            return getVoteAddress().equals(vote.getVoteAddress()) && getVoteCount() == vote.getVoteCount() && this.unknownFields.equals(vote.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getVoteAddress().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getVoteCount())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static Vote parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Vote parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Vote parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Vote parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Vote parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Vote parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Vote parseFrom(InputStream inputStream) throws IOException {
            return (Vote) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Vote parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Vote) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Vote parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Vote) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Vote parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Vote) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Vote parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Vote) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Vote parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Vote) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Vote vote) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(vote);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements VoteOrBuilder {
            private ByteString voteAddress_;
            private long voteCount_;

            @Override
            public ByteString getVoteAddress() {
                return this.voteAddress_;
            }

            @Override
            public long getVoteCount() {
                return this.voteCount_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Vote_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Vote_fieldAccessorTable.ensureFieldAccessorsInitialized(Vote.class, Builder.class);
            }

            private Builder() {
                this.voteAddress_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.voteAddress_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Vote.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.voteAddress_ = ByteString.EMPTY;
                this.voteCount_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Vote_descriptor;
            }

            @Override
            public Vote getDefaultInstanceForType() {
                return Vote.getDefaultInstance();
            }

            @Override
            public Vote build() {
                Vote buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Vote buildPartial() {
                Vote vote = new Vote(this);
                vote.voteAddress_ = this.voteAddress_;
                vote.voteCount_ = this.voteCount_;
                onBuilt();
                return vote;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Vote) {
                    return mergeFrom((Vote) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Vote vote) {
                if (vote == Vote.getDefaultInstance()) {
                    return this;
                }
                if (vote.getVoteAddress() != ByteString.EMPTY) {
                    setVoteAddress(vote.getVoteAddress());
                }
                if (vote.getVoteCount() != 0) {
                    setVoteCount(vote.getVoteCount());
                }
                mergeUnknownFields(vote.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Vote.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Vote.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Vote$Builder");
            }

            public Builder setVoteAddress(ByteString byteString) {
                byteString.getClass();
                this.voteAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearVoteAddress() {
                this.voteAddress_ = Vote.getDefaultInstance().getVoteAddress();
                onChanged();
                return this;
            }

            public Builder setVoteCount(long j) {
                this.voteCount_ = j;
                onChanged();
                return this;
            }

            public Builder clearVoteCount() {
                this.voteCount_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Proposal extends GeneratedMessageV3 implements ProposalOrBuilder {
        public static final int APPROVALS_FIELD_NUMBER = 6;
        public static final int CREATE_TIME_FIELD_NUMBER = 5;
        public static final int EXPIRATION_TIME_FIELD_NUMBER = 4;
        public static final int PARAMETERS_FIELD_NUMBER = 3;
        public static final int PROPOSAL_ID_FIELD_NUMBER = 1;
        public static final int PROPOSER_ADDRESS_FIELD_NUMBER = 2;
        public static final int STATE_FIELD_NUMBER = 7;
        private static final long serialVersionUID = 0;
        private List<ByteString> approvals_;
        private int bitField0_;
        private long createTime_;
        private long expirationTime_;
        private byte memoizedIsInitialized;
        private MapField<Long, Long> parameters_;
        private long proposalId_;
        private ByteString proposerAddress_;
        private int state_;
        private static final Proposal DEFAULT_INSTANCE = new Proposal();
        private static final Parser<Proposal> PARSER = new AbstractParser<Proposal>() {
            @Override
            public Proposal parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Proposal(codedInputStream, extensionRegistryLite);
            }
        };

        public static Proposal getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Proposal> parser() {
            return PARSER;
        }

        @Override
        public List<ByteString> getApprovalsList() {
            return this.approvals_;
        }

        @Override
        public long getCreateTime() {
            return this.createTime_;
        }

        @Override
        public Proposal getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getExpirationTime() {
            return this.expirationTime_;
        }

        @Override
        public Parser<Proposal> getParserForType() {
            return PARSER;
        }

        @Override
        public long getProposalId() {
            return this.proposalId_;
        }

        @Override
        public ByteString getProposerAddress() {
            return this.proposerAddress_;
        }

        @Override
        public int getStateValue() {
            return this.state_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Proposal(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Proposal() {
            this.memoizedIsInitialized = (byte) -1;
            this.proposalId_ = 0L;
            this.proposerAddress_ = ByteString.EMPTY;
            this.expirationTime_ = 0L;
            this.createTime_ = 0L;
            this.approvals_ = Collections.emptyList();
            this.state_ = 0;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Proposal(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.proposalId_ = codedInputStream.readInt64();
                            } else if (readTag == 18) {
                                this.proposerAddress_ = codedInputStream.readBytes();
                            } else if (readTag == 26) {
                                if (!(z2 & true)) {
                                    this.parameters_ = MapField.newMapField(ParametersDefaultEntryHolder.defaultEntry);
                                    z2 |= true;
                                }
                                MapEntry mapEntry = (MapEntry) codedInputStream.readMessage(ParametersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.parameters_.getMutableMap().put((Long) mapEntry.getKey(), (Long) mapEntry.getValue());
                            } else if (readTag == 32) {
                                this.expirationTime_ = codedInputStream.readInt64();
                            } else if (readTag == 40) {
                                this.createTime_ = codedInputStream.readInt64();
                            } else if (readTag == 50) {
                                if (!(z2 & true)) {
                                    this.approvals_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.approvals_.add(codedInputStream.readBytes());
                            } else if (readTag != 56) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.state_ = codedInputStream.readEnum();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.approvals_ = Collections.unmodifiableList(this.approvals_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Proposal_descriptor;
        }

        @Override
        protected MapField internalGetMapField(int i) {
            if (i == 3) {
                return internalGetParameters();
            }
            throw new RuntimeException("Invalid map field number: " + i);
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Proposal_fieldAccessorTable.ensureFieldAccessorsInitialized(Proposal.class, Builder.class);
        }

        public enum State implements ProtocolMessageEnum {
            PENDING(0),
            DISAPPROVED(1),
            APPROVED(2),
            CANCELED(3),
            UNRECOGNIZED(-1);
            
            public static final int APPROVED_VALUE = 2;
            public static final int CANCELED_VALUE = 3;
            public static final int DISAPPROVED_VALUE = 1;
            public static final int PENDING_VALUE = 0;
            private final int value;
            private static final Internal.EnumLiteMap<State> internalValueMap = new Internal.EnumLiteMap<State>() {
                @Override
                public State findValueByNumber(int i) {
                    return State.forNumber(i);
                }
            };
            private static final State[] VALUES = values();

            public static State forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            if (i != 3) {
                                return null;
                            }
                            return CANCELED;
                        }
                        return APPROVED;
                    }
                    return DISAPPROVED;
                }
                return PENDING;
            }

            public static Internal.EnumLiteMap<State> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static State valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return Proposal.getDescriptor().getEnumTypes().get(0);
            }

            public static State valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            State(int i) {
                this.value = i;
            }
        }

        public static final class ParametersDefaultEntryHolder {
            static final MapEntry<Long, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Proposal_ParametersEntry_descriptor, WireFormat.FieldType.INT64, 0L, WireFormat.FieldType.INT64, 0L);

            private ParametersDefaultEntryHolder() {
            }
        }

        public MapField<Long, Long> internalGetParameters() {
            MapField<Long, Long> mapField = this.parameters_;
            return mapField == null ? MapField.emptyMapField(ParametersDefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getParametersCount() {
            return internalGetParameters().getMap().size();
        }

        @Override
        public boolean containsParameters(long j) {
            return internalGetParameters().getMap().containsKey(Long.valueOf(j));
        }

        @Override
        @Deprecated
        public Map<Long, Long> getParameters() {
            return getParametersMap();
        }

        @Override
        public Map<Long, Long> getParametersMap() {
            return internalGetParameters().getMap();
        }

        @Override
        public long getParametersOrDefault(long j, long j2) {
            Map<Long, Long> map = internalGetParameters().getMap();
            return map.containsKey(Long.valueOf(j)) ? map.get(Long.valueOf(j)).longValue() : j2;
        }

        @Override
        public long getParametersOrThrow(long j) {
            Map<Long, Long> map = internalGetParameters().getMap();
            if (!map.containsKey(Long.valueOf(j))) {
                throw new IllegalArgumentException();
            }
            return map.get(Long.valueOf(j)).longValue();
        }

        @Override
        public int getApprovalsCount() {
            return this.approvals_.size();
        }

        @Override
        public ByteString getApprovals(int i) {
            return this.approvals_.get(i);
        }

        @Override
        public State getState() {
            State valueOf = State.valueOf(this.state_);
            return valueOf == null ? State.UNRECOGNIZED : valueOf;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.proposalId_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            if (!this.proposerAddress_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.proposerAddress_);
            }
            GeneratedMessageV3.serializeLongMapTo(codedOutputStream, internalGetParameters(), ParametersDefaultEntryHolder.defaultEntry, 3);
            long j2 = this.expirationTime_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(4, j2);
            }
            long j3 = this.createTime_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(5, j3);
            }
            for (int i = 0; i < this.approvals_.size(); i++) {
                codedOutputStream.writeBytes(6, this.approvals_.get(i));
            }
            if (this.state_ != State.PENDING.getNumber()) {
                codedOutputStream.writeEnum(7, this.state_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.proposalId_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            if (!this.proposerAddress_.isEmpty()) {
                computeInt64Size += CodedOutputStream.computeBytesSize(2, this.proposerAddress_);
            }
            for (Map.Entry<Long, Long> entry : internalGetParameters().getMap().entrySet()) {
                computeInt64Size += CodedOutputStream.computeMessageSize(3, ParametersDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build());
            }
            long j2 = this.expirationTime_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(4, j2);
            }
            long j3 = this.createTime_;
            if (j3 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(5, j3);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.approvals_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.approvals_.get(i3));
            }
            int size = computeInt64Size + i2 + getApprovalsList().size();
            if (this.state_ != State.PENDING.getNumber()) {
                size += CodedOutputStream.computeEnumSize(7, this.state_);
            }
            int serializedSize = size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Proposal)) {
                return super.equals(obj);
            }
            Proposal proposal = (Proposal) obj;
            return getProposalId() == proposal.getProposalId() && getProposerAddress().equals(proposal.getProposerAddress()) && internalGetParameters().equals(proposal.internalGetParameters()) && getExpirationTime() == proposal.getExpirationTime() && getCreateTime() == proposal.getCreateTime() && getApprovalsList().equals(proposal.getApprovalsList()) && this.state_ == proposal.state_ && this.unknownFields.equals(proposal.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getProposalId())) * 37) + 2) * 53) + getProposerAddress().hashCode();
            if (!internalGetParameters().getMap().isEmpty()) {
                hashCode = (((hashCode * 37) + 3) * 53) + internalGetParameters().hashCode();
            }
            int hashLong = (((((((hashCode * 37) + 4) * 53) + Internal.hashLong(getExpirationTime())) * 37) + 5) * 53) + Internal.hashLong(getCreateTime());
            if (getApprovalsCount() > 0) {
                hashLong = (((hashLong * 37) + 6) * 53) + getApprovalsList().hashCode();
            }
            int hashCode2 = (((((hashLong * 37) + 7) * 53) + this.state_) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Proposal parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Proposal parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Proposal parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Proposal parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Proposal parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Proposal parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Proposal parseFrom(InputStream inputStream) throws IOException {
            return (Proposal) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Proposal parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Proposal) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Proposal parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Proposal) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Proposal parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Proposal) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Proposal parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Proposal) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Proposal parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Proposal) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Proposal proposal) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(proposal);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ProposalOrBuilder {
            private List<ByteString> approvals_;
            private int bitField0_;
            private long createTime_;
            private long expirationTime_;
            private MapField<Long, Long> parameters_;
            private long proposalId_;
            private ByteString proposerAddress_;
            private int state_;

            @Override
            public long getCreateTime() {
                return this.createTime_;
            }

            @Override
            public long getExpirationTime() {
                return this.expirationTime_;
            }

            @Override
            public long getProposalId() {
                return this.proposalId_;
            }

            @Override
            public ByteString getProposerAddress() {
                return this.proposerAddress_;
            }

            @Override
            public int getStateValue() {
                return this.state_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Proposal_descriptor;
            }

            @Override
            protected MapField internalGetMapField(int i) {
                if (i == 3) {
                    return internalGetParameters();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected MapField internalGetMutableMapField(int i) {
                if (i == 3) {
                    return internalGetMutableParameters();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Proposal_fieldAccessorTable.ensureFieldAccessorsInitialized(Proposal.class, Builder.class);
            }

            private Builder() {
                this.proposerAddress_ = ByteString.EMPTY;
                this.approvals_ = Collections.emptyList();
                this.state_ = 0;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.proposerAddress_ = ByteString.EMPTY;
                this.approvals_ = Collections.emptyList();
                this.state_ = 0;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Proposal.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.proposalId_ = 0L;
                this.proposerAddress_ = ByteString.EMPTY;
                internalGetMutableParameters().clear();
                this.expirationTime_ = 0L;
                this.createTime_ = 0L;
                this.approvals_ = Collections.emptyList();
                this.bitField0_ &= -33;
                this.state_ = 0;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Proposal_descriptor;
            }

            @Override
            public Proposal getDefaultInstanceForType() {
                return Proposal.getDefaultInstance();
            }

            @Override
            public Proposal build() {
                Proposal buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Proposal buildPartial() {
                Proposal proposal = new Proposal(this);
                proposal.proposalId_ = this.proposalId_;
                proposal.proposerAddress_ = this.proposerAddress_;
                proposal.parameters_ = internalGetParameters();
                proposal.parameters_.makeImmutable();
                proposal.expirationTime_ = this.expirationTime_;
                proposal.createTime_ = this.createTime_;
                if ((this.bitField0_ & 32) == 32) {
                    this.approvals_ = Collections.unmodifiableList(this.approvals_);
                    this.bitField0_ &= -33;
                }
                proposal.approvals_ = this.approvals_;
                proposal.state_ = this.state_;
                proposal.bitField0_ = 0;
                onBuilt();
                return proposal;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Proposal) {
                    return mergeFrom((Proposal) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Proposal proposal) {
                if (proposal == Proposal.getDefaultInstance()) {
                    return this;
                }
                if (proposal.getProposalId() != 0) {
                    setProposalId(proposal.getProposalId());
                }
                if (proposal.getProposerAddress() != ByteString.EMPTY) {
                    setProposerAddress(proposal.getProposerAddress());
                }
                internalGetMutableParameters().mergeFrom(proposal.internalGetParameters());
                if (proposal.getExpirationTime() != 0) {
                    setExpirationTime(proposal.getExpirationTime());
                }
                if (proposal.getCreateTime() != 0) {
                    setCreateTime(proposal.getCreateTime());
                }
                if (!proposal.approvals_.isEmpty()) {
                    if (this.approvals_.isEmpty()) {
                        this.approvals_ = proposal.approvals_;
                        this.bitField0_ &= -33;
                    } else {
                        ensureApprovalsIsMutable();
                        this.approvals_.addAll(proposal.approvals_);
                    }
                    onChanged();
                }
                if (proposal.state_ != 0) {
                    setStateValue(proposal.getStateValue());
                }
                mergeUnknownFields(proposal.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Proposal.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Proposal.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Proposal$Builder");
            }

            public Builder setProposalId(long j) {
                this.proposalId_ = j;
                onChanged();
                return this;
            }

            public Builder clearProposalId() {
                this.proposalId_ = 0L;
                onChanged();
                return this;
            }

            public Builder setProposerAddress(ByteString byteString) {
                byteString.getClass();
                this.proposerAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearProposerAddress() {
                this.proposerAddress_ = Proposal.getDefaultInstance().getProposerAddress();
                onChanged();
                return this;
            }

            private MapField<Long, Long> internalGetParameters() {
                MapField<Long, Long> mapField = this.parameters_;
                return mapField == null ? MapField.emptyMapField(ParametersDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<Long, Long> internalGetMutableParameters() {
                onChanged();
                if (this.parameters_ == null) {
                    this.parameters_ = MapField.newMapField(ParametersDefaultEntryHolder.defaultEntry);
                }
                if (!this.parameters_.isMutable()) {
                    this.parameters_ = this.parameters_.copy();
                }
                return this.parameters_;
            }

            @Override
            public int getParametersCount() {
                return internalGetParameters().getMap().size();
            }

            @Override
            public boolean containsParameters(long j) {
                return internalGetParameters().getMap().containsKey(Long.valueOf(j));
            }

            @Override
            @Deprecated
            public Map<Long, Long> getParameters() {
                return getParametersMap();
            }

            @Override
            public Map<Long, Long> getParametersMap() {
                return internalGetParameters().getMap();
            }

            @Override
            public long getParametersOrDefault(long j, long j2) {
                Map<Long, Long> map = internalGetParameters().getMap();
                return map.containsKey(Long.valueOf(j)) ? map.get(Long.valueOf(j)).longValue() : j2;
            }

            @Override
            public long getParametersOrThrow(long j) {
                Map<Long, Long> map = internalGetParameters().getMap();
                if (!map.containsKey(Long.valueOf(j))) {
                    throw new IllegalArgumentException();
                }
                return map.get(Long.valueOf(j)).longValue();
            }

            public Builder clearParameters() {
                internalGetMutableParameters().getMutableMap().clear();
                return this;
            }

            public Builder removeParameters(long j) {
                internalGetMutableParameters().getMutableMap().remove(Long.valueOf(j));
                return this;
            }

            @Deprecated
            public Map<Long, Long> getMutableParameters() {
                return internalGetMutableParameters().getMutableMap();
            }

            public Builder putParameters(long j, long j2) {
                internalGetMutableParameters().getMutableMap().put(Long.valueOf(j), Long.valueOf(j2));
                return this;
            }

            public Builder putAllParameters(Map<Long, Long> map) {
                internalGetMutableParameters().getMutableMap().putAll(map);
                return this;
            }

            public Builder setExpirationTime(long j) {
                this.expirationTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearExpirationTime() {
                this.expirationTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setCreateTime(long j) {
                this.createTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearCreateTime() {
                this.createTime_ = 0L;
                onChanged();
                return this;
            }

            private void ensureApprovalsIsMutable() {
                if ((this.bitField0_ & 32) != 32) {
                    this.approvals_ = new ArrayList(this.approvals_);
                    this.bitField0_ |= 32;
                }
            }

            @Override
            public List<ByteString> getApprovalsList() {
                return Collections.unmodifiableList(this.approvals_);
            }

            @Override
            public int getApprovalsCount() {
                return this.approvals_.size();
            }

            @Override
            public ByteString getApprovals(int i) {
                return this.approvals_.get(i);
            }

            public Builder setApprovals(int i, ByteString byteString) {
                byteString.getClass();
                ensureApprovalsIsMutable();
                this.approvals_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addApprovals(ByteString byteString) {
                byteString.getClass();
                ensureApprovalsIsMutable();
                this.approvals_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllApprovals(Iterable<? extends ByteString> iterable) {
                ensureApprovalsIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.approvals_);
                onChanged();
                return this;
            }

            public Builder clearApprovals() {
                this.approvals_ = Collections.emptyList();
                this.bitField0_ &= -33;
                onChanged();
                return this;
            }

            public Builder setStateValue(int i) {
                this.state_ = i;
                onChanged();
                return this;
            }

            @Override
            public State getState() {
                State valueOf = State.valueOf(this.state_);
                return valueOf == null ? State.UNRECOGNIZED : valueOf;
            }

            public Builder setState(State state) {
                state.getClass();
                this.state_ = state.getNumber();
                onChanged();
                return this;
            }

            public Builder clearState() {
                this.state_ = 0;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Exchange extends GeneratedMessageV3 implements ExchangeOrBuilder {
        public static final int CREATE_TIME_FIELD_NUMBER = 3;
        public static final int CREATOR_ADDRESS_FIELD_NUMBER = 2;
        public static final int EXCHANGE_ID_FIELD_NUMBER = 1;
        public static final int FIRST_TOKEN_BALANCE_FIELD_NUMBER = 7;
        public static final int FIRST_TOKEN_ID_FIELD_NUMBER = 6;
        public static final int SECOND_TOKEN_BALANCE_FIELD_NUMBER = 9;
        public static final int SECOND_TOKEN_ID_FIELD_NUMBER = 8;
        private static final long serialVersionUID = 0;
        private long createTime_;
        private ByteString creatorAddress_;
        private long exchangeId_;
        private long firstTokenBalance_;
        private ByteString firstTokenId_;
        private byte memoizedIsInitialized;
        private long secondTokenBalance_;
        private ByteString secondTokenId_;
        private static final Exchange DEFAULT_INSTANCE = new Exchange();
        private static final Parser<Exchange> PARSER = new AbstractParser<Exchange>() {
            @Override
            public Exchange parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Exchange(codedInputStream, extensionRegistryLite);
            }
        };

        public static Exchange getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Exchange> parser() {
            return PARSER;
        }

        @Override
        public long getCreateTime() {
            return this.createTime_;
        }

        @Override
        public ByteString getCreatorAddress() {
            return this.creatorAddress_;
        }

        @Override
        public Exchange getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getExchangeId() {
            return this.exchangeId_;
        }

        @Override
        public long getFirstTokenBalance() {
            return this.firstTokenBalance_;
        }

        @Override
        public ByteString getFirstTokenId() {
            return this.firstTokenId_;
        }

        @Override
        public Parser<Exchange> getParserForType() {
            return PARSER;
        }

        @Override
        public long getSecondTokenBalance() {
            return this.secondTokenBalance_;
        }

        @Override
        public ByteString getSecondTokenId() {
            return this.secondTokenId_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Exchange(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Exchange() {
            this.memoizedIsInitialized = (byte) -1;
            this.exchangeId_ = 0L;
            this.creatorAddress_ = ByteString.EMPTY;
            this.createTime_ = 0L;
            this.firstTokenId_ = ByteString.EMPTY;
            this.firstTokenBalance_ = 0L;
            this.secondTokenId_ = ByteString.EMPTY;
            this.secondTokenBalance_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Exchange(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.exchangeId_ = codedInputStream.readInt64();
                            } else if (readTag == 18) {
                                this.creatorAddress_ = codedInputStream.readBytes();
                            } else if (readTag == 24) {
                                this.createTime_ = codedInputStream.readInt64();
                            } else if (readTag == 50) {
                                this.firstTokenId_ = codedInputStream.readBytes();
                            } else if (readTag == 56) {
                                this.firstTokenBalance_ = codedInputStream.readInt64();
                            } else if (readTag == 66) {
                                this.secondTokenId_ = codedInputStream.readBytes();
                            } else if (readTag != 72) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.secondTokenBalance_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Exchange_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Exchange_fieldAccessorTable.ensureFieldAccessorsInitialized(Exchange.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.exchangeId_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            if (!this.creatorAddress_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.creatorAddress_);
            }
            long j2 = this.createTime_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(3, j2);
            }
            if (!this.firstTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(6, this.firstTokenId_);
            }
            long j3 = this.firstTokenBalance_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(7, j3);
            }
            if (!this.secondTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(8, this.secondTokenId_);
            }
            long j4 = this.secondTokenBalance_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(9, j4);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.exchangeId_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            if (!this.creatorAddress_.isEmpty()) {
                computeInt64Size += CodedOutputStream.computeBytesSize(2, this.creatorAddress_);
            }
            long j2 = this.createTime_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(3, j2);
            }
            if (!this.firstTokenId_.isEmpty()) {
                computeInt64Size += CodedOutputStream.computeBytesSize(6, this.firstTokenId_);
            }
            long j3 = this.firstTokenBalance_;
            if (j3 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(7, j3);
            }
            if (!this.secondTokenId_.isEmpty()) {
                computeInt64Size += CodedOutputStream.computeBytesSize(8, this.secondTokenId_);
            }
            long j4 = this.secondTokenBalance_;
            if (j4 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(9, j4);
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Exchange)) {
                return super.equals(obj);
            }
            Exchange exchange = (Exchange) obj;
            return getExchangeId() == exchange.getExchangeId() && getCreatorAddress().equals(exchange.getCreatorAddress()) && getCreateTime() == exchange.getCreateTime() && getFirstTokenId().equals(exchange.getFirstTokenId()) && getFirstTokenBalance() == exchange.getFirstTokenBalance() && getSecondTokenId().equals(exchange.getSecondTokenId()) && getSecondTokenBalance() == exchange.getSecondTokenBalance() && this.unknownFields.equals(exchange.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getExchangeId())) * 37) + 2) * 53) + getCreatorAddress().hashCode()) * 37) + 3) * 53) + Internal.hashLong(getCreateTime())) * 37) + 6) * 53) + getFirstTokenId().hashCode()) * 37) + 7) * 53) + Internal.hashLong(getFirstTokenBalance())) * 37) + 8) * 53) + getSecondTokenId().hashCode()) * 37) + 9) * 53) + Internal.hashLong(getSecondTokenBalance())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static Exchange parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Exchange parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Exchange parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Exchange parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Exchange parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Exchange parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Exchange parseFrom(InputStream inputStream) throws IOException {
            return (Exchange) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Exchange parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Exchange) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Exchange parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Exchange) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Exchange parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Exchange) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Exchange parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Exchange) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Exchange parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Exchange) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Exchange exchange) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(exchange);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ExchangeOrBuilder {
            private long createTime_;
            private ByteString creatorAddress_;
            private long exchangeId_;
            private long firstTokenBalance_;
            private ByteString firstTokenId_;
            private long secondTokenBalance_;
            private ByteString secondTokenId_;

            @Override
            public long getCreateTime() {
                return this.createTime_;
            }

            @Override
            public ByteString getCreatorAddress() {
                return this.creatorAddress_;
            }

            @Override
            public long getExchangeId() {
                return this.exchangeId_;
            }

            @Override
            public long getFirstTokenBalance() {
                return this.firstTokenBalance_;
            }

            @Override
            public ByteString getFirstTokenId() {
                return this.firstTokenId_;
            }

            @Override
            public long getSecondTokenBalance() {
                return this.secondTokenBalance_;
            }

            @Override
            public ByteString getSecondTokenId() {
                return this.secondTokenId_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Exchange_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Exchange_fieldAccessorTable.ensureFieldAccessorsInitialized(Exchange.class, Builder.class);
            }

            private Builder() {
                this.creatorAddress_ = ByteString.EMPTY;
                this.firstTokenId_ = ByteString.EMPTY;
                this.secondTokenId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.creatorAddress_ = ByteString.EMPTY;
                this.firstTokenId_ = ByteString.EMPTY;
                this.secondTokenId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Exchange.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.exchangeId_ = 0L;
                this.creatorAddress_ = ByteString.EMPTY;
                this.createTime_ = 0L;
                this.firstTokenId_ = ByteString.EMPTY;
                this.firstTokenBalance_ = 0L;
                this.secondTokenId_ = ByteString.EMPTY;
                this.secondTokenBalance_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Exchange_descriptor;
            }

            @Override
            public Exchange getDefaultInstanceForType() {
                return Exchange.getDefaultInstance();
            }

            @Override
            public Exchange build() {
                Exchange buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Exchange buildPartial() {
                Exchange exchange = new Exchange(this);
                exchange.exchangeId_ = this.exchangeId_;
                exchange.creatorAddress_ = this.creatorAddress_;
                exchange.createTime_ = this.createTime_;
                exchange.firstTokenId_ = this.firstTokenId_;
                exchange.firstTokenBalance_ = this.firstTokenBalance_;
                exchange.secondTokenId_ = this.secondTokenId_;
                exchange.secondTokenBalance_ = this.secondTokenBalance_;
                onBuilt();
                return exchange;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Exchange) {
                    return mergeFrom((Exchange) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Exchange exchange) {
                if (exchange == Exchange.getDefaultInstance()) {
                    return this;
                }
                if (exchange.getExchangeId() != 0) {
                    setExchangeId(exchange.getExchangeId());
                }
                if (exchange.getCreatorAddress() != ByteString.EMPTY) {
                    setCreatorAddress(exchange.getCreatorAddress());
                }
                if (exchange.getCreateTime() != 0) {
                    setCreateTime(exchange.getCreateTime());
                }
                if (exchange.getFirstTokenId() != ByteString.EMPTY) {
                    setFirstTokenId(exchange.getFirstTokenId());
                }
                if (exchange.getFirstTokenBalance() != 0) {
                    setFirstTokenBalance(exchange.getFirstTokenBalance());
                }
                if (exchange.getSecondTokenId() != ByteString.EMPTY) {
                    setSecondTokenId(exchange.getSecondTokenId());
                }
                if (exchange.getSecondTokenBalance() != 0) {
                    setSecondTokenBalance(exchange.getSecondTokenBalance());
                }
                mergeUnknownFields(exchange.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Exchange.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Exchange.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Exchange$Builder");
            }

            public Builder setExchangeId(long j) {
                this.exchangeId_ = j;
                onChanged();
                return this;
            }

            public Builder clearExchangeId() {
                this.exchangeId_ = 0L;
                onChanged();
                return this;
            }

            public Builder setCreatorAddress(ByteString byteString) {
                byteString.getClass();
                this.creatorAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearCreatorAddress() {
                this.creatorAddress_ = Exchange.getDefaultInstance().getCreatorAddress();
                onChanged();
                return this;
            }

            public Builder setCreateTime(long j) {
                this.createTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearCreateTime() {
                this.createTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setFirstTokenId(ByteString byteString) {
                byteString.getClass();
                this.firstTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearFirstTokenId() {
                this.firstTokenId_ = Exchange.getDefaultInstance().getFirstTokenId();
                onChanged();
                return this;
            }

            public Builder setFirstTokenBalance(long j) {
                this.firstTokenBalance_ = j;
                onChanged();
                return this;
            }

            public Builder clearFirstTokenBalance() {
                this.firstTokenBalance_ = 0L;
                onChanged();
                return this;
            }

            public Builder setSecondTokenId(ByteString byteString) {
                byteString.getClass();
                this.secondTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSecondTokenId() {
                this.secondTokenId_ = Exchange.getDefaultInstance().getSecondTokenId();
                onChanged();
                return this;
            }

            public Builder setSecondTokenBalance(long j) {
                this.secondTokenBalance_ = j;
                onChanged();
                return this;
            }

            public Builder clearSecondTokenBalance() {
                this.secondTokenBalance_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrder extends GeneratedMessageV3 implements MarketOrderOrBuilder {
        public static final int BUY_TOKEN_ID_FIELD_NUMBER = 6;
        public static final int BUY_TOKEN_QUANTITY_FIELD_NUMBER = 7;
        public static final int CREATE_TIME_FIELD_NUMBER = 3;
        public static final int NEXT_FIELD_NUMBER = 13;
        public static final int ORDER_ID_FIELD_NUMBER = 1;
        public static final int OWNER_ADDRESS_FIELD_NUMBER = 2;
        public static final int PREV_FIELD_NUMBER = 12;
        public static final int SELL_TOKEN_ID_FIELD_NUMBER = 4;
        public static final int SELL_TOKEN_QUANTITY_FIELD_NUMBER = 5;
        public static final int SELL_TOKEN_QUANTITY_REMAIN_FIELD_NUMBER = 9;
        public static final int SELL_TOKEN_QUANTITY_RETURN_FIELD_NUMBER = 10;
        public static final int STATE_FIELD_NUMBER = 11;
        private static final long serialVersionUID = 0;
        private ByteString buyTokenId_;
        private long buyTokenQuantity_;
        private long createTime_;
        private byte memoizedIsInitialized;
        private ByteString next_;
        private ByteString orderId_;
        private ByteString ownerAddress_;
        private ByteString prev_;
        private ByteString sellTokenId_;
        private long sellTokenQuantityRemain_;
        private long sellTokenQuantityReturn_;
        private long sellTokenQuantity_;
        private int state_;
        private static final MarketOrder DEFAULT_INSTANCE = new MarketOrder();
        private static final Parser<MarketOrder> PARSER = new AbstractParser<MarketOrder>() {
            @Override
            public MarketOrder parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrder(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketOrder getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrder> parser() {
            return PARSER;
        }

        @Override
        public ByteString getBuyTokenId() {
            return this.buyTokenId_;
        }

        @Override
        public long getBuyTokenQuantity() {
            return this.buyTokenQuantity_;
        }

        @Override
        public long getCreateTime() {
            return this.createTime_;
        }

        @Override
        public MarketOrder getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public ByteString getNext() {
            return this.next_;
        }

        @Override
        public ByteString getOrderId() {
            return this.orderId_;
        }

        @Override
        public ByteString getOwnerAddress() {
            return this.ownerAddress_;
        }

        @Override
        public Parser<MarketOrder> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getPrev() {
            return this.prev_;
        }

        @Override
        public ByteString getSellTokenId() {
            return this.sellTokenId_;
        }

        @Override
        public long getSellTokenQuantity() {
            return this.sellTokenQuantity_;
        }

        @Override
        public long getSellTokenQuantityRemain() {
            return this.sellTokenQuantityRemain_;
        }

        @Override
        public long getSellTokenQuantityReturn() {
            return this.sellTokenQuantityReturn_;
        }

        @Override
        public int getStateValue() {
            return this.state_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrder(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrder() {
            this.memoizedIsInitialized = (byte) -1;
            this.orderId_ = ByteString.EMPTY;
            this.ownerAddress_ = ByteString.EMPTY;
            this.createTime_ = 0L;
            this.sellTokenId_ = ByteString.EMPTY;
            this.sellTokenQuantity_ = 0L;
            this.buyTokenId_ = ByteString.EMPTY;
            this.buyTokenQuantity_ = 0L;
            this.sellTokenQuantityRemain_ = 0L;
            this.sellTokenQuantityReturn_ = 0L;
            this.state_ = 0;
            this.prev_ = ByteString.EMPTY;
            this.next_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrder(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 10:
                                    this.orderId_ = codedInputStream.readBytes();
                                    continue;
                                case 18:
                                    this.ownerAddress_ = codedInputStream.readBytes();
                                    continue;
                                case 24:
                                    this.createTime_ = codedInputStream.readInt64();
                                    continue;
                                case 34:
                                    this.sellTokenId_ = codedInputStream.readBytes();
                                    continue;
                                case 40:
                                    this.sellTokenQuantity_ = codedInputStream.readInt64();
                                    continue;
                                case 50:
                                    this.buyTokenId_ = codedInputStream.readBytes();
                                    continue;
                                case 56:
                                    this.buyTokenQuantity_ = codedInputStream.readInt64();
                                    continue;
                                case 72:
                                    this.sellTokenQuantityRemain_ = codedInputStream.readInt64();
                                    continue;
                                case 80:
                                    this.sellTokenQuantityReturn_ = codedInputStream.readInt64();
                                    continue;
                                case 88:
                                    this.state_ = codedInputStream.readEnum();
                                    continue;
                                case 98:
                                    this.prev_ = codedInputStream.readBytes();
                                    continue;
                                case 106:
                                    this.next_ = codedInputStream.readBytes();
                                    continue;
                                default:
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrder_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrder_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrder.class, Builder.class);
        }

        public enum State implements ProtocolMessageEnum {
            ACTIVE(0),
            INACTIVE(1),
            CANCELED(2),
            UNRECOGNIZED(-1);
            
            public static final int ACTIVE_VALUE = 0;
            public static final int CANCELED_VALUE = 2;
            public static final int INACTIVE_VALUE = 1;
            private final int value;
            private static final Internal.EnumLiteMap<State> internalValueMap = new Internal.EnumLiteMap<State>() {
                @Override
                public State findValueByNumber(int i) {
                    return State.forNumber(i);
                }
            };
            private static final State[] VALUES = values();

            public static State forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            return null;
                        }
                        return CANCELED;
                    }
                    return INACTIVE;
                }
                return ACTIVE;
            }

            public static Internal.EnumLiteMap<State> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static State valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return MarketOrder.getDescriptor().getEnumTypes().get(0);
            }

            public static State valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            State(int i) {
                this.value = i;
            }
        }

        @Override
        public State getState() {
            State valueOf = State.valueOf(this.state_);
            return valueOf == null ? State.UNRECOGNIZED : valueOf;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.orderId_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.orderId_);
            }
            if (!this.ownerAddress_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.ownerAddress_);
            }
            long j = this.createTime_;
            if (j != 0) {
                codedOutputStream.writeInt64(3, j);
            }
            if (!this.sellTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(4, this.sellTokenId_);
            }
            long j2 = this.sellTokenQuantity_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(5, j2);
            }
            if (!this.buyTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(6, this.buyTokenId_);
            }
            long j3 = this.buyTokenQuantity_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(7, j3);
            }
            long j4 = this.sellTokenQuantityRemain_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(9, j4);
            }
            long j5 = this.sellTokenQuantityReturn_;
            if (j5 != 0) {
                codedOutputStream.writeInt64(10, j5);
            }
            if (this.state_ != State.ACTIVE.getNumber()) {
                codedOutputStream.writeEnum(11, this.state_);
            }
            if (!this.prev_.isEmpty()) {
                codedOutputStream.writeBytes(12, this.prev_);
            }
            if (!this.next_.isEmpty()) {
                codedOutputStream.writeBytes(13, this.next_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.orderId_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.orderId_) : 0;
            if (!this.ownerAddress_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.ownerAddress_);
            }
            long j = this.createTime_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, j);
            }
            if (!this.sellTokenId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(4, this.sellTokenId_);
            }
            long j2 = this.sellTokenQuantity_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(5, j2);
            }
            if (!this.buyTokenId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(6, this.buyTokenId_);
            }
            long j3 = this.buyTokenQuantity_;
            if (j3 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(7, j3);
            }
            long j4 = this.sellTokenQuantityRemain_;
            if (j4 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(9, j4);
            }
            long j5 = this.sellTokenQuantityReturn_;
            if (j5 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(10, j5);
            }
            if (this.state_ != State.ACTIVE.getNumber()) {
                computeBytesSize += CodedOutputStream.computeEnumSize(11, this.state_);
            }
            if (!this.prev_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(12, this.prev_);
            }
            if (!this.next_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(13, this.next_);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrder)) {
                return super.equals(obj);
            }
            MarketOrder marketOrder = (MarketOrder) obj;
            return getOrderId().equals(marketOrder.getOrderId()) && getOwnerAddress().equals(marketOrder.getOwnerAddress()) && getCreateTime() == marketOrder.getCreateTime() && getSellTokenId().equals(marketOrder.getSellTokenId()) && getSellTokenQuantity() == marketOrder.getSellTokenQuantity() && getBuyTokenId().equals(marketOrder.getBuyTokenId()) && getBuyTokenQuantity() == marketOrder.getBuyTokenQuantity() && getSellTokenQuantityRemain() == marketOrder.getSellTokenQuantityRemain() && getSellTokenQuantityReturn() == marketOrder.getSellTokenQuantityReturn() && this.state_ == marketOrder.state_ && getPrev().equals(marketOrder.getPrev()) && getNext().equals(marketOrder.getNext()) && this.unknownFields.equals(marketOrder.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getOrderId().hashCode()) * 37) + 2) * 53) + getOwnerAddress().hashCode()) * 37) + 3) * 53) + Internal.hashLong(getCreateTime())) * 37) + 4) * 53) + getSellTokenId().hashCode()) * 37) + 5) * 53) + Internal.hashLong(getSellTokenQuantity())) * 37) + 6) * 53) + getBuyTokenId().hashCode()) * 37) + 7) * 53) + Internal.hashLong(getBuyTokenQuantity())) * 37) + 9) * 53) + Internal.hashLong(getSellTokenQuantityRemain())) * 37) + 10) * 53) + Internal.hashLong(getSellTokenQuantityReturn())) * 37) + 11) * 53) + this.state_) * 37) + 12) * 53) + getPrev().hashCode()) * 37) + 13) * 53) + getNext().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static MarketOrder parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrder parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrder parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrder parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrder parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrder parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrder parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrder parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrder parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrder parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrder parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrder parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrder) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrder marketOrder) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrder);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderOrBuilder {
            private ByteString buyTokenId_;
            private long buyTokenQuantity_;
            private long createTime_;
            private ByteString next_;
            private ByteString orderId_;
            private ByteString ownerAddress_;
            private ByteString prev_;
            private ByteString sellTokenId_;
            private long sellTokenQuantityRemain_;
            private long sellTokenQuantityReturn_;
            private long sellTokenQuantity_;
            private int state_;

            @Override
            public ByteString getBuyTokenId() {
                return this.buyTokenId_;
            }

            @Override
            public long getBuyTokenQuantity() {
                return this.buyTokenQuantity_;
            }

            @Override
            public long getCreateTime() {
                return this.createTime_;
            }

            @Override
            public ByteString getNext() {
                return this.next_;
            }

            @Override
            public ByteString getOrderId() {
                return this.orderId_;
            }

            @Override
            public ByteString getOwnerAddress() {
                return this.ownerAddress_;
            }

            @Override
            public ByteString getPrev() {
                return this.prev_;
            }

            @Override
            public ByteString getSellTokenId() {
                return this.sellTokenId_;
            }

            @Override
            public long getSellTokenQuantity() {
                return this.sellTokenQuantity_;
            }

            @Override
            public long getSellTokenQuantityRemain() {
                return this.sellTokenQuantityRemain_;
            }

            @Override
            public long getSellTokenQuantityReturn() {
                return this.sellTokenQuantityReturn_;
            }

            @Override
            public int getStateValue() {
                return this.state_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrder_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrder_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrder.class, Builder.class);
            }

            private Builder() {
                this.orderId_ = ByteString.EMPTY;
                this.ownerAddress_ = ByteString.EMPTY;
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                this.state_ = 0;
                this.prev_ = ByteString.EMPTY;
                this.next_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.orderId_ = ByteString.EMPTY;
                this.ownerAddress_ = ByteString.EMPTY;
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                this.state_ = 0;
                this.prev_ = ByteString.EMPTY;
                this.next_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketOrder.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.orderId_ = ByteString.EMPTY;
                this.ownerAddress_ = ByteString.EMPTY;
                this.createTime_ = 0L;
                this.sellTokenId_ = ByteString.EMPTY;
                this.sellTokenQuantity_ = 0L;
                this.buyTokenId_ = ByteString.EMPTY;
                this.buyTokenQuantity_ = 0L;
                this.sellTokenQuantityRemain_ = 0L;
                this.sellTokenQuantityReturn_ = 0L;
                this.state_ = 0;
                this.prev_ = ByteString.EMPTY;
                this.next_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrder_descriptor;
            }

            @Override
            public MarketOrder getDefaultInstanceForType() {
                return MarketOrder.getDefaultInstance();
            }

            @Override
            public MarketOrder build() {
                MarketOrder buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrder buildPartial() {
                MarketOrder marketOrder = new MarketOrder(this);
                marketOrder.orderId_ = this.orderId_;
                marketOrder.ownerAddress_ = this.ownerAddress_;
                marketOrder.createTime_ = this.createTime_;
                marketOrder.sellTokenId_ = this.sellTokenId_;
                marketOrder.sellTokenQuantity_ = this.sellTokenQuantity_;
                marketOrder.buyTokenId_ = this.buyTokenId_;
                marketOrder.buyTokenQuantity_ = this.buyTokenQuantity_;
                marketOrder.sellTokenQuantityRemain_ = this.sellTokenQuantityRemain_;
                marketOrder.sellTokenQuantityReturn_ = this.sellTokenQuantityReturn_;
                marketOrder.state_ = this.state_;
                marketOrder.prev_ = this.prev_;
                marketOrder.next_ = this.next_;
                onBuilt();
                return marketOrder;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrder) {
                    return mergeFrom((MarketOrder) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrder marketOrder) {
                if (marketOrder == MarketOrder.getDefaultInstance()) {
                    return this;
                }
                if (marketOrder.getOrderId() != ByteString.EMPTY) {
                    setOrderId(marketOrder.getOrderId());
                }
                if (marketOrder.getOwnerAddress() != ByteString.EMPTY) {
                    setOwnerAddress(marketOrder.getOwnerAddress());
                }
                if (marketOrder.getCreateTime() != 0) {
                    setCreateTime(marketOrder.getCreateTime());
                }
                if (marketOrder.getSellTokenId() != ByteString.EMPTY) {
                    setSellTokenId(marketOrder.getSellTokenId());
                }
                if (marketOrder.getSellTokenQuantity() != 0) {
                    setSellTokenQuantity(marketOrder.getSellTokenQuantity());
                }
                if (marketOrder.getBuyTokenId() != ByteString.EMPTY) {
                    setBuyTokenId(marketOrder.getBuyTokenId());
                }
                if (marketOrder.getBuyTokenQuantity() != 0) {
                    setBuyTokenQuantity(marketOrder.getBuyTokenQuantity());
                }
                if (marketOrder.getSellTokenQuantityRemain() != 0) {
                    setSellTokenQuantityRemain(marketOrder.getSellTokenQuantityRemain());
                }
                if (marketOrder.getSellTokenQuantityReturn() != 0) {
                    setSellTokenQuantityReturn(marketOrder.getSellTokenQuantityReturn());
                }
                if (marketOrder.state_ != 0) {
                    setStateValue(marketOrder.getStateValue());
                }
                if (marketOrder.getPrev() != ByteString.EMPTY) {
                    setPrev(marketOrder.getPrev());
                }
                if (marketOrder.getNext() != ByteString.EMPTY) {
                    setNext(marketOrder.getNext());
                }
                mergeUnknownFields(marketOrder.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrder.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrder.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrder$Builder");
            }

            public Builder setOrderId(ByteString byteString) {
                byteString.getClass();
                this.orderId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearOrderId() {
                this.orderId_ = MarketOrder.getDefaultInstance().getOrderId();
                onChanged();
                return this;
            }

            public Builder setOwnerAddress(ByteString byteString) {
                byteString.getClass();
                this.ownerAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearOwnerAddress() {
                this.ownerAddress_ = MarketOrder.getDefaultInstance().getOwnerAddress();
                onChanged();
                return this;
            }

            public Builder setCreateTime(long j) {
                this.createTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearCreateTime() {
                this.createTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setSellTokenId(ByteString byteString) {
                byteString.getClass();
                this.sellTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSellTokenId() {
                this.sellTokenId_ = MarketOrder.getDefaultInstance().getSellTokenId();
                onChanged();
                return this;
            }

            public Builder setSellTokenQuantity(long j) {
                this.sellTokenQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearSellTokenQuantity() {
                this.sellTokenQuantity_ = 0L;
                onChanged();
                return this;
            }

            public Builder setBuyTokenId(ByteString byteString) {
                byteString.getClass();
                this.buyTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearBuyTokenId() {
                this.buyTokenId_ = MarketOrder.getDefaultInstance().getBuyTokenId();
                onChanged();
                return this;
            }

            public Builder setBuyTokenQuantity(long j) {
                this.buyTokenQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearBuyTokenQuantity() {
                this.buyTokenQuantity_ = 0L;
                onChanged();
                return this;
            }

            public Builder setSellTokenQuantityRemain(long j) {
                this.sellTokenQuantityRemain_ = j;
                onChanged();
                return this;
            }

            public Builder clearSellTokenQuantityRemain() {
                this.sellTokenQuantityRemain_ = 0L;
                onChanged();
                return this;
            }

            public Builder setSellTokenQuantityReturn(long j) {
                this.sellTokenQuantityReturn_ = j;
                onChanged();
                return this;
            }

            public Builder clearSellTokenQuantityReturn() {
                this.sellTokenQuantityReturn_ = 0L;
                onChanged();
                return this;
            }

            public Builder setStateValue(int i) {
                this.state_ = i;
                onChanged();
                return this;
            }

            @Override
            public State getState() {
                State valueOf = State.valueOf(this.state_);
                return valueOf == null ? State.UNRECOGNIZED : valueOf;
            }

            public Builder setState(State state) {
                state.getClass();
                this.state_ = state.getNumber();
                onChanged();
                return this;
            }

            public Builder clearState() {
                this.state_ = 0;
                onChanged();
                return this;
            }

            public Builder setPrev(ByteString byteString) {
                byteString.getClass();
                this.prev_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearPrev() {
                this.prev_ = MarketOrder.getDefaultInstance().getPrev();
                onChanged();
                return this;
            }

            public Builder setNext(ByteString byteString) {
                byteString.getClass();
                this.next_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearNext() {
                this.next_ = MarketOrder.getDefaultInstance().getNext();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrderList extends GeneratedMessageV3 implements MarketOrderListOrBuilder {
        public static final int ORDERS_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private List<MarketOrder> orders_;
        private static final MarketOrderList DEFAULT_INSTANCE = new MarketOrderList();
        private static final Parser<MarketOrderList> PARSER = new AbstractParser<MarketOrderList>() {
            @Override
            public MarketOrderList parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrderList(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketOrderList getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrderList> parser() {
            return PARSER;
        }

        @Override
        public MarketOrderList getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<MarketOrder> getOrdersList() {
            return this.orders_;
        }

        @Override
        public List<? extends MarketOrderOrBuilder> getOrdersOrBuilderList() {
            return this.orders_;
        }

        @Override
        public Parser<MarketOrderList> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrderList(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrderList() {
            this.memoizedIsInitialized = (byte) -1;
            this.orders_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrderList(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 10) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.orders_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.orders_.add((MarketOrder) codedInputStream.readMessage(MarketOrder.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.orders_ = Collections.unmodifiableList(this.orders_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrderList_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrderList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderList.class, Builder.class);
        }

        @Override
        public int getOrdersCount() {
            return this.orders_.size();
        }

        @Override
        public MarketOrder getOrders(int i) {
            return this.orders_.get(i);
        }

        @Override
        public MarketOrderOrBuilder getOrdersOrBuilder(int i) {
            return this.orders_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.orders_.size(); i++) {
                codedOutputStream.writeMessage(1, this.orders_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.orders_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.orders_.get(i3));
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrderList)) {
                return super.equals(obj);
            }
            MarketOrderList marketOrderList = (MarketOrderList) obj;
            return getOrdersList().equals(marketOrderList.getOrdersList()) && this.unknownFields.equals(marketOrderList.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getOrdersCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getOrdersList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static MarketOrderList parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrderList parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrderList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrderList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrderList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrderList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrderList parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrderList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderList parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrderList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrderList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrderList marketOrderList) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrderList);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderListOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> ordersBuilder_;
            private List<MarketOrder> orders_;

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrderList_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrderList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderList.class, Builder.class);
            }

            private Builder() {
                this.orders_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.orders_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (MarketOrderList.alwaysUseFieldBuilders) {
                    getOrdersFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.orders_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrderList_descriptor;
            }

            @Override
            public MarketOrderList getDefaultInstanceForType() {
                return MarketOrderList.getDefaultInstance();
            }

            @Override
            public MarketOrderList build() {
                MarketOrderList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrderList buildPartial() {
                MarketOrderList marketOrderList = new MarketOrderList(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.orders_ = Collections.unmodifiableList(this.orders_);
                        this.bitField0_ &= -2;
                    }
                    marketOrderList.orders_ = this.orders_;
                } else {
                    marketOrderList.orders_ = repeatedFieldBuilderV3.build();
                }
                onBuilt();
                return marketOrderList;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrderList) {
                    return mergeFrom((MarketOrderList) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrderList marketOrderList) {
                if (marketOrderList == MarketOrderList.getDefaultInstance()) {
                    return this;
                }
                if (this.ordersBuilder_ == null) {
                    if (!marketOrderList.orders_.isEmpty()) {
                        if (this.orders_.isEmpty()) {
                            this.orders_ = marketOrderList.orders_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureOrdersIsMutable();
                            this.orders_.addAll(marketOrderList.orders_);
                        }
                        onChanged();
                    }
                } else if (!marketOrderList.orders_.isEmpty()) {
                    if (!this.ordersBuilder_.isEmpty()) {
                        this.ordersBuilder_.addAllMessages(marketOrderList.orders_);
                    } else {
                        this.ordersBuilder_.dispose();
                        this.ordersBuilder_ = null;
                        this.orders_ = marketOrderList.orders_;
                        this.bitField0_ &= -2;
                        this.ordersBuilder_ = MarketOrderList.alwaysUseFieldBuilders ? getOrdersFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(marketOrderList.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrderList.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrderList.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrderList$Builder");
            }

            private void ensureOrdersIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.orders_ = new ArrayList(this.orders_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<MarketOrder> getOrdersList() {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.orders_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getOrdersCount() {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orders_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public MarketOrder getOrders(int i) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orders_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setOrders(int i, MarketOrder marketOrder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrder.getClass();
                    ensureOrdersIsMutable();
                    this.orders_.set(i, marketOrder);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, marketOrder);
                }
                return this;
            }

            public Builder setOrders(int i, MarketOrder.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrdersIsMutable();
                    this.orders_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addOrders(MarketOrder marketOrder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrder.getClass();
                    ensureOrdersIsMutable();
                    this.orders_.add(marketOrder);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(marketOrder);
                }
                return this;
            }

            public Builder addOrders(int i, MarketOrder marketOrder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrder.getClass();
                    ensureOrdersIsMutable();
                    this.orders_.add(i, marketOrder);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, marketOrder);
                }
                return this;
            }

            public Builder addOrders(MarketOrder.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrdersIsMutable();
                    this.orders_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addOrders(int i, MarketOrder.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrdersIsMutable();
                    this.orders_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllOrders(Iterable<? extends MarketOrder> iterable) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrdersIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.orders_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearOrders() {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.orders_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeOrders(int i) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrdersIsMutable();
                    this.orders_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public MarketOrder.Builder getOrdersBuilder(int i) {
                return getOrdersFieldBuilder().getBuilder(i);
            }

            @Override
            public MarketOrderOrBuilder getOrdersOrBuilder(int i) {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orders_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends MarketOrderOrBuilder> getOrdersOrBuilderList() {
                RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> repeatedFieldBuilderV3 = this.ordersBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.orders_);
            }

            public MarketOrder.Builder addOrdersBuilder() {
                return getOrdersFieldBuilder().addBuilder(MarketOrder.getDefaultInstance());
            }

            public MarketOrder.Builder addOrdersBuilder(int i) {
                return getOrdersFieldBuilder().addBuilder(i, MarketOrder.getDefaultInstance());
            }

            public List<MarketOrder.Builder> getOrdersBuilderList() {
                return getOrdersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<MarketOrder, MarketOrder.Builder, MarketOrderOrBuilder> getOrdersFieldBuilder() {
                if (this.ordersBuilder_ == null) {
                    this.ordersBuilder_ = new RepeatedFieldBuilderV3<>(this.orders_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.orders_ = null;
                }
                return this.ordersBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrderPairList extends GeneratedMessageV3 implements MarketOrderPairListOrBuilder {
        public static final int ORDERPAIR_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private List<MarketOrderPair> orderPair_;
        private static final MarketOrderPairList DEFAULT_INSTANCE = new MarketOrderPairList();
        private static final Parser<MarketOrderPairList> PARSER = new AbstractParser<MarketOrderPairList>() {
            @Override
            public MarketOrderPairList parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrderPairList(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketOrderPairList getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrderPairList> parser() {
            return PARSER;
        }

        @Override
        public MarketOrderPairList getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<MarketOrderPair> getOrderPairList() {
            return this.orderPair_;
        }

        @Override
        public List<? extends MarketOrderPairOrBuilder> getOrderPairOrBuilderList() {
            return this.orderPair_;
        }

        @Override
        public Parser<MarketOrderPairList> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrderPairList(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrderPairList() {
            this.memoizedIsInitialized = (byte) -1;
            this.orderPair_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrderPairList(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 10) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.orderPair_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.orderPair_.add((MarketOrderPair) codedInputStream.readMessage(MarketOrderPair.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.orderPair_ = Collections.unmodifiableList(this.orderPair_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrderPairList_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrderPairList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderPairList.class, Builder.class);
        }

        @Override
        public int getOrderPairCount() {
            return this.orderPair_.size();
        }

        @Override
        public MarketOrderPair getOrderPair(int i) {
            return this.orderPair_.get(i);
        }

        @Override
        public MarketOrderPairOrBuilder getOrderPairOrBuilder(int i) {
            return this.orderPair_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.orderPair_.size(); i++) {
                codedOutputStream.writeMessage(1, this.orderPair_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.orderPair_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.orderPair_.get(i3));
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrderPairList)) {
                return super.equals(obj);
            }
            MarketOrderPairList marketOrderPairList = (MarketOrderPairList) obj;
            return getOrderPairList().equals(marketOrderPairList.getOrderPairList()) && this.unknownFields.equals(marketOrderPairList.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getOrderPairCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getOrderPairList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static MarketOrderPairList parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrderPairList parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrderPairList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrderPairList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrderPairList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrderPairList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrderPairList parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrderPairList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderPairList parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrderPairList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderPairList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrderPairList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPairList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrderPairList marketOrderPairList) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrderPairList);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderPairListOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> orderPairBuilder_;
            private List<MarketOrderPair> orderPair_;

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrderPairList_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrderPairList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderPairList.class, Builder.class);
            }

            private Builder() {
                this.orderPair_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.orderPair_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (MarketOrderPairList.alwaysUseFieldBuilders) {
                    getOrderPairFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.orderPair_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrderPairList_descriptor;
            }

            @Override
            public MarketOrderPairList getDefaultInstanceForType() {
                return MarketOrderPairList.getDefaultInstance();
            }

            @Override
            public MarketOrderPairList build() {
                MarketOrderPairList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrderPairList buildPartial() {
                MarketOrderPairList marketOrderPairList = new MarketOrderPairList(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.orderPair_ = Collections.unmodifiableList(this.orderPair_);
                        this.bitField0_ &= -2;
                    }
                    marketOrderPairList.orderPair_ = this.orderPair_;
                } else {
                    marketOrderPairList.orderPair_ = repeatedFieldBuilderV3.build();
                }
                onBuilt();
                return marketOrderPairList;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrderPairList) {
                    return mergeFrom((MarketOrderPairList) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrderPairList marketOrderPairList) {
                if (marketOrderPairList == MarketOrderPairList.getDefaultInstance()) {
                    return this;
                }
                if (this.orderPairBuilder_ == null) {
                    if (!marketOrderPairList.orderPair_.isEmpty()) {
                        if (this.orderPair_.isEmpty()) {
                            this.orderPair_ = marketOrderPairList.orderPair_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureOrderPairIsMutable();
                            this.orderPair_.addAll(marketOrderPairList.orderPair_);
                        }
                        onChanged();
                    }
                } else if (!marketOrderPairList.orderPair_.isEmpty()) {
                    if (!this.orderPairBuilder_.isEmpty()) {
                        this.orderPairBuilder_.addAllMessages(marketOrderPairList.orderPair_);
                    } else {
                        this.orderPairBuilder_.dispose();
                        this.orderPairBuilder_ = null;
                        this.orderPair_ = marketOrderPairList.orderPair_;
                        this.bitField0_ &= -2;
                        this.orderPairBuilder_ = MarketOrderPairList.alwaysUseFieldBuilders ? getOrderPairFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(marketOrderPairList.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrderPairList.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrderPairList.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrderPairList$Builder");
            }

            private void ensureOrderPairIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.orderPair_ = new ArrayList(this.orderPair_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<MarketOrderPair> getOrderPairList() {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.orderPair_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getOrderPairCount() {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderPair_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public MarketOrderPair getOrderPair(int i) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderPair_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setOrderPair(int i, MarketOrderPair marketOrderPair) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderPair.getClass();
                    ensureOrderPairIsMutable();
                    this.orderPair_.set(i, marketOrderPair);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, marketOrderPair);
                }
                return this;
            }

            public Builder setOrderPair(int i, MarketOrderPair.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderPairIsMutable();
                    this.orderPair_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addOrderPair(MarketOrderPair marketOrderPair) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderPair.getClass();
                    ensureOrderPairIsMutable();
                    this.orderPair_.add(marketOrderPair);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(marketOrderPair);
                }
                return this;
            }

            public Builder addOrderPair(int i, MarketOrderPair marketOrderPair) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderPair.getClass();
                    ensureOrderPairIsMutable();
                    this.orderPair_.add(i, marketOrderPair);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, marketOrderPair);
                }
                return this;
            }

            public Builder addOrderPair(MarketOrderPair.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderPairIsMutable();
                    this.orderPair_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addOrderPair(int i, MarketOrderPair.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderPairIsMutable();
                    this.orderPair_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllOrderPair(Iterable<? extends MarketOrderPair> iterable) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderPairIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.orderPair_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearOrderPair() {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.orderPair_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeOrderPair(int i) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderPairIsMutable();
                    this.orderPair_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public MarketOrderPair.Builder getOrderPairBuilder(int i) {
                return getOrderPairFieldBuilder().getBuilder(i);
            }

            @Override
            public MarketOrderPairOrBuilder getOrderPairOrBuilder(int i) {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderPair_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends MarketOrderPairOrBuilder> getOrderPairOrBuilderList() {
                RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> repeatedFieldBuilderV3 = this.orderPairBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.orderPair_);
            }

            public MarketOrderPair.Builder addOrderPairBuilder() {
                return getOrderPairFieldBuilder().addBuilder(MarketOrderPair.getDefaultInstance());
            }

            public MarketOrderPair.Builder addOrderPairBuilder(int i) {
                return getOrderPairFieldBuilder().addBuilder(i, MarketOrderPair.getDefaultInstance());
            }

            public List<MarketOrderPair.Builder> getOrderPairBuilderList() {
                return getOrderPairFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<MarketOrderPair, MarketOrderPair.Builder, MarketOrderPairOrBuilder> getOrderPairFieldBuilder() {
                if (this.orderPairBuilder_ == null) {
                    this.orderPairBuilder_ = new RepeatedFieldBuilderV3<>(this.orderPair_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.orderPair_ = null;
                }
                return this.orderPairBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrderPair extends GeneratedMessageV3 implements MarketOrderPairOrBuilder {
        public static final int BUY_TOKEN_ID_FIELD_NUMBER = 2;
        private static final MarketOrderPair DEFAULT_INSTANCE = new MarketOrderPair();
        private static final Parser<MarketOrderPair> PARSER = new AbstractParser<MarketOrderPair>() {
            @Override
            public MarketOrderPair parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrderPair(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int SELL_TOKEN_ID_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private ByteString buyTokenId_;
        private byte memoizedIsInitialized;
        private ByteString sellTokenId_;

        public static MarketOrderPair getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrderPair> parser() {
            return PARSER;
        }

        @Override
        public ByteString getBuyTokenId() {
            return this.buyTokenId_;
        }

        @Override
        public MarketOrderPair getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<MarketOrderPair> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getSellTokenId() {
            return this.sellTokenId_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrderPair(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrderPair() {
            this.memoizedIsInitialized = (byte) -1;
            this.sellTokenId_ = ByteString.EMPTY;
            this.buyTokenId_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrderPair(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.sellTokenId_ = codedInputStream.readBytes();
                                } else if (readTag != 18) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.buyTokenId_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrderPair_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrderPair_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderPair.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.sellTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.sellTokenId_);
            }
            if (!this.buyTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.buyTokenId_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.sellTokenId_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.sellTokenId_) : 0;
            if (!this.buyTokenId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.buyTokenId_);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrderPair)) {
                return super.equals(obj);
            }
            MarketOrderPair marketOrderPair = (MarketOrderPair) obj;
            return getSellTokenId().equals(marketOrderPair.getSellTokenId()) && getBuyTokenId().equals(marketOrderPair.getBuyTokenId()) && this.unknownFields.equals(marketOrderPair.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getSellTokenId().hashCode()) * 37) + 2) * 53) + getBuyTokenId().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static MarketOrderPair parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrderPair parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrderPair parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrderPair parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrderPair parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrderPair parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrderPair parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrderPair parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderPair parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrderPair parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderPair parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrderPair parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderPair) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrderPair marketOrderPair) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrderPair);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderPairOrBuilder {
            private ByteString buyTokenId_;
            private ByteString sellTokenId_;

            @Override
            public ByteString getBuyTokenId() {
                return this.buyTokenId_;
            }

            @Override
            public ByteString getSellTokenId() {
                return this.sellTokenId_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrderPair_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrderPair_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderPair.class, Builder.class);
            }

            private Builder() {
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketOrderPair.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrderPair_descriptor;
            }

            @Override
            public MarketOrderPair getDefaultInstanceForType() {
                return MarketOrderPair.getDefaultInstance();
            }

            @Override
            public MarketOrderPair build() {
                MarketOrderPair buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrderPair buildPartial() {
                MarketOrderPair marketOrderPair = new MarketOrderPair(this);
                marketOrderPair.sellTokenId_ = this.sellTokenId_;
                marketOrderPair.buyTokenId_ = this.buyTokenId_;
                onBuilt();
                return marketOrderPair;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrderPair) {
                    return mergeFrom((MarketOrderPair) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrderPair marketOrderPair) {
                if (marketOrderPair == MarketOrderPair.getDefaultInstance()) {
                    return this;
                }
                if (marketOrderPair.getSellTokenId() != ByteString.EMPTY) {
                    setSellTokenId(marketOrderPair.getSellTokenId());
                }
                if (marketOrderPair.getBuyTokenId() != ByteString.EMPTY) {
                    setBuyTokenId(marketOrderPair.getBuyTokenId());
                }
                mergeUnknownFields(marketOrderPair.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrderPair.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrderPair.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrderPair$Builder");
            }

            public Builder setSellTokenId(ByteString byteString) {
                byteString.getClass();
                this.sellTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSellTokenId() {
                this.sellTokenId_ = MarketOrderPair.getDefaultInstance().getSellTokenId();
                onChanged();
                return this;
            }

            public Builder setBuyTokenId(ByteString byteString) {
                byteString.getClass();
                this.buyTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearBuyTokenId() {
                this.buyTokenId_ = MarketOrderPair.getDefaultInstance().getBuyTokenId();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketAccountOrder extends GeneratedMessageV3 implements MarketAccountOrderOrBuilder {
        public static final int COUNT_FIELD_NUMBER = 3;
        public static final int ORDERS_FIELD_NUMBER = 2;
        public static final int OWNER_ADDRESS_FIELD_NUMBER = 1;
        public static final int TOTAL_COUNT_FIELD_NUMBER = 4;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private long count_;
        private byte memoizedIsInitialized;
        private List<ByteString> orders_;
        private ByteString ownerAddress_;
        private long totalCount_;
        private static final MarketAccountOrder DEFAULT_INSTANCE = new MarketAccountOrder();
        private static final Parser<MarketAccountOrder> PARSER = new AbstractParser<MarketAccountOrder>() {
            @Override
            public MarketAccountOrder parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketAccountOrder(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketAccountOrder getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketAccountOrder> parser() {
            return PARSER;
        }

        @Override
        public long getCount() {
            return this.count_;
        }

        @Override
        public MarketAccountOrder getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<ByteString> getOrdersList() {
            return this.orders_;
        }

        @Override
        public ByteString getOwnerAddress() {
            return this.ownerAddress_;
        }

        @Override
        public Parser<MarketAccountOrder> getParserForType() {
            return PARSER;
        }

        @Override
        public long getTotalCount() {
            return this.totalCount_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketAccountOrder(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketAccountOrder() {
            this.memoizedIsInitialized = (byte) -1;
            this.ownerAddress_ = ByteString.EMPTY;
            this.orders_ = Collections.emptyList();
            this.count_ = 0L;
            this.totalCount_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketAccountOrder(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.ownerAddress_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                if (!(z2 & true)) {
                                    this.orders_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.orders_.add(codedInputStream.readBytes());
                            } else if (readTag == 24) {
                                this.count_ = codedInputStream.readInt64();
                            } else if (readTag != 32) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.totalCount_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.orders_ = Collections.unmodifiableList(this.orders_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketAccountOrder_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketAccountOrder_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketAccountOrder.class, Builder.class);
        }

        @Override
        public int getOrdersCount() {
            return this.orders_.size();
        }

        @Override
        public ByteString getOrders(int i) {
            return this.orders_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.ownerAddress_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.ownerAddress_);
            }
            for (int i = 0; i < this.orders_.size(); i++) {
                codedOutputStream.writeBytes(2, this.orders_.get(i));
            }
            long j = this.count_;
            if (j != 0) {
                codedOutputStream.writeInt64(3, j);
            }
            long j2 = this.totalCount_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(4, j2);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.ownerAddress_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.ownerAddress_) : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.orders_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.orders_.get(i3));
            }
            int size = computeBytesSize + i2 + getOrdersList().size();
            long j = this.count_;
            if (j != 0) {
                size += CodedOutputStream.computeInt64Size(3, j);
            }
            long j2 = this.totalCount_;
            if (j2 != 0) {
                size += CodedOutputStream.computeInt64Size(4, j2);
            }
            int serializedSize = size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketAccountOrder)) {
                return super.equals(obj);
            }
            MarketAccountOrder marketAccountOrder = (MarketAccountOrder) obj;
            return getOwnerAddress().equals(marketAccountOrder.getOwnerAddress()) && getOrdersList().equals(marketAccountOrder.getOrdersList()) && getCount() == marketAccountOrder.getCount() && getTotalCount() == marketAccountOrder.getTotalCount() && this.unknownFields.equals(marketAccountOrder.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getOwnerAddress().hashCode();
            if (getOrdersCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getOrdersList().hashCode();
            }
            int hashLong = (((((((((hashCode * 37) + 3) * 53) + Internal.hashLong(getCount())) * 37) + 4) * 53) + Internal.hashLong(getTotalCount())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashLong;
            return hashLong;
        }

        public static MarketAccountOrder parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketAccountOrder parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketAccountOrder parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketAccountOrder parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketAccountOrder parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketAccountOrder parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketAccountOrder parseFrom(InputStream inputStream) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketAccountOrder parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketAccountOrder parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketAccountOrder parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketAccountOrder parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketAccountOrder parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketAccountOrder) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketAccountOrder marketAccountOrder) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketAccountOrder);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketAccountOrderOrBuilder {
            private int bitField0_;
            private long count_;
            private List<ByteString> orders_;
            private ByteString ownerAddress_;
            private long totalCount_;

            @Override
            public long getCount() {
                return this.count_;
            }

            @Override
            public ByteString getOwnerAddress() {
                return this.ownerAddress_;
            }

            @Override
            public long getTotalCount() {
                return this.totalCount_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketAccountOrder_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketAccountOrder_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketAccountOrder.class, Builder.class);
            }

            private Builder() {
                this.ownerAddress_ = ByteString.EMPTY;
                this.orders_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.ownerAddress_ = ByteString.EMPTY;
                this.orders_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketAccountOrder.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.ownerAddress_ = ByteString.EMPTY;
                this.orders_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.count_ = 0L;
                this.totalCount_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketAccountOrder_descriptor;
            }

            @Override
            public MarketAccountOrder getDefaultInstanceForType() {
                return MarketAccountOrder.getDefaultInstance();
            }

            @Override
            public MarketAccountOrder build() {
                MarketAccountOrder buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketAccountOrder buildPartial() {
                MarketAccountOrder marketAccountOrder = new MarketAccountOrder(this);
                marketAccountOrder.ownerAddress_ = this.ownerAddress_;
                if ((this.bitField0_ & 2) == 2) {
                    this.orders_ = Collections.unmodifiableList(this.orders_);
                    this.bitField0_ &= -3;
                }
                marketAccountOrder.orders_ = this.orders_;
                marketAccountOrder.count_ = this.count_;
                marketAccountOrder.totalCount_ = this.totalCount_;
                marketAccountOrder.bitField0_ = 0;
                onBuilt();
                return marketAccountOrder;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketAccountOrder) {
                    return mergeFrom((MarketAccountOrder) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketAccountOrder marketAccountOrder) {
                if (marketAccountOrder == MarketAccountOrder.getDefaultInstance()) {
                    return this;
                }
                if (marketAccountOrder.getOwnerAddress() != ByteString.EMPTY) {
                    setOwnerAddress(marketAccountOrder.getOwnerAddress());
                }
                if (!marketAccountOrder.orders_.isEmpty()) {
                    if (this.orders_.isEmpty()) {
                        this.orders_ = marketAccountOrder.orders_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureOrdersIsMutable();
                        this.orders_.addAll(marketAccountOrder.orders_);
                    }
                    onChanged();
                }
                if (marketAccountOrder.getCount() != 0) {
                    setCount(marketAccountOrder.getCount());
                }
                if (marketAccountOrder.getTotalCount() != 0) {
                    setTotalCount(marketAccountOrder.getTotalCount());
                }
                mergeUnknownFields(marketAccountOrder.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketAccountOrder.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketAccountOrder.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketAccountOrder$Builder");
            }

            public Builder setOwnerAddress(ByteString byteString) {
                byteString.getClass();
                this.ownerAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearOwnerAddress() {
                this.ownerAddress_ = MarketAccountOrder.getDefaultInstance().getOwnerAddress();
                onChanged();
                return this;
            }

            private void ensureOrdersIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.orders_ = new ArrayList(this.orders_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<ByteString> getOrdersList() {
                return Collections.unmodifiableList(this.orders_);
            }

            @Override
            public int getOrdersCount() {
                return this.orders_.size();
            }

            @Override
            public ByteString getOrders(int i) {
                return this.orders_.get(i);
            }

            public Builder setOrders(int i, ByteString byteString) {
                byteString.getClass();
                ensureOrdersIsMutable();
                this.orders_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addOrders(ByteString byteString) {
                byteString.getClass();
                ensureOrdersIsMutable();
                this.orders_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllOrders(Iterable<? extends ByteString> iterable) {
                ensureOrdersIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.orders_);
                onChanged();
                return this;
            }

            public Builder clearOrders() {
                this.orders_ = Collections.emptyList();
                this.bitField0_ &= -3;
                onChanged();
                return this;
            }

            public Builder setCount(long j) {
                this.count_ = j;
                onChanged();
                return this;
            }

            public Builder clearCount() {
                this.count_ = 0L;
                onChanged();
                return this;
            }

            public Builder setTotalCount(long j) {
                this.totalCount_ = j;
                onChanged();
                return this;
            }

            public Builder clearTotalCount() {
                this.totalCount_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketPrice extends GeneratedMessageV3 implements MarketPriceOrBuilder {
        public static final int BUY_TOKEN_QUANTITY_FIELD_NUMBER = 2;
        private static final MarketPrice DEFAULT_INSTANCE = new MarketPrice();
        private static final Parser<MarketPrice> PARSER = new AbstractParser<MarketPrice>() {
            @Override
            public MarketPrice parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketPrice(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int SELL_TOKEN_QUANTITY_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private long buyTokenQuantity_;
        private byte memoizedIsInitialized;
        private long sellTokenQuantity_;

        public static MarketPrice getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketPrice> parser() {
            return PARSER;
        }

        @Override
        public long getBuyTokenQuantity() {
            return this.buyTokenQuantity_;
        }

        @Override
        public MarketPrice getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<MarketPrice> getParserForType() {
            return PARSER;
        }

        @Override
        public long getSellTokenQuantity() {
            return this.sellTokenQuantity_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketPrice(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketPrice() {
            this.memoizedIsInitialized = (byte) -1;
            this.sellTokenQuantity_ = 0L;
            this.buyTokenQuantity_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketPrice(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.sellTokenQuantity_ = codedInputStream.readInt64();
                                } else if (readTag != 16) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.buyTokenQuantity_ = codedInputStream.readInt64();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketPrice_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketPrice_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketPrice.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.sellTokenQuantity_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            long j2 = this.buyTokenQuantity_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(2, j2);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.sellTokenQuantity_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            long j2 = this.buyTokenQuantity_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(2, j2);
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketPrice)) {
                return super.equals(obj);
            }
            MarketPrice marketPrice = (MarketPrice) obj;
            return getSellTokenQuantity() == marketPrice.getSellTokenQuantity() && getBuyTokenQuantity() == marketPrice.getBuyTokenQuantity() && this.unknownFields.equals(marketPrice.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getSellTokenQuantity())) * 37) + 2) * 53) + Internal.hashLong(getBuyTokenQuantity())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static MarketPrice parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketPrice parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketPrice parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketPrice parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketPrice parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketPrice parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketPrice parseFrom(InputStream inputStream) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketPrice parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketPrice parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketPrice parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketPrice parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketPrice parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPrice) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketPrice marketPrice) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketPrice);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketPriceOrBuilder {
            private long buyTokenQuantity_;
            private long sellTokenQuantity_;

            @Override
            public long getBuyTokenQuantity() {
                return this.buyTokenQuantity_;
            }

            @Override
            public long getSellTokenQuantity() {
                return this.sellTokenQuantity_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketPrice_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketPrice_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketPrice.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketPrice.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.sellTokenQuantity_ = 0L;
                this.buyTokenQuantity_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketPrice_descriptor;
            }

            @Override
            public MarketPrice getDefaultInstanceForType() {
                return MarketPrice.getDefaultInstance();
            }

            @Override
            public MarketPrice build() {
                MarketPrice buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketPrice buildPartial() {
                MarketPrice marketPrice = new MarketPrice(this);
                marketPrice.sellTokenQuantity_ = this.sellTokenQuantity_;
                marketPrice.buyTokenQuantity_ = this.buyTokenQuantity_;
                onBuilt();
                return marketPrice;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketPrice) {
                    return mergeFrom((MarketPrice) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketPrice marketPrice) {
                if (marketPrice == MarketPrice.getDefaultInstance()) {
                    return this;
                }
                if (marketPrice.getSellTokenQuantity() != 0) {
                    setSellTokenQuantity(marketPrice.getSellTokenQuantity());
                }
                if (marketPrice.getBuyTokenQuantity() != 0) {
                    setBuyTokenQuantity(marketPrice.getBuyTokenQuantity());
                }
                mergeUnknownFields(marketPrice.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketPrice.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketPrice.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketPrice$Builder");
            }

            public Builder setSellTokenQuantity(long j) {
                this.sellTokenQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearSellTokenQuantity() {
                this.sellTokenQuantity_ = 0L;
                onChanged();
                return this;
            }

            public Builder setBuyTokenQuantity(long j) {
                this.buyTokenQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearBuyTokenQuantity() {
                this.buyTokenQuantity_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketPriceList extends GeneratedMessageV3 implements MarketPriceListOrBuilder {
        public static final int BUY_TOKEN_ID_FIELD_NUMBER = 2;
        private static final MarketPriceList DEFAULT_INSTANCE = new MarketPriceList();
        private static final Parser<MarketPriceList> PARSER = new AbstractParser<MarketPriceList>() {
            @Override
            public MarketPriceList parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketPriceList(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int PRICES_FIELD_NUMBER = 3;
        public static final int SELL_TOKEN_ID_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private ByteString buyTokenId_;
        private byte memoizedIsInitialized;
        private List<MarketPrice> prices_;
        private ByteString sellTokenId_;

        public static MarketPriceList getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketPriceList> parser() {
            return PARSER;
        }

        @Override
        public ByteString getBuyTokenId() {
            return this.buyTokenId_;
        }

        @Override
        public MarketPriceList getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<MarketPriceList> getParserForType() {
            return PARSER;
        }

        @Override
        public List<MarketPrice> getPricesList() {
            return this.prices_;
        }

        @Override
        public List<? extends MarketPriceOrBuilder> getPricesOrBuilderList() {
            return this.prices_;
        }

        @Override
        public ByteString getSellTokenId() {
            return this.sellTokenId_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketPriceList(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketPriceList() {
            this.memoizedIsInitialized = (byte) -1;
            this.sellTokenId_ = ByteString.EMPTY;
            this.buyTokenId_ = ByteString.EMPTY;
            this.prices_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketPriceList(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.sellTokenId_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                this.buyTokenId_ = codedInputStream.readBytes();
                            } else if (readTag != 26) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.prices_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.prices_.add((MarketPrice) codedInputStream.readMessage(MarketPrice.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.prices_ = Collections.unmodifiableList(this.prices_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketPriceList_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketPriceList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketPriceList.class, Builder.class);
        }

        @Override
        public int getPricesCount() {
            return this.prices_.size();
        }

        @Override
        public MarketPrice getPrices(int i) {
            return this.prices_.get(i);
        }

        @Override
        public MarketPriceOrBuilder getPricesOrBuilder(int i) {
            return this.prices_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.sellTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.sellTokenId_);
            }
            if (!this.buyTokenId_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.buyTokenId_);
            }
            for (int i = 0; i < this.prices_.size(); i++) {
                codedOutputStream.writeMessage(3, this.prices_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.sellTokenId_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.sellTokenId_) : 0;
            if (!this.buyTokenId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.buyTokenId_);
            }
            for (int i2 = 0; i2 < this.prices_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(3, this.prices_.get(i2));
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketPriceList)) {
                return super.equals(obj);
            }
            MarketPriceList marketPriceList = (MarketPriceList) obj;
            return getSellTokenId().equals(marketPriceList.getSellTokenId()) && getBuyTokenId().equals(marketPriceList.getBuyTokenId()) && getPricesList().equals(marketPriceList.getPricesList()) && this.unknownFields.equals(marketPriceList.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getSellTokenId().hashCode()) * 37) + 2) * 53) + getBuyTokenId().hashCode();
            if (getPricesCount() > 0) {
                hashCode = (((hashCode * 37) + 3) * 53) + getPricesList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static MarketPriceList parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketPriceList parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketPriceList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketPriceList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketPriceList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketPriceList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketPriceList parseFrom(InputStream inputStream) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketPriceList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketPriceList parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketPriceList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketPriceList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketPriceList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketPriceList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketPriceList marketPriceList) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketPriceList);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketPriceListOrBuilder {
            private int bitField0_;
            private ByteString buyTokenId_;
            private RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> pricesBuilder_;
            private List<MarketPrice> prices_;
            private ByteString sellTokenId_;

            @Override
            public ByteString getBuyTokenId() {
                return this.buyTokenId_;
            }

            @Override
            public ByteString getSellTokenId() {
                return this.sellTokenId_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketPriceList_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketPriceList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketPriceList.class, Builder.class);
            }

            private Builder() {
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                this.prices_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                this.prices_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (MarketPriceList.alwaysUseFieldBuilders) {
                    getPricesFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.sellTokenId_ = ByteString.EMPTY;
                this.buyTokenId_ = ByteString.EMPTY;
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.prices_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketPriceList_descriptor;
            }

            @Override
            public MarketPriceList getDefaultInstanceForType() {
                return MarketPriceList.getDefaultInstance();
            }

            @Override
            public MarketPriceList build() {
                MarketPriceList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketPriceList buildPartial() {
                MarketPriceList marketPriceList = new MarketPriceList(this);
                marketPriceList.sellTokenId_ = this.sellTokenId_;
                marketPriceList.buyTokenId_ = this.buyTokenId_;
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.prices_ = Collections.unmodifiableList(this.prices_);
                        this.bitField0_ &= -5;
                    }
                    marketPriceList.prices_ = this.prices_;
                } else {
                    marketPriceList.prices_ = repeatedFieldBuilderV3.build();
                }
                marketPriceList.bitField0_ = 0;
                onBuilt();
                return marketPriceList;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketPriceList) {
                    return mergeFrom((MarketPriceList) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketPriceList marketPriceList) {
                if (marketPriceList == MarketPriceList.getDefaultInstance()) {
                    return this;
                }
                if (marketPriceList.getSellTokenId() != ByteString.EMPTY) {
                    setSellTokenId(marketPriceList.getSellTokenId());
                }
                if (marketPriceList.getBuyTokenId() != ByteString.EMPTY) {
                    setBuyTokenId(marketPriceList.getBuyTokenId());
                }
                if (this.pricesBuilder_ == null) {
                    if (!marketPriceList.prices_.isEmpty()) {
                        if (this.prices_.isEmpty()) {
                            this.prices_ = marketPriceList.prices_;
                            this.bitField0_ &= -5;
                        } else {
                            ensurePricesIsMutable();
                            this.prices_.addAll(marketPriceList.prices_);
                        }
                        onChanged();
                    }
                } else if (!marketPriceList.prices_.isEmpty()) {
                    if (!this.pricesBuilder_.isEmpty()) {
                        this.pricesBuilder_.addAllMessages(marketPriceList.prices_);
                    } else {
                        this.pricesBuilder_.dispose();
                        this.pricesBuilder_ = null;
                        this.prices_ = marketPriceList.prices_;
                        this.bitField0_ &= -5;
                        this.pricesBuilder_ = MarketPriceList.alwaysUseFieldBuilders ? getPricesFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(marketPriceList.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketPriceList.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketPriceList.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketPriceList$Builder");
            }

            public Builder setSellTokenId(ByteString byteString) {
                byteString.getClass();
                this.sellTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSellTokenId() {
                this.sellTokenId_ = MarketPriceList.getDefaultInstance().getSellTokenId();
                onChanged();
                return this;
            }

            public Builder setBuyTokenId(ByteString byteString) {
                byteString.getClass();
                this.buyTokenId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearBuyTokenId() {
                this.buyTokenId_ = MarketPriceList.getDefaultInstance().getBuyTokenId();
                onChanged();
                return this;
            }

            private void ensurePricesIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.prices_ = new ArrayList(this.prices_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<MarketPrice> getPricesList() {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.prices_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getPricesCount() {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.prices_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public MarketPrice getPrices(int i) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.prices_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setPrices(int i, MarketPrice marketPrice) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketPrice.getClass();
                    ensurePricesIsMutable();
                    this.prices_.set(i, marketPrice);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, marketPrice);
                }
                return this;
            }

            public Builder setPrices(int i, MarketPrice.Builder builder) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePricesIsMutable();
                    this.prices_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addPrices(MarketPrice marketPrice) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketPrice.getClass();
                    ensurePricesIsMutable();
                    this.prices_.add(marketPrice);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(marketPrice);
                }
                return this;
            }

            public Builder addPrices(int i, MarketPrice marketPrice) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketPrice.getClass();
                    ensurePricesIsMutable();
                    this.prices_.add(i, marketPrice);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, marketPrice);
                }
                return this;
            }

            public Builder addPrices(MarketPrice.Builder builder) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePricesIsMutable();
                    this.prices_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addPrices(int i, MarketPrice.Builder builder) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePricesIsMutable();
                    this.prices_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllPrices(Iterable<? extends MarketPrice> iterable) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePricesIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.prices_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearPrices() {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.prices_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removePrices(int i) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePricesIsMutable();
                    this.prices_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public MarketPrice.Builder getPricesBuilder(int i) {
                return getPricesFieldBuilder().getBuilder(i);
            }

            @Override
            public MarketPriceOrBuilder getPricesOrBuilder(int i) {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.prices_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends MarketPriceOrBuilder> getPricesOrBuilderList() {
                RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> repeatedFieldBuilderV3 = this.pricesBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.prices_);
            }

            public MarketPrice.Builder addPricesBuilder() {
                return getPricesFieldBuilder().addBuilder(MarketPrice.getDefaultInstance());
            }

            public MarketPrice.Builder addPricesBuilder(int i) {
                return getPricesFieldBuilder().addBuilder(i, MarketPrice.getDefaultInstance());
            }

            public List<MarketPrice.Builder> getPricesBuilderList() {
                return getPricesFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<MarketPrice, MarketPrice.Builder, MarketPriceOrBuilder> getPricesFieldBuilder() {
                if (this.pricesBuilder_ == null) {
                    this.pricesBuilder_ = new RepeatedFieldBuilderV3<>(this.prices_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.prices_ = null;
                }
                return this.pricesBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrderIdList extends GeneratedMessageV3 implements MarketOrderIdListOrBuilder {
        public static final int HEAD_FIELD_NUMBER = 1;
        public static final int TAIL_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private ByteString head_;
        private byte memoizedIsInitialized;
        private ByteString tail_;
        private static final MarketOrderIdList DEFAULT_INSTANCE = new MarketOrderIdList();
        private static final Parser<MarketOrderIdList> PARSER = new AbstractParser<MarketOrderIdList>() {
            @Override
            public MarketOrderIdList parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrderIdList(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketOrderIdList getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrderIdList> parser() {
            return PARSER;
        }

        @Override
        public MarketOrderIdList getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public ByteString getHead() {
            return this.head_;
        }

        @Override
        public Parser<MarketOrderIdList> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getTail() {
            return this.tail_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrderIdList(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrderIdList() {
            this.memoizedIsInitialized = (byte) -1;
            this.head_ = ByteString.EMPTY;
            this.tail_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrderIdList(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.head_ = codedInputStream.readBytes();
                                } else if (readTag != 18) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.tail_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrderIdList_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrderIdList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderIdList.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.head_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.head_);
            }
            if (!this.tail_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.tail_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.head_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.head_) : 0;
            if (!this.tail_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.tail_);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrderIdList)) {
                return super.equals(obj);
            }
            MarketOrderIdList marketOrderIdList = (MarketOrderIdList) obj;
            return getHead().equals(marketOrderIdList.getHead()) && getTail().equals(marketOrderIdList.getTail()) && this.unknownFields.equals(marketOrderIdList.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getHead().hashCode()) * 37) + 2) * 53) + getTail().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static MarketOrderIdList parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrderIdList parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrderIdList parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrderIdList parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrderIdList parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrderIdList parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrderIdList parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrderIdList parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderIdList parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrderIdList parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderIdList parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrderIdList parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderIdList) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrderIdList marketOrderIdList) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrderIdList);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderIdListOrBuilder {
            private ByteString head_;
            private ByteString tail_;

            @Override
            public ByteString getHead() {
                return this.head_;
            }

            @Override
            public ByteString getTail() {
                return this.tail_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrderIdList_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrderIdList_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderIdList.class, Builder.class);
            }

            private Builder() {
                this.head_ = ByteString.EMPTY;
                this.tail_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.head_ = ByteString.EMPTY;
                this.tail_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketOrderIdList.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.head_ = ByteString.EMPTY;
                this.tail_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrderIdList_descriptor;
            }

            @Override
            public MarketOrderIdList getDefaultInstanceForType() {
                return MarketOrderIdList.getDefaultInstance();
            }

            @Override
            public MarketOrderIdList build() {
                MarketOrderIdList buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrderIdList buildPartial() {
                MarketOrderIdList marketOrderIdList = new MarketOrderIdList(this);
                marketOrderIdList.head_ = this.head_;
                marketOrderIdList.tail_ = this.tail_;
                onBuilt();
                return marketOrderIdList;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrderIdList) {
                    return mergeFrom((MarketOrderIdList) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrderIdList marketOrderIdList) {
                if (marketOrderIdList == MarketOrderIdList.getDefaultInstance()) {
                    return this;
                }
                if (marketOrderIdList.getHead() != ByteString.EMPTY) {
                    setHead(marketOrderIdList.getHead());
                }
                if (marketOrderIdList.getTail() != ByteString.EMPTY) {
                    setTail(marketOrderIdList.getTail());
                }
                mergeUnknownFields(marketOrderIdList.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrderIdList.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrderIdList.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrderIdList$Builder");
            }

            public Builder setHead(ByteString byteString) {
                byteString.getClass();
                this.head_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearHead() {
                this.head_ = MarketOrderIdList.getDefaultInstance().getHead();
                onChanged();
                return this;
            }

            public Builder setTail(ByteString byteString) {
                byteString.getClass();
                this.tail_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearTail() {
                this.tail_ = MarketOrderIdList.getDefaultInstance().getTail();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class ChainParameters extends GeneratedMessageV3 implements ChainParametersOrBuilder {
        public static final int CHAINPARAMETER_FIELD_NUMBER = 1;
        private static final ChainParameters DEFAULT_INSTANCE = new ChainParameters();
        private static final Parser<ChainParameters> PARSER = new AbstractParser<ChainParameters>() {
            @Override
            public ChainParameters parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new ChainParameters(codedInputStream, extensionRegistryLite);
            }
        };
        private static final long serialVersionUID = 0;
        private List<ChainParameter> chainParameter_;
        private byte memoizedIsInitialized;

        public interface ChainParameterOrBuilder extends MessageOrBuilder {
            String getKey();

            ByteString getKeyBytes();

            long getValue();
        }

        public static ChainParameters getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<ChainParameters> parser() {
            return PARSER;
        }

        @Override
        public List<ChainParameter> getChainParameterList() {
            return this.chainParameter_;
        }

        @Override
        public List<? extends ChainParameterOrBuilder> getChainParameterOrBuilderList() {
            return this.chainParameter_;
        }

        @Override
        public ChainParameters getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<ChainParameters> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private ChainParameters(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private ChainParameters() {
            this.memoizedIsInitialized = (byte) -1;
            this.chainParameter_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ChainParameters(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 10) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.chainParameter_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.chainParameter_.add((ChainParameter) codedInputStream.readMessage(ChainParameter.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.chainParameter_ = Collections.unmodifiableList(this.chainParameter_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_ChainParameters_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_ChainParameters_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainParameters.class, Builder.class);
        }

        public static final class ChainParameter extends GeneratedMessageV3 implements ChainParameterOrBuilder {
            public static final int KEY_FIELD_NUMBER = 1;
            public static final int VALUE_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private volatile Object key_;
            private byte memoizedIsInitialized;
            private long value_;
            private static final ChainParameter DEFAULT_INSTANCE = new ChainParameter();
            private static final Parser<ChainParameter> PARSER = new AbstractParser<ChainParameter>() {
                @Override
                public ChainParameter parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new ChainParameter(codedInputStream, extensionRegistryLite);
                }
            };

            public static ChainParameter getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<ChainParameter> parser() {
                return PARSER;
            }

            @Override
            public ChainParameter getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<ChainParameter> getParserForType() {
                return PARSER;
            }

            @Override
            public long getValue() {
                return this.value_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private ChainParameter(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private ChainParameter() {
                this.memoizedIsInitialized = (byte) -1;
                this.key_ = "";
                this.value_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private ChainParameter(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.key_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.value_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_ChainParameters_ChainParameter_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_ChainParameters_ChainParameter_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainParameter.class, Builder.class);
            }

            @Override
            public String getKey() {
                Object obj = this.key_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.key_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getKeyBytes() {
                Object obj = this.key_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.key_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!getKeyBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 1, this.key_);
                }
                long j = this.value_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeStringSize = !getKeyBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.key_) : 0;
                long j = this.value_;
                if (j != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(2, j);
                }
                int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof ChainParameter)) {
                    return super.equals(obj);
                }
                ChainParameter chainParameter = (ChainParameter) obj;
                return getKey().equals(chainParameter.getKey()) && getValue() == chainParameter.getValue() && this.unknownFields.equals(chainParameter.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getKey().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getValue())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static ChainParameter parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static ChainParameter parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static ChainParameter parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static ChainParameter parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static ChainParameter parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static ChainParameter parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static ChainParameter parseFrom(InputStream inputStream) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static ChainParameter parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static ChainParameter parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static ChainParameter parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static ChainParameter parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static ChainParameter parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ChainParameter) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(ChainParameter chainParameter) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(chainParameter);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ChainParameterOrBuilder {
                private Object key_;
                private long value_;

                @Override
                public long getValue() {
                    return this.value_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_ChainParameters_ChainParameter_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_ChainParameters_ChainParameter_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainParameter.class, Builder.class);
                }

                private Builder() {
                    this.key_ = "";
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.key_ = "";
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = ChainParameter.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.key_ = "";
                    this.value_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_ChainParameters_ChainParameter_descriptor;
                }

                @Override
                public ChainParameter getDefaultInstanceForType() {
                    return ChainParameter.getDefaultInstance();
                }

                @Override
                public ChainParameter build() {
                    ChainParameter buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public ChainParameter buildPartial() {
                    ChainParameter chainParameter = new ChainParameter(this);
                    chainParameter.key_ = this.key_;
                    chainParameter.value_ = this.value_;
                    onBuilt();
                    return chainParameter;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof ChainParameter) {
                        return mergeFrom((ChainParameter) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(ChainParameter chainParameter) {
                    if (chainParameter == ChainParameter.getDefaultInstance()) {
                        return this;
                    }
                    if (!chainParameter.getKey().isEmpty()) {
                        this.key_ = chainParameter.key_;
                        onChanged();
                    }
                    if (chainParameter.getValue() != 0) {
                        setValue(chainParameter.getValue());
                    }
                    mergeUnknownFields(chainParameter.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.ChainParameters.ChainParameter.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.ChainParameters.ChainParameter.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$ChainParameters$ChainParameter$Builder");
                }

                @Override
                public String getKey() {
                    Object obj = this.key_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.key_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getKeyBytes() {
                    Object obj = this.key_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.key_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setKey(String str) {
                    str.getClass();
                    this.key_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearKey() {
                    this.key_ = ChainParameter.getDefaultInstance().getKey();
                    onChanged();
                    return this;
                }

                public Builder setKeyBytes(ByteString byteString) {
                    byteString.getClass();
                    ChainParameter.checkByteStringIsUtf8(byteString);
                    this.key_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setValue(long j) {
                    this.value_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearValue() {
                    this.value_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public int getChainParameterCount() {
            return this.chainParameter_.size();
        }

        @Override
        public ChainParameter getChainParameter(int i) {
            return this.chainParameter_.get(i);
        }

        @Override
        public ChainParameterOrBuilder getChainParameterOrBuilder(int i) {
            return this.chainParameter_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.chainParameter_.size(); i++) {
                codedOutputStream.writeMessage(1, this.chainParameter_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.chainParameter_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.chainParameter_.get(i3));
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ChainParameters)) {
                return super.equals(obj);
            }
            ChainParameters chainParameters = (ChainParameters) obj;
            return getChainParameterList().equals(chainParameters.getChainParameterList()) && this.unknownFields.equals(chainParameters.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getChainParameterCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getChainParameterList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static ChainParameters parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static ChainParameters parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static ChainParameters parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static ChainParameters parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static ChainParameters parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static ChainParameters parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static ChainParameters parseFrom(InputStream inputStream) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static ChainParameters parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ChainParameters parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static ChainParameters parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ChainParameters parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static ChainParameters parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainParameters) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ChainParameters chainParameters) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(chainParameters);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ChainParametersOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> chainParameterBuilder_;
            private List<ChainParameter> chainParameter_;

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_ChainParameters_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_ChainParameters_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainParameters.class, Builder.class);
            }

            private Builder() {
                this.chainParameter_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.chainParameter_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ChainParameters.alwaysUseFieldBuilders) {
                    getChainParameterFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.chainParameter_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_ChainParameters_descriptor;
            }

            @Override
            public ChainParameters getDefaultInstanceForType() {
                return ChainParameters.getDefaultInstance();
            }

            @Override
            public ChainParameters build() {
                ChainParameters buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public ChainParameters buildPartial() {
                ChainParameters chainParameters = new ChainParameters(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.chainParameter_ = Collections.unmodifiableList(this.chainParameter_);
                        this.bitField0_ &= -2;
                    }
                    chainParameters.chainParameter_ = this.chainParameter_;
                } else {
                    chainParameters.chainParameter_ = repeatedFieldBuilderV3.build();
                }
                onBuilt();
                return chainParameters;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof ChainParameters) {
                    return mergeFrom((ChainParameters) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(ChainParameters chainParameters) {
                if (chainParameters == ChainParameters.getDefaultInstance()) {
                    return this;
                }
                if (this.chainParameterBuilder_ == null) {
                    if (!chainParameters.chainParameter_.isEmpty()) {
                        if (this.chainParameter_.isEmpty()) {
                            this.chainParameter_ = chainParameters.chainParameter_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureChainParameterIsMutable();
                            this.chainParameter_.addAll(chainParameters.chainParameter_);
                        }
                        onChanged();
                    }
                } else if (!chainParameters.chainParameter_.isEmpty()) {
                    if (!this.chainParameterBuilder_.isEmpty()) {
                        this.chainParameterBuilder_.addAllMessages(chainParameters.chainParameter_);
                    } else {
                        this.chainParameterBuilder_.dispose();
                        this.chainParameterBuilder_ = null;
                        this.chainParameter_ = chainParameters.chainParameter_;
                        this.bitField0_ &= -2;
                        this.chainParameterBuilder_ = ChainParameters.alwaysUseFieldBuilders ? getChainParameterFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(chainParameters.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.ChainParameters.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.ChainParameters.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$ChainParameters$Builder");
            }

            private void ensureChainParameterIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.chainParameter_ = new ArrayList(this.chainParameter_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<ChainParameter> getChainParameterList() {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.chainParameter_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getChainParameterCount() {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.chainParameter_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public ChainParameter getChainParameter(int i) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.chainParameter_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setChainParameter(int i, ChainParameter chainParameter) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    chainParameter.getClass();
                    ensureChainParameterIsMutable();
                    this.chainParameter_.set(i, chainParameter);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, chainParameter);
                }
                return this;
            }

            public Builder setChainParameter(int i, ChainParameter.Builder builder) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureChainParameterIsMutable();
                    this.chainParameter_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addChainParameter(ChainParameter chainParameter) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    chainParameter.getClass();
                    ensureChainParameterIsMutable();
                    this.chainParameter_.add(chainParameter);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(chainParameter);
                }
                return this;
            }

            public Builder addChainParameter(int i, ChainParameter chainParameter) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    chainParameter.getClass();
                    ensureChainParameterIsMutable();
                    this.chainParameter_.add(i, chainParameter);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, chainParameter);
                }
                return this;
            }

            public Builder addChainParameter(ChainParameter.Builder builder) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureChainParameterIsMutable();
                    this.chainParameter_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addChainParameter(int i, ChainParameter.Builder builder) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureChainParameterIsMutable();
                    this.chainParameter_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllChainParameter(Iterable<? extends ChainParameter> iterable) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureChainParameterIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.chainParameter_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearChainParameter() {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.chainParameter_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeChainParameter(int i) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureChainParameterIsMutable();
                    this.chainParameter_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public ChainParameter.Builder getChainParameterBuilder(int i) {
                return getChainParameterFieldBuilder().getBuilder(i);
            }

            @Override
            public ChainParameterOrBuilder getChainParameterOrBuilder(int i) {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.chainParameter_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends ChainParameterOrBuilder> getChainParameterOrBuilderList() {
                RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> repeatedFieldBuilderV3 = this.chainParameterBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.chainParameter_);
            }

            public ChainParameter.Builder addChainParameterBuilder() {
                return getChainParameterFieldBuilder().addBuilder(ChainParameter.getDefaultInstance());
            }

            public ChainParameter.Builder addChainParameterBuilder(int i) {
                return getChainParameterFieldBuilder().addBuilder(i, ChainParameter.getDefaultInstance());
            }

            public List<ChainParameter.Builder> getChainParameterBuilderList() {
                return getChainParameterFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<ChainParameter, ChainParameter.Builder, ChainParameterOrBuilder> getChainParameterFieldBuilder() {
                if (this.chainParameterBuilder_ == null) {
                    this.chainParameterBuilder_ = new RepeatedFieldBuilderV3<>(this.chainParameter_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.chainParameter_ = null;
                }
                return this.chainParameterBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Account extends GeneratedMessageV3 implements AccountOrBuilder {
        public static final int ACCOUNT_ID_FIELD_NUMBER = 23;
        public static final int ACCOUNT_NAME_FIELD_NUMBER = 1;
        public static final int ACCOUNT_RESOURCE_FIELD_NUMBER = 26;
        public static final int ACQUIRED_DELEGATED_FROZENV2_BALANCE_FOR_BANDWIDTH_FIELD_NUMBER = 37;
        public static final int ACQUIRED_DELEGATED_FROZEN_BALANCE_FOR_BANDWIDTH_FIELD_NUMBER = 41;
        public static final int ACTIVE_PERMISSION_FIELD_NUMBER = 33;
        public static final int ADDRESS_FIELD_NUMBER = 3;
        public static final int ALLOWANCE_FIELD_NUMBER = 11;
        public static final int ASSETV2_FIELD_NUMBER = 56;
        public static final int ASSET_FIELD_NUMBER = 6;
        public static final int ASSET_ISSUED_ID_FIELD_NUMBER = 57;
        public static final int ASSET_ISSUED_NAME_FIELD_NUMBER = 17;
        public static final int ASSET_OPTIMIZED_FIELD_NUMBER = 60;
        public static final int BALANCE_FIELD_NUMBER = 4;
        public static final int CODEHASH_FIELD_NUMBER = 30;
        public static final int CODE_FIELD_NUMBER = 13;
        public static final int CREATE_TIME_FIELD_NUMBER = 9;
        public static final int DELEGATED_FROZENV2_BALANCE_FOR_BANDWIDTH_FIELD_NUMBER = 36;
        public static final int DELEGATED_FROZEN_BALANCE_FOR_BANDWIDTH_FIELD_NUMBER = 42;
        public static final int FREE_ASSET_NET_USAGEV2_FIELD_NUMBER = 59;
        public static final int FREE_ASSET_NET_USAGE_FIELD_NUMBER = 20;
        public static final int FREE_NET_USAGE_FIELD_NUMBER = 19;
        public static final int FROZENV2_FIELD_NUMBER = 34;
        public static final int FROZEN_FIELD_NUMBER = 7;
        public static final int FROZEN_SUPPLY_FIELD_NUMBER = 16;
        public static final int IS_COMMITTEE_FIELD_NUMBER = 15;
        public static final int IS_WITNESS_FIELD_NUMBER = 14;
        public static final int LATEST_ASSET_OPERATION_TIMEV2_FIELD_NUMBER = 58;
        public static final int LATEST_ASSET_OPERATION_TIME_FIELD_NUMBER = 18;
        public static final int LATEST_CONSUME_FREE_TIME_FIELD_NUMBER = 22;
        public static final int LATEST_CONSUME_TIME_FIELD_NUMBER = 21;
        public static final int LATEST_OPRATION_TIME_FIELD_NUMBER = 10;
        public static final int LATEST_WITHDRAW_TIME_FIELD_NUMBER = 12;
        public static final int NET_USAGE_FIELD_NUMBER = 8;
        public static final int NET_WINDOW_OPTIMIZED_FIELD_NUMBER = 25;
        public static final int NET_WINDOW_SIZE_FIELD_NUMBER = 24;
        public static final int OLD_TRON_POWER_FIELD_NUMBER = 46;
        public static final int OWNER_PERMISSION_FIELD_NUMBER = 31;
        public static final int TRON_POWER_FIELD_NUMBER = 47;
        public static final int TYPE_FIELD_NUMBER = 2;
        public static final int UNFROZENV2_FIELD_NUMBER = 35;
        public static final int VOTES_FIELD_NUMBER = 5;
        public static final int WITNESS_PERMISSION_FIELD_NUMBER = 32;
        private static final long serialVersionUID = 0;
        private ByteString accountId_;
        private ByteString accountName_;
        private AccountResource accountResource_;
        private long acquiredDelegatedFrozenBalanceForBandwidth_;
        private long acquiredDelegatedFrozenV2BalanceForBandwidth_;
        private List<Permission> activePermission_;
        private ByteString address_;
        private long allowance_;
        private ByteString assetIssuedID_;
        private ByteString assetIssuedName_;
        private boolean assetOptimized_;
        private MapField<String, Long> assetV2_;
        private MapField<String, Long> asset_;
        private long balance_;
        private int bitField0_;
        private ByteString codeHash_;
        private ByteString code_;
        private long createTime_;
        private long delegatedFrozenBalanceForBandwidth_;
        private long delegatedFrozenV2BalanceForBandwidth_;
        private MapField<String, Long> freeAssetNetUsageV2_;
        private MapField<String, Long> freeAssetNetUsage_;
        private long freeNetUsage_;
        private List<Frozen> frozenSupply_;
        private List<FreezeV2> frozenV2_;
        private List<Frozen> frozen_;
        private boolean isCommittee_;
        private boolean isWitness_;
        private MapField<String, Long> latestAssetOperationTimeV2_;
        private MapField<String, Long> latestAssetOperationTime_;
        private long latestConsumeFreeTime_;
        private long latestConsumeTime_;
        private long latestOprationTime_;
        private long latestWithdrawTime_;
        private byte memoizedIsInitialized;
        private long netUsage_;
        private boolean netWindowOptimized_;
        private long netWindowSize_;
        private long oldTronPower_;
        private Permission ownerPermission_;
        private Frozen tronPower_;
        private int type_;
        private List<UnFreezeV2> unfrozenV2_;
        private List<Vote> votes_;
        private Permission witnessPermission_;
        private static final Account DEFAULT_INSTANCE = new Account();
        private static final Parser<Account> PARSER = new AbstractParser<Account>() {
            @Override
            public Account parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Account(codedInputStream, extensionRegistryLite);
            }
        };

        public interface AccountResourceOrBuilder extends MessageOrBuilder {
            long getAcquiredDelegatedFrozenBalanceForEnergy();

            long getAcquiredDelegatedFrozenV2BalanceForEnergy();

            long getDelegatedFrozenBalanceForEnergy();

            long getDelegatedFrozenV2BalanceForEnergy();

            long getEnergyUsage();

            boolean getEnergyWindowOptimized();

            long getEnergyWindowSize();

            Frozen getFrozenBalanceForEnergy();

            FrozenOrBuilder getFrozenBalanceForEnergyOrBuilder();

            long getLatestConsumeTimeForEnergy();

            long getLatestExchangeStorageTime();

            long getStorageLimit();

            long getStorageUsage();

            boolean hasFrozenBalanceForEnergy();
        }

        public interface FreezeV2OrBuilder extends MessageOrBuilder {
            long getAmount();

            Common.ResourceCode getType();

            int getTypeValue();
        }

        public interface FrozenOrBuilder extends MessageOrBuilder {
            long getExpireTime();

            long getFrozenBalance();
        }

        public interface UnFreezeV2OrBuilder extends MessageOrBuilder {
            Common.ResourceCode getType();

            int getTypeValue();

            long getUnfreezeAmount();

            long getUnfreezeExpireTime();
        }

        public static Account getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Account> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAccountId() {
            return this.accountId_;
        }

        @Override
        public ByteString getAccountName() {
            return this.accountName_;
        }

        @Override
        public long getAcquiredDelegatedFrozenBalanceForBandwidth() {
            return this.acquiredDelegatedFrozenBalanceForBandwidth_;
        }

        @Override
        public long getAcquiredDelegatedFrozenV2BalanceForBandwidth() {
            return this.acquiredDelegatedFrozenV2BalanceForBandwidth_;
        }

        @Override
        public List<Permission> getActivePermissionList() {
            return this.activePermission_;
        }

        @Override
        public List<? extends PermissionOrBuilder> getActivePermissionOrBuilderList() {
            return this.activePermission_;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public long getAllowance() {
            return this.allowance_;
        }

        @Override
        public ByteString getAssetIssuedID() {
            return this.assetIssuedID_;
        }

        @Override
        public ByteString getAssetIssuedName() {
            return this.assetIssuedName_;
        }

        @Override
        public boolean getAssetOptimized() {
            return this.assetOptimized_;
        }

        @Override
        public long getBalance() {
            return this.balance_;
        }

        @Override
        public ByteString getCode() {
            return this.code_;
        }

        @Override
        public ByteString getCodeHash() {
            return this.codeHash_;
        }

        @Override
        public long getCreateTime() {
            return this.createTime_;
        }

        @Override
        public Account getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getDelegatedFrozenBalanceForBandwidth() {
            return this.delegatedFrozenBalanceForBandwidth_;
        }

        @Override
        public long getDelegatedFrozenV2BalanceForBandwidth() {
            return this.delegatedFrozenV2BalanceForBandwidth_;
        }

        @Override
        public long getFreeNetUsage() {
            return this.freeNetUsage_;
        }

        @Override
        public List<Frozen> getFrozenList() {
            return this.frozen_;
        }

        @Override
        public List<? extends FrozenOrBuilder> getFrozenOrBuilderList() {
            return this.frozen_;
        }

        @Override
        public List<Frozen> getFrozenSupplyList() {
            return this.frozenSupply_;
        }

        @Override
        public List<? extends FrozenOrBuilder> getFrozenSupplyOrBuilderList() {
            return this.frozenSupply_;
        }

        @Override
        public List<FreezeV2> getFrozenV2List() {
            return this.frozenV2_;
        }

        @Override
        public List<? extends FreezeV2OrBuilder> getFrozenV2OrBuilderList() {
            return this.frozenV2_;
        }

        @Override
        public boolean getIsCommittee() {
            return this.isCommittee_;
        }

        @Override
        public boolean getIsWitness() {
            return this.isWitness_;
        }

        @Override
        public long getLatestConsumeFreeTime() {
            return this.latestConsumeFreeTime_;
        }

        @Override
        public long getLatestConsumeTime() {
            return this.latestConsumeTime_;
        }

        @Override
        public long getLatestOprationTime() {
            return this.latestOprationTime_;
        }

        @Override
        public long getLatestWithdrawTime() {
            return this.latestWithdrawTime_;
        }

        @Override
        public long getNetUsage() {
            return this.netUsage_;
        }

        @Override
        public boolean getNetWindowOptimized() {
            return this.netWindowOptimized_;
        }

        @Override
        public long getNetWindowSize() {
            return this.netWindowSize_;
        }

        @Override
        public long getOldTronPower() {
            return this.oldTronPower_;
        }

        @Override
        public Parser<Account> getParserForType() {
            return PARSER;
        }

        @Override
        public int getTypeValue() {
            return this.type_;
        }

        @Override
        public List<UnFreezeV2> getUnfrozenV2List() {
            return this.unfrozenV2_;
        }

        @Override
        public List<? extends UnFreezeV2OrBuilder> getUnfrozenV2OrBuilderList() {
            return this.unfrozenV2_;
        }

        @Override
        public List<Vote> getVotesList() {
            return this.votes_;
        }

        @Override
        public List<? extends VoteOrBuilder> getVotesOrBuilderList() {
            return this.votes_;
        }

        @Override
        public boolean hasAccountResource() {
            return this.accountResource_ != null;
        }

        @Override
        public boolean hasOwnerPermission() {
            return this.ownerPermission_ != null;
        }

        @Override
        public boolean hasTronPower() {
            return this.tronPower_ != null;
        }

        @Override
        public boolean hasWitnessPermission() {
            return this.witnessPermission_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Account(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Account() {
            this.memoizedIsInitialized = (byte) -1;
            this.accountName_ = ByteString.EMPTY;
            this.type_ = 0;
            this.address_ = ByteString.EMPTY;
            this.balance_ = 0L;
            this.votes_ = Collections.emptyList();
            this.frozen_ = Collections.emptyList();
            this.netUsage_ = 0L;
            this.acquiredDelegatedFrozenBalanceForBandwidth_ = 0L;
            this.delegatedFrozenBalanceForBandwidth_ = 0L;
            this.oldTronPower_ = 0L;
            this.assetOptimized_ = false;
            this.createTime_ = 0L;
            this.latestOprationTime_ = 0L;
            this.allowance_ = 0L;
            this.latestWithdrawTime_ = 0L;
            this.code_ = ByteString.EMPTY;
            this.isWitness_ = false;
            this.isCommittee_ = false;
            this.frozenSupply_ = Collections.emptyList();
            this.assetIssuedName_ = ByteString.EMPTY;
            this.assetIssuedID_ = ByteString.EMPTY;
            this.freeNetUsage_ = 0L;
            this.latestConsumeTime_ = 0L;
            this.latestConsumeFreeTime_ = 0L;
            this.accountId_ = ByteString.EMPTY;
            this.netWindowSize_ = 0L;
            this.netWindowOptimized_ = false;
            this.codeHash_ = ByteString.EMPTY;
            this.activePermission_ = Collections.emptyList();
            this.frozenV2_ = Collections.emptyList();
            this.unfrozenV2_ = Collections.emptyList();
            this.delegatedFrozenV2BalanceForBandwidth_ = 0L;
            this.acquiredDelegatedFrozenV2BalanceForBandwidth_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Account(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            int i = 0;
            int i2 = 0;
            while (true) {
                ?? r4 = 256;
                if (z) {
                    return;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        switch (readTag) {
                            case 0:
                                break;
                            case 10:
                                this.accountName_ = codedInputStream.readBytes();
                                continue;
                            case 16:
                                this.type_ = codedInputStream.readEnum();
                                continue;
                            case 26:
                                this.address_ = codedInputStream.readBytes();
                                continue;
                            case 32:
                                this.balance_ = codedInputStream.readInt64();
                                continue;
                            case 42:
                                if ((i & 16) != 16) {
                                    this.votes_ = new ArrayList();
                                    i |= 16;
                                }
                                this.votes_.add((Vote) codedInputStream.readMessage(Vote.parser(), extensionRegistryLite));
                                continue;
                            case 50:
                                if ((i & 32) != 32) {
                                    this.asset_ = MapField.newMapField(AssetDefaultEntryHolder.defaultEntry);
                                    i |= 32;
                                }
                                MapEntry mapEntry = (MapEntry) codedInputStream.readMessage(AssetDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.asset_.getMutableMap().put((String) mapEntry.getKey(), (Long) mapEntry.getValue());
                                continue;
                            case 58:
                                if ((i & 128) != 128) {
                                    this.frozen_ = new ArrayList();
                                    i |= 128;
                                }
                                this.frozen_.add((Frozen) codedInputStream.readMessage(Frozen.parser(), extensionRegistryLite));
                                continue;
                            case 64:
                                this.netUsage_ = codedInputStream.readInt64();
                                continue;
                            case 72:
                                this.createTime_ = codedInputStream.readInt64();
                                continue;
                            case 80:
                                this.latestOprationTime_ = codedInputStream.readInt64();
                                continue;
                            case 88:
                                this.allowance_ = codedInputStream.readInt64();
                                continue;
                            case 96:
                                this.latestWithdrawTime_ = codedInputStream.readInt64();
                                continue;
                            case 106:
                                this.code_ = codedInputStream.readBytes();
                                continue;
                            case 112:
                                this.isWitness_ = codedInputStream.readBool();
                                continue;
                            case 120:
                                this.isCommittee_ = codedInputStream.readBool();
                                continue;
                            case 130:
                                if ((i & 2097152) != 2097152) {
                                    this.frozenSupply_ = new ArrayList();
                                    i |= 2097152;
                                }
                                this.frozenSupply_.add((Frozen) codedInputStream.readMessage(Frozen.parser(), extensionRegistryLite));
                                continue;
                            case 138:
                                this.assetIssuedName_ = codedInputStream.readBytes();
                                continue;
                            case 146:
                                if ((i & 16777216) != 16777216) {
                                    this.latestAssetOperationTime_ = MapField.newMapField(LatestAssetOperationTimeDefaultEntryHolder.defaultEntry);
                                    i |= 16777216;
                                }
                                MapEntry mapEntry2 = (MapEntry) codedInputStream.readMessage(LatestAssetOperationTimeDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.latestAssetOperationTime_.getMutableMap().put((String) mapEntry2.getKey(), (Long) mapEntry2.getValue());
                                continue;
                            case 152:
                                this.freeNetUsage_ = codedInputStream.readInt64();
                                continue;
                            case Opcodes.IF_ICMPGE:
                                if ((i & 134217728) != 134217728) {
                                    this.freeAssetNetUsage_ = MapField.newMapField(FreeAssetNetUsageDefaultEntryHolder.defaultEntry);
                                    i |= 134217728;
                                }
                                MapEntry mapEntry3 = (MapEntry) codedInputStream.readMessage(FreeAssetNetUsageDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.freeAssetNetUsage_.getMutableMap().put((String) mapEntry3.getKey(), (Long) mapEntry3.getValue());
                                continue;
                            case 168:
                                this.latestConsumeTime_ = codedInputStream.readInt64();
                                continue;
                            case Opcodes.ARETURN:
                                this.latestConsumeFreeTime_ = codedInputStream.readInt64();
                                continue;
                            case 186:
                                this.accountId_ = codedInputStream.readBytes();
                                continue;
                            case 192:
                                this.netWindowSize_ = codedInputStream.readInt64();
                                continue;
                            case 200:
                                this.netWindowOptimized_ = codedInputStream.readBool();
                                continue;
                            case 210:
                                AccountResource accountResource = this.accountResource_;
                                AccountResource.Builder builder = accountResource != null ? accountResource.toBuilder() : null;
                                AccountResource accountResource2 = (AccountResource) codedInputStream.readMessage(AccountResource.parser(), extensionRegistryLite);
                                this.accountResource_ = accountResource2;
                                if (builder != null) {
                                    builder.mergeFrom(accountResource2);
                                    this.accountResource_ = builder.buildPartial();
                                } else {
                                    continue;
                                }
                            case 242:
                                this.codeHash_ = codedInputStream.readBytes();
                                continue;
                            case 250:
                                Permission permission = this.ownerPermission_;
                                Permission.Builder builder2 = permission != null ? permission.toBuilder() : null;
                                Permission permission2 = (Permission) codedInputStream.readMessage(Permission.parser(), extensionRegistryLite);
                                this.ownerPermission_ = permission2;
                                if (builder2 != null) {
                                    builder2.mergeFrom(permission2);
                                    this.ownerPermission_ = builder2.buildPartial();
                                } else {
                                    continue;
                                }
                            case FinanceFragment.GOTO_NATIVE_STAKE:
                                Permission permission3 = this.witnessPermission_;
                                Permission.Builder builder3 = permission3 != null ? permission3.toBuilder() : null;
                                Permission permission4 = (Permission) codedInputStream.readMessage(Permission.parser(), extensionRegistryLite);
                                this.witnessPermission_ = permission4;
                                if (builder3 != null) {
                                    builder3.mergeFrom(permission4);
                                    this.witnessPermission_ = builder3.buildPartial();
                                } else {
                                    continue;
                                }
                            case 266:
                                if ((i2 & 64) != 64) {
                                    this.activePermission_ = new ArrayList();
                                    i2 |= 64;
                                }
                                this.activePermission_.add((Permission) codedInputStream.readMessage(Permission.parser(), extensionRegistryLite));
                                continue;
                            case TiffUtil.TIFF_TAG_ORIENTATION:
                                if ((i2 & 128) != 128) {
                                    this.frozenV2_ = new ArrayList();
                                    i2 |= 128;
                                }
                                this.frozenV2_.add((FreezeV2) codedInputStream.readMessage(FreezeV2.parser(), extensionRegistryLite));
                                continue;
                            case 282:
                                if ((i2 & 256) != 256) {
                                    this.unfrozenV2_ = new ArrayList();
                                    i2 |= 256;
                                }
                                this.unfrozenV2_.add((UnFreezeV2) codedInputStream.readMessage(UnFreezeV2.parser(), extensionRegistryLite));
                                continue;
                            case 288:
                                this.delegatedFrozenV2BalanceForBandwidth_ = codedInputStream.readInt64();
                                continue;
                            case 296:
                                this.acquiredDelegatedFrozenV2BalanceForBandwidth_ = codedInputStream.readInt64();
                                continue;
                            case 328:
                                this.acquiredDelegatedFrozenBalanceForBandwidth_ = codedInputStream.readInt64();
                                continue;
                            case 336:
                                this.delegatedFrozenBalanceForBandwidth_ = codedInputStream.readInt64();
                                continue;
                            case 368:
                                this.oldTronPower_ = codedInputStream.readInt64();
                                continue;
                            case 378:
                                Frozen frozen = this.tronPower_;
                                Frozen.Builder builder4 = frozen != null ? frozen.toBuilder() : null;
                                Frozen frozen2 = (Frozen) codedInputStream.readMessage(Frozen.parser(), extensionRegistryLite);
                                this.tronPower_ = frozen2;
                                if (builder4 != null) {
                                    builder4.mergeFrom(frozen2);
                                    this.tronPower_ = builder4.buildPartial();
                                } else {
                                    continue;
                                }
                            case 450:
                                if ((i & 64) != 64) {
                                    this.assetV2_ = MapField.newMapField(AssetV2DefaultEntryHolder.defaultEntry);
                                    i |= 64;
                                }
                                MapEntry mapEntry4 = (MapEntry) codedInputStream.readMessage(AssetV2DefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.assetV2_.getMutableMap().put((String) mapEntry4.getKey(), (Long) mapEntry4.getValue());
                                continue;
                            case 458:
                                this.assetIssuedID_ = codedInputStream.readBytes();
                                continue;
                            case 466:
                                if ((i & 33554432) != 33554432) {
                                    this.latestAssetOperationTimeV2_ = MapField.newMapField(LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry);
                                    i |= 33554432;
                                }
                                MapEntry mapEntry5 = (MapEntry) codedInputStream.readMessage(LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.latestAssetOperationTimeV2_.getMutableMap().put((String) mapEntry5.getKey(), (Long) mapEntry5.getValue());
                                continue;
                            case 474:
                                if ((i & Intent.FLAG_ACTIVITY_NEW_TASK) != Intent.FLAG_ACTIVITY_NEW_TASK) {
                                    this.freeAssetNetUsageV2_ = MapField.newMapField(FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry);
                                    i |= Intent.FLAG_ACTIVITY_NEW_TASK;
                                }
                                MapEntry mapEntry6 = (MapEntry) codedInputStream.readMessage(FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.freeAssetNetUsageV2_.getMutableMap().put((String) mapEntry6.getKey(), (Long) mapEntry6.getValue());
                                continue;
                            case 480:
                                this.assetOptimized_ = codedInputStream.readBool();
                                continue;
                            default:
                                r4 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                if (r4 == 0) {
                                    break;
                                } else {
                                    continue;
                                }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if ((i & 16) == 16) {
                        this.votes_ = Collections.unmodifiableList(this.votes_);
                    }
                    if ((i & 128) == 128) {
                        this.frozen_ = Collections.unmodifiableList(this.frozen_);
                    }
                    if ((i & 2097152) == 2097152) {
                        this.frozenSupply_ = Collections.unmodifiableList(this.frozenSupply_);
                    }
                    if ((i2 & 64) == 64) {
                        this.activePermission_ = Collections.unmodifiableList(this.activePermission_);
                    }
                    if ((i2 & 128) == 128) {
                        this.frozenV2_ = Collections.unmodifiableList(this.frozenV2_);
                    }
                    if ((i2 & 256) == r4) {
                        this.unfrozenV2_ = Collections.unmodifiableList(this.unfrozenV2_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Account_descriptor;
        }

        @Override
        protected MapField internalGetMapField(int i) {
            if (i != 6) {
                if (i != 18) {
                    if (i != 20) {
                        if (i != 56) {
                            if (i != 58) {
                                if (i == 59) {
                                    return internalGetFreeAssetNetUsageV2();
                                }
                                throw new RuntimeException("Invalid map field number: " + i);
                            }
                            return internalGetLatestAssetOperationTimeV2();
                        }
                        return internalGetAssetV2();
                    }
                    return internalGetFreeAssetNetUsage();
                }
                return internalGetLatestAssetOperationTime();
            }
            return internalGetAsset();
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Account_fieldAccessorTable.ensureFieldAccessorsInitialized(Account.class, Builder.class);
        }

        public static final class Frozen extends GeneratedMessageV3 implements FrozenOrBuilder {
            public static final int EXPIRE_TIME_FIELD_NUMBER = 2;
            public static final int FROZEN_BALANCE_FIELD_NUMBER = 1;
            private static final long serialVersionUID = 0;
            private long expireTime_;
            private long frozenBalance_;
            private byte memoizedIsInitialized;
            private static final Frozen DEFAULT_INSTANCE = new Frozen();
            private static final Parser<Frozen> PARSER = new AbstractParser<Frozen>() {
                @Override
                public Frozen parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new Frozen(codedInputStream, extensionRegistryLite);
                }
            };

            public static Frozen getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<Frozen> parser() {
                return PARSER;
            }

            @Override
            public Frozen getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getExpireTime() {
                return this.expireTime_;
            }

            @Override
            public long getFrozenBalance() {
                return this.frozenBalance_;
            }

            @Override
            public Parser<Frozen> getParserForType() {
                return PARSER;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private Frozen(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private Frozen() {
                this.memoizedIsInitialized = (byte) -1;
                this.frozenBalance_ = 0L;
                this.expireTime_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private Frozen(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.frozenBalance_ = codedInputStream.readInt64();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.expireTime_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Account_Frozen_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Account_Frozen_fieldAccessorTable.ensureFieldAccessorsInitialized(Frozen.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.frozenBalance_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                long j2 = this.expireTime_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(2, j2);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.frozenBalance_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                long j2 = this.expireTime_;
                if (j2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(2, j2);
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof Frozen)) {
                    return super.equals(obj);
                }
                Frozen frozen = (Frozen) obj;
                return getFrozenBalance() == frozen.getFrozenBalance() && getExpireTime() == frozen.getExpireTime() && this.unknownFields.equals(frozen.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getFrozenBalance())) * 37) + 2) * 53) + Internal.hashLong(getExpireTime())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static Frozen parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static Frozen parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static Frozen parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static Frozen parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static Frozen parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static Frozen parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Frozen parseFrom(InputStream inputStream) throws IOException {
                return (Frozen) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static Frozen parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Frozen) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Frozen parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (Frozen) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static Frozen parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Frozen) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Frozen parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (Frozen) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static Frozen parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Frozen) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Frozen frozen) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(frozen);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements FrozenOrBuilder {
                private long expireTime_;
                private long frozenBalance_;

                @Override
                public long getExpireTime() {
                    return this.expireTime_;
                }

                @Override
                public long getFrozenBalance() {
                    return this.frozenBalance_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Account_Frozen_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Account_Frozen_fieldAccessorTable.ensureFieldAccessorsInitialized(Frozen.class, Builder.class);
                }

                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = Frozen.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.frozenBalance_ = 0L;
                    this.expireTime_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Account_Frozen_descriptor;
                }

                @Override
                public Frozen getDefaultInstanceForType() {
                    return Frozen.getDefaultInstance();
                }

                @Override
                public Frozen build() {
                    Frozen buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public Frozen buildPartial() {
                    Frozen frozen = new Frozen(this);
                    frozen.frozenBalance_ = this.frozenBalance_;
                    frozen.expireTime_ = this.expireTime_;
                    onBuilt();
                    return frozen;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof Frozen) {
                        return mergeFrom((Frozen) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(Frozen frozen) {
                    if (frozen == Frozen.getDefaultInstance()) {
                        return this;
                    }
                    if (frozen.getFrozenBalance() != 0) {
                        setFrozenBalance(frozen.getFrozenBalance());
                    }
                    if (frozen.getExpireTime() != 0) {
                        setExpireTime(frozen.getExpireTime());
                    }
                    mergeUnknownFields(frozen.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Account.Frozen.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.Frozen.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Account$Frozen$Builder");
                }

                public Builder setFrozenBalance(long j) {
                    this.frozenBalance_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearFrozenBalance() {
                    this.frozenBalance_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setExpireTime(long j) {
                    this.expireTime_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExpireTime() {
                    this.expireTime_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class AccountResource extends GeneratedMessageV3 implements AccountResourceOrBuilder {
            public static final int ACQUIRED_DELEGATED_FROZENV2_BALANCE_FOR_ENERGY_FIELD_NUMBER = 11;
            public static final int ACQUIRED_DELEGATED_FROZEN_BALANCE_FOR_ENERGY_FIELD_NUMBER = 4;
            public static final int DELEGATED_FROZENV2_BALANCE_FOR_ENERGY_FIELD_NUMBER = 10;
            public static final int DELEGATED_FROZEN_BALANCE_FOR_ENERGY_FIELD_NUMBER = 5;
            public static final int ENERGY_USAGE_FIELD_NUMBER = 1;
            public static final int ENERGY_WINDOW_OPTIMIZED_FIELD_NUMBER = 12;
            public static final int ENERGY_WINDOW_SIZE_FIELD_NUMBER = 9;
            public static final int FROZEN_BALANCE_FOR_ENERGY_FIELD_NUMBER = 2;
            public static final int LATEST_CONSUME_TIME_FOR_ENERGY_FIELD_NUMBER = 3;
            public static final int LATEST_EXCHANGE_STORAGE_TIME_FIELD_NUMBER = 8;
            public static final int STORAGE_LIMIT_FIELD_NUMBER = 6;
            public static final int STORAGE_USAGE_FIELD_NUMBER = 7;
            private static final long serialVersionUID = 0;
            private long acquiredDelegatedFrozenBalanceForEnergy_;
            private long acquiredDelegatedFrozenV2BalanceForEnergy_;
            private long delegatedFrozenBalanceForEnergy_;
            private long delegatedFrozenV2BalanceForEnergy_;
            private long energyUsage_;
            private boolean energyWindowOptimized_;
            private long energyWindowSize_;
            private Frozen frozenBalanceForEnergy_;
            private long latestConsumeTimeForEnergy_;
            private long latestExchangeStorageTime_;
            private byte memoizedIsInitialized;
            private long storageLimit_;
            private long storageUsage_;
            private static final AccountResource DEFAULT_INSTANCE = new AccountResource();
            private static final Parser<AccountResource> PARSER = new AbstractParser<AccountResource>() {
                @Override
                public AccountResource parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new AccountResource(codedInputStream, extensionRegistryLite);
                }
            };

            public static AccountResource getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<AccountResource> parser() {
                return PARSER;
            }

            @Override
            public long getAcquiredDelegatedFrozenBalanceForEnergy() {
                return this.acquiredDelegatedFrozenBalanceForEnergy_;
            }

            @Override
            public long getAcquiredDelegatedFrozenV2BalanceForEnergy() {
                return this.acquiredDelegatedFrozenV2BalanceForEnergy_;
            }

            @Override
            public AccountResource getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getDelegatedFrozenBalanceForEnergy() {
                return this.delegatedFrozenBalanceForEnergy_;
            }

            @Override
            public long getDelegatedFrozenV2BalanceForEnergy() {
                return this.delegatedFrozenV2BalanceForEnergy_;
            }

            @Override
            public long getEnergyUsage() {
                return this.energyUsage_;
            }

            @Override
            public boolean getEnergyWindowOptimized() {
                return this.energyWindowOptimized_;
            }

            @Override
            public long getEnergyWindowSize() {
                return this.energyWindowSize_;
            }

            @Override
            public long getLatestConsumeTimeForEnergy() {
                return this.latestConsumeTimeForEnergy_;
            }

            @Override
            public long getLatestExchangeStorageTime() {
                return this.latestExchangeStorageTime_;
            }

            @Override
            public Parser<AccountResource> getParserForType() {
                return PARSER;
            }

            @Override
            public long getStorageLimit() {
                return this.storageLimit_;
            }

            @Override
            public long getStorageUsage() {
                return this.storageUsage_;
            }

            @Override
            public boolean hasFrozenBalanceForEnergy() {
                return this.frozenBalanceForEnergy_ != null;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private AccountResource(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private AccountResource() {
                this.memoizedIsInitialized = (byte) -1;
                this.energyUsage_ = 0L;
                this.latestConsumeTimeForEnergy_ = 0L;
                this.acquiredDelegatedFrozenBalanceForEnergy_ = 0L;
                this.delegatedFrozenBalanceForEnergy_ = 0L;
                this.storageLimit_ = 0L;
                this.storageUsage_ = 0L;
                this.latestExchangeStorageTime_ = 0L;
                this.energyWindowSize_ = 0L;
                this.delegatedFrozenV2BalanceForEnergy_ = 0L;
                this.acquiredDelegatedFrozenV2BalanceForEnergy_ = 0L;
                this.energyWindowOptimized_ = false;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private AccountResource(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                switch (readTag) {
                                    case 0:
                                        break;
                                    case 8:
                                        this.energyUsage_ = codedInputStream.readInt64();
                                        continue;
                                    case 18:
                                        Frozen frozen = this.frozenBalanceForEnergy_;
                                        Frozen.Builder builder = frozen != null ? frozen.toBuilder() : null;
                                        Frozen frozen2 = (Frozen) codedInputStream.readMessage(Frozen.parser(), extensionRegistryLite);
                                        this.frozenBalanceForEnergy_ = frozen2;
                                        if (builder != null) {
                                            builder.mergeFrom(frozen2);
                                            this.frozenBalanceForEnergy_ = builder.buildPartial();
                                        } else {
                                            continue;
                                        }
                                    case 24:
                                        this.latestConsumeTimeForEnergy_ = codedInputStream.readInt64();
                                        continue;
                                    case 32:
                                        this.acquiredDelegatedFrozenBalanceForEnergy_ = codedInputStream.readInt64();
                                        continue;
                                    case 40:
                                        this.delegatedFrozenBalanceForEnergy_ = codedInputStream.readInt64();
                                        continue;
                                    case 48:
                                        this.storageLimit_ = codedInputStream.readInt64();
                                        continue;
                                    case 56:
                                        this.storageUsage_ = codedInputStream.readInt64();
                                        continue;
                                    case 64:
                                        this.latestExchangeStorageTime_ = codedInputStream.readInt64();
                                        continue;
                                    case 72:
                                        this.energyWindowSize_ = codedInputStream.readInt64();
                                        continue;
                                    case 80:
                                        this.delegatedFrozenV2BalanceForEnergy_ = codedInputStream.readInt64();
                                        continue;
                                    case 88:
                                        this.acquiredDelegatedFrozenV2BalanceForEnergy_ = codedInputStream.readInt64();
                                        continue;
                                    case 96:
                                        this.energyWindowOptimized_ = codedInputStream.readBool();
                                        continue;
                                    default:
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                            break;
                                        } else {
                                            continue;
                                        }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            }
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Account_AccountResource_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Account_AccountResource_fieldAccessorTable.ensureFieldAccessorsInitialized(AccountResource.class, Builder.class);
            }

            @Override
            public Frozen getFrozenBalanceForEnergy() {
                Frozen frozen = this.frozenBalanceForEnergy_;
                return frozen == null ? Frozen.getDefaultInstance() : frozen;
            }

            @Override
            public FrozenOrBuilder getFrozenBalanceForEnergyOrBuilder() {
                return getFrozenBalanceForEnergy();
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.energyUsage_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                if (this.frozenBalanceForEnergy_ != null) {
                    codedOutputStream.writeMessage(2, getFrozenBalanceForEnergy());
                }
                long j2 = this.latestConsumeTimeForEnergy_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(3, j2);
                }
                long j3 = this.acquiredDelegatedFrozenBalanceForEnergy_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(4, j3);
                }
                long j4 = this.delegatedFrozenBalanceForEnergy_;
                if (j4 != 0) {
                    codedOutputStream.writeInt64(5, j4);
                }
                long j5 = this.storageLimit_;
                if (j5 != 0) {
                    codedOutputStream.writeInt64(6, j5);
                }
                long j6 = this.storageUsage_;
                if (j6 != 0) {
                    codedOutputStream.writeInt64(7, j6);
                }
                long j7 = this.latestExchangeStorageTime_;
                if (j7 != 0) {
                    codedOutputStream.writeInt64(8, j7);
                }
                long j8 = this.energyWindowSize_;
                if (j8 != 0) {
                    codedOutputStream.writeInt64(9, j8);
                }
                long j9 = this.delegatedFrozenV2BalanceForEnergy_;
                if (j9 != 0) {
                    codedOutputStream.writeInt64(10, j9);
                }
                long j10 = this.acquiredDelegatedFrozenV2BalanceForEnergy_;
                if (j10 != 0) {
                    codedOutputStream.writeInt64(11, j10);
                }
                boolean z = this.energyWindowOptimized_;
                if (z) {
                    codedOutputStream.writeBool(12, z);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.energyUsage_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                if (this.frozenBalanceForEnergy_ != null) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(2, getFrozenBalanceForEnergy());
                }
                long j2 = this.latestConsumeTimeForEnergy_;
                if (j2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(3, j2);
                }
                long j3 = this.acquiredDelegatedFrozenBalanceForEnergy_;
                if (j3 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(4, j3);
                }
                long j4 = this.delegatedFrozenBalanceForEnergy_;
                if (j4 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(5, j4);
                }
                long j5 = this.storageLimit_;
                if (j5 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(6, j5);
                }
                long j6 = this.storageUsage_;
                if (j6 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(7, j6);
                }
                long j7 = this.latestExchangeStorageTime_;
                if (j7 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(8, j7);
                }
                long j8 = this.energyWindowSize_;
                if (j8 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(9, j8);
                }
                long j9 = this.delegatedFrozenV2BalanceForEnergy_;
                if (j9 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(10, j9);
                }
                long j10 = this.acquiredDelegatedFrozenV2BalanceForEnergy_;
                if (j10 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(11, j10);
                }
                boolean z = this.energyWindowOptimized_;
                if (z) {
                    computeInt64Size += CodedOutputStream.computeBoolSize(12, z);
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof AccountResource)) {
                    return super.equals(obj);
                }
                AccountResource accountResource = (AccountResource) obj;
                boolean z = getEnergyUsage() == accountResource.getEnergyUsage() && hasFrozenBalanceForEnergy() == accountResource.hasFrozenBalanceForEnergy();
                if (!hasFrozenBalanceForEnergy() ? z : !(!z || !getFrozenBalanceForEnergy().equals(accountResource.getFrozenBalanceForEnergy()))) {
                    if (getLatestConsumeTimeForEnergy() == accountResource.getLatestConsumeTimeForEnergy() && getAcquiredDelegatedFrozenBalanceForEnergy() == accountResource.getAcquiredDelegatedFrozenBalanceForEnergy() && getDelegatedFrozenBalanceForEnergy() == accountResource.getDelegatedFrozenBalanceForEnergy() && getStorageLimit() == accountResource.getStorageLimit() && getStorageUsage() == accountResource.getStorageUsage() && getLatestExchangeStorageTime() == accountResource.getLatestExchangeStorageTime() && getEnergyWindowSize() == accountResource.getEnergyWindowSize() && getDelegatedFrozenV2BalanceForEnergy() == accountResource.getDelegatedFrozenV2BalanceForEnergy() && getAcquiredDelegatedFrozenV2BalanceForEnergy() == accountResource.getAcquiredDelegatedFrozenV2BalanceForEnergy() && getEnergyWindowOptimized() == accountResource.getEnergyWindowOptimized() && this.unknownFields.equals(accountResource.unknownFields)) {
                        return true;
                    }
                }
                return false;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getEnergyUsage());
                if (hasFrozenBalanceForEnergy()) {
                    hashCode = (((hashCode * 37) + 2) * 53) + getFrozenBalanceForEnergy().hashCode();
                }
                int hashLong = (((((((((((((((((((((((((((((((((((((((((hashCode * 37) + 3) * 53) + Internal.hashLong(getLatestConsumeTimeForEnergy())) * 37) + 4) * 53) + Internal.hashLong(getAcquiredDelegatedFrozenBalanceForEnergy())) * 37) + 5) * 53) + Internal.hashLong(getDelegatedFrozenBalanceForEnergy())) * 37) + 6) * 53) + Internal.hashLong(getStorageLimit())) * 37) + 7) * 53) + Internal.hashLong(getStorageUsage())) * 37) + 8) * 53) + Internal.hashLong(getLatestExchangeStorageTime())) * 37) + 9) * 53) + Internal.hashLong(getEnergyWindowSize())) * 37) + 10) * 53) + Internal.hashLong(getDelegatedFrozenV2BalanceForEnergy())) * 37) + 11) * 53) + Internal.hashLong(getAcquiredDelegatedFrozenV2BalanceForEnergy())) * 37) + 12) * 53) + Internal.hashBoolean(getEnergyWindowOptimized())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashLong;
                return hashLong;
            }

            public static AccountResource parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static AccountResource parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static AccountResource parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static AccountResource parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static AccountResource parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static AccountResource parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static AccountResource parseFrom(InputStream inputStream) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static AccountResource parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static AccountResource parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static AccountResource parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static AccountResource parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static AccountResource parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (AccountResource) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(AccountResource accountResource) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(accountResource);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements AccountResourceOrBuilder {
                private long acquiredDelegatedFrozenBalanceForEnergy_;
                private long acquiredDelegatedFrozenV2BalanceForEnergy_;
                private long delegatedFrozenBalanceForEnergy_;
                private long delegatedFrozenV2BalanceForEnergy_;
                private long energyUsage_;
                private boolean energyWindowOptimized_;
                private long energyWindowSize_;
                private SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> frozenBalanceForEnergyBuilder_;
                private Frozen frozenBalanceForEnergy_;
                private long latestConsumeTimeForEnergy_;
                private long latestExchangeStorageTime_;
                private long storageLimit_;
                private long storageUsage_;

                @Override
                public long getAcquiredDelegatedFrozenBalanceForEnergy() {
                    return this.acquiredDelegatedFrozenBalanceForEnergy_;
                }

                @Override
                public long getAcquiredDelegatedFrozenV2BalanceForEnergy() {
                    return this.acquiredDelegatedFrozenV2BalanceForEnergy_;
                }

                @Override
                public long getDelegatedFrozenBalanceForEnergy() {
                    return this.delegatedFrozenBalanceForEnergy_;
                }

                @Override
                public long getDelegatedFrozenV2BalanceForEnergy() {
                    return this.delegatedFrozenV2BalanceForEnergy_;
                }

                @Override
                public long getEnergyUsage() {
                    return this.energyUsage_;
                }

                @Override
                public boolean getEnergyWindowOptimized() {
                    return this.energyWindowOptimized_;
                }

                @Override
                public long getEnergyWindowSize() {
                    return this.energyWindowSize_;
                }

                @Override
                public long getLatestConsumeTimeForEnergy() {
                    return this.latestConsumeTimeForEnergy_;
                }

                @Override
                public long getLatestExchangeStorageTime() {
                    return this.latestExchangeStorageTime_;
                }

                @Override
                public long getStorageLimit() {
                    return this.storageLimit_;
                }

                @Override
                public long getStorageUsage() {
                    return this.storageUsage_;
                }

                @Override
                public boolean hasFrozenBalanceForEnergy() {
                    return (this.frozenBalanceForEnergyBuilder_ == null && this.frozenBalanceForEnergy_ == null) ? false : true;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Account_AccountResource_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Account_AccountResource_fieldAccessorTable.ensureFieldAccessorsInitialized(AccountResource.class, Builder.class);
                }

                private Builder() {
                    this.frozenBalanceForEnergy_ = null;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.frozenBalanceForEnergy_ = null;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = AccountResource.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.energyUsage_ = 0L;
                    if (this.frozenBalanceForEnergyBuilder_ == null) {
                        this.frozenBalanceForEnergy_ = null;
                    } else {
                        this.frozenBalanceForEnergy_ = null;
                        this.frozenBalanceForEnergyBuilder_ = null;
                    }
                    this.latestConsumeTimeForEnergy_ = 0L;
                    this.acquiredDelegatedFrozenBalanceForEnergy_ = 0L;
                    this.delegatedFrozenBalanceForEnergy_ = 0L;
                    this.storageLimit_ = 0L;
                    this.storageUsage_ = 0L;
                    this.latestExchangeStorageTime_ = 0L;
                    this.energyWindowSize_ = 0L;
                    this.delegatedFrozenV2BalanceForEnergy_ = 0L;
                    this.acquiredDelegatedFrozenV2BalanceForEnergy_ = 0L;
                    this.energyWindowOptimized_ = false;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Account_AccountResource_descriptor;
                }

                @Override
                public AccountResource getDefaultInstanceForType() {
                    return AccountResource.getDefaultInstance();
                }

                @Override
                public AccountResource build() {
                    AccountResource buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public AccountResource buildPartial() {
                    AccountResource accountResource = new AccountResource(this);
                    accountResource.energyUsage_ = this.energyUsage_;
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        accountResource.frozenBalanceForEnergy_ = this.frozenBalanceForEnergy_;
                    } else {
                        accountResource.frozenBalanceForEnergy_ = singleFieldBuilderV3.build();
                    }
                    accountResource.latestConsumeTimeForEnergy_ = this.latestConsumeTimeForEnergy_;
                    accountResource.acquiredDelegatedFrozenBalanceForEnergy_ = this.acquiredDelegatedFrozenBalanceForEnergy_;
                    accountResource.delegatedFrozenBalanceForEnergy_ = this.delegatedFrozenBalanceForEnergy_;
                    accountResource.storageLimit_ = this.storageLimit_;
                    accountResource.storageUsage_ = this.storageUsage_;
                    accountResource.latestExchangeStorageTime_ = this.latestExchangeStorageTime_;
                    accountResource.energyWindowSize_ = this.energyWindowSize_;
                    accountResource.delegatedFrozenV2BalanceForEnergy_ = this.delegatedFrozenV2BalanceForEnergy_;
                    accountResource.acquiredDelegatedFrozenV2BalanceForEnergy_ = this.acquiredDelegatedFrozenV2BalanceForEnergy_;
                    accountResource.energyWindowOptimized_ = this.energyWindowOptimized_;
                    onBuilt();
                    return accountResource;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof AccountResource) {
                        return mergeFrom((AccountResource) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(AccountResource accountResource) {
                    if (accountResource == AccountResource.getDefaultInstance()) {
                        return this;
                    }
                    if (accountResource.getEnergyUsage() != 0) {
                        setEnergyUsage(accountResource.getEnergyUsage());
                    }
                    if (accountResource.hasFrozenBalanceForEnergy()) {
                        mergeFrozenBalanceForEnergy(accountResource.getFrozenBalanceForEnergy());
                    }
                    if (accountResource.getLatestConsumeTimeForEnergy() != 0) {
                        setLatestConsumeTimeForEnergy(accountResource.getLatestConsumeTimeForEnergy());
                    }
                    if (accountResource.getAcquiredDelegatedFrozenBalanceForEnergy() != 0) {
                        setAcquiredDelegatedFrozenBalanceForEnergy(accountResource.getAcquiredDelegatedFrozenBalanceForEnergy());
                    }
                    if (accountResource.getDelegatedFrozenBalanceForEnergy() != 0) {
                        setDelegatedFrozenBalanceForEnergy(accountResource.getDelegatedFrozenBalanceForEnergy());
                    }
                    if (accountResource.getStorageLimit() != 0) {
                        setStorageLimit(accountResource.getStorageLimit());
                    }
                    if (accountResource.getStorageUsage() != 0) {
                        setStorageUsage(accountResource.getStorageUsage());
                    }
                    if (accountResource.getLatestExchangeStorageTime() != 0) {
                        setLatestExchangeStorageTime(accountResource.getLatestExchangeStorageTime());
                    }
                    if (accountResource.getEnergyWindowSize() != 0) {
                        setEnergyWindowSize(accountResource.getEnergyWindowSize());
                    }
                    if (accountResource.getDelegatedFrozenV2BalanceForEnergy() != 0) {
                        setDelegatedFrozenV2BalanceForEnergy(accountResource.getDelegatedFrozenV2BalanceForEnergy());
                    }
                    if (accountResource.getAcquiredDelegatedFrozenV2BalanceForEnergy() != 0) {
                        setAcquiredDelegatedFrozenV2BalanceForEnergy(accountResource.getAcquiredDelegatedFrozenV2BalanceForEnergy());
                    }
                    if (accountResource.getEnergyWindowOptimized()) {
                        setEnergyWindowOptimized(accountResource.getEnergyWindowOptimized());
                    }
                    mergeUnknownFields(accountResource.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Account.AccountResource.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.AccountResource.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Account$AccountResource$Builder");
                }

                public Builder setEnergyUsage(long j) {
                    this.energyUsage_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearEnergyUsage() {
                    this.energyUsage_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public Frozen getFrozenBalanceForEnergy() {
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        Frozen frozen = this.frozenBalanceForEnergy_;
                        return frozen == null ? Frozen.getDefaultInstance() : frozen;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public Builder setFrozenBalanceForEnergy(Frozen frozen) {
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        frozen.getClass();
                        this.frozenBalanceForEnergy_ = frozen;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(frozen);
                    }
                    return this;
                }

                public Builder setFrozenBalanceForEnergy(Frozen.Builder builder) {
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        this.frozenBalanceForEnergy_ = builder.build();
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(builder.build());
                    }
                    return this;
                }

                public Builder mergeFrozenBalanceForEnergy(Frozen frozen) {
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        Frozen frozen2 = this.frozenBalanceForEnergy_;
                        if (frozen2 != null) {
                            this.frozenBalanceForEnergy_ = Frozen.newBuilder(frozen2).mergeFrom(frozen).buildPartial();
                        } else {
                            this.frozenBalanceForEnergy_ = frozen;
                        }
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(frozen);
                    }
                    return this;
                }

                public Builder clearFrozenBalanceForEnergy() {
                    if (this.frozenBalanceForEnergyBuilder_ == null) {
                        this.frozenBalanceForEnergy_ = null;
                        onChanged();
                    } else {
                        this.frozenBalanceForEnergy_ = null;
                        this.frozenBalanceForEnergyBuilder_ = null;
                    }
                    return this;
                }

                public Frozen.Builder getFrozenBalanceForEnergyBuilder() {
                    onChanged();
                    return getFrozenBalanceForEnergyFieldBuilder().getBuilder();
                }

                @Override
                public FrozenOrBuilder getFrozenBalanceForEnergyOrBuilder() {
                    SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.frozenBalanceForEnergyBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    Frozen frozen = this.frozenBalanceForEnergy_;
                    return frozen == null ? Frozen.getDefaultInstance() : frozen;
                }

                private SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> getFrozenBalanceForEnergyFieldBuilder() {
                    if (this.frozenBalanceForEnergyBuilder_ == null) {
                        this.frozenBalanceForEnergyBuilder_ = new SingleFieldBuilderV3<>(getFrozenBalanceForEnergy(), getParentForChildren(), isClean());
                        this.frozenBalanceForEnergy_ = null;
                    }
                    return this.frozenBalanceForEnergyBuilder_;
                }

                public Builder setLatestConsumeTimeForEnergy(long j) {
                    this.latestConsumeTimeForEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearLatestConsumeTimeForEnergy() {
                    this.latestConsumeTimeForEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setAcquiredDelegatedFrozenBalanceForEnergy(long j) {
                    this.acquiredDelegatedFrozenBalanceForEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearAcquiredDelegatedFrozenBalanceForEnergy() {
                    this.acquiredDelegatedFrozenBalanceForEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setDelegatedFrozenBalanceForEnergy(long j) {
                    this.delegatedFrozenBalanceForEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearDelegatedFrozenBalanceForEnergy() {
                    this.delegatedFrozenBalanceForEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setStorageLimit(long j) {
                    this.storageLimit_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearStorageLimit() {
                    this.storageLimit_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setStorageUsage(long j) {
                    this.storageUsage_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearStorageUsage() {
                    this.storageUsage_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setLatestExchangeStorageTime(long j) {
                    this.latestExchangeStorageTime_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearLatestExchangeStorageTime() {
                    this.latestExchangeStorageTime_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setEnergyWindowSize(long j) {
                    this.energyWindowSize_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearEnergyWindowSize() {
                    this.energyWindowSize_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setDelegatedFrozenV2BalanceForEnergy(long j) {
                    this.delegatedFrozenV2BalanceForEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearDelegatedFrozenV2BalanceForEnergy() {
                    this.delegatedFrozenV2BalanceForEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setAcquiredDelegatedFrozenV2BalanceForEnergy(long j) {
                    this.acquiredDelegatedFrozenV2BalanceForEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearAcquiredDelegatedFrozenV2BalanceForEnergy() {
                    this.acquiredDelegatedFrozenV2BalanceForEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setEnergyWindowOptimized(boolean z) {
                    this.energyWindowOptimized_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearEnergyWindowOptimized() {
                    this.energyWindowOptimized_ = false;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class FreezeV2 extends GeneratedMessageV3 implements FreezeV2OrBuilder {
            public static final int AMOUNT_FIELD_NUMBER = 2;
            private static final FreezeV2 DEFAULT_INSTANCE = new FreezeV2();
            private static final Parser<FreezeV2> PARSER = new AbstractParser<FreezeV2>() {
                @Override
                public FreezeV2 parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new FreezeV2(codedInputStream, extensionRegistryLite);
                }
            };
            public static final int TYPE_FIELD_NUMBER = 1;
            private static final long serialVersionUID = 0;
            private long amount_;
            private byte memoizedIsInitialized;
            private int type_;

            public static FreezeV2 getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<FreezeV2> parser() {
                return PARSER;
            }

            @Override
            public long getAmount() {
                return this.amount_;
            }

            @Override
            public FreezeV2 getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<FreezeV2> getParserForType() {
                return PARSER;
            }

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private FreezeV2(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private FreezeV2() {
                this.memoizedIsInitialized = (byte) -1;
                this.type_ = 0;
                this.amount_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private FreezeV2(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.type_ = codedInputStream.readEnum();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.amount_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Account_FreezeV2_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Account_FreezeV2_fieldAccessorTable.ensureFieldAccessorsInitialized(FreezeV2.class, Builder.class);
            }

            @Override
            public Common.ResourceCode getType() {
                Common.ResourceCode valueOf = Common.ResourceCode.valueOf(this.type_);
                return valueOf == null ? Common.ResourceCode.UNRECOGNIZED : valueOf;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (this.type_ != Common.ResourceCode.BANDWIDTH.getNumber()) {
                    codedOutputStream.writeEnum(1, this.type_);
                }
                long j = this.amount_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeEnumSize = this.type_ != Common.ResourceCode.BANDWIDTH.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
                long j = this.amount_;
                if (j != 0) {
                    computeEnumSize += CodedOutputStream.computeInt64Size(2, j);
                }
                int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof FreezeV2)) {
                    return super.equals(obj);
                }
                FreezeV2 freezeV2 = (FreezeV2) obj;
                return this.type_ == freezeV2.type_ && getAmount() == freezeV2.getAmount() && this.unknownFields.equals(freezeV2.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_) * 37) + 2) * 53) + Internal.hashLong(getAmount())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static FreezeV2 parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static FreezeV2 parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static FreezeV2 parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static FreezeV2 parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static FreezeV2 parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static FreezeV2 parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static FreezeV2 parseFrom(InputStream inputStream) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static FreezeV2 parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static FreezeV2 parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static FreezeV2 parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static FreezeV2 parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static FreezeV2 parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (FreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(FreezeV2 freezeV2) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(freezeV2);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements FreezeV2OrBuilder {
                private long amount_;
                private int type_;

                @Override
                public long getAmount() {
                    return this.amount_;
                }

                @Override
                public int getTypeValue() {
                    return this.type_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Account_FreezeV2_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Account_FreezeV2_fieldAccessorTable.ensureFieldAccessorsInitialized(FreezeV2.class, Builder.class);
                }

                private Builder() {
                    this.type_ = 0;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.type_ = 0;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = FreezeV2.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.type_ = 0;
                    this.amount_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Account_FreezeV2_descriptor;
                }

                @Override
                public FreezeV2 getDefaultInstanceForType() {
                    return FreezeV2.getDefaultInstance();
                }

                @Override
                public FreezeV2 build() {
                    FreezeV2 buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public FreezeV2 buildPartial() {
                    FreezeV2 freezeV2 = new FreezeV2(this);
                    freezeV2.type_ = this.type_;
                    freezeV2.amount_ = this.amount_;
                    onBuilt();
                    return freezeV2;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof FreezeV2) {
                        return mergeFrom((FreezeV2) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(FreezeV2 freezeV2) {
                    if (freezeV2 == FreezeV2.getDefaultInstance()) {
                        return this;
                    }
                    if (freezeV2.type_ != 0) {
                        setTypeValue(freezeV2.getTypeValue());
                    }
                    if (freezeV2.getAmount() != 0) {
                        setAmount(freezeV2.getAmount());
                    }
                    mergeUnknownFields(freezeV2.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Account.FreezeV2.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.FreezeV2.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Account$FreezeV2$Builder");
                }

                public Builder setTypeValue(int i) {
                    this.type_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Common.ResourceCode getType() {
                    Common.ResourceCode valueOf = Common.ResourceCode.valueOf(this.type_);
                    return valueOf == null ? Common.ResourceCode.UNRECOGNIZED : valueOf;
                }

                public Builder setType(Common.ResourceCode resourceCode) {
                    resourceCode.getClass();
                    this.type_ = resourceCode.getNumber();
                    onChanged();
                    return this;
                }

                public Builder clearType() {
                    this.type_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setAmount(long j) {
                    this.amount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearAmount() {
                    this.amount_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class UnFreezeV2 extends GeneratedMessageV3 implements UnFreezeV2OrBuilder {
            private static final UnFreezeV2 DEFAULT_INSTANCE = new UnFreezeV2();
            private static final Parser<UnFreezeV2> PARSER = new AbstractParser<UnFreezeV2>() {
                @Override
                public UnFreezeV2 parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new UnFreezeV2(codedInputStream, extensionRegistryLite);
                }
            };
            public static final int TYPE_FIELD_NUMBER = 1;
            public static final int UNFREEZE_AMOUNT_FIELD_NUMBER = 3;
            public static final int UNFREEZE_EXPIRE_TIME_FIELD_NUMBER = 4;
            private static final long serialVersionUID = 0;
            private byte memoizedIsInitialized;
            private int type_;
            private long unfreezeAmount_;
            private long unfreezeExpireTime_;

            public static UnFreezeV2 getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<UnFreezeV2> parser() {
                return PARSER;
            }

            @Override
            public UnFreezeV2 getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<UnFreezeV2> getParserForType() {
                return PARSER;
            }

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public long getUnfreezeAmount() {
                return this.unfreezeAmount_;
            }

            @Override
            public long getUnfreezeExpireTime() {
                return this.unfreezeExpireTime_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private UnFreezeV2(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private UnFreezeV2() {
                this.memoizedIsInitialized = (byte) -1;
                this.type_ = 0;
                this.unfreezeAmount_ = 0L;
                this.unfreezeExpireTime_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private UnFreezeV2(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.type_ = codedInputStream.readEnum();
                                } else if (readTag == 24) {
                                    this.unfreezeAmount_ = codedInputStream.readInt64();
                                } else if (readTag != 32) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.unfreezeExpireTime_ = codedInputStream.readInt64();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Account_UnFreezeV2_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Account_UnFreezeV2_fieldAccessorTable.ensureFieldAccessorsInitialized(UnFreezeV2.class, Builder.class);
            }

            @Override
            public Common.ResourceCode getType() {
                Common.ResourceCode valueOf = Common.ResourceCode.valueOf(this.type_);
                return valueOf == null ? Common.ResourceCode.UNRECOGNIZED : valueOf;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (this.type_ != Common.ResourceCode.BANDWIDTH.getNumber()) {
                    codedOutputStream.writeEnum(1, this.type_);
                }
                long j = this.unfreezeAmount_;
                if (j != 0) {
                    codedOutputStream.writeInt64(3, j);
                }
                long j2 = this.unfreezeExpireTime_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(4, j2);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeEnumSize = this.type_ != Common.ResourceCode.BANDWIDTH.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
                long j = this.unfreezeAmount_;
                if (j != 0) {
                    computeEnumSize += CodedOutputStream.computeInt64Size(3, j);
                }
                long j2 = this.unfreezeExpireTime_;
                if (j2 != 0) {
                    computeEnumSize += CodedOutputStream.computeInt64Size(4, j2);
                }
                int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof UnFreezeV2)) {
                    return super.equals(obj);
                }
                UnFreezeV2 unFreezeV2 = (UnFreezeV2) obj;
                return this.type_ == unFreezeV2.type_ && getUnfreezeAmount() == unFreezeV2.getUnfreezeAmount() && getUnfreezeExpireTime() == unFreezeV2.getUnfreezeExpireTime() && this.unknownFields.equals(unFreezeV2.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_) * 37) + 3) * 53) + Internal.hashLong(getUnfreezeAmount())) * 37) + 4) * 53) + Internal.hashLong(getUnfreezeExpireTime())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static UnFreezeV2 parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static UnFreezeV2 parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static UnFreezeV2 parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static UnFreezeV2 parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static UnFreezeV2 parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static UnFreezeV2 parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static UnFreezeV2 parseFrom(InputStream inputStream) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static UnFreezeV2 parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static UnFreezeV2 parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static UnFreezeV2 parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static UnFreezeV2 parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static UnFreezeV2 parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (UnFreezeV2) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(UnFreezeV2 unFreezeV2) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(unFreezeV2);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements UnFreezeV2OrBuilder {
                private int type_;
                private long unfreezeAmount_;
                private long unfreezeExpireTime_;

                @Override
                public int getTypeValue() {
                    return this.type_;
                }

                @Override
                public long getUnfreezeAmount() {
                    return this.unfreezeAmount_;
                }

                @Override
                public long getUnfreezeExpireTime() {
                    return this.unfreezeExpireTime_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Account_UnFreezeV2_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Account_UnFreezeV2_fieldAccessorTable.ensureFieldAccessorsInitialized(UnFreezeV2.class, Builder.class);
                }

                private Builder() {
                    this.type_ = 0;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.type_ = 0;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = UnFreezeV2.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.type_ = 0;
                    this.unfreezeAmount_ = 0L;
                    this.unfreezeExpireTime_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Account_UnFreezeV2_descriptor;
                }

                @Override
                public UnFreezeV2 getDefaultInstanceForType() {
                    return UnFreezeV2.getDefaultInstance();
                }

                @Override
                public UnFreezeV2 build() {
                    UnFreezeV2 buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public UnFreezeV2 buildPartial() {
                    UnFreezeV2 unFreezeV2 = new UnFreezeV2(this);
                    unFreezeV2.type_ = this.type_;
                    unFreezeV2.unfreezeAmount_ = this.unfreezeAmount_;
                    unFreezeV2.unfreezeExpireTime_ = this.unfreezeExpireTime_;
                    onBuilt();
                    return unFreezeV2;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof UnFreezeV2) {
                        return mergeFrom((UnFreezeV2) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(UnFreezeV2 unFreezeV2) {
                    if (unFreezeV2 == UnFreezeV2.getDefaultInstance()) {
                        return this;
                    }
                    if (unFreezeV2.type_ != 0) {
                        setTypeValue(unFreezeV2.getTypeValue());
                    }
                    if (unFreezeV2.getUnfreezeAmount() != 0) {
                        setUnfreezeAmount(unFreezeV2.getUnfreezeAmount());
                    }
                    if (unFreezeV2.getUnfreezeExpireTime() != 0) {
                        setUnfreezeExpireTime(unFreezeV2.getUnfreezeExpireTime());
                    }
                    mergeUnknownFields(unFreezeV2.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Account.UnFreezeV2.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.UnFreezeV2.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Account$UnFreezeV2$Builder");
                }

                public Builder setTypeValue(int i) {
                    this.type_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public Common.ResourceCode getType() {
                    Common.ResourceCode valueOf = Common.ResourceCode.valueOf(this.type_);
                    return valueOf == null ? Common.ResourceCode.UNRECOGNIZED : valueOf;
                }

                public Builder setType(Common.ResourceCode resourceCode) {
                    resourceCode.getClass();
                    this.type_ = resourceCode.getNumber();
                    onChanged();
                    return this;
                }

                public Builder clearType() {
                    this.type_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setUnfreezeAmount(long j) {
                    this.unfreezeAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearUnfreezeAmount() {
                    this.unfreezeAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setUnfreezeExpireTime(long j) {
                    this.unfreezeExpireTime_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearUnfreezeExpireTime() {
                    this.unfreezeExpireTime_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public AccountType getType() {
            AccountType valueOf = AccountType.valueOf(this.type_);
            return valueOf == null ? AccountType.UNRECOGNIZED : valueOf;
        }

        @Override
        public int getVotesCount() {
            return this.votes_.size();
        }

        @Override
        public Vote getVotes(int i) {
            return this.votes_.get(i);
        }

        @Override
        public VoteOrBuilder getVotesOrBuilder(int i) {
            return this.votes_.get(i);
        }

        public static final class AssetDefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_AssetEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private AssetDefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetAsset() {
            MapField<String, Long> mapField = this.asset_;
            return mapField == null ? MapField.emptyMapField(AssetDefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getAssetCount() {
            return internalGetAsset().getMap().size();
        }

        @Override
        public boolean containsAsset(String str) {
            str.getClass();
            return internalGetAsset().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getAsset() {
            return getAssetMap();
        }

        @Override
        public Map<String, Long> getAssetMap() {
            return internalGetAsset().getMap();
        }

        @Override
        public long getAssetOrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetAsset().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getAssetOrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetAsset().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        public static final class AssetV2DefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_AssetV2Entry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private AssetV2DefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetAssetV2() {
            MapField<String, Long> mapField = this.assetV2_;
            return mapField == null ? MapField.emptyMapField(AssetV2DefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getAssetV2Count() {
            return internalGetAssetV2().getMap().size();
        }

        @Override
        public boolean containsAssetV2(String str) {
            str.getClass();
            return internalGetAssetV2().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getAssetV2() {
            return getAssetV2Map();
        }

        @Override
        public Map<String, Long> getAssetV2Map() {
            return internalGetAssetV2().getMap();
        }

        @Override
        public long getAssetV2OrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetAssetV2().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getAssetV2OrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetAssetV2().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        @Override
        public int getFrozenCount() {
            return this.frozen_.size();
        }

        @Override
        public Frozen getFrozen(int i) {
            return this.frozen_.get(i);
        }

        @Override
        public FrozenOrBuilder getFrozenOrBuilder(int i) {
            return this.frozen_.get(i);
        }

        @Override
        public Frozen getTronPower() {
            Frozen frozen = this.tronPower_;
            return frozen == null ? Frozen.getDefaultInstance() : frozen;
        }

        @Override
        public FrozenOrBuilder getTronPowerOrBuilder() {
            return getTronPower();
        }

        @Override
        public int getFrozenSupplyCount() {
            return this.frozenSupply_.size();
        }

        @Override
        public Frozen getFrozenSupply(int i) {
            return this.frozenSupply_.get(i);
        }

        @Override
        public FrozenOrBuilder getFrozenSupplyOrBuilder(int i) {
            return this.frozenSupply_.get(i);
        }

        public static final class LatestAssetOperationTimeDefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_LatestAssetOperationTimeEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private LatestAssetOperationTimeDefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetLatestAssetOperationTime() {
            MapField<String, Long> mapField = this.latestAssetOperationTime_;
            return mapField == null ? MapField.emptyMapField(LatestAssetOperationTimeDefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getLatestAssetOperationTimeCount() {
            return internalGetLatestAssetOperationTime().getMap().size();
        }

        @Override
        public boolean containsLatestAssetOperationTime(String str) {
            str.getClass();
            return internalGetLatestAssetOperationTime().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getLatestAssetOperationTime() {
            return getLatestAssetOperationTimeMap();
        }

        @Override
        public Map<String, Long> getLatestAssetOperationTimeMap() {
            return internalGetLatestAssetOperationTime().getMap();
        }

        @Override
        public long getLatestAssetOperationTimeOrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetLatestAssetOperationTime().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getLatestAssetOperationTimeOrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetLatestAssetOperationTime().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        public static final class LatestAssetOperationTimeV2DefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_LatestAssetOperationTimeV2Entry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private LatestAssetOperationTimeV2DefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetLatestAssetOperationTimeV2() {
            MapField<String, Long> mapField = this.latestAssetOperationTimeV2_;
            return mapField == null ? MapField.emptyMapField(LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getLatestAssetOperationTimeV2Count() {
            return internalGetLatestAssetOperationTimeV2().getMap().size();
        }

        @Override
        public boolean containsLatestAssetOperationTimeV2(String str) {
            str.getClass();
            return internalGetLatestAssetOperationTimeV2().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getLatestAssetOperationTimeV2() {
            return getLatestAssetOperationTimeV2Map();
        }

        @Override
        public Map<String, Long> getLatestAssetOperationTimeV2Map() {
            return internalGetLatestAssetOperationTimeV2().getMap();
        }

        @Override
        public long getLatestAssetOperationTimeV2OrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetLatestAssetOperationTimeV2().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getLatestAssetOperationTimeV2OrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetLatestAssetOperationTimeV2().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        public static final class FreeAssetNetUsageDefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_FreeAssetNetUsageEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private FreeAssetNetUsageDefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetFreeAssetNetUsage() {
            MapField<String, Long> mapField = this.freeAssetNetUsage_;
            return mapField == null ? MapField.emptyMapField(FreeAssetNetUsageDefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getFreeAssetNetUsageCount() {
            return internalGetFreeAssetNetUsage().getMap().size();
        }

        @Override
        public boolean containsFreeAssetNetUsage(String str) {
            str.getClass();
            return internalGetFreeAssetNetUsage().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getFreeAssetNetUsage() {
            return getFreeAssetNetUsageMap();
        }

        @Override
        public Map<String, Long> getFreeAssetNetUsageMap() {
            return internalGetFreeAssetNetUsage().getMap();
        }

        @Override
        public long getFreeAssetNetUsageOrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetFreeAssetNetUsage().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getFreeAssetNetUsageOrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetFreeAssetNetUsage().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        public static final class FreeAssetNetUsageV2DefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Account_FreeAssetNetUsageV2Entry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private FreeAssetNetUsageV2DefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetFreeAssetNetUsageV2() {
            MapField<String, Long> mapField = this.freeAssetNetUsageV2_;
            return mapField == null ? MapField.emptyMapField(FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getFreeAssetNetUsageV2Count() {
            return internalGetFreeAssetNetUsageV2().getMap().size();
        }

        @Override
        public boolean containsFreeAssetNetUsageV2(String str) {
            str.getClass();
            return internalGetFreeAssetNetUsageV2().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getFreeAssetNetUsageV2() {
            return getFreeAssetNetUsageV2Map();
        }

        @Override
        public Map<String, Long> getFreeAssetNetUsageV2Map() {
            return internalGetFreeAssetNetUsageV2().getMap();
        }

        @Override
        public long getFreeAssetNetUsageV2OrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetFreeAssetNetUsageV2().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getFreeAssetNetUsageV2OrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetFreeAssetNetUsageV2().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        @Override
        public AccountResource getAccountResource() {
            AccountResource accountResource = this.accountResource_;
            return accountResource == null ? AccountResource.getDefaultInstance() : accountResource;
        }

        @Override
        public AccountResourceOrBuilder getAccountResourceOrBuilder() {
            return getAccountResource();
        }

        @Override
        public Permission getOwnerPermission() {
            Permission permission = this.ownerPermission_;
            return permission == null ? Permission.getDefaultInstance() : permission;
        }

        @Override
        public PermissionOrBuilder getOwnerPermissionOrBuilder() {
            return getOwnerPermission();
        }

        @Override
        public Permission getWitnessPermission() {
            Permission permission = this.witnessPermission_;
            return permission == null ? Permission.getDefaultInstance() : permission;
        }

        @Override
        public PermissionOrBuilder getWitnessPermissionOrBuilder() {
            return getWitnessPermission();
        }

        @Override
        public int getActivePermissionCount() {
            return this.activePermission_.size();
        }

        @Override
        public Permission getActivePermission(int i) {
            return this.activePermission_.get(i);
        }

        @Override
        public PermissionOrBuilder getActivePermissionOrBuilder(int i) {
            return this.activePermission_.get(i);
        }

        @Override
        public int getFrozenV2Count() {
            return this.frozenV2_.size();
        }

        @Override
        public FreezeV2 getFrozenV2(int i) {
            return this.frozenV2_.get(i);
        }

        @Override
        public FreezeV2OrBuilder getFrozenV2OrBuilder(int i) {
            return this.frozenV2_.get(i);
        }

        @Override
        public int getUnfrozenV2Count() {
            return this.unfrozenV2_.size();
        }

        @Override
        public UnFreezeV2 getUnfrozenV2(int i) {
            return this.unfrozenV2_.get(i);
        }

        @Override
        public UnFreezeV2OrBuilder getUnfrozenV2OrBuilder(int i) {
            return this.unfrozenV2_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.accountName_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.accountName_);
            }
            if (this.type_ != AccountType.Normal.getNumber()) {
                codedOutputStream.writeEnum(2, this.type_);
            }
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(3, this.address_);
            }
            long j = this.balance_;
            if (j != 0) {
                codedOutputStream.writeInt64(4, j);
            }
            for (int i = 0; i < this.votes_.size(); i++) {
                codedOutputStream.writeMessage(5, this.votes_.get(i));
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetAsset(), AssetDefaultEntryHolder.defaultEntry, 6);
            for (int i2 = 0; i2 < this.frozen_.size(); i2++) {
                codedOutputStream.writeMessage(7, this.frozen_.get(i2));
            }
            long j2 = this.netUsage_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(8, j2);
            }
            long j3 = this.createTime_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(9, j3);
            }
            long j4 = this.latestOprationTime_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(10, j4);
            }
            long j5 = this.allowance_;
            if (j5 != 0) {
                codedOutputStream.writeInt64(11, j5);
            }
            long j6 = this.latestWithdrawTime_;
            if (j6 != 0) {
                codedOutputStream.writeInt64(12, j6);
            }
            if (!this.code_.isEmpty()) {
                codedOutputStream.writeBytes(13, this.code_);
            }
            boolean z = this.isWitness_;
            if (z) {
                codedOutputStream.writeBool(14, z);
            }
            boolean z2 = this.isCommittee_;
            if (z2) {
                codedOutputStream.writeBool(15, z2);
            }
            for (int i3 = 0; i3 < this.frozenSupply_.size(); i3++) {
                codedOutputStream.writeMessage(16, this.frozenSupply_.get(i3));
            }
            if (!this.assetIssuedName_.isEmpty()) {
                codedOutputStream.writeBytes(17, this.assetIssuedName_);
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetLatestAssetOperationTime(), LatestAssetOperationTimeDefaultEntryHolder.defaultEntry, 18);
            long j7 = this.freeNetUsage_;
            if (j7 != 0) {
                codedOutputStream.writeInt64(19, j7);
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetFreeAssetNetUsage(), FreeAssetNetUsageDefaultEntryHolder.defaultEntry, 20);
            long j8 = this.latestConsumeTime_;
            if (j8 != 0) {
                codedOutputStream.writeInt64(21, j8);
            }
            long j9 = this.latestConsumeFreeTime_;
            if (j9 != 0) {
                codedOutputStream.writeInt64(22, j9);
            }
            if (!this.accountId_.isEmpty()) {
                codedOutputStream.writeBytes(23, this.accountId_);
            }
            long j10 = this.netWindowSize_;
            if (j10 != 0) {
                codedOutputStream.writeInt64(24, j10);
            }
            boolean z3 = this.netWindowOptimized_;
            if (z3) {
                codedOutputStream.writeBool(25, z3);
            }
            if (this.accountResource_ != null) {
                codedOutputStream.writeMessage(26, getAccountResource());
            }
            if (!this.codeHash_.isEmpty()) {
                codedOutputStream.writeBytes(30, this.codeHash_);
            }
            if (this.ownerPermission_ != null) {
                codedOutputStream.writeMessage(31, getOwnerPermission());
            }
            if (this.witnessPermission_ != null) {
                codedOutputStream.writeMessage(32, getWitnessPermission());
            }
            for (int i4 = 0; i4 < this.activePermission_.size(); i4++) {
                codedOutputStream.writeMessage(33, this.activePermission_.get(i4));
            }
            for (int i5 = 0; i5 < this.frozenV2_.size(); i5++) {
                codedOutputStream.writeMessage(34, this.frozenV2_.get(i5));
            }
            for (int i6 = 0; i6 < this.unfrozenV2_.size(); i6++) {
                codedOutputStream.writeMessage(35, this.unfrozenV2_.get(i6));
            }
            long j11 = this.delegatedFrozenV2BalanceForBandwidth_;
            if (j11 != 0) {
                codedOutputStream.writeInt64(36, j11);
            }
            long j12 = this.acquiredDelegatedFrozenV2BalanceForBandwidth_;
            if (j12 != 0) {
                codedOutputStream.writeInt64(37, j12);
            }
            long j13 = this.acquiredDelegatedFrozenBalanceForBandwidth_;
            if (j13 != 0) {
                codedOutputStream.writeInt64(41, j13);
            }
            long j14 = this.delegatedFrozenBalanceForBandwidth_;
            if (j14 != 0) {
                codedOutputStream.writeInt64(42, j14);
            }
            long j15 = this.oldTronPower_;
            if (j15 != 0) {
                codedOutputStream.writeInt64(46, j15);
            }
            if (this.tronPower_ != null) {
                codedOutputStream.writeMessage(47, getTronPower());
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetAssetV2(), AssetV2DefaultEntryHolder.defaultEntry, 56);
            if (!this.assetIssuedID_.isEmpty()) {
                codedOutputStream.writeBytes(57, this.assetIssuedID_);
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetLatestAssetOperationTimeV2(), LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry, 58);
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetFreeAssetNetUsageV2(), FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry, 59);
            boolean z4 = this.assetOptimized_;
            if (z4) {
                codedOutputStream.writeBool(60, z4);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.accountName_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.accountName_) : 0;
            if (this.type_ != AccountType.Normal.getNumber()) {
                computeBytesSize += CodedOutputStream.computeEnumSize(2, this.type_);
            }
            if (!this.address_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, this.address_);
            }
            long j = this.balance_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(4, j);
            }
            for (int i2 = 0; i2 < this.votes_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(5, this.votes_.get(i2));
            }
            for (Map.Entry<String, Long> entry : internalGetAsset().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(6, AssetDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build());
            }
            for (int i3 = 0; i3 < this.frozen_.size(); i3++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(7, this.frozen_.get(i3));
            }
            long j2 = this.netUsage_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(8, j2);
            }
            long j3 = this.createTime_;
            if (j3 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(9, j3);
            }
            long j4 = this.latestOprationTime_;
            if (j4 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(10, j4);
            }
            long j5 = this.allowance_;
            if (j5 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(11, j5);
            }
            long j6 = this.latestWithdrawTime_;
            if (j6 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(12, j6);
            }
            if (!this.code_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(13, this.code_);
            }
            boolean z = this.isWitness_;
            if (z) {
                computeBytesSize += CodedOutputStream.computeBoolSize(14, z);
            }
            boolean z2 = this.isCommittee_;
            if (z2) {
                computeBytesSize += CodedOutputStream.computeBoolSize(15, z2);
            }
            for (int i4 = 0; i4 < this.frozenSupply_.size(); i4++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(16, this.frozenSupply_.get(i4));
            }
            if (!this.assetIssuedName_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(17, this.assetIssuedName_);
            }
            for (Map.Entry<String, Long> entry2 : internalGetLatestAssetOperationTime().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(18, LatestAssetOperationTimeDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry2.getKey()).setValue(entry2.getValue()).build());
            }
            long j7 = this.freeNetUsage_;
            if (j7 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(19, j7);
            }
            for (Map.Entry<String, Long> entry3 : internalGetFreeAssetNetUsage().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(20, FreeAssetNetUsageDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry3.getKey()).setValue(entry3.getValue()).build());
            }
            long j8 = this.latestConsumeTime_;
            if (j8 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(21, j8);
            }
            long j9 = this.latestConsumeFreeTime_;
            if (j9 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(22, j9);
            }
            if (!this.accountId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(23, this.accountId_);
            }
            long j10 = this.netWindowSize_;
            if (j10 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(24, j10);
            }
            boolean z3 = this.netWindowOptimized_;
            if (z3) {
                computeBytesSize += CodedOutputStream.computeBoolSize(25, z3);
            }
            if (this.accountResource_ != null) {
                computeBytesSize += CodedOutputStream.computeMessageSize(26, getAccountResource());
            }
            if (!this.codeHash_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(30, this.codeHash_);
            }
            if (this.ownerPermission_ != null) {
                computeBytesSize += CodedOutputStream.computeMessageSize(31, getOwnerPermission());
            }
            if (this.witnessPermission_ != null) {
                computeBytesSize += CodedOutputStream.computeMessageSize(32, getWitnessPermission());
            }
            for (int i5 = 0; i5 < this.activePermission_.size(); i5++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(33, this.activePermission_.get(i5));
            }
            for (int i6 = 0; i6 < this.frozenV2_.size(); i6++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(34, this.frozenV2_.get(i6));
            }
            for (int i7 = 0; i7 < this.unfrozenV2_.size(); i7++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(35, this.unfrozenV2_.get(i7));
            }
            long j11 = this.delegatedFrozenV2BalanceForBandwidth_;
            if (j11 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(36, j11);
            }
            long j12 = this.acquiredDelegatedFrozenV2BalanceForBandwidth_;
            if (j12 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(37, j12);
            }
            long j13 = this.acquiredDelegatedFrozenBalanceForBandwidth_;
            if (j13 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(41, j13);
            }
            long j14 = this.delegatedFrozenBalanceForBandwidth_;
            if (j14 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(42, j14);
            }
            long j15 = this.oldTronPower_;
            if (j15 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(46, j15);
            }
            if (this.tronPower_ != null) {
                computeBytesSize += CodedOutputStream.computeMessageSize(47, getTronPower());
            }
            for (Map.Entry<String, Long> entry4 : internalGetAssetV2().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(56, AssetV2DefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry4.getKey()).setValue(entry4.getValue()).build());
            }
            if (!this.assetIssuedID_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(57, this.assetIssuedID_);
            }
            for (Map.Entry<String, Long> entry5 : internalGetLatestAssetOperationTimeV2().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(58, LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry5.getKey()).setValue(entry5.getValue()).build());
            }
            for (Map.Entry<String, Long> entry6 : internalGetFreeAssetNetUsageV2().getMap().entrySet()) {
                computeBytesSize += CodedOutputStream.computeMessageSize(59, FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry6.getKey()).setValue(entry6.getValue()).build());
            }
            boolean z4 = this.assetOptimized_;
            if (z4) {
                computeBytesSize += CodedOutputStream.computeBoolSize(60, z4);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(java.lang.Object r8) {
            


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.equals(java.lang.Object):boolean");
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAccountName().hashCode()) * 37) + 2) * 53) + this.type_) * 37) + 3) * 53) + getAddress().hashCode()) * 37) + 4) * 53) + Internal.hashLong(getBalance());
            if (getVotesCount() > 0) {
                hashCode = (((hashCode * 37) + 5) * 53) + getVotesList().hashCode();
            }
            if (!internalGetAsset().getMap().isEmpty()) {
                hashCode = (((hashCode * 37) + 6) * 53) + internalGetAsset().hashCode();
            }
            if (!internalGetAssetV2().getMap().isEmpty()) {
                hashCode = (((hashCode * 37) + 56) * 53) + internalGetAssetV2().hashCode();
            }
            if (getFrozenCount() > 0) {
                hashCode = (((hashCode * 37) + 7) * 53) + getFrozenList().hashCode();
            }
            int hashLong = (((((((((((((((hashCode * 37) + 8) * 53) + Internal.hashLong(getNetUsage())) * 37) + 41) * 53) + Internal.hashLong(getAcquiredDelegatedFrozenBalanceForBandwidth())) * 37) + 42) * 53) + Internal.hashLong(getDelegatedFrozenBalanceForBandwidth())) * 37) + 46) * 53) + Internal.hashLong(getOldTronPower());
            if (hasTronPower()) {
                hashLong = (((hashLong * 37) + 47) * 53) + getTronPower().hashCode();
            }
            int hashBoolean = (((((((((((((((((((((((((((((((hashLong * 37) + 60) * 53) + Internal.hashBoolean(getAssetOptimized())) * 37) + 9) * 53) + Internal.hashLong(getCreateTime())) * 37) + 10) * 53) + Internal.hashLong(getLatestOprationTime())) * 37) + 11) * 53) + Internal.hashLong(getAllowance())) * 37) + 12) * 53) + Internal.hashLong(getLatestWithdrawTime())) * 37) + 13) * 53) + getCode().hashCode()) * 37) + 14) * 53) + Internal.hashBoolean(getIsWitness())) * 37) + 15) * 53) + Internal.hashBoolean(getIsCommittee());
            if (getFrozenSupplyCount() > 0) {
                hashBoolean = (((hashBoolean * 37) + 16) * 53) + getFrozenSupplyList().hashCode();
            }
            int hashCode2 = (((((((hashBoolean * 37) + 17) * 53) + getAssetIssuedName().hashCode()) * 37) + 57) * 53) + getAssetIssuedID().hashCode();
            if (!internalGetLatestAssetOperationTime().getMap().isEmpty()) {
                hashCode2 = (((hashCode2 * 37) + 18) * 53) + internalGetLatestAssetOperationTime().hashCode();
            }
            if (!internalGetLatestAssetOperationTimeV2().getMap().isEmpty()) {
                hashCode2 = (((hashCode2 * 37) + 58) * 53) + internalGetLatestAssetOperationTimeV2().hashCode();
            }
            int hashLong2 = (((hashCode2 * 37) + 19) * 53) + Internal.hashLong(getFreeNetUsage());
            if (!internalGetFreeAssetNetUsage().getMap().isEmpty()) {
                hashLong2 = (((hashLong2 * 37) + 20) * 53) + internalGetFreeAssetNetUsage().hashCode();
            }
            if (!internalGetFreeAssetNetUsageV2().getMap().isEmpty()) {
                hashLong2 = (((hashLong2 * 37) + 59) * 53) + internalGetFreeAssetNetUsageV2().hashCode();
            }
            int hashLong3 = (((((((((((((((((((hashLong2 * 37) + 21) * 53) + Internal.hashLong(getLatestConsumeTime())) * 37) + 22) * 53) + Internal.hashLong(getLatestConsumeFreeTime())) * 37) + 23) * 53) + getAccountId().hashCode()) * 37) + 24) * 53) + Internal.hashLong(getNetWindowSize())) * 37) + 25) * 53) + Internal.hashBoolean(getNetWindowOptimized());
            if (hasAccountResource()) {
                hashLong3 = (((hashLong3 * 37) + 26) * 53) + getAccountResource().hashCode();
            }
            int hashCode3 = (((hashLong3 * 37) + 30) * 53) + getCodeHash().hashCode();
            if (hasOwnerPermission()) {
                hashCode3 = (((hashCode3 * 37) + 31) * 53) + getOwnerPermission().hashCode();
            }
            if (hasWitnessPermission()) {
                hashCode3 = (((hashCode3 * 37) + 32) * 53) + getWitnessPermission().hashCode();
            }
            if (getActivePermissionCount() > 0) {
                hashCode3 = (((hashCode3 * 37) + 33) * 53) + getActivePermissionList().hashCode();
            }
            if (getFrozenV2Count() > 0) {
                hashCode3 = (((hashCode3 * 37) + 34) * 53) + getFrozenV2List().hashCode();
            }
            if (getUnfrozenV2Count() > 0) {
                hashCode3 = (((hashCode3 * 37) + 35) * 53) + getUnfrozenV2List().hashCode();
            }
            int hashLong4 = (((((((((hashCode3 * 37) + 36) * 53) + Internal.hashLong(getDelegatedFrozenV2BalanceForBandwidth())) * 37) + 37) * 53) + Internal.hashLong(getAcquiredDelegatedFrozenV2BalanceForBandwidth())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashLong4;
            return hashLong4;
        }

        public static Account parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Account parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Account parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Account parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Account parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Account parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Account parseFrom(InputStream inputStream) throws IOException {
            return (Account) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Account parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Account) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Account parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Account) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Account parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Account) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Account parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Account) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Account parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Account) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Account account) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(account);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements AccountOrBuilder {
            private ByteString accountId_;
            private ByteString accountName_;
            private SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> accountResourceBuilder_;
            private AccountResource accountResource_;
            private long acquiredDelegatedFrozenBalanceForBandwidth_;
            private long acquiredDelegatedFrozenV2BalanceForBandwidth_;
            private RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> activePermissionBuilder_;
            private List<Permission> activePermission_;
            private ByteString address_;
            private long allowance_;
            private ByteString assetIssuedID_;
            private ByteString assetIssuedName_;
            private boolean assetOptimized_;
            private MapField<String, Long> assetV2_;
            private MapField<String, Long> asset_;
            private long balance_;
            private int bitField0_;
            private int bitField1_;
            private ByteString codeHash_;
            private ByteString code_;
            private long createTime_;
            private long delegatedFrozenBalanceForBandwidth_;
            private long delegatedFrozenV2BalanceForBandwidth_;
            private MapField<String, Long> freeAssetNetUsageV2_;
            private MapField<String, Long> freeAssetNetUsage_;
            private long freeNetUsage_;
            private RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> frozenBuilder_;
            private RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> frozenSupplyBuilder_;
            private List<Frozen> frozenSupply_;
            private RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> frozenV2Builder_;
            private List<FreezeV2> frozenV2_;
            private List<Frozen> frozen_;
            private boolean isCommittee_;
            private boolean isWitness_;
            private MapField<String, Long> latestAssetOperationTimeV2_;
            private MapField<String, Long> latestAssetOperationTime_;
            private long latestConsumeFreeTime_;
            private long latestConsumeTime_;
            private long latestOprationTime_;
            private long latestWithdrawTime_;
            private long netUsage_;
            private boolean netWindowOptimized_;
            private long netWindowSize_;
            private long oldTronPower_;
            private SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> ownerPermissionBuilder_;
            private Permission ownerPermission_;
            private SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> tronPowerBuilder_;
            private Frozen tronPower_;
            private int type_;
            private RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> unfrozenV2Builder_;
            private List<UnFreezeV2> unfrozenV2_;
            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> votesBuilder_;
            private List<Vote> votes_;
            private SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> witnessPermissionBuilder_;
            private Permission witnessPermission_;

            @Override
            public ByteString getAccountId() {
                return this.accountId_;
            }

            @Override
            public ByteString getAccountName() {
                return this.accountName_;
            }

            @Override
            public long getAcquiredDelegatedFrozenBalanceForBandwidth() {
                return this.acquiredDelegatedFrozenBalanceForBandwidth_;
            }

            @Override
            public long getAcquiredDelegatedFrozenV2BalanceForBandwidth() {
                return this.acquiredDelegatedFrozenV2BalanceForBandwidth_;
            }

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public long getAllowance() {
                return this.allowance_;
            }

            @Override
            public ByteString getAssetIssuedID() {
                return this.assetIssuedID_;
            }

            @Override
            public ByteString getAssetIssuedName() {
                return this.assetIssuedName_;
            }

            @Override
            public boolean getAssetOptimized() {
                return this.assetOptimized_;
            }

            @Override
            public long getBalance() {
                return this.balance_;
            }

            @Override
            public ByteString getCode() {
                return this.code_;
            }

            @Override
            public ByteString getCodeHash() {
                return this.codeHash_;
            }

            @Override
            public long getCreateTime() {
                return this.createTime_;
            }

            @Override
            public long getDelegatedFrozenBalanceForBandwidth() {
                return this.delegatedFrozenBalanceForBandwidth_;
            }

            @Override
            public long getDelegatedFrozenV2BalanceForBandwidth() {
                return this.delegatedFrozenV2BalanceForBandwidth_;
            }

            @Override
            public long getFreeNetUsage() {
                return this.freeNetUsage_;
            }

            @Override
            public boolean getIsCommittee() {
                return this.isCommittee_;
            }

            @Override
            public boolean getIsWitness() {
                return this.isWitness_;
            }

            @Override
            public long getLatestConsumeFreeTime() {
                return this.latestConsumeFreeTime_;
            }

            @Override
            public long getLatestConsumeTime() {
                return this.latestConsumeTime_;
            }

            @Override
            public long getLatestOprationTime() {
                return this.latestOprationTime_;
            }

            @Override
            public long getLatestWithdrawTime() {
                return this.latestWithdrawTime_;
            }

            @Override
            public long getNetUsage() {
                return this.netUsage_;
            }

            @Override
            public boolean getNetWindowOptimized() {
                return this.netWindowOptimized_;
            }

            @Override
            public long getNetWindowSize() {
                return this.netWindowSize_;
            }

            @Override
            public long getOldTronPower() {
                return this.oldTronPower_;
            }

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public boolean hasAccountResource() {
                return (this.accountResourceBuilder_ == null && this.accountResource_ == null) ? false : true;
            }

            @Override
            public boolean hasOwnerPermission() {
                return (this.ownerPermissionBuilder_ == null && this.ownerPermission_ == null) ? false : true;
            }

            @Override
            public boolean hasTronPower() {
                return (this.tronPowerBuilder_ == null && this.tronPower_ == null) ? false : true;
            }

            @Override
            public boolean hasWitnessPermission() {
                return (this.witnessPermissionBuilder_ == null && this.witnessPermission_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Account_descriptor;
            }

            @Override
            protected MapField internalGetMapField(int i) {
                if (i != 6) {
                    if (i != 18) {
                        if (i != 20) {
                            if (i != 56) {
                                if (i != 58) {
                                    if (i == 59) {
                                        return internalGetFreeAssetNetUsageV2();
                                    }
                                    throw new RuntimeException("Invalid map field number: " + i);
                                }
                                return internalGetLatestAssetOperationTimeV2();
                            }
                            return internalGetAssetV2();
                        }
                        return internalGetFreeAssetNetUsage();
                    }
                    return internalGetLatestAssetOperationTime();
                }
                return internalGetAsset();
            }

            @Override
            protected MapField internalGetMutableMapField(int i) {
                if (i != 6) {
                    if (i != 18) {
                        if (i != 20) {
                            if (i != 56) {
                                if (i != 58) {
                                    if (i == 59) {
                                        return internalGetMutableFreeAssetNetUsageV2();
                                    }
                                    throw new RuntimeException("Invalid map field number: " + i);
                                }
                                return internalGetMutableLatestAssetOperationTimeV2();
                            }
                            return internalGetMutableAssetV2();
                        }
                        return internalGetMutableFreeAssetNetUsage();
                    }
                    return internalGetMutableLatestAssetOperationTime();
                }
                return internalGetMutableAsset();
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Account_fieldAccessorTable.ensureFieldAccessorsInitialized(Account.class, Builder.class);
            }

            private Builder() {
                this.accountName_ = ByteString.EMPTY;
                this.type_ = 0;
                this.address_ = ByteString.EMPTY;
                this.votes_ = Collections.emptyList();
                this.frozen_ = Collections.emptyList();
                this.tronPower_ = null;
                this.code_ = ByteString.EMPTY;
                this.frozenSupply_ = Collections.emptyList();
                this.assetIssuedName_ = ByteString.EMPTY;
                this.assetIssuedID_ = ByteString.EMPTY;
                this.accountId_ = ByteString.EMPTY;
                this.accountResource_ = null;
                this.codeHash_ = ByteString.EMPTY;
                this.ownerPermission_ = null;
                this.witnessPermission_ = null;
                this.activePermission_ = Collections.emptyList();
                this.frozenV2_ = Collections.emptyList();
                this.unfrozenV2_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.accountName_ = ByteString.EMPTY;
                this.type_ = 0;
                this.address_ = ByteString.EMPTY;
                this.votes_ = Collections.emptyList();
                this.frozen_ = Collections.emptyList();
                this.tronPower_ = null;
                this.code_ = ByteString.EMPTY;
                this.frozenSupply_ = Collections.emptyList();
                this.assetIssuedName_ = ByteString.EMPTY;
                this.assetIssuedID_ = ByteString.EMPTY;
                this.accountId_ = ByteString.EMPTY;
                this.accountResource_ = null;
                this.codeHash_ = ByteString.EMPTY;
                this.ownerPermission_ = null;
                this.witnessPermission_ = null;
                this.activePermission_ = Collections.emptyList();
                this.frozenV2_ = Collections.emptyList();
                this.unfrozenV2_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Account.alwaysUseFieldBuilders) {
                    getVotesFieldBuilder();
                    getFrozenFieldBuilder();
                    getFrozenSupplyFieldBuilder();
                    getActivePermissionFieldBuilder();
                    getFrozenV2FieldBuilder();
                    getUnfrozenV2FieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.accountName_ = ByteString.EMPTY;
                this.type_ = 0;
                this.address_ = ByteString.EMPTY;
                this.balance_ = 0L;
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.votes_ = Collections.emptyList();
                    this.bitField0_ &= -17;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                internalGetMutableAsset().clear();
                internalGetMutableAssetV2().clear();
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV32 = this.frozenBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    this.frozen_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                } else {
                    repeatedFieldBuilderV32.clear();
                }
                this.netUsage_ = 0L;
                this.acquiredDelegatedFrozenBalanceForBandwidth_ = 0L;
                this.delegatedFrozenBalanceForBandwidth_ = 0L;
                this.oldTronPower_ = 0L;
                if (this.tronPowerBuilder_ == null) {
                    this.tronPower_ = null;
                } else {
                    this.tronPower_ = null;
                    this.tronPowerBuilder_ = null;
                }
                this.assetOptimized_ = false;
                this.createTime_ = 0L;
                this.latestOprationTime_ = 0L;
                this.allowance_ = 0L;
                this.latestWithdrawTime_ = 0L;
                this.code_ = ByteString.EMPTY;
                this.isWitness_ = false;
                this.isCommittee_ = false;
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV33 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    this.frozenSupply_ = Collections.emptyList();
                    this.bitField0_ &= -2097153;
                } else {
                    repeatedFieldBuilderV33.clear();
                }
                this.assetIssuedName_ = ByteString.EMPTY;
                this.assetIssuedID_ = ByteString.EMPTY;
                internalGetMutableLatestAssetOperationTime().clear();
                internalGetMutableLatestAssetOperationTimeV2().clear();
                this.freeNetUsage_ = 0L;
                internalGetMutableFreeAssetNetUsage().clear();
                internalGetMutableFreeAssetNetUsageV2().clear();
                this.latestConsumeTime_ = 0L;
                this.latestConsumeFreeTime_ = 0L;
                this.accountId_ = ByteString.EMPTY;
                this.netWindowSize_ = 0L;
                this.netWindowOptimized_ = false;
                if (this.accountResourceBuilder_ == null) {
                    this.accountResource_ = null;
                } else {
                    this.accountResource_ = null;
                    this.accountResourceBuilder_ = null;
                }
                this.codeHash_ = ByteString.EMPTY;
                if (this.ownerPermissionBuilder_ == null) {
                    this.ownerPermission_ = null;
                } else {
                    this.ownerPermission_ = null;
                    this.ownerPermissionBuilder_ = null;
                }
                if (this.witnessPermissionBuilder_ == null) {
                    this.witnessPermission_ = null;
                } else {
                    this.witnessPermission_ = null;
                    this.witnessPermissionBuilder_ = null;
                }
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV34 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV34 == null) {
                    this.activePermission_ = Collections.emptyList();
                    this.bitField1_ &= -65;
                } else {
                    repeatedFieldBuilderV34.clear();
                }
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV35 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV35 == null) {
                    this.frozenV2_ = Collections.emptyList();
                    this.bitField1_ &= -129;
                } else {
                    repeatedFieldBuilderV35.clear();
                }
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV36 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV36 == null) {
                    this.unfrozenV2_ = Collections.emptyList();
                    this.bitField1_ &= -257;
                } else {
                    repeatedFieldBuilderV36.clear();
                }
                this.delegatedFrozenV2BalanceForBandwidth_ = 0L;
                this.acquiredDelegatedFrozenV2BalanceForBandwidth_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Account_descriptor;
            }

            @Override
            public Account getDefaultInstanceForType() {
                return Account.getDefaultInstance();
            }

            @Override
            public Account build() {
                Account buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Account buildPartial() {
                Account account = new Account(this);
                account.accountName_ = this.accountName_;
                account.type_ = this.type_;
                account.address_ = this.address_;
                account.balance_ = this.balance_;
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 16) == 16) {
                        this.votes_ = Collections.unmodifiableList(this.votes_);
                        this.bitField0_ &= -17;
                    }
                    account.votes_ = this.votes_;
                } else {
                    account.votes_ = repeatedFieldBuilderV3.build();
                }
                account.asset_ = internalGetAsset();
                account.asset_.makeImmutable();
                account.assetV2_ = internalGetAssetV2();
                account.assetV2_.makeImmutable();
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV32 = this.frozenBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    if ((this.bitField0_ & 128) == 128) {
                        this.frozen_ = Collections.unmodifiableList(this.frozen_);
                        this.bitField0_ &= -129;
                    }
                    account.frozen_ = this.frozen_;
                } else {
                    account.frozen_ = repeatedFieldBuilderV32.build();
                }
                account.netUsage_ = this.netUsage_;
                account.acquiredDelegatedFrozenBalanceForBandwidth_ = this.acquiredDelegatedFrozenBalanceForBandwidth_;
                account.delegatedFrozenBalanceForBandwidth_ = this.delegatedFrozenBalanceForBandwidth_;
                account.oldTronPower_ = this.oldTronPower_;
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 == null) {
                    account.tronPower_ = this.tronPower_;
                } else {
                    account.tronPower_ = singleFieldBuilderV3.build();
                }
                account.assetOptimized_ = this.assetOptimized_;
                account.createTime_ = this.createTime_;
                account.latestOprationTime_ = this.latestOprationTime_;
                account.allowance_ = this.allowance_;
                account.latestWithdrawTime_ = this.latestWithdrawTime_;
                account.code_ = this.code_;
                account.isWitness_ = this.isWitness_;
                account.isCommittee_ = this.isCommittee_;
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV33 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    if ((this.bitField0_ & 2097152) == 2097152) {
                        this.frozenSupply_ = Collections.unmodifiableList(this.frozenSupply_);
                        this.bitField0_ &= -2097153;
                    }
                    account.frozenSupply_ = this.frozenSupply_;
                } else {
                    account.frozenSupply_ = repeatedFieldBuilderV33.build();
                }
                account.assetIssuedName_ = this.assetIssuedName_;
                account.assetIssuedID_ = this.assetIssuedID_;
                account.latestAssetOperationTime_ = internalGetLatestAssetOperationTime();
                account.latestAssetOperationTime_.makeImmutable();
                account.latestAssetOperationTimeV2_ = internalGetLatestAssetOperationTimeV2();
                account.latestAssetOperationTimeV2_.makeImmutable();
                account.freeNetUsage_ = this.freeNetUsage_;
                account.freeAssetNetUsage_ = internalGetFreeAssetNetUsage();
                account.freeAssetNetUsage_.makeImmutable();
                account.freeAssetNetUsageV2_ = internalGetFreeAssetNetUsageV2();
                account.freeAssetNetUsageV2_.makeImmutable();
                account.latestConsumeTime_ = this.latestConsumeTime_;
                account.latestConsumeFreeTime_ = this.latestConsumeFreeTime_;
                account.accountId_ = this.accountId_;
                account.netWindowSize_ = this.netWindowSize_;
                account.netWindowOptimized_ = this.netWindowOptimized_;
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV32 = this.accountResourceBuilder_;
                if (singleFieldBuilderV32 == null) {
                    account.accountResource_ = this.accountResource_;
                } else {
                    account.accountResource_ = singleFieldBuilderV32.build();
                }
                account.codeHash_ = this.codeHash_;
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV33 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV33 == null) {
                    account.ownerPermission_ = this.ownerPermission_;
                } else {
                    account.ownerPermission_ = singleFieldBuilderV33.build();
                }
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV34 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV34 == null) {
                    account.witnessPermission_ = this.witnessPermission_;
                } else {
                    account.witnessPermission_ = singleFieldBuilderV34.build();
                }
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV34 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV34 == null) {
                    if ((this.bitField1_ & 64) == 64) {
                        this.activePermission_ = Collections.unmodifiableList(this.activePermission_);
                        this.bitField1_ &= -65;
                    }
                    account.activePermission_ = this.activePermission_;
                } else {
                    account.activePermission_ = repeatedFieldBuilderV34.build();
                }
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV35 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV35 == null) {
                    if ((this.bitField1_ & 128) == 128) {
                        this.frozenV2_ = Collections.unmodifiableList(this.frozenV2_);
                        this.bitField1_ &= -129;
                    }
                    account.frozenV2_ = this.frozenV2_;
                } else {
                    account.frozenV2_ = repeatedFieldBuilderV35.build();
                }
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV36 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV36 == null) {
                    if ((this.bitField1_ & 256) == 256) {
                        this.unfrozenV2_ = Collections.unmodifiableList(this.unfrozenV2_);
                        this.bitField1_ &= -257;
                    }
                    account.unfrozenV2_ = this.unfrozenV2_;
                } else {
                    account.unfrozenV2_ = repeatedFieldBuilderV36.build();
                }
                account.delegatedFrozenV2BalanceForBandwidth_ = this.delegatedFrozenV2BalanceForBandwidth_;
                account.acquiredDelegatedFrozenV2BalanceForBandwidth_ = this.acquiredDelegatedFrozenV2BalanceForBandwidth_;
                account.bitField0_ = 0;
                onBuilt();
                return account;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Account) {
                    return mergeFrom((Account) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Account account) {
                if (account == Account.getDefaultInstance()) {
                    return this;
                }
                if (account.getAccountName() != ByteString.EMPTY) {
                    setAccountName(account.getAccountName());
                }
                if (account.type_ != 0) {
                    setTypeValue(account.getTypeValue());
                }
                if (account.getAddress() != ByteString.EMPTY) {
                    setAddress(account.getAddress());
                }
                if (account.getBalance() != 0) {
                    setBalance(account.getBalance());
                }
                if (this.votesBuilder_ == null) {
                    if (!account.votes_.isEmpty()) {
                        if (this.votes_.isEmpty()) {
                            this.votes_ = account.votes_;
                            this.bitField0_ &= -17;
                        } else {
                            ensureVotesIsMutable();
                            this.votes_.addAll(account.votes_);
                        }
                        onChanged();
                    }
                } else if (!account.votes_.isEmpty()) {
                    if (!this.votesBuilder_.isEmpty()) {
                        this.votesBuilder_.addAllMessages(account.votes_);
                    } else {
                        this.votesBuilder_.dispose();
                        this.votesBuilder_ = null;
                        this.votes_ = account.votes_;
                        this.bitField0_ &= -17;
                        this.votesBuilder_ = Account.alwaysUseFieldBuilders ? getVotesFieldBuilder() : null;
                    }
                }
                internalGetMutableAsset().mergeFrom(account.internalGetAsset());
                internalGetMutableAssetV2().mergeFrom(account.internalGetAssetV2());
                if (this.frozenBuilder_ == null) {
                    if (!account.frozen_.isEmpty()) {
                        if (this.frozen_.isEmpty()) {
                            this.frozen_ = account.frozen_;
                            this.bitField0_ &= -129;
                        } else {
                            ensureFrozenIsMutable();
                            this.frozen_.addAll(account.frozen_);
                        }
                        onChanged();
                    }
                } else if (!account.frozen_.isEmpty()) {
                    if (!this.frozenBuilder_.isEmpty()) {
                        this.frozenBuilder_.addAllMessages(account.frozen_);
                    } else {
                        this.frozenBuilder_.dispose();
                        this.frozenBuilder_ = null;
                        this.frozen_ = account.frozen_;
                        this.bitField0_ &= -129;
                        this.frozenBuilder_ = Account.alwaysUseFieldBuilders ? getFrozenFieldBuilder() : null;
                    }
                }
                if (account.getNetUsage() != 0) {
                    setNetUsage(account.getNetUsage());
                }
                if (account.getAcquiredDelegatedFrozenBalanceForBandwidth() != 0) {
                    setAcquiredDelegatedFrozenBalanceForBandwidth(account.getAcquiredDelegatedFrozenBalanceForBandwidth());
                }
                if (account.getDelegatedFrozenBalanceForBandwidth() != 0) {
                    setDelegatedFrozenBalanceForBandwidth(account.getDelegatedFrozenBalanceForBandwidth());
                }
                if (account.getOldTronPower() != 0) {
                    setOldTronPower(account.getOldTronPower());
                }
                if (account.hasTronPower()) {
                    mergeTronPower(account.getTronPower());
                }
                if (account.getAssetOptimized()) {
                    setAssetOptimized(account.getAssetOptimized());
                }
                if (account.getCreateTime() != 0) {
                    setCreateTime(account.getCreateTime());
                }
                if (account.getLatestOprationTime() != 0) {
                    setLatestOprationTime(account.getLatestOprationTime());
                }
                if (account.getAllowance() != 0) {
                    setAllowance(account.getAllowance());
                }
                if (account.getLatestWithdrawTime() != 0) {
                    setLatestWithdrawTime(account.getLatestWithdrawTime());
                }
                if (account.getCode() != ByteString.EMPTY) {
                    setCode(account.getCode());
                }
                if (account.getIsWitness()) {
                    setIsWitness(account.getIsWitness());
                }
                if (account.getIsCommittee()) {
                    setIsCommittee(account.getIsCommittee());
                }
                if (this.frozenSupplyBuilder_ == null) {
                    if (!account.frozenSupply_.isEmpty()) {
                        if (this.frozenSupply_.isEmpty()) {
                            this.frozenSupply_ = account.frozenSupply_;
                            this.bitField0_ &= -2097153;
                        } else {
                            ensureFrozenSupplyIsMutable();
                            this.frozenSupply_.addAll(account.frozenSupply_);
                        }
                        onChanged();
                    }
                } else if (!account.frozenSupply_.isEmpty()) {
                    if (!this.frozenSupplyBuilder_.isEmpty()) {
                        this.frozenSupplyBuilder_.addAllMessages(account.frozenSupply_);
                    } else {
                        this.frozenSupplyBuilder_.dispose();
                        this.frozenSupplyBuilder_ = null;
                        this.frozenSupply_ = account.frozenSupply_;
                        this.bitField0_ &= -2097153;
                        this.frozenSupplyBuilder_ = Account.alwaysUseFieldBuilders ? getFrozenSupplyFieldBuilder() : null;
                    }
                }
                if (account.getAssetIssuedName() != ByteString.EMPTY) {
                    setAssetIssuedName(account.getAssetIssuedName());
                }
                if (account.getAssetIssuedID() != ByteString.EMPTY) {
                    setAssetIssuedID(account.getAssetIssuedID());
                }
                internalGetMutableLatestAssetOperationTime().mergeFrom(account.internalGetLatestAssetOperationTime());
                internalGetMutableLatestAssetOperationTimeV2().mergeFrom(account.internalGetLatestAssetOperationTimeV2());
                if (account.getFreeNetUsage() != 0) {
                    setFreeNetUsage(account.getFreeNetUsage());
                }
                internalGetMutableFreeAssetNetUsage().mergeFrom(account.internalGetFreeAssetNetUsage());
                internalGetMutableFreeAssetNetUsageV2().mergeFrom(account.internalGetFreeAssetNetUsageV2());
                if (account.getLatestConsumeTime() != 0) {
                    setLatestConsumeTime(account.getLatestConsumeTime());
                }
                if (account.getLatestConsumeFreeTime() != 0) {
                    setLatestConsumeFreeTime(account.getLatestConsumeFreeTime());
                }
                if (account.getAccountId() != ByteString.EMPTY) {
                    setAccountId(account.getAccountId());
                }
                if (account.getNetWindowSize() != 0) {
                    setNetWindowSize(account.getNetWindowSize());
                }
                if (account.getNetWindowOptimized()) {
                    setNetWindowOptimized(account.getNetWindowOptimized());
                }
                if (account.hasAccountResource()) {
                    mergeAccountResource(account.getAccountResource());
                }
                if (account.getCodeHash() != ByteString.EMPTY) {
                    setCodeHash(account.getCodeHash());
                }
                if (account.hasOwnerPermission()) {
                    mergeOwnerPermission(account.getOwnerPermission());
                }
                if (account.hasWitnessPermission()) {
                    mergeWitnessPermission(account.getWitnessPermission());
                }
                if (this.activePermissionBuilder_ == null) {
                    if (!account.activePermission_.isEmpty()) {
                        if (this.activePermission_.isEmpty()) {
                            this.activePermission_ = account.activePermission_;
                            this.bitField1_ &= -65;
                        } else {
                            ensureActivePermissionIsMutable();
                            this.activePermission_.addAll(account.activePermission_);
                        }
                        onChanged();
                    }
                } else if (!account.activePermission_.isEmpty()) {
                    if (!this.activePermissionBuilder_.isEmpty()) {
                        this.activePermissionBuilder_.addAllMessages(account.activePermission_);
                    } else {
                        this.activePermissionBuilder_.dispose();
                        this.activePermissionBuilder_ = null;
                        this.activePermission_ = account.activePermission_;
                        this.bitField1_ &= -65;
                        this.activePermissionBuilder_ = Account.alwaysUseFieldBuilders ? getActivePermissionFieldBuilder() : null;
                    }
                }
                if (this.frozenV2Builder_ == null) {
                    if (!account.frozenV2_.isEmpty()) {
                        if (this.frozenV2_.isEmpty()) {
                            this.frozenV2_ = account.frozenV2_;
                            this.bitField1_ &= -129;
                        } else {
                            ensureFrozenV2IsMutable();
                            this.frozenV2_.addAll(account.frozenV2_);
                        }
                        onChanged();
                    }
                } else if (!account.frozenV2_.isEmpty()) {
                    if (!this.frozenV2Builder_.isEmpty()) {
                        this.frozenV2Builder_.addAllMessages(account.frozenV2_);
                    } else {
                        this.frozenV2Builder_.dispose();
                        this.frozenV2Builder_ = null;
                        this.frozenV2_ = account.frozenV2_;
                        this.bitField1_ &= -129;
                        this.frozenV2Builder_ = Account.alwaysUseFieldBuilders ? getFrozenV2FieldBuilder() : null;
                    }
                }
                if (this.unfrozenV2Builder_ == null) {
                    if (!account.unfrozenV2_.isEmpty()) {
                        if (this.unfrozenV2_.isEmpty()) {
                            this.unfrozenV2_ = account.unfrozenV2_;
                            this.bitField1_ &= -257;
                        } else {
                            ensureUnfrozenV2IsMutable();
                            this.unfrozenV2_.addAll(account.unfrozenV2_);
                        }
                        onChanged();
                    }
                } else if (!account.unfrozenV2_.isEmpty()) {
                    if (!this.unfrozenV2Builder_.isEmpty()) {
                        this.unfrozenV2Builder_.addAllMessages(account.unfrozenV2_);
                    } else {
                        this.unfrozenV2Builder_.dispose();
                        this.unfrozenV2Builder_ = null;
                        this.unfrozenV2_ = account.unfrozenV2_;
                        this.bitField1_ &= -257;
                        this.unfrozenV2Builder_ = Account.alwaysUseFieldBuilders ? getUnfrozenV2FieldBuilder() : null;
                    }
                }
                if (account.getDelegatedFrozenV2BalanceForBandwidth() != 0) {
                    setDelegatedFrozenV2BalanceForBandwidth(account.getDelegatedFrozenV2BalanceForBandwidth());
                }
                if (account.getAcquiredDelegatedFrozenV2BalanceForBandwidth() != 0) {
                    setAcquiredDelegatedFrozenV2BalanceForBandwidth(account.getAcquiredDelegatedFrozenV2BalanceForBandwidth());
                }
                mergeUnknownFields(account.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Account.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Account.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Account$Builder");
            }

            public Builder setAccountName(ByteString byteString) {
                byteString.getClass();
                this.accountName_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAccountName() {
                this.accountName_ = Account.getDefaultInstance().getAccountName();
                onChanged();
                return this;
            }

            public Builder setTypeValue(int i) {
                this.type_ = i;
                onChanged();
                return this;
            }

            @Override
            public AccountType getType() {
                AccountType valueOf = AccountType.valueOf(this.type_);
                return valueOf == null ? AccountType.UNRECOGNIZED : valueOf;
            }

            public Builder setType(AccountType accountType) {
                accountType.getClass();
                this.type_ = accountType.getNumber();
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.type_ = 0;
                onChanged();
                return this;
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = Account.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            public Builder setBalance(long j) {
                this.balance_ = j;
                onChanged();
                return this;
            }

            public Builder clearBalance() {
                this.balance_ = 0L;
                onChanged();
                return this;
            }

            private void ensureVotesIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.votes_ = new ArrayList(this.votes_);
                    this.bitField0_ |= 16;
                }
            }

            @Override
            public List<Vote> getVotesList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.votes_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getVotesCount() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.votes_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Vote getVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.votes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureVotesIsMutable();
                    this.votes_.set(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, vote);
                }
                return this;
            }

            public Builder setVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureVotesIsMutable();
                    this.votes_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addVotes(Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureVotesIsMutable();
                    this.votes_.add(vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(vote);
                }
                return this;
            }

            public Builder addVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureVotesIsMutable();
                    this.votes_.add(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, vote);
                }
                return this;
            }

            public Builder addVotes(Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureVotesIsMutable();
                    this.votes_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureVotesIsMutable();
                    this.votes_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllVotes(Iterable<? extends Vote> iterable) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureVotesIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.votes_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearVotes() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.votes_ = Collections.emptyList();
                    this.bitField0_ &= -17;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureVotesIsMutable();
                    this.votes_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Vote.Builder getVotesBuilder(int i) {
                return getVotesFieldBuilder().getBuilder(i);
            }

            @Override
            public VoteOrBuilder getVotesOrBuilder(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.votes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends VoteOrBuilder> getVotesOrBuilderList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.votesBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.votes_);
            }

            public Vote.Builder addVotesBuilder() {
                return getVotesFieldBuilder().addBuilder(Vote.getDefaultInstance());
            }

            public Vote.Builder addVotesBuilder(int i) {
                return getVotesFieldBuilder().addBuilder(i, Vote.getDefaultInstance());
            }

            public List<Vote.Builder> getVotesBuilderList() {
                return getVotesFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> getVotesFieldBuilder() {
                if (this.votesBuilder_ == null) {
                    this.votesBuilder_ = new RepeatedFieldBuilderV3<>(this.votes_, (this.bitField0_ & 16) == 16, getParentForChildren(), isClean());
                    this.votes_ = null;
                }
                return this.votesBuilder_;
            }

            private MapField<String, Long> internalGetAsset() {
                MapField<String, Long> mapField = this.asset_;
                return mapField == null ? MapField.emptyMapField(AssetDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableAsset() {
                onChanged();
                if (this.asset_ == null) {
                    this.asset_ = MapField.newMapField(AssetDefaultEntryHolder.defaultEntry);
                }
                if (!this.asset_.isMutable()) {
                    this.asset_ = this.asset_.copy();
                }
                return this.asset_;
            }

            @Override
            public int getAssetCount() {
                return internalGetAsset().getMap().size();
            }

            @Override
            public boolean containsAsset(String str) {
                str.getClass();
                return internalGetAsset().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getAsset() {
                return getAssetMap();
            }

            @Override
            public Map<String, Long> getAssetMap() {
                return internalGetAsset().getMap();
            }

            @Override
            public long getAssetOrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetAsset().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getAssetOrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetAsset().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearAsset() {
                internalGetMutableAsset().getMutableMap().clear();
                return this;
            }

            public Builder removeAsset(String str) {
                str.getClass();
                internalGetMutableAsset().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableAsset() {
                return internalGetMutableAsset().getMutableMap();
            }

            public Builder putAsset(String str, long j) {
                str.getClass();
                internalGetMutableAsset().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllAsset(Map<String, Long> map) {
                internalGetMutableAsset().getMutableMap().putAll(map);
                return this;
            }

            private MapField<String, Long> internalGetAssetV2() {
                MapField<String, Long> mapField = this.assetV2_;
                return mapField == null ? MapField.emptyMapField(AssetV2DefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableAssetV2() {
                onChanged();
                if (this.assetV2_ == null) {
                    this.assetV2_ = MapField.newMapField(AssetV2DefaultEntryHolder.defaultEntry);
                }
                if (!this.assetV2_.isMutable()) {
                    this.assetV2_ = this.assetV2_.copy();
                }
                return this.assetV2_;
            }

            @Override
            public int getAssetV2Count() {
                return internalGetAssetV2().getMap().size();
            }

            @Override
            public boolean containsAssetV2(String str) {
                str.getClass();
                return internalGetAssetV2().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getAssetV2() {
                return getAssetV2Map();
            }

            @Override
            public Map<String, Long> getAssetV2Map() {
                return internalGetAssetV2().getMap();
            }

            @Override
            public long getAssetV2OrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetAssetV2().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getAssetV2OrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetAssetV2().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearAssetV2() {
                internalGetMutableAssetV2().getMutableMap().clear();
                return this;
            }

            public Builder removeAssetV2(String str) {
                str.getClass();
                internalGetMutableAssetV2().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableAssetV2() {
                return internalGetMutableAssetV2().getMutableMap();
            }

            public Builder putAssetV2(String str, long j) {
                str.getClass();
                internalGetMutableAssetV2().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllAssetV2(Map<String, Long> map) {
                internalGetMutableAssetV2().getMutableMap().putAll(map);
                return this;
            }

            private void ensureFrozenIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.frozen_ = new ArrayList(this.frozen_);
                    this.bitField0_ |= 128;
                }
            }

            @Override
            public List<Frozen> getFrozenList() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.frozen_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getFrozenCount() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozen_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Frozen getFrozen(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozen_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setFrozen(int i, Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenIsMutable();
                    this.frozen_.set(i, frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, frozen);
                }
                return this;
            }

            public Builder setFrozen(int i, Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenIsMutable();
                    this.frozen_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addFrozen(Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenIsMutable();
                    this.frozen_.add(frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(frozen);
                }
                return this;
            }

            public Builder addFrozen(int i, Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenIsMutable();
                    this.frozen_.add(i, frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, frozen);
                }
                return this;
            }

            public Builder addFrozen(Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenIsMutable();
                    this.frozen_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addFrozen(int i, Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenIsMutable();
                    this.frozen_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllFrozen(Iterable<? extends Frozen> iterable) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.frozen_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearFrozen() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.frozen_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeFrozen(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenIsMutable();
                    this.frozen_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Frozen.Builder getFrozenBuilder(int i) {
                return getFrozenFieldBuilder().getBuilder(i);
            }

            @Override
            public FrozenOrBuilder getFrozenOrBuilder(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozen_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends FrozenOrBuilder> getFrozenOrBuilderList() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.frozen_);
            }

            public Frozen.Builder addFrozenBuilder() {
                return getFrozenFieldBuilder().addBuilder(Frozen.getDefaultInstance());
            }

            public Frozen.Builder addFrozenBuilder(int i) {
                return getFrozenFieldBuilder().addBuilder(i, Frozen.getDefaultInstance());
            }

            public List<Frozen.Builder> getFrozenBuilderList() {
                return getFrozenFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> getFrozenFieldBuilder() {
                if (this.frozenBuilder_ == null) {
                    this.frozenBuilder_ = new RepeatedFieldBuilderV3<>(this.frozen_, (this.bitField0_ & 128) == 128, getParentForChildren(), isClean());
                    this.frozen_ = null;
                }
                return this.frozenBuilder_;
            }

            public Builder setNetUsage(long j) {
                this.netUsage_ = j;
                onChanged();
                return this;
            }

            public Builder clearNetUsage() {
                this.netUsage_ = 0L;
                onChanged();
                return this;
            }

            public Builder setAcquiredDelegatedFrozenBalanceForBandwidth(long j) {
                this.acquiredDelegatedFrozenBalanceForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearAcquiredDelegatedFrozenBalanceForBandwidth() {
                this.acquiredDelegatedFrozenBalanceForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            public Builder setDelegatedFrozenBalanceForBandwidth(long j) {
                this.delegatedFrozenBalanceForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearDelegatedFrozenBalanceForBandwidth() {
                this.delegatedFrozenBalanceForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            public Builder setOldTronPower(long j) {
                this.oldTronPower_ = j;
                onChanged();
                return this;
            }

            public Builder clearOldTronPower() {
                this.oldTronPower_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public Frozen getTronPower() {
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Frozen frozen = this.tronPower_;
                    return frozen == null ? Frozen.getDefaultInstance() : frozen;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setTronPower(Frozen frozen) {
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 == null) {
                    frozen.getClass();
                    this.tronPower_ = frozen;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(frozen);
                }
                return this;
            }

            public Builder setTronPower(Frozen.Builder builder) {
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.tronPower_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeTronPower(Frozen frozen) {
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Frozen frozen2 = this.tronPower_;
                    if (frozen2 != null) {
                        this.tronPower_ = Frozen.newBuilder(frozen2).mergeFrom(frozen).buildPartial();
                    } else {
                        this.tronPower_ = frozen;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(frozen);
                }
                return this;
            }

            public Builder clearTronPower() {
                if (this.tronPowerBuilder_ == null) {
                    this.tronPower_ = null;
                    onChanged();
                } else {
                    this.tronPower_ = null;
                    this.tronPowerBuilder_ = null;
                }
                return this;
            }

            public Frozen.Builder getTronPowerBuilder() {
                onChanged();
                return getTronPowerFieldBuilder().getBuilder();
            }

            @Override
            public FrozenOrBuilder getTronPowerOrBuilder() {
                SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> singleFieldBuilderV3 = this.tronPowerBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                Frozen frozen = this.tronPower_;
                return frozen == null ? Frozen.getDefaultInstance() : frozen;
            }

            private SingleFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> getTronPowerFieldBuilder() {
                if (this.tronPowerBuilder_ == null) {
                    this.tronPowerBuilder_ = new SingleFieldBuilderV3<>(getTronPower(), getParentForChildren(), isClean());
                    this.tronPower_ = null;
                }
                return this.tronPowerBuilder_;
            }

            public Builder setAssetOptimized(boolean z) {
                this.assetOptimized_ = z;
                onChanged();
                return this;
            }

            public Builder clearAssetOptimized() {
                this.assetOptimized_ = false;
                onChanged();
                return this;
            }

            public Builder setCreateTime(long j) {
                this.createTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearCreateTime() {
                this.createTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setLatestOprationTime(long j) {
                this.latestOprationTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestOprationTime() {
                this.latestOprationTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setAllowance(long j) {
                this.allowance_ = j;
                onChanged();
                return this;
            }

            public Builder clearAllowance() {
                this.allowance_ = 0L;
                onChanged();
                return this;
            }

            public Builder setLatestWithdrawTime(long j) {
                this.latestWithdrawTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestWithdrawTime() {
                this.latestWithdrawTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setCode(ByteString byteString) {
                byteString.getClass();
                this.code_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearCode() {
                this.code_ = Account.getDefaultInstance().getCode();
                onChanged();
                return this;
            }

            public Builder setIsWitness(boolean z) {
                this.isWitness_ = z;
                onChanged();
                return this;
            }

            public Builder clearIsWitness() {
                this.isWitness_ = false;
                onChanged();
                return this;
            }

            public Builder setIsCommittee(boolean z) {
                this.isCommittee_ = z;
                onChanged();
                return this;
            }

            public Builder clearIsCommittee() {
                this.isCommittee_ = false;
                onChanged();
                return this;
            }

            private void ensureFrozenSupplyIsMutable() {
                if ((this.bitField0_ & 2097152) != 2097152) {
                    this.frozenSupply_ = new ArrayList(this.frozenSupply_);
                    this.bitField0_ |= 2097152;
                }
            }

            @Override
            public List<Frozen> getFrozenSupplyList() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.frozenSupply_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getFrozenSupplyCount() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenSupply_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Frozen getFrozenSupply(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenSupply_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setFrozenSupply(int i, Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.set(i, frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, frozen);
                }
                return this;
            }

            public Builder setFrozenSupply(int i, Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addFrozenSupply(Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.add(frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(frozen);
                }
                return this;
            }

            public Builder addFrozenSupply(int i, Frozen frozen) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    frozen.getClass();
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.add(i, frozen);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, frozen);
                }
                return this;
            }

            public Builder addFrozenSupply(Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addFrozenSupply(int i, Frozen.Builder builder) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllFrozenSupply(Iterable<? extends Frozen> iterable) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenSupplyIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.frozenSupply_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearFrozenSupply() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.frozenSupply_ = Collections.emptyList();
                    this.bitField0_ &= -2097153;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeFrozenSupply(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenSupplyIsMutable();
                    this.frozenSupply_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Frozen.Builder getFrozenSupplyBuilder(int i) {
                return getFrozenSupplyFieldBuilder().getBuilder(i);
            }

            @Override
            public FrozenOrBuilder getFrozenSupplyOrBuilder(int i) {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenSupply_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends FrozenOrBuilder> getFrozenSupplyOrBuilderList() {
                RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> repeatedFieldBuilderV3 = this.frozenSupplyBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.frozenSupply_);
            }

            public Frozen.Builder addFrozenSupplyBuilder() {
                return getFrozenSupplyFieldBuilder().addBuilder(Frozen.getDefaultInstance());
            }

            public Frozen.Builder addFrozenSupplyBuilder(int i) {
                return getFrozenSupplyFieldBuilder().addBuilder(i, Frozen.getDefaultInstance());
            }

            public List<Frozen.Builder> getFrozenSupplyBuilderList() {
                return getFrozenSupplyFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Frozen, Frozen.Builder, FrozenOrBuilder> getFrozenSupplyFieldBuilder() {
                if (this.frozenSupplyBuilder_ == null) {
                    this.frozenSupplyBuilder_ = new RepeatedFieldBuilderV3<>(this.frozenSupply_, (this.bitField0_ & 2097152) == 2097152, getParentForChildren(), isClean());
                    this.frozenSupply_ = null;
                }
                return this.frozenSupplyBuilder_;
            }

            public Builder setAssetIssuedName(ByteString byteString) {
                byteString.getClass();
                this.assetIssuedName_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAssetIssuedName() {
                this.assetIssuedName_ = Account.getDefaultInstance().getAssetIssuedName();
                onChanged();
                return this;
            }

            public Builder setAssetIssuedID(ByteString byteString) {
                byteString.getClass();
                this.assetIssuedID_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAssetIssuedID() {
                this.assetIssuedID_ = Account.getDefaultInstance().getAssetIssuedID();
                onChanged();
                return this;
            }

            private MapField<String, Long> internalGetLatestAssetOperationTime() {
                MapField<String, Long> mapField = this.latestAssetOperationTime_;
                return mapField == null ? MapField.emptyMapField(LatestAssetOperationTimeDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableLatestAssetOperationTime() {
                onChanged();
                if (this.latestAssetOperationTime_ == null) {
                    this.latestAssetOperationTime_ = MapField.newMapField(LatestAssetOperationTimeDefaultEntryHolder.defaultEntry);
                }
                if (!this.latestAssetOperationTime_.isMutable()) {
                    this.latestAssetOperationTime_ = this.latestAssetOperationTime_.copy();
                }
                return this.latestAssetOperationTime_;
            }

            @Override
            public int getLatestAssetOperationTimeCount() {
                return internalGetLatestAssetOperationTime().getMap().size();
            }

            @Override
            public boolean containsLatestAssetOperationTime(String str) {
                str.getClass();
                return internalGetLatestAssetOperationTime().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getLatestAssetOperationTime() {
                return getLatestAssetOperationTimeMap();
            }

            @Override
            public Map<String, Long> getLatestAssetOperationTimeMap() {
                return internalGetLatestAssetOperationTime().getMap();
            }

            @Override
            public long getLatestAssetOperationTimeOrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetLatestAssetOperationTime().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getLatestAssetOperationTimeOrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetLatestAssetOperationTime().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearLatestAssetOperationTime() {
                internalGetMutableLatestAssetOperationTime().getMutableMap().clear();
                return this;
            }

            public Builder removeLatestAssetOperationTime(String str) {
                str.getClass();
                internalGetMutableLatestAssetOperationTime().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableLatestAssetOperationTime() {
                return internalGetMutableLatestAssetOperationTime().getMutableMap();
            }

            public Builder putLatestAssetOperationTime(String str, long j) {
                str.getClass();
                internalGetMutableLatestAssetOperationTime().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllLatestAssetOperationTime(Map<String, Long> map) {
                internalGetMutableLatestAssetOperationTime().getMutableMap().putAll(map);
                return this;
            }

            private MapField<String, Long> internalGetLatestAssetOperationTimeV2() {
                MapField<String, Long> mapField = this.latestAssetOperationTimeV2_;
                return mapField == null ? MapField.emptyMapField(LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableLatestAssetOperationTimeV2() {
                onChanged();
                if (this.latestAssetOperationTimeV2_ == null) {
                    this.latestAssetOperationTimeV2_ = MapField.newMapField(LatestAssetOperationTimeV2DefaultEntryHolder.defaultEntry);
                }
                if (!this.latestAssetOperationTimeV2_.isMutable()) {
                    this.latestAssetOperationTimeV2_ = this.latestAssetOperationTimeV2_.copy();
                }
                return this.latestAssetOperationTimeV2_;
            }

            @Override
            public int getLatestAssetOperationTimeV2Count() {
                return internalGetLatestAssetOperationTimeV2().getMap().size();
            }

            @Override
            public boolean containsLatestAssetOperationTimeV2(String str) {
                str.getClass();
                return internalGetLatestAssetOperationTimeV2().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getLatestAssetOperationTimeV2() {
                return getLatestAssetOperationTimeV2Map();
            }

            @Override
            public Map<String, Long> getLatestAssetOperationTimeV2Map() {
                return internalGetLatestAssetOperationTimeV2().getMap();
            }

            @Override
            public long getLatestAssetOperationTimeV2OrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetLatestAssetOperationTimeV2().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getLatestAssetOperationTimeV2OrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetLatestAssetOperationTimeV2().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearLatestAssetOperationTimeV2() {
                internalGetMutableLatestAssetOperationTimeV2().getMutableMap().clear();
                return this;
            }

            public Builder removeLatestAssetOperationTimeV2(String str) {
                str.getClass();
                internalGetMutableLatestAssetOperationTimeV2().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableLatestAssetOperationTimeV2() {
                return internalGetMutableLatestAssetOperationTimeV2().getMutableMap();
            }

            public Builder putLatestAssetOperationTimeV2(String str, long j) {
                str.getClass();
                internalGetMutableLatestAssetOperationTimeV2().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllLatestAssetOperationTimeV2(Map<String, Long> map) {
                internalGetMutableLatestAssetOperationTimeV2().getMutableMap().putAll(map);
                return this;
            }

            public Builder setFreeNetUsage(long j) {
                this.freeNetUsage_ = j;
                onChanged();
                return this;
            }

            public Builder clearFreeNetUsage() {
                this.freeNetUsage_ = 0L;
                onChanged();
                return this;
            }

            private MapField<String, Long> internalGetFreeAssetNetUsage() {
                MapField<String, Long> mapField = this.freeAssetNetUsage_;
                return mapField == null ? MapField.emptyMapField(FreeAssetNetUsageDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableFreeAssetNetUsage() {
                onChanged();
                if (this.freeAssetNetUsage_ == null) {
                    this.freeAssetNetUsage_ = MapField.newMapField(FreeAssetNetUsageDefaultEntryHolder.defaultEntry);
                }
                if (!this.freeAssetNetUsage_.isMutable()) {
                    this.freeAssetNetUsage_ = this.freeAssetNetUsage_.copy();
                }
                return this.freeAssetNetUsage_;
            }

            @Override
            public int getFreeAssetNetUsageCount() {
                return internalGetFreeAssetNetUsage().getMap().size();
            }

            @Override
            public boolean containsFreeAssetNetUsage(String str) {
                str.getClass();
                return internalGetFreeAssetNetUsage().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getFreeAssetNetUsage() {
                return getFreeAssetNetUsageMap();
            }

            @Override
            public Map<String, Long> getFreeAssetNetUsageMap() {
                return internalGetFreeAssetNetUsage().getMap();
            }

            @Override
            public long getFreeAssetNetUsageOrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetFreeAssetNetUsage().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getFreeAssetNetUsageOrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetFreeAssetNetUsage().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearFreeAssetNetUsage() {
                internalGetMutableFreeAssetNetUsage().getMutableMap().clear();
                return this;
            }

            public Builder removeFreeAssetNetUsage(String str) {
                str.getClass();
                internalGetMutableFreeAssetNetUsage().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableFreeAssetNetUsage() {
                return internalGetMutableFreeAssetNetUsage().getMutableMap();
            }

            public Builder putFreeAssetNetUsage(String str, long j) {
                str.getClass();
                internalGetMutableFreeAssetNetUsage().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllFreeAssetNetUsage(Map<String, Long> map) {
                internalGetMutableFreeAssetNetUsage().getMutableMap().putAll(map);
                return this;
            }

            private MapField<String, Long> internalGetFreeAssetNetUsageV2() {
                MapField<String, Long> mapField = this.freeAssetNetUsageV2_;
                return mapField == null ? MapField.emptyMapField(FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableFreeAssetNetUsageV2() {
                onChanged();
                if (this.freeAssetNetUsageV2_ == null) {
                    this.freeAssetNetUsageV2_ = MapField.newMapField(FreeAssetNetUsageV2DefaultEntryHolder.defaultEntry);
                }
                if (!this.freeAssetNetUsageV2_.isMutable()) {
                    this.freeAssetNetUsageV2_ = this.freeAssetNetUsageV2_.copy();
                }
                return this.freeAssetNetUsageV2_;
            }

            @Override
            public int getFreeAssetNetUsageV2Count() {
                return internalGetFreeAssetNetUsageV2().getMap().size();
            }

            @Override
            public boolean containsFreeAssetNetUsageV2(String str) {
                str.getClass();
                return internalGetFreeAssetNetUsageV2().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getFreeAssetNetUsageV2() {
                return getFreeAssetNetUsageV2Map();
            }

            @Override
            public Map<String, Long> getFreeAssetNetUsageV2Map() {
                return internalGetFreeAssetNetUsageV2().getMap();
            }

            @Override
            public long getFreeAssetNetUsageV2OrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetFreeAssetNetUsageV2().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getFreeAssetNetUsageV2OrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetFreeAssetNetUsageV2().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearFreeAssetNetUsageV2() {
                internalGetMutableFreeAssetNetUsageV2().getMutableMap().clear();
                return this;
            }

            public Builder removeFreeAssetNetUsageV2(String str) {
                str.getClass();
                internalGetMutableFreeAssetNetUsageV2().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableFreeAssetNetUsageV2() {
                return internalGetMutableFreeAssetNetUsageV2().getMutableMap();
            }

            public Builder putFreeAssetNetUsageV2(String str, long j) {
                str.getClass();
                internalGetMutableFreeAssetNetUsageV2().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllFreeAssetNetUsageV2(Map<String, Long> map) {
                internalGetMutableFreeAssetNetUsageV2().getMutableMap().putAll(map);
                return this;
            }

            public Builder setLatestConsumeTime(long j) {
                this.latestConsumeTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestConsumeTime() {
                this.latestConsumeTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setLatestConsumeFreeTime(long j) {
                this.latestConsumeFreeTime_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestConsumeFreeTime() {
                this.latestConsumeFreeTime_ = 0L;
                onChanged();
                return this;
            }

            public Builder setAccountId(ByteString byteString) {
                byteString.getClass();
                this.accountId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAccountId() {
                this.accountId_ = Account.getDefaultInstance().getAccountId();
                onChanged();
                return this;
            }

            public Builder setNetWindowSize(long j) {
                this.netWindowSize_ = j;
                onChanged();
                return this;
            }

            public Builder clearNetWindowSize() {
                this.netWindowSize_ = 0L;
                onChanged();
                return this;
            }

            public Builder setNetWindowOptimized(boolean z) {
                this.netWindowOptimized_ = z;
                onChanged();
                return this;
            }

            public Builder clearNetWindowOptimized() {
                this.netWindowOptimized_ = false;
                onChanged();
                return this;
            }

            @Override
            public AccountResource getAccountResource() {
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV3 = this.accountResourceBuilder_;
                if (singleFieldBuilderV3 == null) {
                    AccountResource accountResource = this.accountResource_;
                    return accountResource == null ? AccountResource.getDefaultInstance() : accountResource;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setAccountResource(AccountResource accountResource) {
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV3 = this.accountResourceBuilder_;
                if (singleFieldBuilderV3 == null) {
                    accountResource.getClass();
                    this.accountResource_ = accountResource;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(accountResource);
                }
                return this;
            }

            public Builder setAccountResource(AccountResource.Builder builder) {
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV3 = this.accountResourceBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.accountResource_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeAccountResource(AccountResource accountResource) {
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV3 = this.accountResourceBuilder_;
                if (singleFieldBuilderV3 == null) {
                    AccountResource accountResource2 = this.accountResource_;
                    if (accountResource2 != null) {
                        this.accountResource_ = AccountResource.newBuilder(accountResource2).mergeFrom(accountResource).buildPartial();
                    } else {
                        this.accountResource_ = accountResource;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(accountResource);
                }
                return this;
            }

            public Builder clearAccountResource() {
                if (this.accountResourceBuilder_ == null) {
                    this.accountResource_ = null;
                    onChanged();
                } else {
                    this.accountResource_ = null;
                    this.accountResourceBuilder_ = null;
                }
                return this;
            }

            public AccountResource.Builder getAccountResourceBuilder() {
                onChanged();
                return getAccountResourceFieldBuilder().getBuilder();
            }

            @Override
            public AccountResourceOrBuilder getAccountResourceOrBuilder() {
                SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> singleFieldBuilderV3 = this.accountResourceBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                AccountResource accountResource = this.accountResource_;
                return accountResource == null ? AccountResource.getDefaultInstance() : accountResource;
            }

            private SingleFieldBuilderV3<AccountResource, AccountResource.Builder, AccountResourceOrBuilder> getAccountResourceFieldBuilder() {
                if (this.accountResourceBuilder_ == null) {
                    this.accountResourceBuilder_ = new SingleFieldBuilderV3<>(getAccountResource(), getParentForChildren(), isClean());
                    this.accountResource_ = null;
                }
                return this.accountResourceBuilder_;
            }

            public Builder setCodeHash(ByteString byteString) {
                byteString.getClass();
                this.codeHash_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearCodeHash() {
                this.codeHash_ = Account.getDefaultInstance().getCodeHash();
                onChanged();
                return this;
            }

            @Override
            public Permission getOwnerPermission() {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Permission permission = this.ownerPermission_;
                    return permission == null ? Permission.getDefaultInstance() : permission;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setOwnerPermission(Permission permission) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    permission.getClass();
                    this.ownerPermission_ = permission;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(permission);
                }
                return this;
            }

            public Builder setOwnerPermission(Permission.Builder builder) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.ownerPermission_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeOwnerPermission(Permission permission) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Permission permission2 = this.ownerPermission_;
                    if (permission2 != null) {
                        this.ownerPermission_ = Permission.newBuilder(permission2).mergeFrom(permission).buildPartial();
                    } else {
                        this.ownerPermission_ = permission;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(permission);
                }
                return this;
            }

            public Builder clearOwnerPermission() {
                if (this.ownerPermissionBuilder_ == null) {
                    this.ownerPermission_ = null;
                    onChanged();
                } else {
                    this.ownerPermission_ = null;
                    this.ownerPermissionBuilder_ = null;
                }
                return this;
            }

            public Permission.Builder getOwnerPermissionBuilder() {
                onChanged();
                return getOwnerPermissionFieldBuilder().getBuilder();
            }

            @Override
            public PermissionOrBuilder getOwnerPermissionOrBuilder() {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.ownerPermissionBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                Permission permission = this.ownerPermission_;
                return permission == null ? Permission.getDefaultInstance() : permission;
            }

            private SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> getOwnerPermissionFieldBuilder() {
                if (this.ownerPermissionBuilder_ == null) {
                    this.ownerPermissionBuilder_ = new SingleFieldBuilderV3<>(getOwnerPermission(), getParentForChildren(), isClean());
                    this.ownerPermission_ = null;
                }
                return this.ownerPermissionBuilder_;
            }

            @Override
            public Permission getWitnessPermission() {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Permission permission = this.witnessPermission_;
                    return permission == null ? Permission.getDefaultInstance() : permission;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setWitnessPermission(Permission permission) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    permission.getClass();
                    this.witnessPermission_ = permission;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(permission);
                }
                return this;
            }

            public Builder setWitnessPermission(Permission.Builder builder) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.witnessPermission_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeWitnessPermission(Permission permission) {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Permission permission2 = this.witnessPermission_;
                    if (permission2 != null) {
                        this.witnessPermission_ = Permission.newBuilder(permission2).mergeFrom(permission).buildPartial();
                    } else {
                        this.witnessPermission_ = permission;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(permission);
                }
                return this;
            }

            public Builder clearWitnessPermission() {
                if (this.witnessPermissionBuilder_ == null) {
                    this.witnessPermission_ = null;
                    onChanged();
                } else {
                    this.witnessPermission_ = null;
                    this.witnessPermissionBuilder_ = null;
                }
                return this;
            }

            public Permission.Builder getWitnessPermissionBuilder() {
                onChanged();
                return getWitnessPermissionFieldBuilder().getBuilder();
            }

            @Override
            public PermissionOrBuilder getWitnessPermissionOrBuilder() {
                SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> singleFieldBuilderV3 = this.witnessPermissionBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                Permission permission = this.witnessPermission_;
                return permission == null ? Permission.getDefaultInstance() : permission;
            }

            private SingleFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> getWitnessPermissionFieldBuilder() {
                if (this.witnessPermissionBuilder_ == null) {
                    this.witnessPermissionBuilder_ = new SingleFieldBuilderV3<>(getWitnessPermission(), getParentForChildren(), isClean());
                    this.witnessPermission_ = null;
                }
                return this.witnessPermissionBuilder_;
            }

            private void ensureActivePermissionIsMutable() {
                if ((this.bitField1_ & 64) != 64) {
                    this.activePermission_ = new ArrayList(this.activePermission_);
                    this.bitField1_ |= 64;
                }
            }

            @Override
            public List<Permission> getActivePermissionList() {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.activePermission_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getActivePermissionCount() {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.activePermission_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Permission getActivePermission(int i) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.activePermission_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setActivePermission(int i, Permission permission) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    permission.getClass();
                    ensureActivePermissionIsMutable();
                    this.activePermission_.set(i, permission);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, permission);
                }
                return this;
            }

            public Builder setActivePermission(int i, Permission.Builder builder) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureActivePermissionIsMutable();
                    this.activePermission_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addActivePermission(Permission permission) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    permission.getClass();
                    ensureActivePermissionIsMutable();
                    this.activePermission_.add(permission);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(permission);
                }
                return this;
            }

            public Builder addActivePermission(int i, Permission permission) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    permission.getClass();
                    ensureActivePermissionIsMutable();
                    this.activePermission_.add(i, permission);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, permission);
                }
                return this;
            }

            public Builder addActivePermission(Permission.Builder builder) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureActivePermissionIsMutable();
                    this.activePermission_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addActivePermission(int i, Permission.Builder builder) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureActivePermissionIsMutable();
                    this.activePermission_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllActivePermission(Iterable<? extends Permission> iterable) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureActivePermissionIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.activePermission_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearActivePermission() {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.activePermission_ = Collections.emptyList();
                    this.bitField1_ &= -65;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeActivePermission(int i) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureActivePermissionIsMutable();
                    this.activePermission_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Permission.Builder getActivePermissionBuilder(int i) {
                return getActivePermissionFieldBuilder().getBuilder(i);
            }

            @Override
            public PermissionOrBuilder getActivePermissionOrBuilder(int i) {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.activePermission_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends PermissionOrBuilder> getActivePermissionOrBuilderList() {
                RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> repeatedFieldBuilderV3 = this.activePermissionBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.activePermission_);
            }

            public Permission.Builder addActivePermissionBuilder() {
                return getActivePermissionFieldBuilder().addBuilder(Permission.getDefaultInstance());
            }

            public Permission.Builder addActivePermissionBuilder(int i) {
                return getActivePermissionFieldBuilder().addBuilder(i, Permission.getDefaultInstance());
            }

            public List<Permission.Builder> getActivePermissionBuilderList() {
                return getActivePermissionFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Permission, Permission.Builder, PermissionOrBuilder> getActivePermissionFieldBuilder() {
                if (this.activePermissionBuilder_ == null) {
                    this.activePermissionBuilder_ = new RepeatedFieldBuilderV3<>(this.activePermission_, (this.bitField1_ & 64) == 64, getParentForChildren(), isClean());
                    this.activePermission_ = null;
                }
                return this.activePermissionBuilder_;
            }

            private void ensureFrozenV2IsMutable() {
                if ((this.bitField1_ & 128) != 128) {
                    this.frozenV2_ = new ArrayList(this.frozenV2_);
                    this.bitField1_ |= 128;
                }
            }

            @Override
            public List<FreezeV2> getFrozenV2List() {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.frozenV2_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getFrozenV2Count() {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenV2_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public FreezeV2 getFrozenV2(int i) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenV2_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setFrozenV2(int i, FreezeV2 freezeV2) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    freezeV2.getClass();
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.set(i, freezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, freezeV2);
                }
                return this;
            }

            public Builder setFrozenV2(int i, FreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addFrozenV2(FreezeV2 freezeV2) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    freezeV2.getClass();
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.add(freezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(freezeV2);
                }
                return this;
            }

            public Builder addFrozenV2(int i, FreezeV2 freezeV2) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    freezeV2.getClass();
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.add(i, freezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, freezeV2);
                }
                return this;
            }

            public Builder addFrozenV2(FreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addFrozenV2(int i, FreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllFrozenV2(Iterable<? extends FreezeV2> iterable) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenV2IsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.frozenV2_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearFrozenV2() {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.frozenV2_ = Collections.emptyList();
                    this.bitField1_ &= -129;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeFrozenV2(int i) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureFrozenV2IsMutable();
                    this.frozenV2_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public FreezeV2.Builder getFrozenV2Builder(int i) {
                return getFrozenV2FieldBuilder().getBuilder(i);
            }

            @Override
            public FreezeV2OrBuilder getFrozenV2OrBuilder(int i) {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.frozenV2_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends FreezeV2OrBuilder> getFrozenV2OrBuilderList() {
                RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> repeatedFieldBuilderV3 = this.frozenV2Builder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.frozenV2_);
            }

            public FreezeV2.Builder addFrozenV2Builder() {
                return getFrozenV2FieldBuilder().addBuilder(FreezeV2.getDefaultInstance());
            }

            public FreezeV2.Builder addFrozenV2Builder(int i) {
                return getFrozenV2FieldBuilder().addBuilder(i, FreezeV2.getDefaultInstance());
            }

            public List<FreezeV2.Builder> getFrozenV2BuilderList() {
                return getFrozenV2FieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<FreezeV2, FreezeV2.Builder, FreezeV2OrBuilder> getFrozenV2FieldBuilder() {
                if (this.frozenV2Builder_ == null) {
                    this.frozenV2Builder_ = new RepeatedFieldBuilderV3<>(this.frozenV2_, (this.bitField1_ & 128) == 128, getParentForChildren(), isClean());
                    this.frozenV2_ = null;
                }
                return this.frozenV2Builder_;
            }

            private void ensureUnfrozenV2IsMutable() {
                if ((this.bitField1_ & 256) != 256) {
                    this.unfrozenV2_ = new ArrayList(this.unfrozenV2_);
                    this.bitField1_ |= 256;
                }
            }

            @Override
            public List<UnFreezeV2> getUnfrozenV2List() {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.unfrozenV2_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getUnfrozenV2Count() {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.unfrozenV2_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public UnFreezeV2 getUnfrozenV2(int i) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.unfrozenV2_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setUnfrozenV2(int i, UnFreezeV2 unFreezeV2) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    unFreezeV2.getClass();
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.set(i, unFreezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, unFreezeV2);
                }
                return this;
            }

            public Builder setUnfrozenV2(int i, UnFreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addUnfrozenV2(UnFreezeV2 unFreezeV2) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    unFreezeV2.getClass();
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.add(unFreezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(unFreezeV2);
                }
                return this;
            }

            public Builder addUnfrozenV2(int i, UnFreezeV2 unFreezeV2) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    unFreezeV2.getClass();
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.add(i, unFreezeV2);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, unFreezeV2);
                }
                return this;
            }

            public Builder addUnfrozenV2(UnFreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addUnfrozenV2(int i, UnFreezeV2.Builder builder) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllUnfrozenV2(Iterable<? extends UnFreezeV2> iterable) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureUnfrozenV2IsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.unfrozenV2_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearUnfrozenV2() {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.unfrozenV2_ = Collections.emptyList();
                    this.bitField1_ &= -257;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeUnfrozenV2(int i) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureUnfrozenV2IsMutable();
                    this.unfrozenV2_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public UnFreezeV2.Builder getUnfrozenV2Builder(int i) {
                return getUnfrozenV2FieldBuilder().getBuilder(i);
            }

            @Override
            public UnFreezeV2OrBuilder getUnfrozenV2OrBuilder(int i) {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.unfrozenV2_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends UnFreezeV2OrBuilder> getUnfrozenV2OrBuilderList() {
                RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> repeatedFieldBuilderV3 = this.unfrozenV2Builder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.unfrozenV2_);
            }

            public UnFreezeV2.Builder addUnfrozenV2Builder() {
                return getUnfrozenV2FieldBuilder().addBuilder(UnFreezeV2.getDefaultInstance());
            }

            public UnFreezeV2.Builder addUnfrozenV2Builder(int i) {
                return getUnfrozenV2FieldBuilder().addBuilder(i, UnFreezeV2.getDefaultInstance());
            }

            public List<UnFreezeV2.Builder> getUnfrozenV2BuilderList() {
                return getUnfrozenV2FieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<UnFreezeV2, UnFreezeV2.Builder, UnFreezeV2OrBuilder> getUnfrozenV2FieldBuilder() {
                if (this.unfrozenV2Builder_ == null) {
                    this.unfrozenV2Builder_ = new RepeatedFieldBuilderV3<>(this.unfrozenV2_, (this.bitField1_ & 256) == 256, getParentForChildren(), isClean());
                    this.unfrozenV2_ = null;
                }
                return this.unfrozenV2Builder_;
            }

            public Builder setDelegatedFrozenV2BalanceForBandwidth(long j) {
                this.delegatedFrozenV2BalanceForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearDelegatedFrozenV2BalanceForBandwidth() {
                this.delegatedFrozenV2BalanceForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            public Builder setAcquiredDelegatedFrozenV2BalanceForBandwidth(long j) {
                this.acquiredDelegatedFrozenV2BalanceForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearAcquiredDelegatedFrozenV2BalanceForBandwidth() {
                this.acquiredDelegatedFrozenV2BalanceForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Key extends GeneratedMessageV3 implements KeyOrBuilder {
        public static final int ADDRESS_FIELD_NUMBER = 1;
        private static final Key DEFAULT_INSTANCE = new Key();
        private static final Parser<Key> PARSER = new AbstractParser<Key>() {
            @Override
            public Key parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Key(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int WEIGHT_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private ByteString address_;
        private byte memoizedIsInitialized;
        private long weight_;

        public static Key getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Key> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public Key getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Key> getParserForType() {
            return PARSER;
        }

        @Override
        public long getWeight() {
            return this.weight_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Key(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Key() {
            this.memoizedIsInitialized = (byte) -1;
            this.address_ = ByteString.EMPTY;
            this.weight_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Key(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.address_ = codedInputStream.readBytes();
                                } else if (readTag != 16) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.weight_ = codedInputStream.readInt64();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Key_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Key_fieldAccessorTable.ensureFieldAccessorsInitialized(Key.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.address_);
            }
            long j = this.weight_;
            if (j != 0) {
                codedOutputStream.writeInt64(2, j);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.address_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.address_) : 0;
            long j = this.weight_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Key)) {
                return super.equals(obj);
            }
            Key key = (Key) obj;
            return getAddress().equals(key.getAddress()) && getWeight() == key.getWeight() && this.unknownFields.equals(key.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getWeight())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static Key parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Key parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Key parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Key parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Key parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Key parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Key parseFrom(InputStream inputStream) throws IOException {
            return (Key) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Key parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Key) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Key parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Key) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Key parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Key) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Key parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Key) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Key parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Key) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Key key) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(key);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements KeyOrBuilder {
            private ByteString address_;
            private long weight_;

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public long getWeight() {
                return this.weight_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Key_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Key_fieldAccessorTable.ensureFieldAccessorsInitialized(Key.class, Builder.class);
            }

            private Builder() {
                this.address_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.address_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Key.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.address_ = ByteString.EMPTY;
                this.weight_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Key_descriptor;
            }

            @Override
            public Key getDefaultInstanceForType() {
                return Key.getDefaultInstance();
            }

            @Override
            public Key build() {
                Key buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Key buildPartial() {
                Key key = new Key(this);
                key.address_ = this.address_;
                key.weight_ = this.weight_;
                onBuilt();
                return key;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Key) {
                    return mergeFrom((Key) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Key key) {
                if (key == Key.getDefaultInstance()) {
                    return this;
                }
                if (key.getAddress() != ByteString.EMPTY) {
                    setAddress(key.getAddress());
                }
                if (key.getWeight() != 0) {
                    setWeight(key.getWeight());
                }
                mergeUnknownFields(key.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Key.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Key.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Key$Builder");
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = Key.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            public Builder setWeight(long j) {
                this.weight_ = j;
                onChanged();
                return this;
            }

            public Builder clearWeight() {
                this.weight_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class DelegatedResource extends GeneratedMessageV3 implements DelegatedResourceOrBuilder {
        public static final int EXPIRE_TIME_FOR_BANDWIDTH_FIELD_NUMBER = 5;
        public static final int EXPIRE_TIME_FOR_ENERGY_FIELD_NUMBER = 6;
        public static final int FROM_FIELD_NUMBER = 1;
        public static final int FROZEN_BALANCE_FOR_BANDWIDTH_FIELD_NUMBER = 3;
        public static final int FROZEN_BALANCE_FOR_ENERGY_FIELD_NUMBER = 4;
        public static final int TO_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private long expireTimeForBandwidth_;
        private long expireTimeForEnergy_;
        private ByteString from_;
        private long frozenBalanceForBandwidth_;
        private long frozenBalanceForEnergy_;
        private byte memoizedIsInitialized;
        private ByteString to_;
        private static final DelegatedResource DEFAULT_INSTANCE = new DelegatedResource();
        private static final Parser<DelegatedResource> PARSER = new AbstractParser<DelegatedResource>() {
            @Override
            public DelegatedResource parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DelegatedResource(codedInputStream, extensionRegistryLite);
            }
        };

        public static DelegatedResource getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<DelegatedResource> parser() {
            return PARSER;
        }

        @Override
        public DelegatedResource getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getExpireTimeForBandwidth() {
            return this.expireTimeForBandwidth_;
        }

        @Override
        public long getExpireTimeForEnergy() {
            return this.expireTimeForEnergy_;
        }

        @Override
        public ByteString getFrom() {
            return this.from_;
        }

        @Override
        public long getFrozenBalanceForBandwidth() {
            return this.frozenBalanceForBandwidth_;
        }

        @Override
        public long getFrozenBalanceForEnergy() {
            return this.frozenBalanceForEnergy_;
        }

        @Override
        public Parser<DelegatedResource> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getTo() {
            return this.to_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private DelegatedResource(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private DelegatedResource() {
            this.memoizedIsInitialized = (byte) -1;
            this.from_ = ByteString.EMPTY;
            this.to_ = ByteString.EMPTY;
            this.frozenBalanceForBandwidth_ = 0L;
            this.frozenBalanceForEnergy_ = 0L;
            this.expireTimeForBandwidth_ = 0L;
            this.expireTimeForEnergy_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DelegatedResource(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.from_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                this.to_ = codedInputStream.readBytes();
                            } else if (readTag == 24) {
                                this.frozenBalanceForBandwidth_ = codedInputStream.readInt64();
                            } else if (readTag == 32) {
                                this.frozenBalanceForEnergy_ = codedInputStream.readInt64();
                            } else if (readTag == 40) {
                                this.expireTimeForBandwidth_ = codedInputStream.readInt64();
                            } else if (readTag != 48) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.expireTimeForEnergy_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_DelegatedResource_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_DelegatedResource_fieldAccessorTable.ensureFieldAccessorsInitialized(DelegatedResource.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.from_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.from_);
            }
            if (!this.to_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.to_);
            }
            long j = this.frozenBalanceForBandwidth_;
            if (j != 0) {
                codedOutputStream.writeInt64(3, j);
            }
            long j2 = this.frozenBalanceForEnergy_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(4, j2);
            }
            long j3 = this.expireTimeForBandwidth_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(5, j3);
            }
            long j4 = this.expireTimeForEnergy_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(6, j4);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.from_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.from_) : 0;
            if (!this.to_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.to_);
            }
            long j = this.frozenBalanceForBandwidth_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, j);
            }
            long j2 = this.frozenBalanceForEnergy_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(4, j2);
            }
            long j3 = this.expireTimeForBandwidth_;
            if (j3 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(5, j3);
            }
            long j4 = this.expireTimeForEnergy_;
            if (j4 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(6, j4);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof DelegatedResource)) {
                return super.equals(obj);
            }
            DelegatedResource delegatedResource = (DelegatedResource) obj;
            return getFrom().equals(delegatedResource.getFrom()) && getTo().equals(delegatedResource.getTo()) && getFrozenBalanceForBandwidth() == delegatedResource.getFrozenBalanceForBandwidth() && getFrozenBalanceForEnergy() == delegatedResource.getFrozenBalanceForEnergy() && getExpireTimeForBandwidth() == delegatedResource.getExpireTimeForBandwidth() && getExpireTimeForEnergy() == delegatedResource.getExpireTimeForEnergy() && this.unknownFields.equals(delegatedResource.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getFrom().hashCode()) * 37) + 2) * 53) + getTo().hashCode()) * 37) + 3) * 53) + Internal.hashLong(getFrozenBalanceForBandwidth())) * 37) + 4) * 53) + Internal.hashLong(getFrozenBalanceForEnergy())) * 37) + 5) * 53) + Internal.hashLong(getExpireTimeForBandwidth())) * 37) + 6) * 53) + Internal.hashLong(getExpireTimeForEnergy())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static DelegatedResource parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static DelegatedResource parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static DelegatedResource parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DelegatedResource parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DelegatedResource parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DelegatedResource parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DelegatedResource parseFrom(InputStream inputStream) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static DelegatedResource parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DelegatedResource parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static DelegatedResource parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DelegatedResource parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static DelegatedResource parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResource) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(DelegatedResource delegatedResource) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(delegatedResource);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DelegatedResourceOrBuilder {
            private long expireTimeForBandwidth_;
            private long expireTimeForEnergy_;
            private ByteString from_;
            private long frozenBalanceForBandwidth_;
            private long frozenBalanceForEnergy_;
            private ByteString to_;

            @Override
            public long getExpireTimeForBandwidth() {
                return this.expireTimeForBandwidth_;
            }

            @Override
            public long getExpireTimeForEnergy() {
                return this.expireTimeForEnergy_;
            }

            @Override
            public ByteString getFrom() {
                return this.from_;
            }

            @Override
            public long getFrozenBalanceForBandwidth() {
                return this.frozenBalanceForBandwidth_;
            }

            @Override
            public long getFrozenBalanceForEnergy() {
                return this.frozenBalanceForEnergy_;
            }

            @Override
            public ByteString getTo() {
                return this.to_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_DelegatedResource_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_DelegatedResource_fieldAccessorTable.ensureFieldAccessorsInitialized(DelegatedResource.class, Builder.class);
            }

            private Builder() {
                this.from_ = ByteString.EMPTY;
                this.to_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.from_ = ByteString.EMPTY;
                this.to_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = DelegatedResource.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.from_ = ByteString.EMPTY;
                this.to_ = ByteString.EMPTY;
                this.frozenBalanceForBandwidth_ = 0L;
                this.frozenBalanceForEnergy_ = 0L;
                this.expireTimeForBandwidth_ = 0L;
                this.expireTimeForEnergy_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_DelegatedResource_descriptor;
            }

            @Override
            public DelegatedResource getDefaultInstanceForType() {
                return DelegatedResource.getDefaultInstance();
            }

            @Override
            public DelegatedResource build() {
                DelegatedResource buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public DelegatedResource buildPartial() {
                DelegatedResource delegatedResource = new DelegatedResource(this);
                delegatedResource.from_ = this.from_;
                delegatedResource.to_ = this.to_;
                delegatedResource.frozenBalanceForBandwidth_ = this.frozenBalanceForBandwidth_;
                delegatedResource.frozenBalanceForEnergy_ = this.frozenBalanceForEnergy_;
                delegatedResource.expireTimeForBandwidth_ = this.expireTimeForBandwidth_;
                delegatedResource.expireTimeForEnergy_ = this.expireTimeForEnergy_;
                onBuilt();
                return delegatedResource;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof DelegatedResource) {
                    return mergeFrom((DelegatedResource) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(DelegatedResource delegatedResource) {
                if (delegatedResource == DelegatedResource.getDefaultInstance()) {
                    return this;
                }
                if (delegatedResource.getFrom() != ByteString.EMPTY) {
                    setFrom(delegatedResource.getFrom());
                }
                if (delegatedResource.getTo() != ByteString.EMPTY) {
                    setTo(delegatedResource.getTo());
                }
                if (delegatedResource.getFrozenBalanceForBandwidth() != 0) {
                    setFrozenBalanceForBandwidth(delegatedResource.getFrozenBalanceForBandwidth());
                }
                if (delegatedResource.getFrozenBalanceForEnergy() != 0) {
                    setFrozenBalanceForEnergy(delegatedResource.getFrozenBalanceForEnergy());
                }
                if (delegatedResource.getExpireTimeForBandwidth() != 0) {
                    setExpireTimeForBandwidth(delegatedResource.getExpireTimeForBandwidth());
                }
                if (delegatedResource.getExpireTimeForEnergy() != 0) {
                    setExpireTimeForEnergy(delegatedResource.getExpireTimeForEnergy());
                }
                mergeUnknownFields(delegatedResource.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.DelegatedResource.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.DelegatedResource.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$DelegatedResource$Builder");
            }

            public Builder setFrom(ByteString byteString) {
                byteString.getClass();
                this.from_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearFrom() {
                this.from_ = DelegatedResource.getDefaultInstance().getFrom();
                onChanged();
                return this;
            }

            public Builder setTo(ByteString byteString) {
                byteString.getClass();
                this.to_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearTo() {
                this.to_ = DelegatedResource.getDefaultInstance().getTo();
                onChanged();
                return this;
            }

            public Builder setFrozenBalanceForBandwidth(long j) {
                this.frozenBalanceForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearFrozenBalanceForBandwidth() {
                this.frozenBalanceForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            public Builder setFrozenBalanceForEnergy(long j) {
                this.frozenBalanceForEnergy_ = j;
                onChanged();
                return this;
            }

            public Builder clearFrozenBalanceForEnergy() {
                this.frozenBalanceForEnergy_ = 0L;
                onChanged();
                return this;
            }

            public Builder setExpireTimeForBandwidth(long j) {
                this.expireTimeForBandwidth_ = j;
                onChanged();
                return this;
            }

            public Builder clearExpireTimeForBandwidth() {
                this.expireTimeForBandwidth_ = 0L;
                onChanged();
                return this;
            }

            public Builder setExpireTimeForEnergy(long j) {
                this.expireTimeForEnergy_ = j;
                onChanged();
                return this;
            }

            public Builder clearExpireTimeForEnergy() {
                this.expireTimeForEnergy_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class authority extends GeneratedMessageV3 implements authorityOrBuilder {
        public static final int ACCOUNT_FIELD_NUMBER = 1;
        private static final authority DEFAULT_INSTANCE = new authority();
        private static final Parser<authority> PARSER = new AbstractParser<authority>() {
            @Override
            public authority parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new authority(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int PERMISSION_NAME_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private AccountId account_;
        private byte memoizedIsInitialized;
        private ByteString permissionName_;

        public static authority getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<authority> parser() {
            return PARSER;
        }

        @Override
        public authority getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<authority> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getPermissionName() {
            return this.permissionName_;
        }

        @Override
        public boolean hasAccount() {
            return this.account_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private authority(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private authority() {
            this.memoizedIsInitialized = (byte) -1;
            this.permissionName_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private authority(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                AccountId accountId = this.account_;
                                AccountId.Builder builder = accountId != null ? accountId.toBuilder() : null;
                                AccountId accountId2 = (AccountId) codedInputStream.readMessage(AccountId.parser(), extensionRegistryLite);
                                this.account_ = accountId2;
                                if (builder != null) {
                                    builder.mergeFrom(accountId2);
                                    this.account_ = builder.buildPartial();
                                }
                            } else if (readTag != 18) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.permissionName_ = codedInputStream.readBytes();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_authority_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_authority_fieldAccessorTable.ensureFieldAccessorsInitialized(authority.class, Builder.class);
        }

        @Override
        public AccountId getAccount() {
            AccountId accountId = this.account_;
            return accountId == null ? AccountId.getDefaultInstance() : accountId;
        }

        @Override
        public AccountIdOrBuilder getAccountOrBuilder() {
            return getAccount();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.account_ != null) {
                codedOutputStream.writeMessage(1, getAccount());
            }
            if (!this.permissionName_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.permissionName_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.account_ != null ? CodedOutputStream.computeMessageSize(1, getAccount()) : 0;
            if (!this.permissionName_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(2, this.permissionName_);
            }
            int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof authority)) {
                return super.equals(obj);
            }
            authority authorityVar = (authority) obj;
            boolean z = hasAccount() == authorityVar.hasAccount();
            if (!hasAccount() ? z : !(!z || !getAccount().equals(authorityVar.getAccount()))) {
                if (getPermissionName().equals(authorityVar.getPermissionName()) && this.unknownFields.equals(authorityVar.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasAccount()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getAccount().hashCode();
            }
            int hashCode2 = (((((hashCode * 37) + 2) * 53) + getPermissionName().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static authority parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static authority parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static authority parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static authority parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static authority parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static authority parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static authority parseFrom(InputStream inputStream) throws IOException {
            return (authority) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static authority parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (authority) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static authority parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (authority) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static authority parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (authority) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static authority parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (authority) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static authority parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (authority) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(authority authorityVar) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(authorityVar);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements authorityOrBuilder {
            private SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> accountBuilder_;
            private AccountId account_;
            private ByteString permissionName_;

            @Override
            public ByteString getPermissionName() {
                return this.permissionName_;
            }

            @Override
            public boolean hasAccount() {
                return (this.accountBuilder_ == null && this.account_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_authority_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_authority_fieldAccessorTable.ensureFieldAccessorsInitialized(authority.class, Builder.class);
            }

            private Builder() {
                this.account_ = null;
                this.permissionName_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.account_ = null;
                this.permissionName_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = authority.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                if (this.accountBuilder_ == null) {
                    this.account_ = null;
                } else {
                    this.account_ = null;
                    this.accountBuilder_ = null;
                }
                this.permissionName_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_authority_descriptor;
            }

            @Override
            public authority getDefaultInstanceForType() {
                return authority.getDefaultInstance();
            }

            @Override
            public authority build() {
                authority buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public authority buildPartial() {
                authority authorityVar = new authority(this);
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 == null) {
                    authorityVar.account_ = this.account_;
                } else {
                    authorityVar.account_ = singleFieldBuilderV3.build();
                }
                authorityVar.permissionName_ = this.permissionName_;
                onBuilt();
                return authorityVar;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof authority) {
                    return mergeFrom((authority) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(authority authorityVar) {
                if (authorityVar == authority.getDefaultInstance()) {
                    return this;
                }
                if (authorityVar.hasAccount()) {
                    mergeAccount(authorityVar.getAccount());
                }
                if (authorityVar.getPermissionName() != ByteString.EMPTY) {
                    setPermissionName(authorityVar.getPermissionName());
                }
                mergeUnknownFields(authorityVar.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.authority.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.authority.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$authority$Builder");
            }

            @Override
            public AccountId getAccount() {
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 == null) {
                    AccountId accountId = this.account_;
                    return accountId == null ? AccountId.getDefaultInstance() : accountId;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setAccount(AccountId accountId) {
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 == null) {
                    accountId.getClass();
                    this.account_ = accountId;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(accountId);
                }
                return this;
            }

            public Builder setAccount(AccountId.Builder builder) {
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.account_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeAccount(AccountId accountId) {
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 == null) {
                    AccountId accountId2 = this.account_;
                    if (accountId2 != null) {
                        this.account_ = AccountId.newBuilder(accountId2).mergeFrom(accountId).buildPartial();
                    } else {
                        this.account_ = accountId;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(accountId);
                }
                return this;
            }

            public Builder clearAccount() {
                if (this.accountBuilder_ == null) {
                    this.account_ = null;
                    onChanged();
                } else {
                    this.account_ = null;
                    this.accountBuilder_ = null;
                }
                return this;
            }

            public AccountId.Builder getAccountBuilder() {
                onChanged();
                return getAccountFieldBuilder().getBuilder();
            }

            @Override
            public AccountIdOrBuilder getAccountOrBuilder() {
                SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> singleFieldBuilderV3 = this.accountBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                AccountId accountId = this.account_;
                return accountId == null ? AccountId.getDefaultInstance() : accountId;
            }

            private SingleFieldBuilderV3<AccountId, AccountId.Builder, AccountIdOrBuilder> getAccountFieldBuilder() {
                if (this.accountBuilder_ == null) {
                    this.accountBuilder_ = new SingleFieldBuilderV3<>(getAccount(), getParentForChildren(), isClean());
                    this.account_ = null;
                }
                return this.accountBuilder_;
            }

            public Builder setPermissionName(ByteString byteString) {
                byteString.getClass();
                this.permissionName_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearPermissionName() {
                this.permissionName_ = authority.getDefaultInstance().getPermissionName();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Permission extends GeneratedMessageV3 implements PermissionOrBuilder {
        public static final int ID_FIELD_NUMBER = 2;
        public static final int KEYS_FIELD_NUMBER = 7;
        public static final int OPERATIONS_FIELD_NUMBER = 6;
        public static final int PARENT_ID_FIELD_NUMBER = 5;
        public static final int PERMISSION_NAME_FIELD_NUMBER = 3;
        public static final int THRESHOLD_FIELD_NUMBER = 4;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private int id_;
        private List<Key> keys_;
        private byte memoizedIsInitialized;
        private ByteString operations_;
        private int parentId_;
        private volatile Object permissionName_;
        private long threshold_;
        private int type_;
        private static final Permission DEFAULT_INSTANCE = new Permission();
        private static final Parser<Permission> PARSER = new AbstractParser<Permission>() {
            @Override
            public Permission parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Permission(codedInputStream, extensionRegistryLite);
            }
        };

        public static Permission getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Permission> parser() {
            return PARSER;
        }

        @Override
        public Permission getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public int getId() {
            return this.id_;
        }

        @Override
        public List<Key> getKeysList() {
            return this.keys_;
        }

        @Override
        public List<? extends KeyOrBuilder> getKeysOrBuilderList() {
            return this.keys_;
        }

        @Override
        public ByteString getOperations() {
            return this.operations_;
        }

        @Override
        public int getParentId() {
            return this.parentId_;
        }

        @Override
        public Parser<Permission> getParserForType() {
            return PARSER;
        }

        @Override
        public long getThreshold() {
            return this.threshold_;
        }

        @Override
        public int getTypeValue() {
            return this.type_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Permission(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Permission() {
            this.memoizedIsInitialized = (byte) -1;
            this.type_ = 0;
            this.id_ = 0;
            this.permissionName_ = "";
            this.threshold_ = 0L;
            this.parentId_ = 0;
            this.operations_ = ByteString.EMPTY;
            this.keys_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Permission(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.type_ = codedInputStream.readEnum();
                                } else if (readTag == 16) {
                                    this.id_ = codedInputStream.readInt32();
                                } else if (readTag == 26) {
                                    this.permissionName_ = codedInputStream.readStringRequireUtf8();
                                } else if (readTag == 32) {
                                    this.threshold_ = codedInputStream.readInt64();
                                } else if (readTag == 40) {
                                    this.parentId_ = codedInputStream.readInt32();
                                } else if (readTag == 50) {
                                    this.operations_ = codedInputStream.readBytes();
                                } else if (readTag != 58) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    if (!(z2 & true)) {
                                        this.keys_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.keys_.add((Key) codedInputStream.readMessage(Key.parser(), extensionRegistryLite));
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.keys_ = Collections.unmodifiableList(this.keys_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Permission_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Permission_fieldAccessorTable.ensureFieldAccessorsInitialized(Permission.class, Builder.class);
        }

        public enum PermissionType implements ProtocolMessageEnum {
            Owner(0),
            Witness(1),
            Active(2),
            UNRECOGNIZED(-1);
            
            public static final int Active_VALUE = 2;
            public static final int Owner_VALUE = 0;
            public static final int Witness_VALUE = 1;
            private final int value;
            private static final Internal.EnumLiteMap<PermissionType> internalValueMap = new Internal.EnumLiteMap<PermissionType>() {
                @Override
                public PermissionType findValueByNumber(int i) {
                    return PermissionType.forNumber(i);
                }
            };
            private static final PermissionType[] VALUES = values();

            public static PermissionType forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            return null;
                        }
                        return Active;
                    }
                    return Witness;
                }
                return Owner;
            }

            public static Internal.EnumLiteMap<PermissionType> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static PermissionType valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return Permission.getDescriptor().getEnumTypes().get(0);
            }

            public static PermissionType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            PermissionType(int i) {
                this.value = i;
            }
        }

        @Override
        public PermissionType getType() {
            PermissionType valueOf = PermissionType.valueOf(this.type_);
            return valueOf == null ? PermissionType.UNRECOGNIZED : valueOf;
        }

        @Override
        public String getPermissionName() {
            Object obj = this.permissionName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.permissionName_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getPermissionNameBytes() {
            Object obj = this.permissionName_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.permissionName_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        public int getKeysCount() {
            return this.keys_.size();
        }

        @Override
        public Key getKeys(int i) {
            return this.keys_.get(i);
        }

        @Override
        public KeyOrBuilder getKeysOrBuilder(int i) {
            return this.keys_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.type_ != PermissionType.Owner.getNumber()) {
                codedOutputStream.writeEnum(1, this.type_);
            }
            int i = this.id_;
            if (i != 0) {
                codedOutputStream.writeInt32(2, i);
            }
            if (!getPermissionNameBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 3, this.permissionName_);
            }
            long j = this.threshold_;
            if (j != 0) {
                codedOutputStream.writeInt64(4, j);
            }
            int i2 = this.parentId_;
            if (i2 != 0) {
                codedOutputStream.writeInt32(5, i2);
            }
            if (!this.operations_.isEmpty()) {
                codedOutputStream.writeBytes(6, this.operations_);
            }
            for (int i3 = 0; i3 < this.keys_.size(); i3++) {
                codedOutputStream.writeMessage(7, this.keys_.get(i3));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeEnumSize = this.type_ != PermissionType.Owner.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
            int i2 = this.id_;
            if (i2 != 0) {
                computeEnumSize += CodedOutputStream.computeInt32Size(2, i2);
            }
            if (!getPermissionNameBytes().isEmpty()) {
                computeEnumSize += GeneratedMessageV3.computeStringSize(3, this.permissionName_);
            }
            long j = this.threshold_;
            if (j != 0) {
                computeEnumSize += CodedOutputStream.computeInt64Size(4, j);
            }
            int i3 = this.parentId_;
            if (i3 != 0) {
                computeEnumSize += CodedOutputStream.computeInt32Size(5, i3);
            }
            if (!this.operations_.isEmpty()) {
                computeEnumSize += CodedOutputStream.computeBytesSize(6, this.operations_);
            }
            for (int i4 = 0; i4 < this.keys_.size(); i4++) {
                computeEnumSize += CodedOutputStream.computeMessageSize(7, this.keys_.get(i4));
            }
            int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Permission)) {
                return super.equals(obj);
            }
            Permission permission = (Permission) obj;
            return this.type_ == permission.type_ && getId() == permission.getId() && getPermissionName().equals(permission.getPermissionName()) && getThreshold() == permission.getThreshold() && getParentId() == permission.getParentId() && getOperations().equals(permission.getOperations()) && getKeysList().equals(permission.getKeysList()) && this.unknownFields.equals(permission.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_) * 37) + 2) * 53) + getId()) * 37) + 3) * 53) + getPermissionName().hashCode()) * 37) + 4) * 53) + Internal.hashLong(getThreshold())) * 37) + 5) * 53) + getParentId()) * 37) + 6) * 53) + getOperations().hashCode();
            if (getKeysCount() > 0) {
                hashCode = (((hashCode * 37) + 7) * 53) + getKeysList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Permission parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Permission parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Permission parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Permission parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Permission parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Permission parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Permission parseFrom(InputStream inputStream) throws IOException {
            return (Permission) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Permission parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Permission) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Permission parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Permission) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Permission parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Permission) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Permission parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Permission) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Permission parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Permission) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Permission permission) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(permission);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements PermissionOrBuilder {
            private int bitField0_;
            private int id_;
            private RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> keysBuilder_;
            private List<Key> keys_;
            private ByteString operations_;
            private int parentId_;
            private Object permissionName_;
            private long threshold_;
            private int type_;

            @Override
            public int getId() {
                return this.id_;
            }

            @Override
            public ByteString getOperations() {
                return this.operations_;
            }

            @Override
            public int getParentId() {
                return this.parentId_;
            }

            @Override
            public long getThreshold() {
                return this.threshold_;
            }

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Permission_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Permission_fieldAccessorTable.ensureFieldAccessorsInitialized(Permission.class, Builder.class);
            }

            private Builder() {
                this.type_ = 0;
                this.permissionName_ = "";
                this.operations_ = ByteString.EMPTY;
                this.keys_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.type_ = 0;
                this.permissionName_ = "";
                this.operations_ = ByteString.EMPTY;
                this.keys_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Permission.alwaysUseFieldBuilders) {
                    getKeysFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.id_ = 0;
                this.permissionName_ = "";
                this.threshold_ = 0L;
                this.parentId_ = 0;
                this.operations_ = ByteString.EMPTY;
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.keys_ = Collections.emptyList();
                    this.bitField0_ &= -65;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Permission_descriptor;
            }

            @Override
            public Permission getDefaultInstanceForType() {
                return Permission.getDefaultInstance();
            }

            @Override
            public Permission build() {
                Permission buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Permission buildPartial() {
                Permission permission = new Permission(this);
                permission.type_ = this.type_;
                permission.id_ = this.id_;
                permission.permissionName_ = this.permissionName_;
                permission.threshold_ = this.threshold_;
                permission.parentId_ = this.parentId_;
                permission.operations_ = this.operations_;
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 64) == 64) {
                        this.keys_ = Collections.unmodifiableList(this.keys_);
                        this.bitField0_ &= -65;
                    }
                    permission.keys_ = this.keys_;
                } else {
                    permission.keys_ = repeatedFieldBuilderV3.build();
                }
                permission.bitField0_ = 0;
                onBuilt();
                return permission;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Permission) {
                    return mergeFrom((Permission) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Permission permission) {
                if (permission == Permission.getDefaultInstance()) {
                    return this;
                }
                if (permission.type_ != 0) {
                    setTypeValue(permission.getTypeValue());
                }
                if (permission.getId() != 0) {
                    setId(permission.getId());
                }
                if (!permission.getPermissionName().isEmpty()) {
                    this.permissionName_ = permission.permissionName_;
                    onChanged();
                }
                if (permission.getThreshold() != 0) {
                    setThreshold(permission.getThreshold());
                }
                if (permission.getParentId() != 0) {
                    setParentId(permission.getParentId());
                }
                if (permission.getOperations() != ByteString.EMPTY) {
                    setOperations(permission.getOperations());
                }
                if (this.keysBuilder_ == null) {
                    if (!permission.keys_.isEmpty()) {
                        if (this.keys_.isEmpty()) {
                            this.keys_ = permission.keys_;
                            this.bitField0_ &= -65;
                        } else {
                            ensureKeysIsMutable();
                            this.keys_.addAll(permission.keys_);
                        }
                        onChanged();
                    }
                } else if (!permission.keys_.isEmpty()) {
                    if (!this.keysBuilder_.isEmpty()) {
                        this.keysBuilder_.addAllMessages(permission.keys_);
                    } else {
                        this.keysBuilder_.dispose();
                        this.keysBuilder_ = null;
                        this.keys_ = permission.keys_;
                        this.bitField0_ &= -65;
                        this.keysBuilder_ = Permission.alwaysUseFieldBuilders ? getKeysFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(permission.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Permission.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Permission.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Permission$Builder");
            }

            public Builder setTypeValue(int i) {
                this.type_ = i;
                onChanged();
                return this;
            }

            @Override
            public PermissionType getType() {
                PermissionType valueOf = PermissionType.valueOf(this.type_);
                return valueOf == null ? PermissionType.UNRECOGNIZED : valueOf;
            }

            public Builder setType(PermissionType permissionType) {
                permissionType.getClass();
                this.type_ = permissionType.getNumber();
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.type_ = 0;
                onChanged();
                return this;
            }

            public Builder setId(int i) {
                this.id_ = i;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.id_ = 0;
                onChanged();
                return this;
            }

            @Override
            public String getPermissionName() {
                Object obj = this.permissionName_;
                if (!(obj instanceof String)) {
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.permissionName_ = stringUtf8;
                    return stringUtf8;
                }
                return (String) obj;
            }

            @Override
            public ByteString getPermissionNameBytes() {
                Object obj = this.permissionName_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.permissionName_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            public Builder setPermissionName(String str) {
                str.getClass();
                this.permissionName_ = str;
                onChanged();
                return this;
            }

            public Builder clearPermissionName() {
                this.permissionName_ = Permission.getDefaultInstance().getPermissionName();
                onChanged();
                return this;
            }

            public Builder setPermissionNameBytes(ByteString byteString) {
                byteString.getClass();
                Permission.checkByteStringIsUtf8(byteString);
                this.permissionName_ = byteString;
                onChanged();
                return this;
            }

            public Builder setThreshold(long j) {
                this.threshold_ = j;
                onChanged();
                return this;
            }

            public Builder clearThreshold() {
                this.threshold_ = 0L;
                onChanged();
                return this;
            }

            public Builder setParentId(int i) {
                this.parentId_ = i;
                onChanged();
                return this;
            }

            public Builder clearParentId() {
                this.parentId_ = 0;
                onChanged();
                return this;
            }

            public Builder setOperations(ByteString byteString) {
                byteString.getClass();
                this.operations_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearOperations() {
                this.operations_ = Permission.getDefaultInstance().getOperations();
                onChanged();
                return this;
            }

            private void ensureKeysIsMutable() {
                if ((this.bitField0_ & 64) != 64) {
                    this.keys_ = new ArrayList(this.keys_);
                    this.bitField0_ |= 64;
                }
            }

            @Override
            public List<Key> getKeysList() {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.keys_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getKeysCount() {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.keys_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Key getKeys(int i) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.keys_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setKeys(int i, Key key) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    key.getClass();
                    ensureKeysIsMutable();
                    this.keys_.set(i, key);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, key);
                }
                return this;
            }

            public Builder setKeys(int i, Key.Builder builder) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureKeysIsMutable();
                    this.keys_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addKeys(Key key) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    key.getClass();
                    ensureKeysIsMutable();
                    this.keys_.add(key);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(key);
                }
                return this;
            }

            public Builder addKeys(int i, Key key) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    key.getClass();
                    ensureKeysIsMutable();
                    this.keys_.add(i, key);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, key);
                }
                return this;
            }

            public Builder addKeys(Key.Builder builder) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureKeysIsMutable();
                    this.keys_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addKeys(int i, Key.Builder builder) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureKeysIsMutable();
                    this.keys_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllKeys(Iterable<? extends Key> iterable) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureKeysIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.keys_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearKeys() {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.keys_ = Collections.emptyList();
                    this.bitField0_ &= -65;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeKeys(int i) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureKeysIsMutable();
                    this.keys_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Key.Builder getKeysBuilder(int i) {
                return getKeysFieldBuilder().getBuilder(i);
            }

            @Override
            public KeyOrBuilder getKeysOrBuilder(int i) {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.keys_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends KeyOrBuilder> getKeysOrBuilderList() {
                RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> repeatedFieldBuilderV3 = this.keysBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.keys_);
            }

            public Key.Builder addKeysBuilder() {
                return getKeysFieldBuilder().addBuilder(Key.getDefaultInstance());
            }

            public Key.Builder addKeysBuilder(int i) {
                return getKeysFieldBuilder().addBuilder(i, Key.getDefaultInstance());
            }

            public List<Key.Builder> getKeysBuilderList() {
                return getKeysFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Key, Key.Builder, KeyOrBuilder> getKeysFieldBuilder() {
                if (this.keysBuilder_ == null) {
                    this.keysBuilder_ = new RepeatedFieldBuilderV3<>(this.keys_, (this.bitField0_ & 64) == 64, getParentForChildren(), isClean());
                    this.keys_ = null;
                }
                return this.keysBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Witness extends GeneratedMessageV3 implements WitnessOrBuilder {
        public static final int ADDRESS_FIELD_NUMBER = 1;
        public static final int ISJOBS_FIELD_NUMBER = 9;
        public static final int LATESTBLOCKNUM_FIELD_NUMBER = 7;
        public static final int LATESTSLOTNUM_FIELD_NUMBER = 8;
        public static final int PUBKEY_FIELD_NUMBER = 3;
        public static final int TOTALMISSED_FIELD_NUMBER = 6;
        public static final int TOTALPRODUCED_FIELD_NUMBER = 5;
        public static final int URL_FIELD_NUMBER = 4;
        public static final int VOTECOUNT_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private ByteString address_;
        private boolean isJobs_;
        private long latestBlockNum_;
        private long latestSlotNum_;
        private byte memoizedIsInitialized;
        private ByteString pubKey_;
        private long totalMissed_;
        private long totalProduced_;
        private volatile Object url_;
        private long voteCount_;
        private static final Witness DEFAULT_INSTANCE = new Witness();
        private static final Parser<Witness> PARSER = new AbstractParser<Witness>() {
            @Override
            public Witness parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Witness(codedInputStream, extensionRegistryLite);
            }
        };

        public static Witness getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Witness> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public Witness getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public boolean getIsJobs() {
            return this.isJobs_;
        }

        @Override
        public long getLatestBlockNum() {
            return this.latestBlockNum_;
        }

        @Override
        public long getLatestSlotNum() {
            return this.latestSlotNum_;
        }

        @Override
        public Parser<Witness> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getPubKey() {
            return this.pubKey_;
        }

        @Override
        public long getTotalMissed() {
            return this.totalMissed_;
        }

        @Override
        public long getTotalProduced() {
            return this.totalProduced_;
        }

        @Override
        public long getVoteCount() {
            return this.voteCount_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Witness(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Witness() {
            this.memoizedIsInitialized = (byte) -1;
            this.address_ = ByteString.EMPTY;
            this.voteCount_ = 0L;
            this.pubKey_ = ByteString.EMPTY;
            this.url_ = "";
            this.totalProduced_ = 0L;
            this.totalMissed_ = 0L;
            this.latestBlockNum_ = 0L;
            this.latestSlotNum_ = 0L;
            this.isJobs_ = false;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Witness(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.address_ = codedInputStream.readBytes();
                                } else if (readTag == 16) {
                                    this.voteCount_ = codedInputStream.readInt64();
                                } else if (readTag == 26) {
                                    this.pubKey_ = codedInputStream.readBytes();
                                } else if (readTag == 34) {
                                    this.url_ = codedInputStream.readStringRequireUtf8();
                                } else if (readTag == 40) {
                                    this.totalProduced_ = codedInputStream.readInt64();
                                } else if (readTag == 48) {
                                    this.totalMissed_ = codedInputStream.readInt64();
                                } else if (readTag == 56) {
                                    this.latestBlockNum_ = codedInputStream.readInt64();
                                } else if (readTag == 64) {
                                    this.latestSlotNum_ = codedInputStream.readInt64();
                                } else if (readTag != 72) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.isJobs_ = codedInputStream.readBool();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        }
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Witness_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Witness_fieldAccessorTable.ensureFieldAccessorsInitialized(Witness.class, Builder.class);
        }

        @Override
        public String getUrl() {
            Object obj = this.url_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.url_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getUrlBytes() {
            Object obj = this.url_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.url_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.address_);
            }
            long j = this.voteCount_;
            if (j != 0) {
                codedOutputStream.writeInt64(2, j);
            }
            if (!this.pubKey_.isEmpty()) {
                codedOutputStream.writeBytes(3, this.pubKey_);
            }
            if (!getUrlBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 4, this.url_);
            }
            long j2 = this.totalProduced_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(5, j2);
            }
            long j3 = this.totalMissed_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(6, j3);
            }
            long j4 = this.latestBlockNum_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(7, j4);
            }
            long j5 = this.latestSlotNum_;
            if (j5 != 0) {
                codedOutputStream.writeInt64(8, j5);
            }
            boolean z = this.isJobs_;
            if (z) {
                codedOutputStream.writeBool(9, z);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.address_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.address_) : 0;
            long j = this.voteCount_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
            }
            if (!this.pubKey_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, this.pubKey_);
            }
            if (!getUrlBytes().isEmpty()) {
                computeBytesSize += GeneratedMessageV3.computeStringSize(4, this.url_);
            }
            long j2 = this.totalProduced_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(5, j2);
            }
            long j3 = this.totalMissed_;
            if (j3 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(6, j3);
            }
            long j4 = this.latestBlockNum_;
            if (j4 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(7, j4);
            }
            long j5 = this.latestSlotNum_;
            if (j5 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(8, j5);
            }
            boolean z = this.isJobs_;
            if (z) {
                computeBytesSize += CodedOutputStream.computeBoolSize(9, z);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Witness)) {
                return super.equals(obj);
            }
            Witness witness = (Witness) obj;
            return getAddress().equals(witness.getAddress()) && getVoteCount() == witness.getVoteCount() && getPubKey().equals(witness.getPubKey()) && getUrl().equals(witness.getUrl()) && getTotalProduced() == witness.getTotalProduced() && getTotalMissed() == witness.getTotalMissed() && getLatestBlockNum() == witness.getLatestBlockNum() && getLatestSlotNum() == witness.getLatestSlotNum() && getIsJobs() == witness.getIsJobs() && this.unknownFields.equals(witness.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getVoteCount())) * 37) + 3) * 53) + getPubKey().hashCode()) * 37) + 4) * 53) + getUrl().hashCode()) * 37) + 5) * 53) + Internal.hashLong(getTotalProduced())) * 37) + 6) * 53) + Internal.hashLong(getTotalMissed())) * 37) + 7) * 53) + Internal.hashLong(getLatestBlockNum())) * 37) + 8) * 53) + Internal.hashLong(getLatestSlotNum())) * 37) + 9) * 53) + Internal.hashBoolean(getIsJobs())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static Witness parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Witness parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Witness parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Witness parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Witness parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Witness parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Witness parseFrom(InputStream inputStream) throws IOException {
            return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Witness parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Witness parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Witness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Witness parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Witness) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Witness parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Witness parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Witness) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Witness witness) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(witness);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements WitnessOrBuilder {
            private ByteString address_;
            private boolean isJobs_;
            private long latestBlockNum_;
            private long latestSlotNum_;
            private ByteString pubKey_;
            private long totalMissed_;
            private long totalProduced_;
            private Object url_;
            private long voteCount_;

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public boolean getIsJobs() {
                return this.isJobs_;
            }

            @Override
            public long getLatestBlockNum() {
                return this.latestBlockNum_;
            }

            @Override
            public long getLatestSlotNum() {
                return this.latestSlotNum_;
            }

            @Override
            public ByteString getPubKey() {
                return this.pubKey_;
            }

            @Override
            public long getTotalMissed() {
                return this.totalMissed_;
            }

            @Override
            public long getTotalProduced() {
                return this.totalProduced_;
            }

            @Override
            public long getVoteCount() {
                return this.voteCount_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Witness_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Witness_fieldAccessorTable.ensureFieldAccessorsInitialized(Witness.class, Builder.class);
            }

            private Builder() {
                this.address_ = ByteString.EMPTY;
                this.pubKey_ = ByteString.EMPTY;
                this.url_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.address_ = ByteString.EMPTY;
                this.pubKey_ = ByteString.EMPTY;
                this.url_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Witness.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.address_ = ByteString.EMPTY;
                this.voteCount_ = 0L;
                this.pubKey_ = ByteString.EMPTY;
                this.url_ = "";
                this.totalProduced_ = 0L;
                this.totalMissed_ = 0L;
                this.latestBlockNum_ = 0L;
                this.latestSlotNum_ = 0L;
                this.isJobs_ = false;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Witness_descriptor;
            }

            @Override
            public Witness getDefaultInstanceForType() {
                return Witness.getDefaultInstance();
            }

            @Override
            public Witness build() {
                Witness buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Witness buildPartial() {
                Witness witness = new Witness(this);
                witness.address_ = this.address_;
                witness.voteCount_ = this.voteCount_;
                witness.pubKey_ = this.pubKey_;
                witness.url_ = this.url_;
                witness.totalProduced_ = this.totalProduced_;
                witness.totalMissed_ = this.totalMissed_;
                witness.latestBlockNum_ = this.latestBlockNum_;
                witness.latestSlotNum_ = this.latestSlotNum_;
                witness.isJobs_ = this.isJobs_;
                onBuilt();
                return witness;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Witness) {
                    return mergeFrom((Witness) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Witness witness) {
                if (witness == Witness.getDefaultInstance()) {
                    return this;
                }
                if (witness.getAddress() != ByteString.EMPTY) {
                    setAddress(witness.getAddress());
                }
                if (witness.getVoteCount() != 0) {
                    setVoteCount(witness.getVoteCount());
                }
                if (witness.getPubKey() != ByteString.EMPTY) {
                    setPubKey(witness.getPubKey());
                }
                if (!witness.getUrl().isEmpty()) {
                    this.url_ = witness.url_;
                    onChanged();
                }
                if (witness.getTotalProduced() != 0) {
                    setTotalProduced(witness.getTotalProduced());
                }
                if (witness.getTotalMissed() != 0) {
                    setTotalMissed(witness.getTotalMissed());
                }
                if (witness.getLatestBlockNum() != 0) {
                    setLatestBlockNum(witness.getLatestBlockNum());
                }
                if (witness.getLatestSlotNum() != 0) {
                    setLatestSlotNum(witness.getLatestSlotNum());
                }
                if (witness.getIsJobs()) {
                    setIsJobs(witness.getIsJobs());
                }
                mergeUnknownFields(witness.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Witness.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Witness.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Witness$Builder");
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = Witness.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            public Builder setVoteCount(long j) {
                this.voteCount_ = j;
                onChanged();
                return this;
            }

            public Builder clearVoteCount() {
                this.voteCount_ = 0L;
                onChanged();
                return this;
            }

            public Builder setPubKey(ByteString byteString) {
                byteString.getClass();
                this.pubKey_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearPubKey() {
                this.pubKey_ = Witness.getDefaultInstance().getPubKey();
                onChanged();
                return this;
            }

            @Override
            public String getUrl() {
                Object obj = this.url_;
                if (!(obj instanceof String)) {
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.url_ = stringUtf8;
                    return stringUtf8;
                }
                return (String) obj;
            }

            @Override
            public ByteString getUrlBytes() {
                Object obj = this.url_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.url_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            public Builder setUrl(String str) {
                str.getClass();
                this.url_ = str;
                onChanged();
                return this;
            }

            public Builder clearUrl() {
                this.url_ = Witness.getDefaultInstance().getUrl();
                onChanged();
                return this;
            }

            public Builder setUrlBytes(ByteString byteString) {
                byteString.getClass();
                Witness.checkByteStringIsUtf8(byteString);
                this.url_ = byteString;
                onChanged();
                return this;
            }

            public Builder setTotalProduced(long j) {
                this.totalProduced_ = j;
                onChanged();
                return this;
            }

            public Builder clearTotalProduced() {
                this.totalProduced_ = 0L;
                onChanged();
                return this;
            }

            public Builder setTotalMissed(long j) {
                this.totalMissed_ = j;
                onChanged();
                return this;
            }

            public Builder clearTotalMissed() {
                this.totalMissed_ = 0L;
                onChanged();
                return this;
            }

            public Builder setLatestBlockNum(long j) {
                this.latestBlockNum_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestBlockNum() {
                this.latestBlockNum_ = 0L;
                onChanged();
                return this;
            }

            public Builder setLatestSlotNum(long j) {
                this.latestSlotNum_ = j;
                onChanged();
                return this;
            }

            public Builder clearLatestSlotNum() {
                this.latestSlotNum_ = 0L;
                onChanged();
                return this;
            }

            public Builder setIsJobs(boolean z) {
                this.isJobs_ = z;
                onChanged();
                return this;
            }

            public Builder clearIsJobs() {
                this.isJobs_ = false;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Votes extends GeneratedMessageV3 implements VotesOrBuilder {
        public static final int ADDRESS_FIELD_NUMBER = 1;
        public static final int NEW_VOTES_FIELD_NUMBER = 3;
        public static final int OLD_VOTES_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private ByteString address_;
        private int bitField0_;
        private byte memoizedIsInitialized;
        private List<Vote> newVotes_;
        private List<Vote> oldVotes_;
        private static final Votes DEFAULT_INSTANCE = new Votes();
        private static final Parser<Votes> PARSER = new AbstractParser<Votes>() {
            @Override
            public Votes parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Votes(codedInputStream, extensionRegistryLite);
            }
        };

        public static Votes getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Votes> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public Votes getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<Vote> getNewVotesList() {
            return this.newVotes_;
        }

        @Override
        public List<? extends VoteOrBuilder> getNewVotesOrBuilderList() {
            return this.newVotes_;
        }

        @Override
        public List<Vote> getOldVotesList() {
            return this.oldVotes_;
        }

        @Override
        public List<? extends VoteOrBuilder> getOldVotesOrBuilderList() {
            return this.oldVotes_;
        }

        @Override
        public Parser<Votes> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Votes(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Votes() {
            this.memoizedIsInitialized = (byte) -1;
            this.address_ = ByteString.EMPTY;
            this.oldVotes_ = Collections.emptyList();
            this.newVotes_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Votes(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.address_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                if (!(z2 & true)) {
                                    this.oldVotes_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.oldVotes_.add((Vote) codedInputStream.readMessage(Vote.parser(), extensionRegistryLite));
                            } else if (readTag != 26) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.newVotes_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.newVotes_.add((Vote) codedInputStream.readMessage(Vote.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.oldVotes_ = Collections.unmodifiableList(this.oldVotes_);
                    }
                    if (z2 & true) {
                        this.newVotes_ = Collections.unmodifiableList(this.newVotes_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Votes_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Votes_fieldAccessorTable.ensureFieldAccessorsInitialized(Votes.class, Builder.class);
        }

        @Override
        public int getOldVotesCount() {
            return this.oldVotes_.size();
        }

        @Override
        public Vote getOldVotes(int i) {
            return this.oldVotes_.get(i);
        }

        @Override
        public VoteOrBuilder getOldVotesOrBuilder(int i) {
            return this.oldVotes_.get(i);
        }

        @Override
        public int getNewVotesCount() {
            return this.newVotes_.size();
        }

        @Override
        public Vote getNewVotes(int i) {
            return this.newVotes_.get(i);
        }

        @Override
        public VoteOrBuilder getNewVotesOrBuilder(int i) {
            return this.newVotes_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.address_);
            }
            for (int i = 0; i < this.oldVotes_.size(); i++) {
                codedOutputStream.writeMessage(2, this.oldVotes_.get(i));
            }
            for (int i2 = 0; i2 < this.newVotes_.size(); i2++) {
                codedOutputStream.writeMessage(3, this.newVotes_.get(i2));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.address_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.address_) : 0;
            for (int i2 = 0; i2 < this.oldVotes_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(2, this.oldVotes_.get(i2));
            }
            for (int i3 = 0; i3 < this.newVotes_.size(); i3++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(3, this.newVotes_.get(i3));
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Votes)) {
                return super.equals(obj);
            }
            Votes votes = (Votes) obj;
            return getAddress().equals(votes.getAddress()) && getOldVotesList().equals(votes.getOldVotesList()) && getNewVotesList().equals(votes.getNewVotesList()) && this.unknownFields.equals(votes.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode();
            if (getOldVotesCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getOldVotesList().hashCode();
            }
            if (getNewVotesCount() > 0) {
                hashCode = (((hashCode * 37) + 3) * 53) + getNewVotesList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Votes parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Votes parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Votes parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Votes parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Votes parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Votes parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Votes parseFrom(InputStream inputStream) throws IOException {
            return (Votes) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Votes parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Votes) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Votes parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Votes) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Votes parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Votes) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Votes parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Votes) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Votes parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Votes) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Votes votes) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(votes);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements VotesOrBuilder {
            private ByteString address_;
            private int bitField0_;
            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> newVotesBuilder_;
            private List<Vote> newVotes_;
            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> oldVotesBuilder_;
            private List<Vote> oldVotes_;

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Votes_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Votes_fieldAccessorTable.ensureFieldAccessorsInitialized(Votes.class, Builder.class);
            }

            private Builder() {
                this.address_ = ByteString.EMPTY;
                this.oldVotes_ = Collections.emptyList();
                this.newVotes_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.address_ = ByteString.EMPTY;
                this.oldVotes_ = Collections.emptyList();
                this.newVotes_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Votes.alwaysUseFieldBuilders) {
                    getOldVotesFieldBuilder();
                    getNewVotesFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.address_ = ByteString.EMPTY;
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.oldVotes_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV32 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    this.newVotes_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilderV32.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Votes_descriptor;
            }

            @Override
            public Votes getDefaultInstanceForType() {
                return Votes.getDefaultInstance();
            }

            @Override
            public Votes build() {
                Votes buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Votes buildPartial() {
                Votes votes = new Votes(this);
                votes.address_ = this.address_;
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.oldVotes_ = Collections.unmodifiableList(this.oldVotes_);
                        this.bitField0_ &= -3;
                    }
                    votes.oldVotes_ = this.oldVotes_;
                } else {
                    votes.oldVotes_ = repeatedFieldBuilderV3.build();
                }
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV32 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.newVotes_ = Collections.unmodifiableList(this.newVotes_);
                        this.bitField0_ &= -5;
                    }
                    votes.newVotes_ = this.newVotes_;
                } else {
                    votes.newVotes_ = repeatedFieldBuilderV32.build();
                }
                votes.bitField0_ = 0;
                onBuilt();
                return votes;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Votes) {
                    return mergeFrom((Votes) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Votes votes) {
                if (votes == Votes.getDefaultInstance()) {
                    return this;
                }
                if (votes.getAddress() != ByteString.EMPTY) {
                    setAddress(votes.getAddress());
                }
                if (this.oldVotesBuilder_ == null) {
                    if (!votes.oldVotes_.isEmpty()) {
                        if (this.oldVotes_.isEmpty()) {
                            this.oldVotes_ = votes.oldVotes_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureOldVotesIsMutable();
                            this.oldVotes_.addAll(votes.oldVotes_);
                        }
                        onChanged();
                    }
                } else if (!votes.oldVotes_.isEmpty()) {
                    if (!this.oldVotesBuilder_.isEmpty()) {
                        this.oldVotesBuilder_.addAllMessages(votes.oldVotes_);
                    } else {
                        this.oldVotesBuilder_.dispose();
                        this.oldVotesBuilder_ = null;
                        this.oldVotes_ = votes.oldVotes_;
                        this.bitField0_ &= -3;
                        this.oldVotesBuilder_ = Votes.alwaysUseFieldBuilders ? getOldVotesFieldBuilder() : null;
                    }
                }
                if (this.newVotesBuilder_ == null) {
                    if (!votes.newVotes_.isEmpty()) {
                        if (this.newVotes_.isEmpty()) {
                            this.newVotes_ = votes.newVotes_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureNewVotesIsMutable();
                            this.newVotes_.addAll(votes.newVotes_);
                        }
                        onChanged();
                    }
                } else if (!votes.newVotes_.isEmpty()) {
                    if (!this.newVotesBuilder_.isEmpty()) {
                        this.newVotesBuilder_.addAllMessages(votes.newVotes_);
                    } else {
                        this.newVotesBuilder_.dispose();
                        this.newVotesBuilder_ = null;
                        this.newVotes_ = votes.newVotes_;
                        this.bitField0_ &= -5;
                        this.newVotesBuilder_ = Votes.alwaysUseFieldBuilders ? getNewVotesFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(votes.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Votes.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Votes.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Votes$Builder");
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = Votes.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            private void ensureOldVotesIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.oldVotes_ = new ArrayList(this.oldVotes_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<Vote> getOldVotesList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.oldVotes_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getOldVotesCount() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.oldVotes_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Vote getOldVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.oldVotes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setOldVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureOldVotesIsMutable();
                    this.oldVotes_.set(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, vote);
                }
                return this;
            }

            public Builder setOldVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOldVotesIsMutable();
                    this.oldVotes_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addOldVotes(Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureOldVotesIsMutable();
                    this.oldVotes_.add(vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(vote);
                }
                return this;
            }

            public Builder addOldVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureOldVotesIsMutable();
                    this.oldVotes_.add(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, vote);
                }
                return this;
            }

            public Builder addOldVotes(Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOldVotesIsMutable();
                    this.oldVotes_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addOldVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOldVotesIsMutable();
                    this.oldVotes_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllOldVotes(Iterable<? extends Vote> iterable) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOldVotesIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.oldVotes_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearOldVotes() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.oldVotes_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeOldVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOldVotesIsMutable();
                    this.oldVotes_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Vote.Builder getOldVotesBuilder(int i) {
                return getOldVotesFieldBuilder().getBuilder(i);
            }

            @Override
            public VoteOrBuilder getOldVotesOrBuilder(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.oldVotes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends VoteOrBuilder> getOldVotesOrBuilderList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.oldVotesBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.oldVotes_);
            }

            public Vote.Builder addOldVotesBuilder() {
                return getOldVotesFieldBuilder().addBuilder(Vote.getDefaultInstance());
            }

            public Vote.Builder addOldVotesBuilder(int i) {
                return getOldVotesFieldBuilder().addBuilder(i, Vote.getDefaultInstance());
            }

            public List<Vote.Builder> getOldVotesBuilderList() {
                return getOldVotesFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> getOldVotesFieldBuilder() {
                if (this.oldVotesBuilder_ == null) {
                    this.oldVotesBuilder_ = new RepeatedFieldBuilderV3<>(this.oldVotes_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.oldVotes_ = null;
                }
                return this.oldVotesBuilder_;
            }

            private void ensureNewVotesIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.newVotes_ = new ArrayList(this.newVotes_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<Vote> getNewVotesList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.newVotes_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getNewVotesCount() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.newVotes_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Vote getNewVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.newVotes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setNewVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureNewVotesIsMutable();
                    this.newVotes_.set(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, vote);
                }
                return this;
            }

            public Builder setNewVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureNewVotesIsMutable();
                    this.newVotes_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addNewVotes(Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureNewVotesIsMutable();
                    this.newVotes_.add(vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(vote);
                }
                return this;
            }

            public Builder addNewVotes(int i, Vote vote) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    vote.getClass();
                    ensureNewVotesIsMutable();
                    this.newVotes_.add(i, vote);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, vote);
                }
                return this;
            }

            public Builder addNewVotes(Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureNewVotesIsMutable();
                    this.newVotes_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addNewVotes(int i, Vote.Builder builder) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureNewVotesIsMutable();
                    this.newVotes_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllNewVotes(Iterable<? extends Vote> iterable) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureNewVotesIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.newVotes_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearNewVotes() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.newVotes_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeNewVotes(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureNewVotesIsMutable();
                    this.newVotes_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Vote.Builder getNewVotesBuilder(int i) {
                return getNewVotesFieldBuilder().getBuilder(i);
            }

            @Override
            public VoteOrBuilder getNewVotesOrBuilder(int i) {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.newVotes_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends VoteOrBuilder> getNewVotesOrBuilderList() {
                RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> repeatedFieldBuilderV3 = this.newVotesBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.newVotes_);
            }

            public Vote.Builder addNewVotesBuilder() {
                return getNewVotesFieldBuilder().addBuilder(Vote.getDefaultInstance());
            }

            public Vote.Builder addNewVotesBuilder(int i) {
                return getNewVotesFieldBuilder().addBuilder(i, Vote.getDefaultInstance());
            }

            public List<Vote.Builder> getNewVotesBuilderList() {
                return getNewVotesFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Vote, Vote.Builder, VoteOrBuilder> getNewVotesFieldBuilder() {
                if (this.newVotesBuilder_ == null) {
                    this.newVotesBuilder_ = new RepeatedFieldBuilderV3<>(this.newVotes_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.newVotes_ = null;
                }
                return this.newVotesBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class TXOutput extends GeneratedMessageV3 implements TXOutputOrBuilder {
        private static final TXOutput DEFAULT_INSTANCE = new TXOutput();
        private static final Parser<TXOutput> PARSER = new AbstractParser<TXOutput>() {
            @Override
            public TXOutput parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TXOutput(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int PUBKEYHASH_FIELD_NUMBER = 2;
        public static final int VALUE_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private ByteString pubKeyHash_;
        private long value_;

        public static TXOutput getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<TXOutput> parser() {
            return PARSER;
        }

        @Override
        public TXOutput getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<TXOutput> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getPubKeyHash() {
            return this.pubKeyHash_;
        }

        @Override
        public long getValue() {
            return this.value_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private TXOutput(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private TXOutput() {
            this.memoizedIsInitialized = (byte) -1;
            this.value_ = 0L;
            this.pubKeyHash_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TXOutput(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.value_ = codedInputStream.readInt64();
                                } else if (readTag != 18) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.pubKeyHash_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_TXOutput_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_TXOutput_fieldAccessorTable.ensureFieldAccessorsInitialized(TXOutput.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.value_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            if (!this.pubKeyHash_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.pubKeyHash_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.value_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            if (!this.pubKeyHash_.isEmpty()) {
                computeInt64Size += CodedOutputStream.computeBytesSize(2, this.pubKeyHash_);
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof TXOutput)) {
                return super.equals(obj);
            }
            TXOutput tXOutput = (TXOutput) obj;
            return getValue() == tXOutput.getValue() && getPubKeyHash().equals(tXOutput.getPubKeyHash()) && this.unknownFields.equals(tXOutput.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getValue())) * 37) + 2) * 53) + getPubKeyHash().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static TXOutput parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static TXOutput parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static TXOutput parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TXOutput parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TXOutput parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TXOutput parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TXOutput parseFrom(InputStream inputStream) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static TXOutput parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXOutput parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static TXOutput parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXOutput parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static TXOutput parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutput) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(TXOutput tXOutput) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(tXOutput);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TXOutputOrBuilder {
            private ByteString pubKeyHash_;
            private long value_;

            @Override
            public ByteString getPubKeyHash() {
                return this.pubKeyHash_;
            }

            @Override
            public long getValue() {
                return this.value_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TXOutput_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TXOutput_fieldAccessorTable.ensureFieldAccessorsInitialized(TXOutput.class, Builder.class);
            }

            private Builder() {
                this.pubKeyHash_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.pubKeyHash_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = TXOutput.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.value_ = 0L;
                this.pubKeyHash_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_TXOutput_descriptor;
            }

            @Override
            public TXOutput getDefaultInstanceForType() {
                return TXOutput.getDefaultInstance();
            }

            @Override
            public TXOutput build() {
                TXOutput buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public TXOutput buildPartial() {
                TXOutput tXOutput = new TXOutput(this);
                tXOutput.value_ = this.value_;
                tXOutput.pubKeyHash_ = this.pubKeyHash_;
                onBuilt();
                return tXOutput;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof TXOutput) {
                    return mergeFrom((TXOutput) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(TXOutput tXOutput) {
                if (tXOutput == TXOutput.getDefaultInstance()) {
                    return this;
                }
                if (tXOutput.getValue() != 0) {
                    setValue(tXOutput.getValue());
                }
                if (tXOutput.getPubKeyHash() != ByteString.EMPTY) {
                    setPubKeyHash(tXOutput.getPubKeyHash());
                }
                mergeUnknownFields(tXOutput.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.TXOutput.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TXOutput.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TXOutput$Builder");
            }

            public Builder setValue(long j) {
                this.value_ = j;
                onChanged();
                return this;
            }

            public Builder clearValue() {
                this.value_ = 0L;
                onChanged();
                return this;
            }

            public Builder setPubKeyHash(ByteString byteString) {
                byteString.getClass();
                this.pubKeyHash_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearPubKeyHash() {
                this.pubKeyHash_ = TXOutput.getDefaultInstance().getPubKeyHash();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class TXInput extends GeneratedMessageV3 implements TXInputOrBuilder {
        private static final TXInput DEFAULT_INSTANCE = new TXInput();
        private static final Parser<TXInput> PARSER = new AbstractParser<TXInput>() {
            @Override
            public TXInput parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TXInput(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RAW_DATA_FIELD_NUMBER = 1;
        public static final int SIGNATURE_FIELD_NUMBER = 4;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private raw rawData_;
        private ByteString signature_;

        public interface rawOrBuilder extends MessageOrBuilder {
            ByteString getPubKey();

            ByteString getTxID();

            long getVout();
        }

        public static TXInput getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<TXInput> parser() {
            return PARSER;
        }

        @Override
        public TXInput getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<TXInput> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getSignature() {
            return this.signature_;
        }

        @Override
        public boolean hasRawData() {
            return this.rawData_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private TXInput(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private TXInput() {
            this.memoizedIsInitialized = (byte) -1;
            this.signature_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TXInput(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                raw rawVar = this.rawData_;
                                raw.Builder builder = rawVar != null ? rawVar.toBuilder() : null;
                                raw rawVar2 = (raw) codedInputStream.readMessage(raw.parser(), extensionRegistryLite);
                                this.rawData_ = rawVar2;
                                if (builder != null) {
                                    builder.mergeFrom(rawVar2);
                                    this.rawData_ = builder.buildPartial();
                                }
                            } else if (readTag != 34) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.signature_ = codedInputStream.readBytes();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_TXInput_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_TXInput_fieldAccessorTable.ensureFieldAccessorsInitialized(TXInput.class, Builder.class);
        }

        public static final class raw extends GeneratedMessageV3 implements rawOrBuilder {
            private static final raw DEFAULT_INSTANCE = new raw();
            private static final Parser<raw> PARSER = new AbstractParser<raw>() {
                @Override
                public raw parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new raw(codedInputStream, extensionRegistryLite);
                }
            };
            public static final int PUBKEY_FIELD_NUMBER = 3;
            public static final int TXID_FIELD_NUMBER = 1;
            public static final int VOUT_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private byte memoizedIsInitialized;
            private ByteString pubKey_;
            private ByteString txID_;
            private long vout_;

            public static raw getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<raw> parser() {
                return PARSER;
            }

            @Override
            public raw getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<raw> getParserForType() {
                return PARSER;
            }

            @Override
            public ByteString getPubKey() {
                return this.pubKey_;
            }

            @Override
            public ByteString getTxID() {
                return this.txID_;
            }

            @Override
            public long getVout() {
                return this.vout_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private raw(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private raw() {
                this.memoizedIsInitialized = (byte) -1;
                this.txID_ = ByteString.EMPTY;
                this.vout_ = 0L;
                this.pubKey_ = ByteString.EMPTY;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private raw(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.txID_ = codedInputStream.readBytes();
                                } else if (readTag == 16) {
                                    this.vout_ = codedInputStream.readInt64();
                                } else if (readTag != 26) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.pubKey_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TXInput_raw_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TXInput_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.txID_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.txID_);
                }
                long j = this.vout_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                if (!this.pubKey_.isEmpty()) {
                    codedOutputStream.writeBytes(3, this.pubKey_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.txID_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.txID_) : 0;
                long j = this.vout_;
                if (j != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
                }
                if (!this.pubKey_.isEmpty()) {
                    computeBytesSize += CodedOutputStream.computeBytesSize(3, this.pubKey_);
                }
                int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof raw)) {
                    return super.equals(obj);
                }
                raw rawVar = (raw) obj;
                return getTxID().equals(rawVar.getTxID()) && getVout() == rawVar.getVout() && getPubKey().equals(rawVar.getPubKey()) && this.unknownFields.equals(rawVar.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getTxID().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getVout())) * 37) + 3) * 53) + getPubKey().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static raw parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static raw parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static raw parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static raw parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static raw parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static raw parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static raw parseFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static raw parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static raw parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static raw parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(raw rawVar) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(rawVar);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements rawOrBuilder {
                private ByteString pubKey_;
                private ByteString txID_;
                private long vout_;

                @Override
                public ByteString getPubKey() {
                    return this.pubKey_;
                }

                @Override
                public ByteString getTxID() {
                    return this.txID_;
                }

                @Override
                public long getVout() {
                    return this.vout_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_TXInput_raw_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_TXInput_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
                }

                private Builder() {
                    this.txID_ = ByteString.EMPTY;
                    this.pubKey_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.txID_ = ByteString.EMPTY;
                    this.pubKey_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = raw.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.txID_ = ByteString.EMPTY;
                    this.vout_ = 0L;
                    this.pubKey_ = ByteString.EMPTY;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_TXInput_raw_descriptor;
                }

                @Override
                public raw getDefaultInstanceForType() {
                    return raw.getDefaultInstance();
                }

                @Override
                public raw build() {
                    raw buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public raw buildPartial() {
                    raw rawVar = new raw(this);
                    rawVar.txID_ = this.txID_;
                    rawVar.vout_ = this.vout_;
                    rawVar.pubKey_ = this.pubKey_;
                    onBuilt();
                    return rawVar;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof raw) {
                        return mergeFrom((raw) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(raw rawVar) {
                    if (rawVar == raw.getDefaultInstance()) {
                        return this;
                    }
                    if (rawVar.getTxID() != ByteString.EMPTY) {
                        setTxID(rawVar.getTxID());
                    }
                    if (rawVar.getVout() != 0) {
                        setVout(rawVar.getVout());
                    }
                    if (rawVar.getPubKey() != ByteString.EMPTY) {
                        setPubKey(rawVar.getPubKey());
                    }
                    mergeUnknownFields(rawVar.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.TXInput.raw.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TXInput.raw.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TXInput$raw$Builder");
                }

                public Builder setTxID(ByteString byteString) {
                    byteString.getClass();
                    this.txID_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearTxID() {
                    this.txID_ = raw.getDefaultInstance().getTxID();
                    onChanged();
                    return this;
                }

                public Builder setVout(long j) {
                    this.vout_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearVout() {
                    this.vout_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setPubKey(ByteString byteString) {
                    byteString.getClass();
                    this.pubKey_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearPubKey() {
                    this.pubKey_ = raw.getDefaultInstance().getPubKey();
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public raw getRawData() {
            raw rawVar = this.rawData_;
            return rawVar == null ? raw.getDefaultInstance() : rawVar;
        }

        @Override
        public rawOrBuilder getRawDataOrBuilder() {
            return getRawData();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.rawData_ != null) {
                codedOutputStream.writeMessage(1, getRawData());
            }
            if (!this.signature_.isEmpty()) {
                codedOutputStream.writeBytes(4, this.signature_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.rawData_ != null ? CodedOutputStream.computeMessageSize(1, getRawData()) : 0;
            if (!this.signature_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(4, this.signature_);
            }
            int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof TXInput)) {
                return super.equals(obj);
            }
            TXInput tXInput = (TXInput) obj;
            boolean z = hasRawData() == tXInput.hasRawData();
            if (!hasRawData() ? z : !(!z || !getRawData().equals(tXInput.getRawData()))) {
                if (getSignature().equals(tXInput.getSignature()) && this.unknownFields.equals(tXInput.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasRawData()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getRawData().hashCode();
            }
            int hashCode2 = (((((hashCode * 37) + 4) * 53) + getSignature().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static TXInput parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static TXInput parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static TXInput parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TXInput parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TXInput parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TXInput parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TXInput parseFrom(InputStream inputStream) throws IOException {
            return (TXInput) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static TXInput parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXInput) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXInput parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (TXInput) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static TXInput parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXInput) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXInput parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (TXInput) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static TXInput parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXInput) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(TXInput tXInput) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(tXInput);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TXInputOrBuilder {
            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> rawDataBuilder_;
            private raw rawData_;
            private ByteString signature_;

            @Override
            public ByteString getSignature() {
                return this.signature_;
            }

            @Override
            public boolean hasRawData() {
                return (this.rawDataBuilder_ == null && this.rawData_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TXInput_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TXInput_fieldAccessorTable.ensureFieldAccessorsInitialized(TXInput.class, Builder.class);
            }

            private Builder() {
                this.rawData_ = null;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.rawData_ = null;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = TXInput.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                this.signature_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_TXInput_descriptor;
            }

            @Override
            public TXInput getDefaultInstanceForType() {
                return TXInput.getDefaultInstance();
            }

            @Override
            public TXInput build() {
                TXInput buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public TXInput buildPartial() {
                TXInput tXInput = new TXInput(this);
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    tXInput.rawData_ = this.rawData_;
                } else {
                    tXInput.rawData_ = singleFieldBuilderV3.build();
                }
                tXInput.signature_ = this.signature_;
                onBuilt();
                return tXInput;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof TXInput) {
                    return mergeFrom((TXInput) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(TXInput tXInput) {
                if (tXInput == TXInput.getDefaultInstance()) {
                    return this;
                }
                if (tXInput.hasRawData()) {
                    mergeRawData(tXInput.getRawData());
                }
                if (tXInput.getSignature() != ByteString.EMPTY) {
                    setSignature(tXInput.getSignature());
                }
                mergeUnknownFields(tXInput.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.TXInput.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TXInput.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TXInput$Builder");
            }

            @Override
            public raw getRawData() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar = this.rawData_;
                    return rawVar == null ? raw.getDefaultInstance() : rawVar;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    rawVar.getClass();
                    this.rawData_ = rawVar;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(rawVar);
                }
                return this;
            }

            public Builder setRawData(raw.Builder builder) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.rawData_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar2 = this.rawData_;
                    if (rawVar2 != null) {
                        this.rawData_ = raw.newBuilder(rawVar2).mergeFrom(rawVar).buildPartial();
                    } else {
                        this.rawData_ = rawVar;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(rawVar);
                }
                return this;
            }

            public Builder clearRawData() {
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                    onChanged();
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                return this;
            }

            public raw.Builder getRawDataBuilder() {
                onChanged();
                return getRawDataFieldBuilder().getBuilder();
            }

            @Override
            public rawOrBuilder getRawDataOrBuilder() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                raw rawVar = this.rawData_;
                return rawVar == null ? raw.getDefaultInstance() : rawVar;
            }

            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> getRawDataFieldBuilder() {
                if (this.rawDataBuilder_ == null) {
                    this.rawDataBuilder_ = new SingleFieldBuilderV3<>(getRawData(), getParentForChildren(), isClean());
                    this.rawData_ = null;
                }
                return this.rawDataBuilder_;
            }

            public Builder setSignature(ByteString byteString) {
                byteString.getClass();
                this.signature_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSignature() {
                this.signature_ = TXInput.getDefaultInstance().getSignature();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class TXOutputs extends GeneratedMessageV3 implements TXOutputsOrBuilder {
        public static final int OUTPUTS_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private List<TXOutput> outputs_;
        private static final TXOutputs DEFAULT_INSTANCE = new TXOutputs();
        private static final Parser<TXOutputs> PARSER = new AbstractParser<TXOutputs>() {
            @Override
            public TXOutputs parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TXOutputs(codedInputStream, extensionRegistryLite);
            }
        };

        public static TXOutputs getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<TXOutputs> parser() {
            return PARSER;
        }

        @Override
        public TXOutputs getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<TXOutput> getOutputsList() {
            return this.outputs_;
        }

        @Override
        public List<? extends TXOutputOrBuilder> getOutputsOrBuilderList() {
            return this.outputs_;
        }

        @Override
        public Parser<TXOutputs> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private TXOutputs(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private TXOutputs() {
            this.memoizedIsInitialized = (byte) -1;
            this.outputs_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TXOutputs(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 10) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.outputs_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.outputs_.add((TXOutput) codedInputStream.readMessage(TXOutput.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.outputs_ = Collections.unmodifiableList(this.outputs_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_TXOutputs_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_TXOutputs_fieldAccessorTable.ensureFieldAccessorsInitialized(TXOutputs.class, Builder.class);
        }

        @Override
        public int getOutputsCount() {
            return this.outputs_.size();
        }

        @Override
        public TXOutput getOutputs(int i) {
            return this.outputs_.get(i);
        }

        @Override
        public TXOutputOrBuilder getOutputsOrBuilder(int i) {
            return this.outputs_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.outputs_.size(); i++) {
                codedOutputStream.writeMessage(1, this.outputs_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.outputs_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.outputs_.get(i3));
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof TXOutputs)) {
                return super.equals(obj);
            }
            TXOutputs tXOutputs = (TXOutputs) obj;
            return getOutputsList().equals(tXOutputs.getOutputsList()) && this.unknownFields.equals(tXOutputs.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getOutputsCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getOutputsList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static TXOutputs parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static TXOutputs parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static TXOutputs parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TXOutputs parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TXOutputs parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TXOutputs parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TXOutputs parseFrom(InputStream inputStream) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static TXOutputs parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXOutputs parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static TXOutputs parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TXOutputs parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static TXOutputs parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TXOutputs) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(TXOutputs tXOutputs) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(tXOutputs);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TXOutputsOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> outputsBuilder_;
            private List<TXOutput> outputs_;

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TXOutputs_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TXOutputs_fieldAccessorTable.ensureFieldAccessorsInitialized(TXOutputs.class, Builder.class);
            }

            private Builder() {
                this.outputs_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.outputs_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TXOutputs.alwaysUseFieldBuilders) {
                    getOutputsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.outputs_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_TXOutputs_descriptor;
            }

            @Override
            public TXOutputs getDefaultInstanceForType() {
                return TXOutputs.getDefaultInstance();
            }

            @Override
            public TXOutputs build() {
                TXOutputs buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public TXOutputs buildPartial() {
                TXOutputs tXOutputs = new TXOutputs(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.outputs_ = Collections.unmodifiableList(this.outputs_);
                        this.bitField0_ &= -2;
                    }
                    tXOutputs.outputs_ = this.outputs_;
                } else {
                    tXOutputs.outputs_ = repeatedFieldBuilderV3.build();
                }
                onBuilt();
                return tXOutputs;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof TXOutputs) {
                    return mergeFrom((TXOutputs) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(TXOutputs tXOutputs) {
                if (tXOutputs == TXOutputs.getDefaultInstance()) {
                    return this;
                }
                if (this.outputsBuilder_ == null) {
                    if (!tXOutputs.outputs_.isEmpty()) {
                        if (this.outputs_.isEmpty()) {
                            this.outputs_ = tXOutputs.outputs_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureOutputsIsMutable();
                            this.outputs_.addAll(tXOutputs.outputs_);
                        }
                        onChanged();
                    }
                } else if (!tXOutputs.outputs_.isEmpty()) {
                    if (!this.outputsBuilder_.isEmpty()) {
                        this.outputsBuilder_.addAllMessages(tXOutputs.outputs_);
                    } else {
                        this.outputsBuilder_.dispose();
                        this.outputsBuilder_ = null;
                        this.outputs_ = tXOutputs.outputs_;
                        this.bitField0_ &= -2;
                        this.outputsBuilder_ = TXOutputs.alwaysUseFieldBuilders ? getOutputsFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(tXOutputs.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.TXOutputs.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TXOutputs.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TXOutputs$Builder");
            }

            private void ensureOutputsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.outputs_ = new ArrayList(this.outputs_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<TXOutput> getOutputsList() {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.outputs_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getOutputsCount() {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.outputs_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public TXOutput getOutputs(int i) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.outputs_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setOutputs(int i, TXOutput tXOutput) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    tXOutput.getClass();
                    ensureOutputsIsMutable();
                    this.outputs_.set(i, tXOutput);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, tXOutput);
                }
                return this;
            }

            public Builder setOutputs(int i, TXOutput.Builder builder) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOutputsIsMutable();
                    this.outputs_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addOutputs(TXOutput tXOutput) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    tXOutput.getClass();
                    ensureOutputsIsMutable();
                    this.outputs_.add(tXOutput);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(tXOutput);
                }
                return this;
            }

            public Builder addOutputs(int i, TXOutput tXOutput) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    tXOutput.getClass();
                    ensureOutputsIsMutable();
                    this.outputs_.add(i, tXOutput);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, tXOutput);
                }
                return this;
            }

            public Builder addOutputs(TXOutput.Builder builder) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOutputsIsMutable();
                    this.outputs_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addOutputs(int i, TXOutput.Builder builder) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOutputsIsMutable();
                    this.outputs_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllOutputs(Iterable<? extends TXOutput> iterable) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOutputsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.outputs_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearOutputs() {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.outputs_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeOutputs(int i) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOutputsIsMutable();
                    this.outputs_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public TXOutput.Builder getOutputsBuilder(int i) {
                return getOutputsFieldBuilder().getBuilder(i);
            }

            @Override
            public TXOutputOrBuilder getOutputsOrBuilder(int i) {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.outputs_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends TXOutputOrBuilder> getOutputsOrBuilderList() {
                RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> repeatedFieldBuilderV3 = this.outputsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.outputs_);
            }

            public TXOutput.Builder addOutputsBuilder() {
                return getOutputsFieldBuilder().addBuilder(TXOutput.getDefaultInstance());
            }

            public TXOutput.Builder addOutputsBuilder(int i) {
                return getOutputsFieldBuilder().addBuilder(i, TXOutput.getDefaultInstance());
            }

            public List<TXOutput.Builder> getOutputsBuilderList() {
                return getOutputsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<TXOutput, TXOutput.Builder, TXOutputOrBuilder> getOutputsFieldBuilder() {
                if (this.outputsBuilder_ == null) {
                    this.outputsBuilder_ = new RepeatedFieldBuilderV3<>(this.outputs_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.outputs_ = null;
                }
                return this.outputsBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class ResourceReceipt extends GeneratedMessageV3 implements ResourceReceiptOrBuilder {
        public static final int ENERGY_FEE_FIELD_NUMBER = 2;
        public static final int ENERGY_PENALTY_TOTAL_FIELD_NUMBER = 8;
        public static final int ENERGY_USAGE_FIELD_NUMBER = 1;
        public static final int ENERGY_USAGE_TOTAL_FIELD_NUMBER = 4;
        public static final int NET_FEE_FIELD_NUMBER = 6;
        public static final int NET_USAGE_FIELD_NUMBER = 5;
        public static final int ORIGIN_ENERGY_USAGE_FIELD_NUMBER = 3;
        public static final int RESULT_FIELD_NUMBER = 7;
        private static final long serialVersionUID = 0;
        private long energyFee_;
        private long energyPenaltyTotal_;
        private long energyUsageTotal_;
        private long energyUsage_;
        private byte memoizedIsInitialized;
        private long netFee_;
        private long netUsage_;
        private long originEnergyUsage_;
        private int result_;
        private static final ResourceReceipt DEFAULT_INSTANCE = new ResourceReceipt();
        private static final Parser<ResourceReceipt> PARSER = new AbstractParser<ResourceReceipt>() {
            @Override
            public ResourceReceipt parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new ResourceReceipt(codedInputStream, extensionRegistryLite);
            }
        };

        public static ResourceReceipt getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<ResourceReceipt> parser() {
            return PARSER;
        }

        @Override
        public ResourceReceipt getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getEnergyFee() {
            return this.energyFee_;
        }

        @Override
        public long getEnergyPenaltyTotal() {
            return this.energyPenaltyTotal_;
        }

        @Override
        public long getEnergyUsage() {
            return this.energyUsage_;
        }

        @Override
        public long getEnergyUsageTotal() {
            return this.energyUsageTotal_;
        }

        @Override
        public long getNetFee() {
            return this.netFee_;
        }

        @Override
        public long getNetUsage() {
            return this.netUsage_;
        }

        @Override
        public long getOriginEnergyUsage() {
            return this.originEnergyUsage_;
        }

        @Override
        public Parser<ResourceReceipt> getParserForType() {
            return PARSER;
        }

        @Override
        public int getResultValue() {
            return this.result_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private ResourceReceipt(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private ResourceReceipt() {
            this.memoizedIsInitialized = (byte) -1;
            this.energyUsage_ = 0L;
            this.energyFee_ = 0L;
            this.originEnergyUsage_ = 0L;
            this.energyUsageTotal_ = 0L;
            this.netUsage_ = 0L;
            this.netFee_ = 0L;
            this.result_ = 0;
            this.energyPenaltyTotal_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ResourceReceipt(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.energyUsage_ = codedInputStream.readInt64();
                            } else if (readTag == 16) {
                                this.energyFee_ = codedInputStream.readInt64();
                            } else if (readTag == 24) {
                                this.originEnergyUsage_ = codedInputStream.readInt64();
                            } else if (readTag == 32) {
                                this.energyUsageTotal_ = codedInputStream.readInt64();
                            } else if (readTag == 40) {
                                this.netUsage_ = codedInputStream.readInt64();
                            } else if (readTag == 48) {
                                this.netFee_ = codedInputStream.readInt64();
                            } else if (readTag == 56) {
                                this.result_ = codedInputStream.readEnum();
                            } else if (readTag != 64) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.energyPenaltyTotal_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_ResourceReceipt_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_ResourceReceipt_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceReceipt.class, Builder.class);
        }

        @Override
        public Transaction.Result.contractResult getResult() {
            Transaction.Result.contractResult valueOf = Transaction.Result.contractResult.valueOf(this.result_);
            return valueOf == null ? Transaction.Result.contractResult.UNRECOGNIZED : valueOf;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.energyUsage_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            long j2 = this.energyFee_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(2, j2);
            }
            long j3 = this.originEnergyUsage_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(3, j3);
            }
            long j4 = this.energyUsageTotal_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(4, j4);
            }
            long j5 = this.netUsage_;
            if (j5 != 0) {
                codedOutputStream.writeInt64(5, j5);
            }
            long j6 = this.netFee_;
            if (j6 != 0) {
                codedOutputStream.writeInt64(6, j6);
            }
            if (this.result_ != Transaction.Result.contractResult.DEFAULT.getNumber()) {
                codedOutputStream.writeEnum(7, this.result_);
            }
            long j7 = this.energyPenaltyTotal_;
            if (j7 != 0) {
                codedOutputStream.writeInt64(8, j7);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.energyUsage_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            long j2 = this.energyFee_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(2, j2);
            }
            long j3 = this.originEnergyUsage_;
            if (j3 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(3, j3);
            }
            long j4 = this.energyUsageTotal_;
            if (j4 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(4, j4);
            }
            long j5 = this.netUsage_;
            if (j5 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(5, j5);
            }
            long j6 = this.netFee_;
            if (j6 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(6, j6);
            }
            if (this.result_ != Transaction.Result.contractResult.DEFAULT.getNumber()) {
                computeInt64Size += CodedOutputStream.computeEnumSize(7, this.result_);
            }
            long j7 = this.energyPenaltyTotal_;
            if (j7 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(8, j7);
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ResourceReceipt)) {
                return super.equals(obj);
            }
            ResourceReceipt resourceReceipt = (ResourceReceipt) obj;
            return getEnergyUsage() == resourceReceipt.getEnergyUsage() && getEnergyFee() == resourceReceipt.getEnergyFee() && getOriginEnergyUsage() == resourceReceipt.getOriginEnergyUsage() && getEnergyUsageTotal() == resourceReceipt.getEnergyUsageTotal() && getNetUsage() == resourceReceipt.getNetUsage() && getNetFee() == resourceReceipt.getNetFee() && this.result_ == resourceReceipt.result_ && getEnergyPenaltyTotal() == resourceReceipt.getEnergyPenaltyTotal() && this.unknownFields.equals(resourceReceipt.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getEnergyUsage())) * 37) + 2) * 53) + Internal.hashLong(getEnergyFee())) * 37) + 3) * 53) + Internal.hashLong(getOriginEnergyUsage())) * 37) + 4) * 53) + Internal.hashLong(getEnergyUsageTotal())) * 37) + 5) * 53) + Internal.hashLong(getNetUsage())) * 37) + 6) * 53) + Internal.hashLong(getNetFee())) * 37) + 7) * 53) + this.result_) * 37) + 8) * 53) + Internal.hashLong(getEnergyPenaltyTotal())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static ResourceReceipt parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static ResourceReceipt parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static ResourceReceipt parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static ResourceReceipt parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static ResourceReceipt parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static ResourceReceipt parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static ResourceReceipt parseFrom(InputStream inputStream) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static ResourceReceipt parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ResourceReceipt parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static ResourceReceipt parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ResourceReceipt parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static ResourceReceipt parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ResourceReceipt) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ResourceReceipt resourceReceipt) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(resourceReceipt);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ResourceReceiptOrBuilder {
            private long energyFee_;
            private long energyPenaltyTotal_;
            private long energyUsageTotal_;
            private long energyUsage_;
            private long netFee_;
            private long netUsage_;
            private long originEnergyUsage_;
            private int result_;

            @Override
            public long getEnergyFee() {
                return this.energyFee_;
            }

            @Override
            public long getEnergyPenaltyTotal() {
                return this.energyPenaltyTotal_;
            }

            @Override
            public long getEnergyUsage() {
                return this.energyUsage_;
            }

            @Override
            public long getEnergyUsageTotal() {
                return this.energyUsageTotal_;
            }

            @Override
            public long getNetFee() {
                return this.netFee_;
            }

            @Override
            public long getNetUsage() {
                return this.netUsage_;
            }

            @Override
            public long getOriginEnergyUsage() {
                return this.originEnergyUsage_;
            }

            @Override
            public int getResultValue() {
                return this.result_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_ResourceReceipt_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_ResourceReceipt_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceReceipt.class, Builder.class);
            }

            private Builder() {
                this.result_ = 0;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.result_ = 0;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = ResourceReceipt.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.energyUsage_ = 0L;
                this.energyFee_ = 0L;
                this.originEnergyUsage_ = 0L;
                this.energyUsageTotal_ = 0L;
                this.netUsage_ = 0L;
                this.netFee_ = 0L;
                this.result_ = 0;
                this.energyPenaltyTotal_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_ResourceReceipt_descriptor;
            }

            @Override
            public ResourceReceipt getDefaultInstanceForType() {
                return ResourceReceipt.getDefaultInstance();
            }

            @Override
            public ResourceReceipt build() {
                ResourceReceipt buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public ResourceReceipt buildPartial() {
                ResourceReceipt resourceReceipt = new ResourceReceipt(this);
                resourceReceipt.energyUsage_ = this.energyUsage_;
                resourceReceipt.energyFee_ = this.energyFee_;
                resourceReceipt.originEnergyUsage_ = this.originEnergyUsage_;
                resourceReceipt.energyUsageTotal_ = this.energyUsageTotal_;
                resourceReceipt.netUsage_ = this.netUsage_;
                resourceReceipt.netFee_ = this.netFee_;
                resourceReceipt.result_ = this.result_;
                resourceReceipt.energyPenaltyTotal_ = this.energyPenaltyTotal_;
                onBuilt();
                return resourceReceipt;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof ResourceReceipt) {
                    return mergeFrom((ResourceReceipt) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(ResourceReceipt resourceReceipt) {
                if (resourceReceipt == ResourceReceipt.getDefaultInstance()) {
                    return this;
                }
                if (resourceReceipt.getEnergyUsage() != 0) {
                    setEnergyUsage(resourceReceipt.getEnergyUsage());
                }
                if (resourceReceipt.getEnergyFee() != 0) {
                    setEnergyFee(resourceReceipt.getEnergyFee());
                }
                if (resourceReceipt.getOriginEnergyUsage() != 0) {
                    setOriginEnergyUsage(resourceReceipt.getOriginEnergyUsage());
                }
                if (resourceReceipt.getEnergyUsageTotal() != 0) {
                    setEnergyUsageTotal(resourceReceipt.getEnergyUsageTotal());
                }
                if (resourceReceipt.getNetUsage() != 0) {
                    setNetUsage(resourceReceipt.getNetUsage());
                }
                if (resourceReceipt.getNetFee() != 0) {
                    setNetFee(resourceReceipt.getNetFee());
                }
                if (resourceReceipt.result_ != 0) {
                    setResultValue(resourceReceipt.getResultValue());
                }
                if (resourceReceipt.getEnergyPenaltyTotal() != 0) {
                    setEnergyPenaltyTotal(resourceReceipt.getEnergyPenaltyTotal());
                }
                mergeUnknownFields(resourceReceipt.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.ResourceReceipt.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.ResourceReceipt.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$ResourceReceipt$Builder");
            }

            public Builder setEnergyUsage(long j) {
                this.energyUsage_ = j;
                onChanged();
                return this;
            }

            public Builder clearEnergyUsage() {
                this.energyUsage_ = 0L;
                onChanged();
                return this;
            }

            public Builder setEnergyFee(long j) {
                this.energyFee_ = j;
                onChanged();
                return this;
            }

            public Builder clearEnergyFee() {
                this.energyFee_ = 0L;
                onChanged();
                return this;
            }

            public Builder setOriginEnergyUsage(long j) {
                this.originEnergyUsage_ = j;
                onChanged();
                return this;
            }

            public Builder clearOriginEnergyUsage() {
                this.originEnergyUsage_ = 0L;
                onChanged();
                return this;
            }

            public Builder setEnergyUsageTotal(long j) {
                this.energyUsageTotal_ = j;
                onChanged();
                return this;
            }

            public Builder clearEnergyUsageTotal() {
                this.energyUsageTotal_ = 0L;
                onChanged();
                return this;
            }

            public Builder setNetUsage(long j) {
                this.netUsage_ = j;
                onChanged();
                return this;
            }

            public Builder clearNetUsage() {
                this.netUsage_ = 0L;
                onChanged();
                return this;
            }

            public Builder setNetFee(long j) {
                this.netFee_ = j;
                onChanged();
                return this;
            }

            public Builder clearNetFee() {
                this.netFee_ = 0L;
                onChanged();
                return this;
            }

            public Builder setResultValue(int i) {
                this.result_ = i;
                onChanged();
                return this;
            }

            @Override
            public Transaction.Result.contractResult getResult() {
                Transaction.Result.contractResult valueOf = Transaction.Result.contractResult.valueOf(this.result_);
                return valueOf == null ? Transaction.Result.contractResult.UNRECOGNIZED : valueOf;
            }

            public Builder setResult(Transaction.Result.contractResult contractresult) {
                contractresult.getClass();
                this.result_ = contractresult.getNumber();
                onChanged();
                return this;
            }

            public Builder clearResult() {
                this.result_ = 0;
                onChanged();
                return this;
            }

            public Builder setEnergyPenaltyTotal(long j) {
                this.energyPenaltyTotal_ = j;
                onChanged();
                return this;
            }

            public Builder clearEnergyPenaltyTotal() {
                this.energyPenaltyTotal_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class MarketOrderDetail extends GeneratedMessageV3 implements MarketOrderDetailOrBuilder {
        public static final int FILLBUYQUANTITY_FIELD_NUMBER = 4;
        public static final int FILLSELLQUANTITY_FIELD_NUMBER = 3;
        public static final int MAKERORDERID_FIELD_NUMBER = 1;
        public static final int TAKERORDERID_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private long fillBuyQuantity_;
        private long fillSellQuantity_;
        private ByteString makerOrderId_;
        private byte memoizedIsInitialized;
        private ByteString takerOrderId_;
        private static final MarketOrderDetail DEFAULT_INSTANCE = new MarketOrderDetail();
        private static final Parser<MarketOrderDetail> PARSER = new AbstractParser<MarketOrderDetail>() {
            @Override
            public MarketOrderDetail parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MarketOrderDetail(codedInputStream, extensionRegistryLite);
            }
        };

        public static MarketOrderDetail getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<MarketOrderDetail> parser() {
            return PARSER;
        }

        @Override
        public MarketOrderDetail getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getFillBuyQuantity() {
            return this.fillBuyQuantity_;
        }

        @Override
        public long getFillSellQuantity() {
            return this.fillSellQuantity_;
        }

        @Override
        public ByteString getMakerOrderId() {
            return this.makerOrderId_;
        }

        @Override
        public Parser<MarketOrderDetail> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getTakerOrderId() {
            return this.takerOrderId_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private MarketOrderDetail(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private MarketOrderDetail() {
            this.memoizedIsInitialized = (byte) -1;
            this.makerOrderId_ = ByteString.EMPTY;
            this.takerOrderId_ = ByteString.EMPTY;
            this.fillSellQuantity_ = 0L;
            this.fillBuyQuantity_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MarketOrderDetail(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                this.makerOrderId_ = codedInputStream.readBytes();
                            } else if (readTag == 18) {
                                this.takerOrderId_ = codedInputStream.readBytes();
                            } else if (readTag == 24) {
                                this.fillSellQuantity_ = codedInputStream.readInt64();
                            } else if (readTag != 32) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.fillBuyQuantity_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_MarketOrderDetail_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_MarketOrderDetail_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderDetail.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.makerOrderId_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.makerOrderId_);
            }
            if (!this.takerOrderId_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.takerOrderId_);
            }
            long j = this.fillSellQuantity_;
            if (j != 0) {
                codedOutputStream.writeInt64(3, j);
            }
            long j2 = this.fillBuyQuantity_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(4, j2);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.makerOrderId_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.makerOrderId_) : 0;
            if (!this.takerOrderId_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.takerOrderId_);
            }
            long j = this.fillSellQuantity_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, j);
            }
            long j2 = this.fillBuyQuantity_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(4, j2);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof MarketOrderDetail)) {
                return super.equals(obj);
            }
            MarketOrderDetail marketOrderDetail = (MarketOrderDetail) obj;
            return getMakerOrderId().equals(marketOrderDetail.getMakerOrderId()) && getTakerOrderId().equals(marketOrderDetail.getTakerOrderId()) && getFillSellQuantity() == marketOrderDetail.getFillSellQuantity() && getFillBuyQuantity() == marketOrderDetail.getFillBuyQuantity() && this.unknownFields.equals(marketOrderDetail.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getMakerOrderId().hashCode()) * 37) + 2) * 53) + getTakerOrderId().hashCode()) * 37) + 3) * 53) + Internal.hashLong(getFillSellQuantity())) * 37) + 4) * 53) + Internal.hashLong(getFillBuyQuantity())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static MarketOrderDetail parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static MarketOrderDetail parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static MarketOrderDetail parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MarketOrderDetail parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MarketOrderDetail parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MarketOrderDetail parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MarketOrderDetail parseFrom(InputStream inputStream) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static MarketOrderDetail parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderDetail parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static MarketOrderDetail parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static MarketOrderDetail parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static MarketOrderDetail parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (MarketOrderDetail) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(MarketOrderDetail marketOrderDetail) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(marketOrderDetail);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MarketOrderDetailOrBuilder {
            private long fillBuyQuantity_;
            private long fillSellQuantity_;
            private ByteString makerOrderId_;
            private ByteString takerOrderId_;

            @Override
            public long getFillBuyQuantity() {
                return this.fillBuyQuantity_;
            }

            @Override
            public long getFillSellQuantity() {
                return this.fillSellQuantity_;
            }

            @Override
            public ByteString getMakerOrderId() {
                return this.makerOrderId_;
            }

            @Override
            public ByteString getTakerOrderId() {
                return this.takerOrderId_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_MarketOrderDetail_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_MarketOrderDetail_fieldAccessorTable.ensureFieldAccessorsInitialized(MarketOrderDetail.class, Builder.class);
            }

            private Builder() {
                this.makerOrderId_ = ByteString.EMPTY;
                this.takerOrderId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.makerOrderId_ = ByteString.EMPTY;
                this.takerOrderId_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = MarketOrderDetail.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.makerOrderId_ = ByteString.EMPTY;
                this.takerOrderId_ = ByteString.EMPTY;
                this.fillSellQuantity_ = 0L;
                this.fillBuyQuantity_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_MarketOrderDetail_descriptor;
            }

            @Override
            public MarketOrderDetail getDefaultInstanceForType() {
                return MarketOrderDetail.getDefaultInstance();
            }

            @Override
            public MarketOrderDetail build() {
                MarketOrderDetail buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public MarketOrderDetail buildPartial() {
                MarketOrderDetail marketOrderDetail = new MarketOrderDetail(this);
                marketOrderDetail.makerOrderId_ = this.makerOrderId_;
                marketOrderDetail.takerOrderId_ = this.takerOrderId_;
                marketOrderDetail.fillSellQuantity_ = this.fillSellQuantity_;
                marketOrderDetail.fillBuyQuantity_ = this.fillBuyQuantity_;
                onBuilt();
                return marketOrderDetail;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof MarketOrderDetail) {
                    return mergeFrom((MarketOrderDetail) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(MarketOrderDetail marketOrderDetail) {
                if (marketOrderDetail == MarketOrderDetail.getDefaultInstance()) {
                    return this;
                }
                if (marketOrderDetail.getMakerOrderId() != ByteString.EMPTY) {
                    setMakerOrderId(marketOrderDetail.getMakerOrderId());
                }
                if (marketOrderDetail.getTakerOrderId() != ByteString.EMPTY) {
                    setTakerOrderId(marketOrderDetail.getTakerOrderId());
                }
                if (marketOrderDetail.getFillSellQuantity() != 0) {
                    setFillSellQuantity(marketOrderDetail.getFillSellQuantity());
                }
                if (marketOrderDetail.getFillBuyQuantity() != 0) {
                    setFillBuyQuantity(marketOrderDetail.getFillBuyQuantity());
                }
                mergeUnknownFields(marketOrderDetail.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.MarketOrderDetail.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.MarketOrderDetail.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$MarketOrderDetail$Builder");
            }

            public Builder setMakerOrderId(ByteString byteString) {
                byteString.getClass();
                this.makerOrderId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearMakerOrderId() {
                this.makerOrderId_ = MarketOrderDetail.getDefaultInstance().getMakerOrderId();
                onChanged();
                return this;
            }

            public Builder setTakerOrderId(ByteString byteString) {
                byteString.getClass();
                this.takerOrderId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearTakerOrderId() {
                this.takerOrderId_ = MarketOrderDetail.getDefaultInstance().getTakerOrderId();
                onChanged();
                return this;
            }

            public Builder setFillSellQuantity(long j) {
                this.fillSellQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearFillSellQuantity() {
                this.fillSellQuantity_ = 0L;
                onChanged();
                return this;
            }

            public Builder setFillBuyQuantity(long j) {
                this.fillBuyQuantity_ = j;
                onChanged();
                return this;
            }

            public Builder clearFillBuyQuantity() {
                this.fillBuyQuantity_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Transaction extends GeneratedMessageV3 implements TransactionOrBuilder {
        private static final Transaction DEFAULT_INSTANCE = new Transaction();
        private static final Parser<Transaction> PARSER = new AbstractParser<Transaction>() {
            @Override
            public Transaction parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Transaction(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RAW_DATA_FIELD_NUMBER = 1;
        public static final int RET_FIELD_NUMBER = 5;
        public static final int SIGNATURE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private byte memoizedIsInitialized;
        private raw rawData_;
        private List<Result> ret_;
        private List<ByteString> signature_;

        public interface ContractOrBuilder extends MessageOrBuilder {
            ByteString getContractName();

            Any getParameter();

            AnyOrBuilder getParameterOrBuilder();

            int getPermissionId();

            ByteString getProvider();

            Contract.ContractType getType();

            int getTypeValue();

            boolean hasParameter();
        }

        public interface ResultOrBuilder extends MessageOrBuilder {
            boolean containsCancelUnfreezeV2Amount(String str);

            String getAssetIssueID();

            ByteString getAssetIssueIDBytes();

            @Deprecated
            Map<String, Long> getCancelUnfreezeV2Amount();

            int getCancelUnfreezeV2AmountCount();

            Map<String, Long> getCancelUnfreezeV2AmountMap();

            long getCancelUnfreezeV2AmountOrDefault(String str, long j);

            long getCancelUnfreezeV2AmountOrThrow(String str);

            Result.contractResult getContractRet();

            int getContractRetValue();

            long getExchangeId();

            long getExchangeInjectAnotherAmount();

            long getExchangeReceivedAmount();

            long getExchangeWithdrawAnotherAmount();

            long getFee();

            MarketOrderDetail getOrderDetails(int i);

            int getOrderDetailsCount();

            List<MarketOrderDetail> getOrderDetailsList();

            MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i);

            List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList();

            ByteString getOrderId();

            Result.code getRet();

            int getRetValue();

            long getShieldedTransactionFee();

            long getUnfreezeAmount();

            long getWithdrawAmount();

            long getWithdrawExpireAmount();
        }

        public interface rawOrBuilder extends MessageOrBuilder {
            authority getAuths(int i);

            int getAuthsCount();

            List<authority> getAuthsList();

            authorityOrBuilder getAuthsOrBuilder(int i);

            List<? extends authorityOrBuilder> getAuthsOrBuilderList();

            Contract getContract(int i);

            int getContractCount();

            List<Contract> getContractList();

            ContractOrBuilder getContractOrBuilder(int i);

            List<? extends ContractOrBuilder> getContractOrBuilderList();

            ByteString getData();

            long getExpiration();

            long getFeeLimit();

            ByteString getRefBlockBytes();

            ByteString getRefBlockHash();

            long getRefBlockNum();

            ByteString getScripts();

            long getTimestamp();
        }

        public static Transaction getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Transaction> parser() {
            return PARSER;
        }

        @Override
        public Transaction getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Transaction> getParserForType() {
            return PARSER;
        }

        @Override
        public List<Result> getRetList() {
            return this.ret_;
        }

        @Override
        public List<? extends ResultOrBuilder> getRetOrBuilderList() {
            return this.ret_;
        }

        @Override
        public List<ByteString> getSignatureList() {
            return this.signature_;
        }

        @Override
        public boolean hasRawData() {
            return this.rawData_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Transaction(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Transaction() {
            this.memoizedIsInitialized = (byte) -1;
            this.signature_ = Collections.emptyList();
            this.ret_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Transaction(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    raw rawVar = this.rawData_;
                                    raw.Builder builder = rawVar != null ? rawVar.toBuilder() : null;
                                    raw rawVar2 = (raw) codedInputStream.readMessage(raw.parser(), extensionRegistryLite);
                                    this.rawData_ = rawVar2;
                                    if (builder != null) {
                                        builder.mergeFrom(rawVar2);
                                        this.rawData_ = builder.buildPartial();
                                    }
                                } else if (readTag == 18) {
                                    if (!(z2 & true)) {
                                        this.signature_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.signature_.add(codedInputStream.readBytes());
                                } else if (readTag != 42) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    if (!(z2 & true)) {
                                        this.ret_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.ret_.add((Result) codedInputStream.readMessage(Result.parser(), extensionRegistryLite));
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.signature_ = Collections.unmodifiableList(this.signature_);
                    }
                    if (z2 & true) {
                        this.ret_ = Collections.unmodifiableList(this.ret_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Transaction_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Transaction_fieldAccessorTable.ensureFieldAccessorsInitialized(Transaction.class, Builder.class);
        }

        public static final class Contract extends GeneratedMessageV3 implements ContractOrBuilder {
            public static final int CONTRACTNAME_FIELD_NUMBER = 4;
            public static final int PARAMETER_FIELD_NUMBER = 2;
            public static final int PERMISSION_ID_FIELD_NUMBER = 5;
            public static final int PROVIDER_FIELD_NUMBER = 3;
            public static final int TYPE_FIELD_NUMBER = 1;
            private static final long serialVersionUID = 0;
            private ByteString contractName_;
            private byte memoizedIsInitialized;
            private Any parameter_;
            private int permissionId_;
            private ByteString provider_;
            private int type_;
            private static final Contract DEFAULT_INSTANCE = new Contract();
            private static final Parser<Contract> PARSER = new AbstractParser<Contract>() {
                @Override
                public Contract parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new Contract(codedInputStream, extensionRegistryLite);
                }
            };

            public static Contract getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<Contract> parser() {
                return PARSER;
            }

            @Override
            public ByteString getContractName() {
                return this.contractName_;
            }

            @Override
            public Contract getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<Contract> getParserForType() {
                return PARSER;
            }

            @Override
            public int getPermissionId() {
                return this.permissionId_;
            }

            @Override
            public ByteString getProvider() {
                return this.provider_;
            }

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public boolean hasParameter() {
                return this.parameter_ != null;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private Contract(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private Contract() {
                this.memoizedIsInitialized = (byte) -1;
                this.type_ = 0;
                this.provider_ = ByteString.EMPTY;
                this.contractName_ = ByteString.EMPTY;
                this.permissionId_ = 0;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private Contract(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.type_ = codedInputStream.readEnum();
                                } else if (readTag == 18) {
                                    Any any = this.parameter_;
                                    Any.Builder builder = any != null ? any.toBuilder() : null;
                                    Any any2 = (Any) codedInputStream.readMessage(Any.parser(), extensionRegistryLite);
                                    this.parameter_ = any2;
                                    if (builder != null) {
                                        builder.mergeFrom(any2);
                                        this.parameter_ = builder.buildPartial();
                                    }
                                } else if (readTag == 26) {
                                    this.provider_ = codedInputStream.readBytes();
                                } else if (readTag == 34) {
                                    this.contractName_ = codedInputStream.readBytes();
                                } else if (readTag != 40) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.permissionId_ = codedInputStream.readInt32();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Transaction_Contract_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Transaction_Contract_fieldAccessorTable.ensureFieldAccessorsInitialized(Contract.class, Builder.class);
            }

            public enum ContractType implements ProtocolMessageEnum {
                AccountCreateContract(0),
                TransferContract(1),
                TransferAssetContract(2),
                VoteAssetContract(3),
                VoteWitnessContract(4),
                WitnessCreateContract(5),
                AssetIssueContract(6),
                WitnessUpdateContract(8),
                ParticipateAssetIssueContract(9),
                AccountUpdateContract(10),
                FreezeBalanceContract(11),
                UnfreezeBalanceContract(12),
                WithdrawBalanceContract(13),
                UnfreezeAssetContract(14),
                UpdateAssetContract(15),
                ProposalCreateContract(16),
                ProposalApproveContract(17),
                ProposalDeleteContract(18),
                SetAccountIdContract(19),
                CustomContract(20),
                CreateSmartContract(30),
                TriggerSmartContract(31),
                GetContract(32),
                UpdateSettingContract(33),
                ExchangeCreateContract(41),
                ExchangeInjectContract(42),
                ExchangeWithdrawContract(43),
                ExchangeTransactionContract(44),
                UpdateEnergyLimitContract(45),
                AccountPermissionUpdateContract(46),
                ClearABIContract(48),
                UpdateBrokerageContract(49),
                ShieldedTransferContract(51),
                MarketSellAssetContract(52),
                MarketCancelOrderContract(53),
                FreezeBalanceV2Contract(54),
                UnfreezeBalanceV2Contract(55),
                WithdrawExpireUnfreezeContract(56),
                DelegateResourceContract(57),
                UnDelegateResourceContract(58),
                CancelAllUnfreezeV2Contract(59),
                UNRECOGNIZED(-1);
                
                public static final int AccountCreateContract_VALUE = 0;
                public static final int AccountPermissionUpdateContract_VALUE = 46;
                public static final int AccountUpdateContract_VALUE = 10;
                public static final int AssetIssueContract_VALUE = 6;
                public static final int CancelAllUnfreezeV2Contract_VALUE = 59;
                public static final int ClearABIContract_VALUE = 48;
                public static final int CreateSmartContract_VALUE = 30;
                public static final int CustomContract_VALUE = 20;
                public static final int DelegateResourceContract_VALUE = 57;
                public static final int ExchangeCreateContract_VALUE = 41;
                public static final int ExchangeInjectContract_VALUE = 42;
                public static final int ExchangeTransactionContract_VALUE = 44;
                public static final int ExchangeWithdrawContract_VALUE = 43;
                public static final int FreezeBalanceContract_VALUE = 11;
                public static final int FreezeBalanceV2Contract_VALUE = 54;
                public static final int GetContract_VALUE = 32;
                public static final int MarketCancelOrderContract_VALUE = 53;
                public static final int MarketSellAssetContract_VALUE = 52;
                public static final int ParticipateAssetIssueContract_VALUE = 9;
                public static final int ProposalApproveContract_VALUE = 17;
                public static final int ProposalCreateContract_VALUE = 16;
                public static final int ProposalDeleteContract_VALUE = 18;
                public static final int SetAccountIdContract_VALUE = 19;
                public static final int ShieldedTransferContract_VALUE = 51;
                public static final int TransferAssetContract_VALUE = 2;
                public static final int TransferContract_VALUE = 1;
                public static final int TriggerSmartContract_VALUE = 31;
                public static final int UnDelegateResourceContract_VALUE = 58;
                public static final int UnfreezeAssetContract_VALUE = 14;
                public static final int UnfreezeBalanceContract_VALUE = 12;
                public static final int UnfreezeBalanceV2Contract_VALUE = 55;
                public static final int UpdateAssetContract_VALUE = 15;
                public static final int UpdateBrokerageContract_VALUE = 49;
                public static final int UpdateEnergyLimitContract_VALUE = 45;
                public static final int UpdateSettingContract_VALUE = 33;
                public static final int VoteAssetContract_VALUE = 3;
                public static final int VoteWitnessContract_VALUE = 4;
                public static final int WithdrawBalanceContract_VALUE = 13;
                public static final int WithdrawExpireUnfreezeContract_VALUE = 56;
                public static final int WitnessCreateContract_VALUE = 5;
                public static final int WitnessUpdateContract_VALUE = 8;
                private final int value;
                private static final Internal.EnumLiteMap<ContractType> internalValueMap = new Internal.EnumLiteMap<ContractType>() {
                    @Override
                    public ContractType findValueByNumber(int i) {
                        return ContractType.forNumber(i);
                    }
                };
                private static final ContractType[] VALUES = values();

                public static ContractType forNumber(int i) {
                    if (i != 48) {
                        if (i != 49) {
                            switch (i) {
                                case 0:
                                    return AccountCreateContract;
                                case 1:
                                    return TransferContract;
                                case 2:
                                    return TransferAssetContract;
                                case 3:
                                    return VoteAssetContract;
                                case 4:
                                    return VoteWitnessContract;
                                case 5:
                                    return WitnessCreateContract;
                                case 6:
                                    return AssetIssueContract;
                                default:
                                    switch (i) {
                                        case 8:
                                            return WitnessUpdateContract;
                                        case 9:
                                            return ParticipateAssetIssueContract;
                                        case 10:
                                            return AccountUpdateContract;
                                        case 11:
                                            return FreezeBalanceContract;
                                        case 12:
                                            return UnfreezeBalanceContract;
                                        case 13:
                                            return WithdrawBalanceContract;
                                        case 14:
                                            return UnfreezeAssetContract;
                                        case 15:
                                            return UpdateAssetContract;
                                        case 16:
                                            return ProposalCreateContract;
                                        case 17:
                                            return ProposalApproveContract;
                                        case 18:
                                            return ProposalDeleteContract;
                                        case 19:
                                            return SetAccountIdContract;
                                        case 20:
                                            return CustomContract;
                                        default:
                                            switch (i) {
                                                case 30:
                                                    return CreateSmartContract;
                                                case 31:
                                                    return TriggerSmartContract;
                                                case 32:
                                                    return GetContract;
                                                case 33:
                                                    return UpdateSettingContract;
                                                default:
                                                    switch (i) {
                                                        case 41:
                                                            return ExchangeCreateContract;
                                                        case 42:
                                                            return ExchangeInjectContract;
                                                        case 43:
                                                            return ExchangeWithdrawContract;
                                                        case 44:
                                                            return ExchangeTransactionContract;
                                                        case 45:
                                                            return UpdateEnergyLimitContract;
                                                        case 46:
                                                            return AccountPermissionUpdateContract;
                                                        default:
                                                            switch (i) {
                                                                case 51:
                                                                    return ShieldedTransferContract;
                                                                case 52:
                                                                    return MarketSellAssetContract;
                                                                case 53:
                                                                    return MarketCancelOrderContract;
                                                                case 54:
                                                                    return FreezeBalanceV2Contract;
                                                                case 55:
                                                                    return UnfreezeBalanceV2Contract;
                                                                case 56:
                                                                    return WithdrawExpireUnfreezeContract;
                                                                case 57:
                                                                    return DelegateResourceContract;
                                                                case 58:
                                                                    return UnDelegateResourceContract;
                                                                case 59:
                                                                    return CancelAllUnfreezeV2Contract;
                                                                default:
                                                                    return null;
                                                            }
                                                    }
                                            }
                                    }
                            }
                        }
                        return UpdateBrokerageContract;
                    }
                    return ClearABIContract;
                }

                public static Internal.EnumLiteMap<ContractType> internalGetValueMap() {
                    return internalValueMap;
                }

                @Override
                public final int getNumber() {
                    if (this != UNRECOGNIZED) {
                        return this.value;
                    }
                    throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
                }

                @Deprecated
                public static ContractType valueOf(int i) {
                    return forNumber(i);
                }

                @Override
                public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                    return getDescriptor().getValues().get(ordinal());
                }

                @Override
                public final Descriptors.EnumDescriptor getDescriptorForType() {
                    return getDescriptor();
                }

                public static final Descriptors.EnumDescriptor getDescriptor() {
                    return Contract.getDescriptor().getEnumTypes().get(0);
                }

                public static ContractType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                    if (enumValueDescriptor.getType() == getDescriptor()) {
                        return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                    }
                    throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
                }

                ContractType(int i) {
                    this.value = i;
                }
            }

            @Override
            public ContractType getType() {
                ContractType valueOf = ContractType.valueOf(this.type_);
                return valueOf == null ? ContractType.UNRECOGNIZED : valueOf;
            }

            @Override
            public Any getParameter() {
                Any any = this.parameter_;
                return any == null ? Any.getDefaultInstance() : any;
            }

            @Override
            public AnyOrBuilder getParameterOrBuilder() {
                return getParameter();
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (this.type_ != ContractType.AccountCreateContract.getNumber()) {
                    codedOutputStream.writeEnum(1, this.type_);
                }
                if (this.parameter_ != null) {
                    codedOutputStream.writeMessage(2, getParameter());
                }
                if (!this.provider_.isEmpty()) {
                    codedOutputStream.writeBytes(3, this.provider_);
                }
                if (!this.contractName_.isEmpty()) {
                    codedOutputStream.writeBytes(4, this.contractName_);
                }
                int i = this.permissionId_;
                if (i != 0) {
                    codedOutputStream.writeInt32(5, i);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeEnumSize = this.type_ != ContractType.AccountCreateContract.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
                if (this.parameter_ != null) {
                    computeEnumSize += CodedOutputStream.computeMessageSize(2, getParameter());
                }
                if (!this.provider_.isEmpty()) {
                    computeEnumSize += CodedOutputStream.computeBytesSize(3, this.provider_);
                }
                if (!this.contractName_.isEmpty()) {
                    computeEnumSize += CodedOutputStream.computeBytesSize(4, this.contractName_);
                }
                int i2 = this.permissionId_;
                if (i2 != 0) {
                    computeEnumSize += CodedOutputStream.computeInt32Size(5, i2);
                }
                int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof Contract)) {
                    return super.equals(obj);
                }
                Contract contract = (Contract) obj;
                boolean z = this.type_ == contract.type_ && hasParameter() == contract.hasParameter();
                if (!hasParameter() ? z : !(!z || !getParameter().equals(contract.getParameter()))) {
                    if (getProvider().equals(contract.getProvider()) && getContractName().equals(contract.getContractName()) && getPermissionId() == contract.getPermissionId() && this.unknownFields.equals(contract.unknownFields)) {
                        return true;
                    }
                }
                return false;
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_;
                if (hasParameter()) {
                    hashCode = (((hashCode * 37) + 2) * 53) + getParameter().hashCode();
                }
                int hashCode2 = (((((((((((((hashCode * 37) + 3) * 53) + getProvider().hashCode()) * 37) + 4) * 53) + getContractName().hashCode()) * 37) + 5) * 53) + getPermissionId()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            public static Contract parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static Contract parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static Contract parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static Contract parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static Contract parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static Contract parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Contract parseFrom(InputStream inputStream) throws IOException {
                return (Contract) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static Contract parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Contract) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Contract parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (Contract) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static Contract parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Contract) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Contract parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (Contract) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static Contract parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Contract) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Contract contract) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(contract);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ContractOrBuilder {
                private ByteString contractName_;
                private SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> parameterBuilder_;
                private Any parameter_;
                private int permissionId_;
                private ByteString provider_;
                private int type_;

                @Override
                public ByteString getContractName() {
                    return this.contractName_;
                }

                @Override
                public int getPermissionId() {
                    return this.permissionId_;
                }

                @Override
                public ByteString getProvider() {
                    return this.provider_;
                }

                @Override
                public int getTypeValue() {
                    return this.type_;
                }

                @Override
                public boolean hasParameter() {
                    return (this.parameterBuilder_ == null && this.parameter_ == null) ? false : true;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Transaction_Contract_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Transaction_Contract_fieldAccessorTable.ensureFieldAccessorsInitialized(Contract.class, Builder.class);
                }

                private Builder() {
                    this.type_ = 0;
                    this.parameter_ = null;
                    this.provider_ = ByteString.EMPTY;
                    this.contractName_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.type_ = 0;
                    this.parameter_ = null;
                    this.provider_ = ByteString.EMPTY;
                    this.contractName_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = Contract.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.type_ = 0;
                    if (this.parameterBuilder_ == null) {
                        this.parameter_ = null;
                    } else {
                        this.parameter_ = null;
                        this.parameterBuilder_ = null;
                    }
                    this.provider_ = ByteString.EMPTY;
                    this.contractName_ = ByteString.EMPTY;
                    this.permissionId_ = 0;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Transaction_Contract_descriptor;
                }

                @Override
                public Contract getDefaultInstanceForType() {
                    return Contract.getDefaultInstance();
                }

                @Override
                public Contract build() {
                    Contract buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public Contract buildPartial() {
                    Contract contract = new Contract(this);
                    contract.type_ = this.type_;
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        contract.parameter_ = this.parameter_;
                    } else {
                        contract.parameter_ = singleFieldBuilderV3.build();
                    }
                    contract.provider_ = this.provider_;
                    contract.contractName_ = this.contractName_;
                    contract.permissionId_ = this.permissionId_;
                    onBuilt();
                    return contract;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof Contract) {
                        return mergeFrom((Contract) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(Contract contract) {
                    if (contract == Contract.getDefaultInstance()) {
                        return this;
                    }
                    if (contract.type_ != 0) {
                        setTypeValue(contract.getTypeValue());
                    }
                    if (contract.hasParameter()) {
                        mergeParameter(contract.getParameter());
                    }
                    if (contract.getProvider() != ByteString.EMPTY) {
                        setProvider(contract.getProvider());
                    }
                    if (contract.getContractName() != ByteString.EMPTY) {
                        setContractName(contract.getContractName());
                    }
                    if (contract.getPermissionId() != 0) {
                        setPermissionId(contract.getPermissionId());
                    }
                    mergeUnknownFields(contract.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Transaction.Contract.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Transaction.Contract.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Transaction$Contract$Builder");
                }

                public Builder setTypeValue(int i) {
                    this.type_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public ContractType getType() {
                    ContractType valueOf = ContractType.valueOf(this.type_);
                    return valueOf == null ? ContractType.UNRECOGNIZED : valueOf;
                }

                public Builder setType(ContractType contractType) {
                    contractType.getClass();
                    this.type_ = contractType.getNumber();
                    onChanged();
                    return this;
                }

                public Builder clearType() {
                    this.type_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public Any getParameter() {
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        Any any = this.parameter_;
                        return any == null ? Any.getDefaultInstance() : any;
                    }
                    return singleFieldBuilderV3.getMessage();
                }

                public Builder setParameter(Any any) {
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        any.getClass();
                        this.parameter_ = any;
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(any);
                    }
                    return this;
                }

                public Builder setParameter(Any.Builder builder) {
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        this.parameter_ = builder.build();
                        onChanged();
                    } else {
                        singleFieldBuilderV3.setMessage(builder.build());
                    }
                    return this;
                }

                public Builder mergeParameter(Any any) {
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 == null) {
                        Any any2 = this.parameter_;
                        if (any2 != null) {
                            this.parameter_ = Any.newBuilder(any2).mergeFrom(any).buildPartial();
                        } else {
                            this.parameter_ = any;
                        }
                        onChanged();
                    } else {
                        singleFieldBuilderV3.mergeFrom(any);
                    }
                    return this;
                }

                public Builder clearParameter() {
                    if (this.parameterBuilder_ == null) {
                        this.parameter_ = null;
                        onChanged();
                    } else {
                        this.parameter_ = null;
                        this.parameterBuilder_ = null;
                    }
                    return this;
                }

                public Any.Builder getParameterBuilder() {
                    onChanged();
                    return getParameterFieldBuilder().getBuilder();
                }

                @Override
                public AnyOrBuilder getParameterOrBuilder() {
                    SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> singleFieldBuilderV3 = this.parameterBuilder_;
                    if (singleFieldBuilderV3 != null) {
                        return singleFieldBuilderV3.getMessageOrBuilder();
                    }
                    Any any = this.parameter_;
                    return any == null ? Any.getDefaultInstance() : any;
                }

                private SingleFieldBuilderV3<Any, Any.Builder, AnyOrBuilder> getParameterFieldBuilder() {
                    if (this.parameterBuilder_ == null) {
                        this.parameterBuilder_ = new SingleFieldBuilderV3<>(getParameter(), getParentForChildren(), isClean());
                        this.parameter_ = null;
                    }
                    return this.parameterBuilder_;
                }

                public Builder setProvider(ByteString byteString) {
                    byteString.getClass();
                    this.provider_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearProvider() {
                    this.provider_ = Contract.getDefaultInstance().getProvider();
                    onChanged();
                    return this;
                }

                public Builder setContractName(ByteString byteString) {
                    byteString.getClass();
                    this.contractName_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearContractName() {
                    this.contractName_ = Contract.getDefaultInstance().getContractName();
                    onChanged();
                    return this;
                }

                public Builder setPermissionId(int i) {
                    this.permissionId_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearPermissionId() {
                    this.permissionId_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class Result extends GeneratedMessageV3 implements ResultOrBuilder {
            public static final int ASSETISSUEID_FIELD_NUMBER = 14;
            public static final int CANCEL_UNFREEZEV2_AMOUNT_FIELD_NUMBER = 28;
            public static final int CONTRACTRET_FIELD_NUMBER = 3;
            public static final int EXCHANGE_ID_FIELD_NUMBER = 21;
            public static final int EXCHANGE_INJECT_ANOTHER_AMOUNT_FIELD_NUMBER = 19;
            public static final int EXCHANGE_RECEIVED_AMOUNT_FIELD_NUMBER = 18;
            public static final int EXCHANGE_WITHDRAW_ANOTHER_AMOUNT_FIELD_NUMBER = 20;
            public static final int FEE_FIELD_NUMBER = 1;
            public static final int ORDERDETAILS_FIELD_NUMBER = 26;
            public static final int ORDERID_FIELD_NUMBER = 25;
            public static final int RET_FIELD_NUMBER = 2;
            public static final int SHIELDED_TRANSACTION_FEE_FIELD_NUMBER = 22;
            public static final int UNFREEZE_AMOUNT_FIELD_NUMBER = 16;
            public static final int WITHDRAW_AMOUNT_FIELD_NUMBER = 15;
            public static final int WITHDRAW_EXPIRE_AMOUNT_FIELD_NUMBER = 27;
            private static final long serialVersionUID = 0;
            private volatile Object assetIssueID_;
            private int bitField0_;
            private MapField<String, Long> cancelUnfreezeV2Amount_;
            private int contractRet_;
            private long exchangeId_;
            private long exchangeInjectAnotherAmount_;
            private long exchangeReceivedAmount_;
            private long exchangeWithdrawAnotherAmount_;
            private long fee_;
            private byte memoizedIsInitialized;
            private List<MarketOrderDetail> orderDetails_;
            private ByteString orderId_;
            private int ret_;
            private long shieldedTransactionFee_;
            private long unfreezeAmount_;
            private long withdrawAmount_;
            private long withdrawExpireAmount_;
            private static final Result DEFAULT_INSTANCE = new Result();
            private static final Parser<Result> PARSER = new AbstractParser<Result>() {
                @Override
                public Result parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new Result(codedInputStream, extensionRegistryLite);
                }
            };

            public static Result getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<Result> parser() {
                return PARSER;
            }

            @Override
            public int getContractRetValue() {
                return this.contractRet_;
            }

            @Override
            public Result getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getExchangeId() {
                return this.exchangeId_;
            }

            @Override
            public long getExchangeInjectAnotherAmount() {
                return this.exchangeInjectAnotherAmount_;
            }

            @Override
            public long getExchangeReceivedAmount() {
                return this.exchangeReceivedAmount_;
            }

            @Override
            public long getExchangeWithdrawAnotherAmount() {
                return this.exchangeWithdrawAnotherAmount_;
            }

            @Override
            public long getFee() {
                return this.fee_;
            }

            @Override
            public List<MarketOrderDetail> getOrderDetailsList() {
                return this.orderDetails_;
            }

            @Override
            public List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList() {
                return this.orderDetails_;
            }

            @Override
            public ByteString getOrderId() {
                return this.orderId_;
            }

            @Override
            public Parser<Result> getParserForType() {
                return PARSER;
            }

            @Override
            public int getRetValue() {
                return this.ret_;
            }

            @Override
            public long getShieldedTransactionFee() {
                return this.shieldedTransactionFee_;
            }

            @Override
            public long getUnfreezeAmount() {
                return this.unfreezeAmount_;
            }

            @Override
            public long getWithdrawAmount() {
                return this.withdrawAmount_;
            }

            @Override
            public long getWithdrawExpireAmount() {
                return this.withdrawExpireAmount_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private Result(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private Result() {
                this.memoizedIsInitialized = (byte) -1;
                this.fee_ = 0L;
                this.ret_ = 0;
                this.contractRet_ = 0;
                this.assetIssueID_ = "";
                this.withdrawAmount_ = 0L;
                this.unfreezeAmount_ = 0L;
                this.exchangeReceivedAmount_ = 0L;
                this.exchangeInjectAnotherAmount_ = 0L;
                this.exchangeWithdrawAnotherAmount_ = 0L;
                this.exchangeId_ = 0L;
                this.shieldedTransactionFee_ = 0L;
                this.orderId_ = ByteString.EMPTY;
                this.orderDetails_ = Collections.emptyList();
                this.withdrawExpireAmount_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private Result(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    ?? r3 = 4096;
                    if (z) {
                        return;
                    }
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 8:
                                    this.fee_ = codedInputStream.readInt64();
                                    continue;
                                case 16:
                                    this.ret_ = codedInputStream.readEnum();
                                    continue;
                                case 24:
                                    this.contractRet_ = codedInputStream.readEnum();
                                    continue;
                                case 114:
                                    this.assetIssueID_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 120:
                                    this.withdrawAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 128:
                                    this.unfreezeAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 144:
                                    this.exchangeReceivedAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 152:
                                    this.exchangeInjectAnotherAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 160:
                                    this.exchangeWithdrawAnotherAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 168:
                                    this.exchangeId_ = codedInputStream.readInt64();
                                    continue;
                                case Opcodes.ARETURN:
                                    this.shieldedTransactionFee_ = codedInputStream.readInt64();
                                    continue;
                                case 202:
                                    this.orderId_ = codedInputStream.readBytes();
                                    continue;
                                case 210:
                                    if (!(z2 & true)) {
                                        this.orderDetails_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.orderDetails_.add((MarketOrderDetail) codedInputStream.readMessage(MarketOrderDetail.parser(), extensionRegistryLite));
                                    continue;
                                case JfifUtil.MARKER_SOI:
                                    this.withdrawExpireAmount_ = codedInputStream.readInt64();
                                    continue;
                                case 226:
                                    if (!(z2 & true)) {
                                        this.cancelUnfreezeV2Amount_ = MapField.newMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry);
                                        z2 |= true;
                                    }
                                    MapEntry mapEntry = (MapEntry) codedInputStream.readMessage(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                    this.cancelUnfreezeV2Amount_.getMutableMap().put((String) mapEntry.getKey(), (Long) mapEntry.getValue());
                                    continue;
                                default:
                                    r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                    if (r3 == 0) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        if ((z2 & true) == r3) {
                            this.orderDetails_ = Collections.unmodifiableList(this.orderDetails_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Transaction_Result_descriptor;
            }

            @Override
            protected MapField internalGetMapField(int i) {
                if (i == 28) {
                    return internalGetCancelUnfreezeV2Amount();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Transaction_Result_fieldAccessorTable.ensureFieldAccessorsInitialized(Result.class, Builder.class);
            }

            public enum code implements ProtocolMessageEnum {
                SUCESS(0),
                FAILED(1),
                UNRECOGNIZED(-1);
                
                public static final int FAILED_VALUE = 1;
                public static final int SUCESS_VALUE = 0;
                private final int value;
                private static final Internal.EnumLiteMap<code> internalValueMap = new Internal.EnumLiteMap<code>() {
                    @Override
                    public code findValueByNumber(int i) {
                        return code.forNumber(i);
                    }
                };
                private static final code[] VALUES = values();

                public static code forNumber(int i) {
                    if (i != 0) {
                        if (i != 1) {
                            return null;
                        }
                        return FAILED;
                    }
                    return SUCESS;
                }

                public static Internal.EnumLiteMap<code> internalGetValueMap() {
                    return internalValueMap;
                }

                @Override
                public final int getNumber() {
                    if (this != UNRECOGNIZED) {
                        return this.value;
                    }
                    throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
                }

                @Deprecated
                public static code valueOf(int i) {
                    return forNumber(i);
                }

                @Override
                public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                    return getDescriptor().getValues().get(ordinal());
                }

                @Override
                public final Descriptors.EnumDescriptor getDescriptorForType() {
                    return getDescriptor();
                }

                public static final Descriptors.EnumDescriptor getDescriptor() {
                    return Result.getDescriptor().getEnumTypes().get(0);
                }

                public static code valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                    if (enumValueDescriptor.getType() == getDescriptor()) {
                        return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                    }
                    throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
                }

                code(int i) {
                    this.value = i;
                }
            }

            public enum contractResult implements ProtocolMessageEnum {
                DEFAULT(0),
                SUCCESS(1),
                REVERT(2),
                BAD_JUMP_DESTINATION(3),
                OUT_OF_MEMORY(4),
                PRECOMPILED_CONTRACT(5),
                STACK_TOO_SMALL(6),
                STACK_TOO_LARGE(7),
                ILLEGAL_OPERATION(8),
                STACK_OVERFLOW(9),
                OUT_OF_ENERGY(10),
                OUT_OF_TIME(11),
                JVM_STACK_OVER_FLOW(12),
                UNKNOWN(13),
                TRANSFER_FAILED(14),
                INVALID_CODE(15),
                UNRECOGNIZED(-1);
                
                public static final int BAD_JUMP_DESTINATION_VALUE = 3;
                public static final int DEFAULT_VALUE = 0;
                public static final int ILLEGAL_OPERATION_VALUE = 8;
                public static final int INVALID_CODE_VALUE = 15;
                public static final int JVM_STACK_OVER_FLOW_VALUE = 12;
                public static final int OUT_OF_ENERGY_VALUE = 10;
                public static final int OUT_OF_MEMORY_VALUE = 4;
                public static final int OUT_OF_TIME_VALUE = 11;
                public static final int PRECOMPILED_CONTRACT_VALUE = 5;
                public static final int REVERT_VALUE = 2;
                public static final int STACK_OVERFLOW_VALUE = 9;
                public static final int STACK_TOO_LARGE_VALUE = 7;
                public static final int STACK_TOO_SMALL_VALUE = 6;
                public static final int SUCCESS_VALUE = 1;
                public static final int TRANSFER_FAILED_VALUE = 14;
                public static final int UNKNOWN_VALUE = 13;
                private final int value;
                private static final Internal.EnumLiteMap<contractResult> internalValueMap = new Internal.EnumLiteMap<contractResult>() {
                    @Override
                    public contractResult findValueByNumber(int i) {
                        return contractResult.forNumber(i);
                    }
                };
                private static final contractResult[] VALUES = values();

                public static contractResult forNumber(int i) {
                    switch (i) {
                        case 0:
                            return DEFAULT;
                        case 1:
                            return SUCCESS;
                        case 2:
                            return REVERT;
                        case 3:
                            return BAD_JUMP_DESTINATION;
                        case 4:
                            return OUT_OF_MEMORY;
                        case 5:
                            return PRECOMPILED_CONTRACT;
                        case 6:
                            return STACK_TOO_SMALL;
                        case 7:
                            return STACK_TOO_LARGE;
                        case 8:
                            return ILLEGAL_OPERATION;
                        case 9:
                            return STACK_OVERFLOW;
                        case 10:
                            return OUT_OF_ENERGY;
                        case 11:
                            return OUT_OF_TIME;
                        case 12:
                            return JVM_STACK_OVER_FLOW;
                        case 13:
                            return UNKNOWN;
                        case 14:
                            return TRANSFER_FAILED;
                        case 15:
                            return INVALID_CODE;
                        default:
                            return null;
                    }
                }

                public static Internal.EnumLiteMap<contractResult> internalGetValueMap() {
                    return internalValueMap;
                }

                @Override
                public final int getNumber() {
                    if (this != UNRECOGNIZED) {
                        return this.value;
                    }
                    throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
                }

                @Deprecated
                public static contractResult valueOf(int i) {
                    return forNumber(i);
                }

                @Override
                public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                    return getDescriptor().getValues().get(ordinal());
                }

                @Override
                public final Descriptors.EnumDescriptor getDescriptorForType() {
                    return getDescriptor();
                }

                public static final Descriptors.EnumDescriptor getDescriptor() {
                    return Result.getDescriptor().getEnumTypes().get(1);
                }

                public static contractResult valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                    if (enumValueDescriptor.getType() == getDescriptor()) {
                        return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                    }
                    throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
                }

                contractResult(int i) {
                    this.value = i;
                }
            }

            @Override
            public code getRet() {
                code valueOf = code.valueOf(this.ret_);
                return valueOf == null ? code.UNRECOGNIZED : valueOf;
            }

            @Override
            public contractResult getContractRet() {
                contractResult valueOf = contractResult.valueOf(this.contractRet_);
                return valueOf == null ? contractResult.UNRECOGNIZED : valueOf;
            }

            @Override
            public String getAssetIssueID() {
                Object obj = this.assetIssueID_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.assetIssueID_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getAssetIssueIDBytes() {
                Object obj = this.assetIssueID_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.assetIssueID_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public int getOrderDetailsCount() {
                return this.orderDetails_.size();
            }

            @Override
            public MarketOrderDetail getOrderDetails(int i) {
                return this.orderDetails_.get(i);
            }

            @Override
            public MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i) {
                return this.orderDetails_.get(i);
            }

            public static final class CancelUnfreezeV2AmountDefaultEntryHolder {
                static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_Transaction_Result_CancelUnfreezeV2AmountEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

                private CancelUnfreezeV2AmountDefaultEntryHolder() {
                }
            }

            public MapField<String, Long> internalGetCancelUnfreezeV2Amount() {
                MapField<String, Long> mapField = this.cancelUnfreezeV2Amount_;
                return mapField == null ? MapField.emptyMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry) : mapField;
            }

            @Override
            public int getCancelUnfreezeV2AmountCount() {
                return internalGetCancelUnfreezeV2Amount().getMap().size();
            }

            @Override
            public boolean containsCancelUnfreezeV2Amount(String str) {
                str.getClass();
                return internalGetCancelUnfreezeV2Amount().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getCancelUnfreezeV2Amount() {
                return getCancelUnfreezeV2AmountMap();
            }

            @Override
            public Map<String, Long> getCancelUnfreezeV2AmountMap() {
                return internalGetCancelUnfreezeV2Amount().getMap();
            }

            @Override
            public long getCancelUnfreezeV2AmountOrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getCancelUnfreezeV2AmountOrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.fee_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                if (this.ret_ != code.SUCESS.getNumber()) {
                    codedOutputStream.writeEnum(2, this.ret_);
                }
                if (this.contractRet_ != contractResult.DEFAULT.getNumber()) {
                    codedOutputStream.writeEnum(3, this.contractRet_);
                }
                if (!getAssetIssueIDBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 14, this.assetIssueID_);
                }
                long j2 = this.withdrawAmount_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(15, j2);
                }
                long j3 = this.unfreezeAmount_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(16, j3);
                }
                long j4 = this.exchangeReceivedAmount_;
                if (j4 != 0) {
                    codedOutputStream.writeInt64(18, j4);
                }
                long j5 = this.exchangeInjectAnotherAmount_;
                if (j5 != 0) {
                    codedOutputStream.writeInt64(19, j5);
                }
                long j6 = this.exchangeWithdrawAnotherAmount_;
                if (j6 != 0) {
                    codedOutputStream.writeInt64(20, j6);
                }
                long j7 = this.exchangeId_;
                if (j7 != 0) {
                    codedOutputStream.writeInt64(21, j7);
                }
                long j8 = this.shieldedTransactionFee_;
                if (j8 != 0) {
                    codedOutputStream.writeInt64(22, j8);
                }
                if (!this.orderId_.isEmpty()) {
                    codedOutputStream.writeBytes(25, this.orderId_);
                }
                for (int i = 0; i < this.orderDetails_.size(); i++) {
                    codedOutputStream.writeMessage(26, this.orderDetails_.get(i));
                }
                long j9 = this.withdrawExpireAmount_;
                if (j9 != 0) {
                    codedOutputStream.writeInt64(27, j9);
                }
                GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetCancelUnfreezeV2Amount(), CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry, 28);
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.fee_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                if (this.ret_ != code.SUCESS.getNumber()) {
                    computeInt64Size += CodedOutputStream.computeEnumSize(2, this.ret_);
                }
                if (this.contractRet_ != contractResult.DEFAULT.getNumber()) {
                    computeInt64Size += CodedOutputStream.computeEnumSize(3, this.contractRet_);
                }
                if (!getAssetIssueIDBytes().isEmpty()) {
                    computeInt64Size += GeneratedMessageV3.computeStringSize(14, this.assetIssueID_);
                }
                long j2 = this.withdrawAmount_;
                if (j2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(15, j2);
                }
                long j3 = this.unfreezeAmount_;
                if (j3 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(16, j3);
                }
                long j4 = this.exchangeReceivedAmount_;
                if (j4 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(18, j4);
                }
                long j5 = this.exchangeInjectAnotherAmount_;
                if (j5 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(19, j5);
                }
                long j6 = this.exchangeWithdrawAnotherAmount_;
                if (j6 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(20, j6);
                }
                long j7 = this.exchangeId_;
                if (j7 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(21, j7);
                }
                long j8 = this.shieldedTransactionFee_;
                if (j8 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(22, j8);
                }
                if (!this.orderId_.isEmpty()) {
                    computeInt64Size += CodedOutputStream.computeBytesSize(25, this.orderId_);
                }
                for (int i2 = 0; i2 < this.orderDetails_.size(); i2++) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(26, this.orderDetails_.get(i2));
                }
                long j9 = this.withdrawExpireAmount_;
                if (j9 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(27, j9);
                }
                for (Map.Entry<String, Long> entry : internalGetCancelUnfreezeV2Amount().getMap().entrySet()) {
                    computeInt64Size += CodedOutputStream.computeMessageSize(28, CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build());
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof Result)) {
                    return super.equals(obj);
                }
                Result result = (Result) obj;
                return getFee() == result.getFee() && this.ret_ == result.ret_ && this.contractRet_ == result.contractRet_ && getAssetIssueID().equals(result.getAssetIssueID()) && getWithdrawAmount() == result.getWithdrawAmount() && getUnfreezeAmount() == result.getUnfreezeAmount() && getExchangeReceivedAmount() == result.getExchangeReceivedAmount() && getExchangeInjectAnotherAmount() == result.getExchangeInjectAnotherAmount() && getExchangeWithdrawAnotherAmount() == result.getExchangeWithdrawAnotherAmount() && getExchangeId() == result.getExchangeId() && getShieldedTransactionFee() == result.getShieldedTransactionFee() && getOrderId().equals(result.getOrderId()) && getOrderDetailsList().equals(result.getOrderDetailsList()) && getWithdrawExpireAmount() == result.getWithdrawExpireAmount() && internalGetCancelUnfreezeV2Amount().equals(result.internalGetCancelUnfreezeV2Amount()) && this.unknownFields.equals(result.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getFee())) * 37) + 2) * 53) + this.ret_) * 37) + 3) * 53) + this.contractRet_) * 37) + 14) * 53) + getAssetIssueID().hashCode()) * 37) + 15) * 53) + Internal.hashLong(getWithdrawAmount())) * 37) + 16) * 53) + Internal.hashLong(getUnfreezeAmount())) * 37) + 18) * 53) + Internal.hashLong(getExchangeReceivedAmount())) * 37) + 19) * 53) + Internal.hashLong(getExchangeInjectAnotherAmount())) * 37) + 20) * 53) + Internal.hashLong(getExchangeWithdrawAnotherAmount())) * 37) + 21) * 53) + Internal.hashLong(getExchangeId())) * 37) + 22) * 53) + Internal.hashLong(getShieldedTransactionFee())) * 37) + 25) * 53) + getOrderId().hashCode();
                if (getOrderDetailsCount() > 0) {
                    hashCode = (((hashCode * 37) + 26) * 53) + getOrderDetailsList().hashCode();
                }
                int hashLong = (((hashCode * 37) + 27) * 53) + Internal.hashLong(getWithdrawExpireAmount());
                if (!internalGetCancelUnfreezeV2Amount().getMap().isEmpty()) {
                    hashLong = (((hashLong * 37) + 28) * 53) + internalGetCancelUnfreezeV2Amount().hashCode();
                }
                int hashCode2 = (hashLong * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            public static Result parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static Result parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static Result parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static Result parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static Result parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static Result parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Result parseFrom(InputStream inputStream) throws IOException {
                return (Result) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static Result parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Result) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Result parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (Result) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static Result parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Result) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Result parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (Result) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static Result parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Result) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Result result) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(result);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ResultOrBuilder {
                private Object assetIssueID_;
                private int bitField0_;
                private MapField<String, Long> cancelUnfreezeV2Amount_;
                private int contractRet_;
                private long exchangeId_;
                private long exchangeInjectAnotherAmount_;
                private long exchangeReceivedAmount_;
                private long exchangeWithdrawAnotherAmount_;
                private long fee_;
                private RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> orderDetailsBuilder_;
                private List<MarketOrderDetail> orderDetails_;
                private ByteString orderId_;
                private int ret_;
                private long shieldedTransactionFee_;
                private long unfreezeAmount_;
                private long withdrawAmount_;
                private long withdrawExpireAmount_;

                @Override
                public int getContractRetValue() {
                    return this.contractRet_;
                }

                @Override
                public long getExchangeId() {
                    return this.exchangeId_;
                }

                @Override
                public long getExchangeInjectAnotherAmount() {
                    return this.exchangeInjectAnotherAmount_;
                }

                @Override
                public long getExchangeReceivedAmount() {
                    return this.exchangeReceivedAmount_;
                }

                @Override
                public long getExchangeWithdrawAnotherAmount() {
                    return this.exchangeWithdrawAnotherAmount_;
                }

                @Override
                public long getFee() {
                    return this.fee_;
                }

                @Override
                public ByteString getOrderId() {
                    return this.orderId_;
                }

                @Override
                public int getRetValue() {
                    return this.ret_;
                }

                @Override
                public long getShieldedTransactionFee() {
                    return this.shieldedTransactionFee_;
                }

                @Override
                public long getUnfreezeAmount() {
                    return this.unfreezeAmount_;
                }

                @Override
                public long getWithdrawAmount() {
                    return this.withdrawAmount_;
                }

                @Override
                public long getWithdrawExpireAmount() {
                    return this.withdrawExpireAmount_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Transaction_Result_descriptor;
                }

                @Override
                protected MapField internalGetMapField(int i) {
                    if (i == 28) {
                        return internalGetCancelUnfreezeV2Amount();
                    }
                    throw new RuntimeException("Invalid map field number: " + i);
                }

                @Override
                protected MapField internalGetMutableMapField(int i) {
                    if (i == 28) {
                        return internalGetMutableCancelUnfreezeV2Amount();
                    }
                    throw new RuntimeException("Invalid map field number: " + i);
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Transaction_Result_fieldAccessorTable.ensureFieldAccessorsInitialized(Result.class, Builder.class);
                }

                private Builder() {
                    this.ret_ = 0;
                    this.contractRet_ = 0;
                    this.assetIssueID_ = "";
                    this.orderId_ = ByteString.EMPTY;
                    this.orderDetails_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.ret_ = 0;
                    this.contractRet_ = 0;
                    this.assetIssueID_ = "";
                    this.orderId_ = ByteString.EMPTY;
                    this.orderDetails_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (Result.alwaysUseFieldBuilders) {
                        getOrderDetailsFieldBuilder();
                    }
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.fee_ = 0L;
                    this.ret_ = 0;
                    this.contractRet_ = 0;
                    this.assetIssueID_ = "";
                    this.withdrawAmount_ = 0L;
                    this.unfreezeAmount_ = 0L;
                    this.exchangeReceivedAmount_ = 0L;
                    this.exchangeInjectAnotherAmount_ = 0L;
                    this.exchangeWithdrawAnotherAmount_ = 0L;
                    this.exchangeId_ = 0L;
                    this.shieldedTransactionFee_ = 0L;
                    this.orderId_ = ByteString.EMPTY;
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.orderDetails_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    this.withdrawExpireAmount_ = 0L;
                    internalGetMutableCancelUnfreezeV2Amount().clear();
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Transaction_Result_descriptor;
                }

                @Override
                public Result getDefaultInstanceForType() {
                    return Result.getDefaultInstance();
                }

                @Override
                public Result build() {
                    Result buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public Result buildPartial() {
                    Result result = new Result(this);
                    result.fee_ = this.fee_;
                    result.ret_ = this.ret_;
                    result.contractRet_ = this.contractRet_;
                    result.assetIssueID_ = this.assetIssueID_;
                    result.withdrawAmount_ = this.withdrawAmount_;
                    result.unfreezeAmount_ = this.unfreezeAmount_;
                    result.exchangeReceivedAmount_ = this.exchangeReceivedAmount_;
                    result.exchangeInjectAnotherAmount_ = this.exchangeInjectAnotherAmount_;
                    result.exchangeWithdrawAnotherAmount_ = this.exchangeWithdrawAnotherAmount_;
                    result.exchangeId_ = this.exchangeId_;
                    result.shieldedTransactionFee_ = this.shieldedTransactionFee_;
                    result.orderId_ = this.orderId_;
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        if ((this.bitField0_ & 4096) == 4096) {
                            this.orderDetails_ = Collections.unmodifiableList(this.orderDetails_);
                            this.bitField0_ &= -4097;
                        }
                        result.orderDetails_ = this.orderDetails_;
                    } else {
                        result.orderDetails_ = repeatedFieldBuilderV3.build();
                    }
                    result.withdrawExpireAmount_ = this.withdrawExpireAmount_;
                    result.cancelUnfreezeV2Amount_ = internalGetCancelUnfreezeV2Amount();
                    result.cancelUnfreezeV2Amount_.makeImmutable();
                    result.bitField0_ = 0;
                    onBuilt();
                    return result;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof Result) {
                        return mergeFrom((Result) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(Result result) {
                    if (result == Result.getDefaultInstance()) {
                        return this;
                    }
                    if (result.getFee() != 0) {
                        setFee(result.getFee());
                    }
                    if (result.ret_ != 0) {
                        setRetValue(result.getRetValue());
                    }
                    if (result.contractRet_ != 0) {
                        setContractRetValue(result.getContractRetValue());
                    }
                    if (!result.getAssetIssueID().isEmpty()) {
                        this.assetIssueID_ = result.assetIssueID_;
                        onChanged();
                    }
                    if (result.getWithdrawAmount() != 0) {
                        setWithdrawAmount(result.getWithdrawAmount());
                    }
                    if (result.getUnfreezeAmount() != 0) {
                        setUnfreezeAmount(result.getUnfreezeAmount());
                    }
                    if (result.getExchangeReceivedAmount() != 0) {
                        setExchangeReceivedAmount(result.getExchangeReceivedAmount());
                    }
                    if (result.getExchangeInjectAnotherAmount() != 0) {
                        setExchangeInjectAnotherAmount(result.getExchangeInjectAnotherAmount());
                    }
                    if (result.getExchangeWithdrawAnotherAmount() != 0) {
                        setExchangeWithdrawAnotherAmount(result.getExchangeWithdrawAnotherAmount());
                    }
                    if (result.getExchangeId() != 0) {
                        setExchangeId(result.getExchangeId());
                    }
                    if (result.getShieldedTransactionFee() != 0) {
                        setShieldedTransactionFee(result.getShieldedTransactionFee());
                    }
                    if (result.getOrderId() != ByteString.EMPTY) {
                        setOrderId(result.getOrderId());
                    }
                    if (this.orderDetailsBuilder_ == null) {
                        if (!result.orderDetails_.isEmpty()) {
                            if (this.orderDetails_.isEmpty()) {
                                this.orderDetails_ = result.orderDetails_;
                                this.bitField0_ &= -4097;
                            } else {
                                ensureOrderDetailsIsMutable();
                                this.orderDetails_.addAll(result.orderDetails_);
                            }
                            onChanged();
                        }
                    } else if (!result.orderDetails_.isEmpty()) {
                        if (!this.orderDetailsBuilder_.isEmpty()) {
                            this.orderDetailsBuilder_.addAllMessages(result.orderDetails_);
                        } else {
                            this.orderDetailsBuilder_.dispose();
                            this.orderDetailsBuilder_ = null;
                            this.orderDetails_ = result.orderDetails_;
                            this.bitField0_ &= -4097;
                            this.orderDetailsBuilder_ = Result.alwaysUseFieldBuilders ? getOrderDetailsFieldBuilder() : null;
                        }
                    }
                    if (result.getWithdrawExpireAmount() != 0) {
                        setWithdrawExpireAmount(result.getWithdrawExpireAmount());
                    }
                    internalGetMutableCancelUnfreezeV2Amount().mergeFrom(result.internalGetCancelUnfreezeV2Amount());
                    mergeUnknownFields(result.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Transaction.Result.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Transaction.Result.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Transaction$Result$Builder");
                }

                public Builder setFee(long j) {
                    this.fee_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearFee() {
                    this.fee_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setRetValue(int i) {
                    this.ret_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public code getRet() {
                    code valueOf = code.valueOf(this.ret_);
                    return valueOf == null ? code.UNRECOGNIZED : valueOf;
                }

                public Builder setRet(code codeVar) {
                    codeVar.getClass();
                    this.ret_ = codeVar.getNumber();
                    onChanged();
                    return this;
                }

                public Builder clearRet() {
                    this.ret_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setContractRetValue(int i) {
                    this.contractRet_ = i;
                    onChanged();
                    return this;
                }

                @Override
                public contractResult getContractRet() {
                    contractResult valueOf = contractResult.valueOf(this.contractRet_);
                    return valueOf == null ? contractResult.UNRECOGNIZED : valueOf;
                }

                public Builder setContractRet(contractResult contractresult) {
                    contractresult.getClass();
                    this.contractRet_ = contractresult.getNumber();
                    onChanged();
                    return this;
                }

                public Builder clearContractRet() {
                    this.contractRet_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public String getAssetIssueID() {
                    Object obj = this.assetIssueID_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.assetIssueID_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getAssetIssueIDBytes() {
                    Object obj = this.assetIssueID_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.assetIssueID_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setAssetIssueID(String str) {
                    str.getClass();
                    this.assetIssueID_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearAssetIssueID() {
                    this.assetIssueID_ = Result.getDefaultInstance().getAssetIssueID();
                    onChanged();
                    return this;
                }

                public Builder setAssetIssueIDBytes(ByteString byteString) {
                    byteString.getClass();
                    Result.checkByteStringIsUtf8(byteString);
                    this.assetIssueID_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setWithdrawAmount(long j) {
                    this.withdrawAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearWithdrawAmount() {
                    this.withdrawAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setUnfreezeAmount(long j) {
                    this.unfreezeAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearUnfreezeAmount() {
                    this.unfreezeAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setExchangeReceivedAmount(long j) {
                    this.exchangeReceivedAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExchangeReceivedAmount() {
                    this.exchangeReceivedAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setExchangeInjectAnotherAmount(long j) {
                    this.exchangeInjectAnotherAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExchangeInjectAnotherAmount() {
                    this.exchangeInjectAnotherAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setExchangeWithdrawAnotherAmount(long j) {
                    this.exchangeWithdrawAnotherAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExchangeWithdrawAnotherAmount() {
                    this.exchangeWithdrawAnotherAmount_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setExchangeId(long j) {
                    this.exchangeId_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExchangeId() {
                    this.exchangeId_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setShieldedTransactionFee(long j) {
                    this.shieldedTransactionFee_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearShieldedTransactionFee() {
                    this.shieldedTransactionFee_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setOrderId(ByteString byteString) {
                    byteString.getClass();
                    this.orderId_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearOrderId() {
                    this.orderId_ = Result.getDefaultInstance().getOrderId();
                    onChanged();
                    return this;
                }

                private void ensureOrderDetailsIsMutable() {
                    if ((this.bitField0_ & 4096) != 4096) {
                        this.orderDetails_ = new ArrayList(this.orderDetails_);
                        this.bitField0_ |= 4096;
                    }
                }

                @Override
                public List<MarketOrderDetail> getOrderDetailsList() {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return Collections.unmodifiableList(this.orderDetails_);
                    }
                    return repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public int getOrderDetailsCount() {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.orderDetails_.size();
                    }
                    return repeatedFieldBuilderV3.getCount();
                }

                @Override
                public MarketOrderDetail getOrderDetails(int i) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.orderDetails_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessage(i);
                }

                public Builder setOrderDetails(int i, MarketOrderDetail marketOrderDetail) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        marketOrderDetail.getClass();
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.set(i, marketOrderDetail);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, marketOrderDetail);
                    }
                    return this;
                }

                public Builder setOrderDetails(int i, MarketOrderDetail.Builder builder) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addOrderDetails(MarketOrderDetail marketOrderDetail) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        marketOrderDetail.getClass();
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.add(marketOrderDetail);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(marketOrderDetail);
                    }
                    return this;
                }

                public Builder addOrderDetails(int i, MarketOrderDetail marketOrderDetail) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        marketOrderDetail.getClass();
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.add(i, marketOrderDetail);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, marketOrderDetail);
                    }
                    return this;
                }

                public Builder addOrderDetails(MarketOrderDetail.Builder builder) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addOrderDetails(int i, MarketOrderDetail.Builder builder) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addAllOrderDetails(Iterable<? extends MarketOrderDetail> iterable) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureOrderDetailsIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.orderDetails_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder clearOrderDetails() {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.orderDetails_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder removeOrderDetails(int i) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureOrderDetailsIsMutable();
                        this.orderDetails_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public MarketOrderDetail.Builder getOrderDetailsBuilder(int i) {
                    return getOrderDetailsFieldBuilder().getBuilder(i);
                }

                @Override
                public MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i) {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.orderDetails_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessageOrBuilder(i);
                }

                @Override
                public List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList() {
                    RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                    if (repeatedFieldBuilderV3 != null) {
                        return repeatedFieldBuilderV3.getMessageOrBuilderList();
                    }
                    return Collections.unmodifiableList(this.orderDetails_);
                }

                public MarketOrderDetail.Builder addOrderDetailsBuilder() {
                    return getOrderDetailsFieldBuilder().addBuilder(MarketOrderDetail.getDefaultInstance());
                }

                public MarketOrderDetail.Builder addOrderDetailsBuilder(int i) {
                    return getOrderDetailsFieldBuilder().addBuilder(i, MarketOrderDetail.getDefaultInstance());
                }

                public List<MarketOrderDetail.Builder> getOrderDetailsBuilderList() {
                    return getOrderDetailsFieldBuilder().getBuilderList();
                }

                private RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> getOrderDetailsFieldBuilder() {
                    if (this.orderDetailsBuilder_ == null) {
                        this.orderDetailsBuilder_ = new RepeatedFieldBuilderV3<>(this.orderDetails_, (this.bitField0_ & 4096) == 4096, getParentForChildren(), isClean());
                        this.orderDetails_ = null;
                    }
                    return this.orderDetailsBuilder_;
                }

                public Builder setWithdrawExpireAmount(long j) {
                    this.withdrawExpireAmount_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearWithdrawExpireAmount() {
                    this.withdrawExpireAmount_ = 0L;
                    onChanged();
                    return this;
                }

                private MapField<String, Long> internalGetCancelUnfreezeV2Amount() {
                    MapField<String, Long> mapField = this.cancelUnfreezeV2Amount_;
                    return mapField == null ? MapField.emptyMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry) : mapField;
                }

                private MapField<String, Long> internalGetMutableCancelUnfreezeV2Amount() {
                    onChanged();
                    if (this.cancelUnfreezeV2Amount_ == null) {
                        this.cancelUnfreezeV2Amount_ = MapField.newMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry);
                    }
                    if (!this.cancelUnfreezeV2Amount_.isMutable()) {
                        this.cancelUnfreezeV2Amount_ = this.cancelUnfreezeV2Amount_.copy();
                    }
                    return this.cancelUnfreezeV2Amount_;
                }

                @Override
                public int getCancelUnfreezeV2AmountCount() {
                    return internalGetCancelUnfreezeV2Amount().getMap().size();
                }

                @Override
                public boolean containsCancelUnfreezeV2Amount(String str) {
                    str.getClass();
                    return internalGetCancelUnfreezeV2Amount().getMap().containsKey(str);
                }

                @Override
                @Deprecated
                public Map<String, Long> getCancelUnfreezeV2Amount() {
                    return getCancelUnfreezeV2AmountMap();
                }

                @Override
                public Map<String, Long> getCancelUnfreezeV2AmountMap() {
                    return internalGetCancelUnfreezeV2Amount().getMap();
                }

                @Override
                public long getCancelUnfreezeV2AmountOrDefault(String str, long j) {
                    str.getClass();
                    Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                    return map.containsKey(str) ? map.get(str).longValue() : j;
                }

                @Override
                public long getCancelUnfreezeV2AmountOrThrow(String str) {
                    str.getClass();
                    Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                    if (!map.containsKey(str)) {
                        throw new IllegalArgumentException();
                    }
                    return map.get(str).longValue();
                }

                public Builder clearCancelUnfreezeV2Amount() {
                    internalGetMutableCancelUnfreezeV2Amount().getMutableMap().clear();
                    return this;
                }

                public Builder removeCancelUnfreezeV2Amount(String str) {
                    str.getClass();
                    internalGetMutableCancelUnfreezeV2Amount().getMutableMap().remove(str);
                    return this;
                }

                @Deprecated
                public Map<String, Long> getMutableCancelUnfreezeV2Amount() {
                    return internalGetMutableCancelUnfreezeV2Amount().getMutableMap();
                }

                public Builder putCancelUnfreezeV2Amount(String str, long j) {
                    str.getClass();
                    internalGetMutableCancelUnfreezeV2Amount().getMutableMap().put(str, Long.valueOf(j));
                    return this;
                }

                public Builder putAllCancelUnfreezeV2Amount(Map<String, Long> map) {
                    internalGetMutableCancelUnfreezeV2Amount().getMutableMap().putAll(map);
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class raw extends GeneratedMessageV3 implements rawOrBuilder {
            public static final int AUTHS_FIELD_NUMBER = 9;
            public static final int CONTRACT_FIELD_NUMBER = 11;
            public static final int DATA_FIELD_NUMBER = 10;
            public static final int EXPIRATION_FIELD_NUMBER = 8;
            public static final int FEE_LIMIT_FIELD_NUMBER = 18;
            public static final int REF_BLOCK_BYTES_FIELD_NUMBER = 1;
            public static final int REF_BLOCK_HASH_FIELD_NUMBER = 4;
            public static final int REF_BLOCK_NUM_FIELD_NUMBER = 3;
            public static final int SCRIPTS_FIELD_NUMBER = 12;
            public static final int TIMESTAMP_FIELD_NUMBER = 14;
            private static final long serialVersionUID = 0;
            private List<authority> auths_;
            private int bitField0_;
            private List<Contract> contract_;
            private ByteString data_;
            private long expiration_;
            private long feeLimit_;
            private byte memoizedIsInitialized;
            private ByteString refBlockBytes_;
            private ByteString refBlockHash_;
            private long refBlockNum_;
            private ByteString scripts_;
            private long timestamp_;
            private static final raw DEFAULT_INSTANCE = new raw();
            private static final Parser<raw> PARSER = new AbstractParser<raw>() {
                @Override
                public raw parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new raw(codedInputStream, extensionRegistryLite);
                }
            };

            public static raw getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<raw> parser() {
                return PARSER;
            }

            @Override
            public List<authority> getAuthsList() {
                return this.auths_;
            }

            @Override
            public List<? extends authorityOrBuilder> getAuthsOrBuilderList() {
                return this.auths_;
            }

            @Override
            public List<Contract> getContractList() {
                return this.contract_;
            }

            @Override
            public List<? extends ContractOrBuilder> getContractOrBuilderList() {
                return this.contract_;
            }

            @Override
            public ByteString getData() {
                return this.data_;
            }

            @Override
            public raw getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getExpiration() {
                return this.expiration_;
            }

            @Override
            public long getFeeLimit() {
                return this.feeLimit_;
            }

            @Override
            public Parser<raw> getParserForType() {
                return PARSER;
            }

            @Override
            public ByteString getRefBlockBytes() {
                return this.refBlockBytes_;
            }

            @Override
            public ByteString getRefBlockHash() {
                return this.refBlockHash_;
            }

            @Override
            public long getRefBlockNum() {
                return this.refBlockNum_;
            }

            @Override
            public ByteString getScripts() {
                return this.scripts_;
            }

            @Override
            public long getTimestamp() {
                return this.timestamp_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private raw(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private raw() {
                this.memoizedIsInitialized = (byte) -1;
                this.refBlockBytes_ = ByteString.EMPTY;
                this.refBlockNum_ = 0L;
                this.refBlockHash_ = ByteString.EMPTY;
                this.expiration_ = 0L;
                this.auths_ = Collections.emptyList();
                this.data_ = ByteString.EMPTY;
                this.contract_ = Collections.emptyList();
                this.scripts_ = ByteString.EMPTY;
                this.timestamp_ = 0L;
                this.feeLimit_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private raw(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    ?? r3 = 64;
                    if (z) {
                        return;
                    }
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 10:
                                    this.refBlockBytes_ = codedInputStream.readBytes();
                                    continue;
                                case 24:
                                    this.refBlockNum_ = codedInputStream.readInt64();
                                    continue;
                                case 34:
                                    this.refBlockHash_ = codedInputStream.readBytes();
                                    continue;
                                case 64:
                                    this.expiration_ = codedInputStream.readInt64();
                                    continue;
                                case 74:
                                    if (!(z2 & true)) {
                                        this.auths_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.auths_.add((authority) codedInputStream.readMessage(authority.parser(), extensionRegistryLite));
                                    continue;
                                case 82:
                                    this.data_ = codedInputStream.readBytes();
                                    continue;
                                case 90:
                                    if (!(z2 & true)) {
                                        this.contract_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.contract_.add((Contract) codedInputStream.readMessage(Contract.parser(), extensionRegistryLite));
                                    continue;
                                case 98:
                                    this.scripts_ = codedInputStream.readBytes();
                                    continue;
                                case 112:
                                    this.timestamp_ = codedInputStream.readInt64();
                                    continue;
                                case 144:
                                    this.feeLimit_ = codedInputStream.readInt64();
                                    continue;
                                default:
                                    r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                    if (r3 == 0) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        if (z2 & true) {
                            this.auths_ = Collections.unmodifiableList(this.auths_);
                        }
                        if ((z2 & true) == r3) {
                            this.contract_ = Collections.unmodifiableList(this.contract_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Transaction_raw_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Transaction_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
            }

            @Override
            public int getAuthsCount() {
                return this.auths_.size();
            }

            @Override
            public authority getAuths(int i) {
                return this.auths_.get(i);
            }

            @Override
            public authorityOrBuilder getAuthsOrBuilder(int i) {
                return this.auths_.get(i);
            }

            @Override
            public int getContractCount() {
                return this.contract_.size();
            }

            @Override
            public Contract getContract(int i) {
                return this.contract_.get(i);
            }

            @Override
            public ContractOrBuilder getContractOrBuilder(int i) {
                return this.contract_.get(i);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.refBlockBytes_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.refBlockBytes_);
                }
                long j = this.refBlockNum_;
                if (j != 0) {
                    codedOutputStream.writeInt64(3, j);
                }
                if (!this.refBlockHash_.isEmpty()) {
                    codedOutputStream.writeBytes(4, this.refBlockHash_);
                }
                long j2 = this.expiration_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(8, j2);
                }
                for (int i = 0; i < this.auths_.size(); i++) {
                    codedOutputStream.writeMessage(9, this.auths_.get(i));
                }
                if (!this.data_.isEmpty()) {
                    codedOutputStream.writeBytes(10, this.data_);
                }
                for (int i2 = 0; i2 < this.contract_.size(); i2++) {
                    codedOutputStream.writeMessage(11, this.contract_.get(i2));
                }
                if (!this.scripts_.isEmpty()) {
                    codedOutputStream.writeBytes(12, this.scripts_);
                }
                long j3 = this.timestamp_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(14, j3);
                }
                long j4 = this.feeLimit_;
                if (j4 != 0) {
                    codedOutputStream.writeInt64(18, j4);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.refBlockBytes_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.refBlockBytes_) : 0;
                long j = this.refBlockNum_;
                if (j != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(3, j);
                }
                if (!this.refBlockHash_.isEmpty()) {
                    computeBytesSize += CodedOutputStream.computeBytesSize(4, this.refBlockHash_);
                }
                long j2 = this.expiration_;
                if (j2 != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(8, j2);
                }
                for (int i2 = 0; i2 < this.auths_.size(); i2++) {
                    computeBytesSize += CodedOutputStream.computeMessageSize(9, this.auths_.get(i2));
                }
                if (!this.data_.isEmpty()) {
                    computeBytesSize += CodedOutputStream.computeBytesSize(10, this.data_);
                }
                for (int i3 = 0; i3 < this.contract_.size(); i3++) {
                    computeBytesSize += CodedOutputStream.computeMessageSize(11, this.contract_.get(i3));
                }
                if (!this.scripts_.isEmpty()) {
                    computeBytesSize += CodedOutputStream.computeBytesSize(12, this.scripts_);
                }
                long j3 = this.timestamp_;
                if (j3 != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(14, j3);
                }
                long j4 = this.feeLimit_;
                if (j4 != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(18, j4);
                }
                int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof raw)) {
                    return super.equals(obj);
                }
                raw rawVar = (raw) obj;
                return getRefBlockBytes().equals(rawVar.getRefBlockBytes()) && getRefBlockNum() == rawVar.getRefBlockNum() && getRefBlockHash().equals(rawVar.getRefBlockHash()) && getExpiration() == rawVar.getExpiration() && getAuthsList().equals(rawVar.getAuthsList()) && getData().equals(rawVar.getData()) && getContractList().equals(rawVar.getContractList()) && getScripts().equals(rawVar.getScripts()) && getTimestamp() == rawVar.getTimestamp() && getFeeLimit() == rawVar.getFeeLimit() && this.unknownFields.equals(rawVar.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getRefBlockBytes().hashCode()) * 37) + 3) * 53) + Internal.hashLong(getRefBlockNum())) * 37) + 4) * 53) + getRefBlockHash().hashCode()) * 37) + 8) * 53) + Internal.hashLong(getExpiration());
                if (getAuthsCount() > 0) {
                    hashCode = (((hashCode * 37) + 9) * 53) + getAuthsList().hashCode();
                }
                int hashCode2 = (((hashCode * 37) + 10) * 53) + getData().hashCode();
                if (getContractCount() > 0) {
                    hashCode2 = (((hashCode2 * 37) + 11) * 53) + getContractList().hashCode();
                }
                int hashCode3 = (((((((((((((hashCode2 * 37) + 12) * 53) + getScripts().hashCode()) * 37) + 14) * 53) + Internal.hashLong(getTimestamp())) * 37) + 18) * 53) + Internal.hashLong(getFeeLimit())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode3;
                return hashCode3;
            }

            public static raw parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static raw parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static raw parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static raw parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static raw parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static raw parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static raw parseFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static raw parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static raw parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static raw parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(raw rawVar) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(rawVar);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements rawOrBuilder {
                private RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> authsBuilder_;
                private List<authority> auths_;
                private int bitField0_;
                private RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> contractBuilder_;
                private List<Contract> contract_;
                private ByteString data_;
                private long expiration_;
                private long feeLimit_;
                private ByteString refBlockBytes_;
                private ByteString refBlockHash_;
                private long refBlockNum_;
                private ByteString scripts_;
                private long timestamp_;

                @Override
                public ByteString getData() {
                    return this.data_;
                }

                @Override
                public long getExpiration() {
                    return this.expiration_;
                }

                @Override
                public long getFeeLimit() {
                    return this.feeLimit_;
                }

                @Override
                public ByteString getRefBlockBytes() {
                    return this.refBlockBytes_;
                }

                @Override
                public ByteString getRefBlockHash() {
                    return this.refBlockHash_;
                }

                @Override
                public long getRefBlockNum() {
                    return this.refBlockNum_;
                }

                @Override
                public ByteString getScripts() {
                    return this.scripts_;
                }

                @Override
                public long getTimestamp() {
                    return this.timestamp_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_Transaction_raw_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_Transaction_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
                }

                private Builder() {
                    this.refBlockBytes_ = ByteString.EMPTY;
                    this.refBlockHash_ = ByteString.EMPTY;
                    this.auths_ = Collections.emptyList();
                    this.data_ = ByteString.EMPTY;
                    this.contract_ = Collections.emptyList();
                    this.scripts_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.refBlockBytes_ = ByteString.EMPTY;
                    this.refBlockHash_ = ByteString.EMPTY;
                    this.auths_ = Collections.emptyList();
                    this.data_ = ByteString.EMPTY;
                    this.contract_ = Collections.emptyList();
                    this.scripts_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (raw.alwaysUseFieldBuilders) {
                        getAuthsFieldBuilder();
                        getContractFieldBuilder();
                    }
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.refBlockBytes_ = ByteString.EMPTY;
                    this.refBlockNum_ = 0L;
                    this.refBlockHash_ = ByteString.EMPTY;
                    this.expiration_ = 0L;
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.auths_ = Collections.emptyList();
                        this.bitField0_ &= -17;
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    this.data_ = ByteString.EMPTY;
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV32 = this.contractBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        this.contract_ = Collections.emptyList();
                        this.bitField0_ &= -65;
                    } else {
                        repeatedFieldBuilderV32.clear();
                    }
                    this.scripts_ = ByteString.EMPTY;
                    this.timestamp_ = 0L;
                    this.feeLimit_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_Transaction_raw_descriptor;
                }

                @Override
                public raw getDefaultInstanceForType() {
                    return raw.getDefaultInstance();
                }

                @Override
                public raw build() {
                    raw buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public raw buildPartial() {
                    raw rawVar = new raw(this);
                    rawVar.refBlockBytes_ = this.refBlockBytes_;
                    rawVar.refBlockNum_ = this.refBlockNum_;
                    rawVar.refBlockHash_ = this.refBlockHash_;
                    rawVar.expiration_ = this.expiration_;
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        if ((this.bitField0_ & 16) == 16) {
                            this.auths_ = Collections.unmodifiableList(this.auths_);
                            this.bitField0_ &= -17;
                        }
                        rawVar.auths_ = this.auths_;
                    } else {
                        rawVar.auths_ = repeatedFieldBuilderV3.build();
                    }
                    rawVar.data_ = this.data_;
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV32 = this.contractBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        if ((this.bitField0_ & 64) == 64) {
                            this.contract_ = Collections.unmodifiableList(this.contract_);
                            this.bitField0_ &= -65;
                        }
                        rawVar.contract_ = this.contract_;
                    } else {
                        rawVar.contract_ = repeatedFieldBuilderV32.build();
                    }
                    rawVar.scripts_ = this.scripts_;
                    rawVar.timestamp_ = this.timestamp_;
                    rawVar.feeLimit_ = this.feeLimit_;
                    rawVar.bitField0_ = 0;
                    onBuilt();
                    return rawVar;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof raw) {
                        return mergeFrom((raw) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(raw rawVar) {
                    if (rawVar == raw.getDefaultInstance()) {
                        return this;
                    }
                    if (rawVar.getRefBlockBytes() != ByteString.EMPTY) {
                        setRefBlockBytes(rawVar.getRefBlockBytes());
                    }
                    if (rawVar.getRefBlockNum() != 0) {
                        setRefBlockNum(rawVar.getRefBlockNum());
                    }
                    if (rawVar.getRefBlockHash() != ByteString.EMPTY) {
                        setRefBlockHash(rawVar.getRefBlockHash());
                    }
                    if (rawVar.getExpiration() != 0) {
                        setExpiration(rawVar.getExpiration());
                    }
                    if (this.authsBuilder_ == null) {
                        if (!rawVar.auths_.isEmpty()) {
                            if (this.auths_.isEmpty()) {
                                this.auths_ = rawVar.auths_;
                                this.bitField0_ &= -17;
                            } else {
                                ensureAuthsIsMutable();
                                this.auths_.addAll(rawVar.auths_);
                            }
                            onChanged();
                        }
                    } else if (!rawVar.auths_.isEmpty()) {
                        if (!this.authsBuilder_.isEmpty()) {
                            this.authsBuilder_.addAllMessages(rawVar.auths_);
                        } else {
                            this.authsBuilder_.dispose();
                            this.authsBuilder_ = null;
                            this.auths_ = rawVar.auths_;
                            this.bitField0_ &= -17;
                            this.authsBuilder_ = raw.alwaysUseFieldBuilders ? getAuthsFieldBuilder() : null;
                        }
                    }
                    if (rawVar.getData() != ByteString.EMPTY) {
                        setData(rawVar.getData());
                    }
                    if (this.contractBuilder_ == null) {
                        if (!rawVar.contract_.isEmpty()) {
                            if (this.contract_.isEmpty()) {
                                this.contract_ = rawVar.contract_;
                                this.bitField0_ &= -65;
                            } else {
                                ensureContractIsMutable();
                                this.contract_.addAll(rawVar.contract_);
                            }
                            onChanged();
                        }
                    } else if (!rawVar.contract_.isEmpty()) {
                        if (!this.contractBuilder_.isEmpty()) {
                            this.contractBuilder_.addAllMessages(rawVar.contract_);
                        } else {
                            this.contractBuilder_.dispose();
                            this.contractBuilder_ = null;
                            this.contract_ = rawVar.contract_;
                            this.bitField0_ &= -65;
                            this.contractBuilder_ = raw.alwaysUseFieldBuilders ? getContractFieldBuilder() : null;
                        }
                    }
                    if (rawVar.getScripts() != ByteString.EMPTY) {
                        setScripts(rawVar.getScripts());
                    }
                    if (rawVar.getTimestamp() != 0) {
                        setTimestamp(rawVar.getTimestamp());
                    }
                    if (rawVar.getFeeLimit() != 0) {
                        setFeeLimit(rawVar.getFeeLimit());
                    }
                    mergeUnknownFields(rawVar.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.Transaction.raw.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Transaction.raw.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Transaction$raw$Builder");
                }

                public Builder setRefBlockBytes(ByteString byteString) {
                    byteString.getClass();
                    this.refBlockBytes_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearRefBlockBytes() {
                    this.refBlockBytes_ = raw.getDefaultInstance().getRefBlockBytes();
                    onChanged();
                    return this;
                }

                public Builder setRefBlockNum(long j) {
                    this.refBlockNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearRefBlockNum() {
                    this.refBlockNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setRefBlockHash(ByteString byteString) {
                    byteString.getClass();
                    this.refBlockHash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearRefBlockHash() {
                    this.refBlockHash_ = raw.getDefaultInstance().getRefBlockHash();
                    onChanged();
                    return this;
                }

                public Builder setExpiration(long j) {
                    this.expiration_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearExpiration() {
                    this.expiration_ = 0L;
                    onChanged();
                    return this;
                }

                private void ensureAuthsIsMutable() {
                    if ((this.bitField0_ & 16) != 16) {
                        this.auths_ = new ArrayList(this.auths_);
                        this.bitField0_ |= 16;
                    }
                }

                @Override
                public List<authority> getAuthsList() {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return Collections.unmodifiableList(this.auths_);
                    }
                    return repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public int getAuthsCount() {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.auths_.size();
                    }
                    return repeatedFieldBuilderV3.getCount();
                }

                @Override
                public authority getAuths(int i) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.auths_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessage(i);
                }

                public Builder setAuths(int i, authority authorityVar) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        authorityVar.getClass();
                        ensureAuthsIsMutable();
                        this.auths_.set(i, authorityVar);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, authorityVar);
                    }
                    return this;
                }

                public Builder setAuths(int i, authority.Builder builder) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureAuthsIsMutable();
                        this.auths_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addAuths(authority authorityVar) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        authorityVar.getClass();
                        ensureAuthsIsMutable();
                        this.auths_.add(authorityVar);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(authorityVar);
                    }
                    return this;
                }

                public Builder addAuths(int i, authority authorityVar) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        authorityVar.getClass();
                        ensureAuthsIsMutable();
                        this.auths_.add(i, authorityVar);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, authorityVar);
                    }
                    return this;
                }

                public Builder addAuths(authority.Builder builder) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureAuthsIsMutable();
                        this.auths_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addAuths(int i, authority.Builder builder) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureAuthsIsMutable();
                        this.auths_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addAllAuths(Iterable<? extends authority> iterable) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureAuthsIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.auths_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder clearAuths() {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.auths_ = Collections.emptyList();
                        this.bitField0_ &= -17;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder removeAuths(int i) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureAuthsIsMutable();
                        this.auths_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public authority.Builder getAuthsBuilder(int i) {
                    return getAuthsFieldBuilder().getBuilder(i);
                }

                @Override
                public authorityOrBuilder getAuthsOrBuilder(int i) {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.auths_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessageOrBuilder(i);
                }

                @Override
                public List<? extends authorityOrBuilder> getAuthsOrBuilderList() {
                    RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> repeatedFieldBuilderV3 = this.authsBuilder_;
                    if (repeatedFieldBuilderV3 != null) {
                        return repeatedFieldBuilderV3.getMessageOrBuilderList();
                    }
                    return Collections.unmodifiableList(this.auths_);
                }

                public authority.Builder addAuthsBuilder() {
                    return getAuthsFieldBuilder().addBuilder(authority.getDefaultInstance());
                }

                public authority.Builder addAuthsBuilder(int i) {
                    return getAuthsFieldBuilder().addBuilder(i, authority.getDefaultInstance());
                }

                public List<authority.Builder> getAuthsBuilderList() {
                    return getAuthsFieldBuilder().getBuilderList();
                }

                private RepeatedFieldBuilderV3<authority, authority.Builder, authorityOrBuilder> getAuthsFieldBuilder() {
                    if (this.authsBuilder_ == null) {
                        this.authsBuilder_ = new RepeatedFieldBuilderV3<>(this.auths_, (this.bitField0_ & 16) == 16, getParentForChildren(), isClean());
                        this.auths_ = null;
                    }
                    return this.authsBuilder_;
                }

                public Builder setData(ByteString byteString) {
                    byteString.getClass();
                    this.data_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearData() {
                    this.data_ = raw.getDefaultInstance().getData();
                    onChanged();
                    return this;
                }

                private void ensureContractIsMutable() {
                    if ((this.bitField0_ & 64) != 64) {
                        this.contract_ = new ArrayList(this.contract_);
                        this.bitField0_ |= 64;
                    }
                }

                @Override
                public List<Contract> getContractList() {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return Collections.unmodifiableList(this.contract_);
                    }
                    return repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public int getContractCount() {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.contract_.size();
                    }
                    return repeatedFieldBuilderV3.getCount();
                }

                @Override
                public Contract getContract(int i) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.contract_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessage(i);
                }

                public Builder setContract(int i, Contract contract) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        contract.getClass();
                        ensureContractIsMutable();
                        this.contract_.set(i, contract);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, contract);
                    }
                    return this;
                }

                public Builder setContract(int i, Contract.Builder builder) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureContractIsMutable();
                        this.contract_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addContract(Contract contract) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        contract.getClass();
                        ensureContractIsMutable();
                        this.contract_.add(contract);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(contract);
                    }
                    return this;
                }

                public Builder addContract(int i, Contract contract) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        contract.getClass();
                        ensureContractIsMutable();
                        this.contract_.add(i, contract);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, contract);
                    }
                    return this;
                }

                public Builder addContract(Contract.Builder builder) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureContractIsMutable();
                        this.contract_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addContract(int i, Contract.Builder builder) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureContractIsMutable();
                        this.contract_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addAllContract(Iterable<? extends Contract> iterable) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureContractIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.contract_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder clearContract() {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.contract_ = Collections.emptyList();
                        this.bitField0_ &= -65;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder removeContract(int i) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureContractIsMutable();
                        this.contract_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Contract.Builder getContractBuilder(int i) {
                    return getContractFieldBuilder().getBuilder(i);
                }

                @Override
                public ContractOrBuilder getContractOrBuilder(int i) {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        return this.contract_.get(i);
                    }
                    return repeatedFieldBuilderV3.getMessageOrBuilder(i);
                }

                @Override
                public List<? extends ContractOrBuilder> getContractOrBuilderList() {
                    RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> repeatedFieldBuilderV3 = this.contractBuilder_;
                    if (repeatedFieldBuilderV3 != null) {
                        return repeatedFieldBuilderV3.getMessageOrBuilderList();
                    }
                    return Collections.unmodifiableList(this.contract_);
                }

                public Contract.Builder addContractBuilder() {
                    return getContractFieldBuilder().addBuilder(Contract.getDefaultInstance());
                }

                public Contract.Builder addContractBuilder(int i) {
                    return getContractFieldBuilder().addBuilder(i, Contract.getDefaultInstance());
                }

                public List<Contract.Builder> getContractBuilderList() {
                    return getContractFieldBuilder().getBuilderList();
                }

                private RepeatedFieldBuilderV3<Contract, Contract.Builder, ContractOrBuilder> getContractFieldBuilder() {
                    if (this.contractBuilder_ == null) {
                        this.contractBuilder_ = new RepeatedFieldBuilderV3<>(this.contract_, (this.bitField0_ & 64) == 64, getParentForChildren(), isClean());
                        this.contract_ = null;
                    }
                    return this.contractBuilder_;
                }

                public Builder setScripts(ByteString byteString) {
                    byteString.getClass();
                    this.scripts_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearScripts() {
                    this.scripts_ = raw.getDefaultInstance().getScripts();
                    onChanged();
                    return this;
                }

                public Builder setTimestamp(long j) {
                    this.timestamp_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearTimestamp() {
                    this.timestamp_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setFeeLimit(long j) {
                    this.feeLimit_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearFeeLimit() {
                    this.feeLimit_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public raw getRawData() {
            raw rawVar = this.rawData_;
            return rawVar == null ? raw.getDefaultInstance() : rawVar;
        }

        @Override
        public rawOrBuilder getRawDataOrBuilder() {
            return getRawData();
        }

        @Override
        public int getSignatureCount() {
            return this.signature_.size();
        }

        @Override
        public ByteString getSignature(int i) {
            return this.signature_.get(i);
        }

        @Override
        public int getRetCount() {
            return this.ret_.size();
        }

        @Override
        public Result getRet(int i) {
            return this.ret_.get(i);
        }

        @Override
        public ResultOrBuilder getRetOrBuilder(int i) {
            return this.ret_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.rawData_ != null) {
                codedOutputStream.writeMessage(1, getRawData());
            }
            for (int i = 0; i < this.signature_.size(); i++) {
                codedOutputStream.writeBytes(2, this.signature_.get(i));
            }
            for (int i2 = 0; i2 < this.ret_.size(); i2++) {
                codedOutputStream.writeMessage(5, this.ret_.get(i2));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.rawData_ != null ? CodedOutputStream.computeMessageSize(1, getRawData()) : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.signature_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.signature_.get(i3));
            }
            int size = computeMessageSize + i2 + getSignatureList().size();
            for (int i4 = 0; i4 < this.ret_.size(); i4++) {
                size += CodedOutputStream.computeMessageSize(5, this.ret_.get(i4));
            }
            int serializedSize = size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Transaction)) {
                return super.equals(obj);
            }
            Transaction transaction = (Transaction) obj;
            boolean z = hasRawData() == transaction.hasRawData();
            if (!hasRawData() ? z : !(!z || !getRawData().equals(transaction.getRawData()))) {
                if (getSignatureList().equals(transaction.getSignatureList()) && getRetList().equals(transaction.getRetList()) && this.unknownFields.equals(transaction.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasRawData()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getRawData().hashCode();
            }
            if (getSignatureCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getSignatureList().hashCode();
            }
            if (getRetCount() > 0) {
                hashCode = (((hashCode * 37) + 5) * 53) + getRetList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Transaction parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Transaction parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Transaction parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Transaction parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Transaction parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Transaction parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Transaction parseFrom(InputStream inputStream) throws IOException {
            return (Transaction) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Transaction parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transaction) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Transaction parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Transaction) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Transaction parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transaction) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Transaction parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Transaction) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Transaction parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transaction) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Transaction transaction) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(transaction);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TransactionOrBuilder {
            private int bitField0_;
            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> rawDataBuilder_;
            private raw rawData_;
            private RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> retBuilder_;
            private List<Result> ret_;
            private List<ByteString> signature_;

            @Override
            public boolean hasRawData() {
                return (this.rawDataBuilder_ == null && this.rawData_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Transaction_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Transaction_fieldAccessorTable.ensureFieldAccessorsInitialized(Transaction.class, Builder.class);
            }

            private Builder() {
                this.rawData_ = null;
                this.signature_ = Collections.emptyList();
                this.ret_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.rawData_ = null;
                this.signature_ = Collections.emptyList();
                this.ret_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Transaction.alwaysUseFieldBuilders) {
                    getRetFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                this.signature_ = Collections.emptyList();
                this.bitField0_ &= -3;
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ret_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Transaction_descriptor;
            }

            @Override
            public Transaction getDefaultInstanceForType() {
                return Transaction.getDefaultInstance();
            }

            @Override
            public Transaction build() {
                Transaction buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Transaction buildPartial() {
                Transaction transaction = new Transaction(this);
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    transaction.rawData_ = this.rawData_;
                } else {
                    transaction.rawData_ = singleFieldBuilderV3.build();
                }
                if ((this.bitField0_ & 2) == 2) {
                    this.signature_ = Collections.unmodifiableList(this.signature_);
                    this.bitField0_ &= -3;
                }
                transaction.signature_ = this.signature_;
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.ret_ = Collections.unmodifiableList(this.ret_);
                        this.bitField0_ &= -5;
                    }
                    transaction.ret_ = this.ret_;
                } else {
                    transaction.ret_ = repeatedFieldBuilderV3.build();
                }
                transaction.bitField0_ = 0;
                onBuilt();
                return transaction;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Transaction) {
                    return mergeFrom((Transaction) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Transaction transaction) {
                if (transaction == Transaction.getDefaultInstance()) {
                    return this;
                }
                if (transaction.hasRawData()) {
                    mergeRawData(transaction.getRawData());
                }
                if (!transaction.signature_.isEmpty()) {
                    if (this.signature_.isEmpty()) {
                        this.signature_ = transaction.signature_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureSignatureIsMutable();
                        this.signature_.addAll(transaction.signature_);
                    }
                    onChanged();
                }
                if (this.retBuilder_ == null) {
                    if (!transaction.ret_.isEmpty()) {
                        if (this.ret_.isEmpty()) {
                            this.ret_ = transaction.ret_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureRetIsMutable();
                            this.ret_.addAll(transaction.ret_);
                        }
                        onChanged();
                    }
                } else if (!transaction.ret_.isEmpty()) {
                    if (!this.retBuilder_.isEmpty()) {
                        this.retBuilder_.addAllMessages(transaction.ret_);
                    } else {
                        this.retBuilder_.dispose();
                        this.retBuilder_ = null;
                        this.ret_ = transaction.ret_;
                        this.bitField0_ &= -5;
                        this.retBuilder_ = Transaction.alwaysUseFieldBuilders ? getRetFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(transaction.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Transaction.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Transaction.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Transaction$Builder");
            }

            @Override
            public raw getRawData() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar = this.rawData_;
                    return rawVar == null ? raw.getDefaultInstance() : rawVar;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    rawVar.getClass();
                    this.rawData_ = rawVar;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(rawVar);
                }
                return this;
            }

            public Builder setRawData(raw.Builder builder) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.rawData_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar2 = this.rawData_;
                    if (rawVar2 != null) {
                        this.rawData_ = raw.newBuilder(rawVar2).mergeFrom(rawVar).buildPartial();
                    } else {
                        this.rawData_ = rawVar;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(rawVar);
                }
                return this;
            }

            public Builder clearRawData() {
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                    onChanged();
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                return this;
            }

            public raw.Builder getRawDataBuilder() {
                onChanged();
                return getRawDataFieldBuilder().getBuilder();
            }

            @Override
            public rawOrBuilder getRawDataOrBuilder() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                raw rawVar = this.rawData_;
                return rawVar == null ? raw.getDefaultInstance() : rawVar;
            }

            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> getRawDataFieldBuilder() {
                if (this.rawDataBuilder_ == null) {
                    this.rawDataBuilder_ = new SingleFieldBuilderV3<>(getRawData(), getParentForChildren(), isClean());
                    this.rawData_ = null;
                }
                return this.rawDataBuilder_;
            }

            private void ensureSignatureIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.signature_ = new ArrayList(this.signature_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<ByteString> getSignatureList() {
                return Collections.unmodifiableList(this.signature_);
            }

            @Override
            public int getSignatureCount() {
                return this.signature_.size();
            }

            @Override
            public ByteString getSignature(int i) {
                return this.signature_.get(i);
            }

            public Builder setSignature(int i, ByteString byteString) {
                byteString.getClass();
                ensureSignatureIsMutable();
                this.signature_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addSignature(ByteString byteString) {
                byteString.getClass();
                ensureSignatureIsMutable();
                this.signature_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllSignature(Iterable<? extends ByteString> iterable) {
                ensureSignatureIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.signature_);
                onChanged();
                return this;
            }

            public Builder clearSignature() {
                this.signature_ = Collections.emptyList();
                this.bitField0_ &= -3;
                onChanged();
                return this;
            }

            private void ensureRetIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.ret_ = new ArrayList(this.ret_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<Result> getRetList() {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.ret_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getRetCount() {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ret_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Result getRet(int i) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ret_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setRet(int i, Result result) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    result.getClass();
                    ensureRetIsMutable();
                    this.ret_.set(i, result);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, result);
                }
                return this;
            }

            public Builder setRet(int i, Result.Builder builder) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureRetIsMutable();
                    this.ret_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addRet(Result result) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    result.getClass();
                    ensureRetIsMutable();
                    this.ret_.add(result);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(result);
                }
                return this;
            }

            public Builder addRet(int i, Result result) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    result.getClass();
                    ensureRetIsMutable();
                    this.ret_.add(i, result);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, result);
                }
                return this;
            }

            public Builder addRet(Result.Builder builder) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureRetIsMutable();
                    this.ret_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addRet(int i, Result.Builder builder) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureRetIsMutable();
                    this.ret_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllRet(Iterable<? extends Result> iterable) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureRetIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.ret_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearRet() {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ret_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeRet(int i) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureRetIsMutable();
                    this.ret_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Result.Builder getRetBuilder(int i) {
                return getRetFieldBuilder().getBuilder(i);
            }

            @Override
            public ResultOrBuilder getRetOrBuilder(int i) {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ret_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends ResultOrBuilder> getRetOrBuilderList() {
                RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> repeatedFieldBuilderV3 = this.retBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.ret_);
            }

            public Result.Builder addRetBuilder() {
                return getRetFieldBuilder().addBuilder(Result.getDefaultInstance());
            }

            public Result.Builder addRetBuilder(int i) {
                return getRetFieldBuilder().addBuilder(i, Result.getDefaultInstance());
            }

            public List<Result.Builder> getRetBuilderList() {
                return getRetFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Result, Result.Builder, ResultOrBuilder> getRetFieldBuilder() {
                if (this.retBuilder_ == null) {
                    this.retBuilder_ = new RepeatedFieldBuilderV3<>(this.ret_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.ret_ = null;
                }
                return this.retBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class TransactionInfo extends GeneratedMessageV3 implements TransactionInfoOrBuilder {
        public static final int ASSETISSUEID_FIELD_NUMBER = 14;
        public static final int BLOCKNUMBER_FIELD_NUMBER = 3;
        public static final int BLOCKTIMESTAMP_FIELD_NUMBER = 4;
        public static final int CANCEL_UNFREEZEV2_AMOUNT_FIELD_NUMBER = 29;
        public static final int CONTRACTRESULT_FIELD_NUMBER = 5;
        public static final int CONTRACT_ADDRESS_FIELD_NUMBER = 6;
        public static final int EXCHANGE_ID_FIELD_NUMBER = 21;
        public static final int EXCHANGE_INJECT_ANOTHER_AMOUNT_FIELD_NUMBER = 19;
        public static final int EXCHANGE_RECEIVED_AMOUNT_FIELD_NUMBER = 18;
        public static final int EXCHANGE_WITHDRAW_ANOTHER_AMOUNT_FIELD_NUMBER = 20;
        public static final int FEE_FIELD_NUMBER = 2;
        public static final int ID_FIELD_NUMBER = 1;
        public static final int INTERNAL_TRANSACTIONS_FIELD_NUMBER = 17;
        public static final int LOG_FIELD_NUMBER = 8;
        public static final int ORDERDETAILS_FIELD_NUMBER = 26;
        public static final int ORDERID_FIELD_NUMBER = 25;
        public static final int PACKINGFEE_FIELD_NUMBER = 27;
        public static final int RECEIPT_FIELD_NUMBER = 7;
        public static final int RESMESSAGE_FIELD_NUMBER = 10;
        public static final int RESULT_FIELD_NUMBER = 9;
        public static final int SHIELDED_TRANSACTION_FEE_FIELD_NUMBER = 22;
        public static final int UNFREEZE_AMOUNT_FIELD_NUMBER = 16;
        public static final int WITHDRAW_AMOUNT_FIELD_NUMBER = 15;
        public static final int WITHDRAW_EXPIRE_AMOUNT_FIELD_NUMBER = 28;
        private static final long serialVersionUID = 0;
        private volatile Object assetIssueID_;
        private int bitField0_;
        private long blockNumber_;
        private long blockTimeStamp_;
        private MapField<String, Long> cancelUnfreezeV2Amount_;
        private ByteString contractAddress_;
        private List<ByteString> contractResult_;
        private long exchangeId_;
        private long exchangeInjectAnotherAmount_;
        private long exchangeReceivedAmount_;
        private long exchangeWithdrawAnotherAmount_;
        private long fee_;
        private ByteString id_;
        private List<InternalTransaction> internalTransactions_;
        private List<Log> log_;
        private byte memoizedIsInitialized;
        private List<MarketOrderDetail> orderDetails_;
        private ByteString orderId_;
        private long packingFee_;
        private ResourceReceipt receipt_;
        private ByteString resMessage_;
        private int result_;
        private long shieldedTransactionFee_;
        private long unfreezeAmount_;
        private long withdrawAmount_;
        private long withdrawExpireAmount_;
        private static final TransactionInfo DEFAULT_INSTANCE = new TransactionInfo();
        private static final Parser<TransactionInfo> PARSER = new AbstractParser<TransactionInfo>() {
            @Override
            public TransactionInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TransactionInfo(codedInputStream, extensionRegistryLite);
            }
        };

        public interface LogOrBuilder extends MessageOrBuilder {
            ByteString getAddress();

            ByteString getData();

            ByteString getTopics(int i);

            int getTopicsCount();

            List<ByteString> getTopicsList();
        }

        public static TransactionInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<TransactionInfo> parser() {
            return PARSER;
        }

        @Override
        public long getBlockNumber() {
            return this.blockNumber_;
        }

        @Override
        public long getBlockTimeStamp() {
            return this.blockTimeStamp_;
        }

        @Override
        public ByteString getContractAddress() {
            return this.contractAddress_;
        }

        @Override
        public List<ByteString> getContractResultList() {
            return this.contractResult_;
        }

        @Override
        public TransactionInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getExchangeId() {
            return this.exchangeId_;
        }

        @Override
        public long getExchangeInjectAnotherAmount() {
            return this.exchangeInjectAnotherAmount_;
        }

        @Override
        public long getExchangeReceivedAmount() {
            return this.exchangeReceivedAmount_;
        }

        @Override
        public long getExchangeWithdrawAnotherAmount() {
            return this.exchangeWithdrawAnotherAmount_;
        }

        @Override
        public long getFee() {
            return this.fee_;
        }

        @Override
        public ByteString getId() {
            return this.id_;
        }

        @Override
        public List<InternalTransaction> getInternalTransactionsList() {
            return this.internalTransactions_;
        }

        @Override
        public List<? extends InternalTransactionOrBuilder> getInternalTransactionsOrBuilderList() {
            return this.internalTransactions_;
        }

        @Override
        public List<Log> getLogList() {
            return this.log_;
        }

        @Override
        public List<? extends LogOrBuilder> getLogOrBuilderList() {
            return this.log_;
        }

        @Override
        public List<MarketOrderDetail> getOrderDetailsList() {
            return this.orderDetails_;
        }

        @Override
        public List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList() {
            return this.orderDetails_;
        }

        @Override
        public ByteString getOrderId() {
            return this.orderId_;
        }

        @Override
        public long getPackingFee() {
            return this.packingFee_;
        }

        @Override
        public Parser<TransactionInfo> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getResMessage() {
            return this.resMessage_;
        }

        @Override
        public int getResultValue() {
            return this.result_;
        }

        @Override
        public long getShieldedTransactionFee() {
            return this.shieldedTransactionFee_;
        }

        @Override
        public long getUnfreezeAmount() {
            return this.unfreezeAmount_;
        }

        @Override
        public long getWithdrawAmount() {
            return this.withdrawAmount_;
        }

        @Override
        public long getWithdrawExpireAmount() {
            return this.withdrawExpireAmount_;
        }

        @Override
        public boolean hasReceipt() {
            return this.receipt_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private TransactionInfo(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private TransactionInfo() {
            this.memoizedIsInitialized = (byte) -1;
            this.id_ = ByteString.EMPTY;
            this.fee_ = 0L;
            this.blockNumber_ = 0L;
            this.blockTimeStamp_ = 0L;
            this.contractResult_ = Collections.emptyList();
            this.contractAddress_ = ByteString.EMPTY;
            this.log_ = Collections.emptyList();
            this.result_ = 0;
            this.resMessage_ = ByteString.EMPTY;
            this.assetIssueID_ = "";
            this.withdrawAmount_ = 0L;
            this.unfreezeAmount_ = 0L;
            this.internalTransactions_ = Collections.emptyList();
            this.exchangeReceivedAmount_ = 0L;
            this.exchangeInjectAnotherAmount_ = 0L;
            this.exchangeWithdrawAnotherAmount_ = 0L;
            this.exchangeId_ = 0L;
            this.shieldedTransactionFee_ = 0L;
            this.orderId_ = ByteString.EMPTY;
            this.orderDetails_ = Collections.emptyList();
            this.packingFee_ = 0L;
            this.withdrawExpireAmount_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TransactionInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            int i = 0;
            while (true) {
                ?? r3 = 1048576;
                if (z) {
                    return;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        switch (readTag) {
                            case 0:
                                break;
                            case 10:
                                this.id_ = codedInputStream.readBytes();
                                continue;
                            case 16:
                                this.fee_ = codedInputStream.readInt64();
                                continue;
                            case 24:
                                this.blockNumber_ = codedInputStream.readInt64();
                                continue;
                            case 32:
                                this.blockTimeStamp_ = codedInputStream.readInt64();
                                continue;
                            case 42:
                                if ((i & 16) != 16) {
                                    this.contractResult_ = new ArrayList();
                                    i |= 16;
                                }
                                this.contractResult_.add(codedInputStream.readBytes());
                                continue;
                            case 50:
                                this.contractAddress_ = codedInputStream.readBytes();
                                continue;
                            case 58:
                                ResourceReceipt resourceReceipt = this.receipt_;
                                ResourceReceipt.Builder builder = resourceReceipt != null ? resourceReceipt.toBuilder() : null;
                                ResourceReceipt resourceReceipt2 = (ResourceReceipt) codedInputStream.readMessage(ResourceReceipt.parser(), extensionRegistryLite);
                                this.receipt_ = resourceReceipt2;
                                if (builder != null) {
                                    builder.mergeFrom(resourceReceipt2);
                                    this.receipt_ = builder.buildPartial();
                                } else {
                                    continue;
                                }
                            case 66:
                                if ((i & 128) != 128) {
                                    this.log_ = new ArrayList();
                                    i |= 128;
                                }
                                this.log_.add((Log) codedInputStream.readMessage(Log.parser(), extensionRegistryLite));
                                continue;
                            case 72:
                                this.result_ = codedInputStream.readEnum();
                                continue;
                            case 82:
                                this.resMessage_ = codedInputStream.readBytes();
                                continue;
                            case 114:
                                this.assetIssueID_ = codedInputStream.readStringRequireUtf8();
                                continue;
                            case 120:
                                this.withdrawAmount_ = codedInputStream.readInt64();
                                continue;
                            case 128:
                                this.unfreezeAmount_ = codedInputStream.readInt64();
                                continue;
                            case 138:
                                if ((i & 8192) != 8192) {
                                    this.internalTransactions_ = new ArrayList();
                                    i |= 8192;
                                }
                                this.internalTransactions_.add((InternalTransaction) codedInputStream.readMessage(InternalTransaction.parser(), extensionRegistryLite));
                                continue;
                            case 144:
                                this.exchangeReceivedAmount_ = codedInputStream.readInt64();
                                continue;
                            case 152:
                                this.exchangeInjectAnotherAmount_ = codedInputStream.readInt64();
                                continue;
                            case 160:
                                this.exchangeWithdrawAnotherAmount_ = codedInputStream.readInt64();
                                continue;
                            case 168:
                                this.exchangeId_ = codedInputStream.readInt64();
                                continue;
                            case Opcodes.ARETURN:
                                this.shieldedTransactionFee_ = codedInputStream.readInt64();
                                continue;
                            case 202:
                                this.orderId_ = codedInputStream.readBytes();
                                continue;
                            case 210:
                                if ((i & 1048576) != 1048576) {
                                    this.orderDetails_ = new ArrayList();
                                    i |= 1048576;
                                }
                                this.orderDetails_.add((MarketOrderDetail) codedInputStream.readMessage(MarketOrderDetail.parser(), extensionRegistryLite));
                                continue;
                            case JfifUtil.MARKER_SOI:
                                this.packingFee_ = codedInputStream.readInt64();
                                continue;
                            case 224:
                                this.withdrawExpireAmount_ = codedInputStream.readInt64();
                                continue;
                            case 234:
                                if ((i & 8388608) != 8388608) {
                                    this.cancelUnfreezeV2Amount_ = MapField.newMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry);
                                    i |= 8388608;
                                }
                                MapEntry mapEntry = (MapEntry) codedInputStream.readMessage(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.cancelUnfreezeV2Amount_.getMutableMap().put((String) mapEntry.getKey(), (Long) mapEntry.getValue());
                                continue;
                            default:
                                r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                if (r3 == 0) {
                                    break;
                                } else {
                                    continue;
                                }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if ((i & 16) == 16) {
                        this.contractResult_ = Collections.unmodifiableList(this.contractResult_);
                    }
                    if ((i & 128) == 128) {
                        this.log_ = Collections.unmodifiableList(this.log_);
                    }
                    if ((i & 8192) == 8192) {
                        this.internalTransactions_ = Collections.unmodifiableList(this.internalTransactions_);
                    }
                    if ((i & r3) == r3) {
                        this.orderDetails_ = Collections.unmodifiableList(this.orderDetails_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_TransactionInfo_descriptor;
        }

        @Override
        protected MapField internalGetMapField(int i) {
            if (i == 29) {
                return internalGetCancelUnfreezeV2Amount();
            }
            throw new RuntimeException("Invalid map field number: " + i);
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_TransactionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TransactionInfo.class, Builder.class);
        }

        public enum code implements ProtocolMessageEnum {
            SUCESS(0),
            FAILED(1),
            UNRECOGNIZED(-1);
            
            public static final int FAILED_VALUE = 1;
            public static final int SUCESS_VALUE = 0;
            private final int value;
            private static final Internal.EnumLiteMap<code> internalValueMap = new Internal.EnumLiteMap<code>() {
                @Override
                public code findValueByNumber(int i) {
                    return code.forNumber(i);
                }
            };
            private static final code[] VALUES = values();

            public static code forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        return null;
                    }
                    return FAILED;
                }
                return SUCESS;
            }

            public static Internal.EnumLiteMap<code> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static code valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return TransactionInfo.getDescriptor().getEnumTypes().get(0);
            }

            public static code valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            code(int i) {
                this.value = i;
            }
        }

        public static final class Log extends GeneratedMessageV3 implements LogOrBuilder {
            public static final int ADDRESS_FIELD_NUMBER = 1;
            public static final int DATA_FIELD_NUMBER = 3;
            private static final Log DEFAULT_INSTANCE = new Log();
            private static final Parser<Log> PARSER = new AbstractParser<Log>() {
                @Override
                public Log parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new Log(codedInputStream, extensionRegistryLite);
                }
            };
            public static final int TOPICS_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private ByteString address_;
            private int bitField0_;
            private ByteString data_;
            private byte memoizedIsInitialized;
            private List<ByteString> topics_;

            public static Log getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<Log> parser() {
                return PARSER;
            }

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public ByteString getData() {
                return this.data_;
            }

            @Override
            public Log getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<Log> getParserForType() {
                return PARSER;
            }

            @Override
            public List<ByteString> getTopicsList() {
                return this.topics_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private Log(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private Log() {
                this.memoizedIsInitialized = (byte) -1;
                this.address_ = ByteString.EMPTY;
                this.topics_ = Collections.emptyList();
                this.data_ = ByteString.EMPTY;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private Log(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    if (z) {
                        break;
                    }
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.address_ = codedInputStream.readBytes();
                                    } else if (readTag == 18) {
                                        if (!(z2 & true)) {
                                            this.topics_ = new ArrayList();
                                            z2 |= true;
                                        }
                                        this.topics_.add(codedInputStream.readBytes());
                                    } else if (readTag != 26) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.data_ = codedInputStream.readBytes();
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            }
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        if (z2 & true) {
                            this.topics_ = Collections.unmodifiableList(this.topics_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TransactionInfo_Log_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TransactionInfo_Log_fieldAccessorTable.ensureFieldAccessorsInitialized(Log.class, Builder.class);
            }

            @Override
            public int getTopicsCount() {
                return this.topics_.size();
            }

            @Override
            public ByteString getTopics(int i) {
                return this.topics_.get(i);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.address_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.address_);
                }
                for (int i = 0; i < this.topics_.size(); i++) {
                    codedOutputStream.writeBytes(2, this.topics_.get(i));
                }
                if (!this.data_.isEmpty()) {
                    codedOutputStream.writeBytes(3, this.data_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.address_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.address_) : 0;
                int i2 = 0;
                for (int i3 = 0; i3 < this.topics_.size(); i3++) {
                    i2 += CodedOutputStream.computeBytesSizeNoTag(this.topics_.get(i3));
                }
                int size = computeBytesSize + i2 + getTopicsList().size();
                if (!this.data_.isEmpty()) {
                    size += CodedOutputStream.computeBytesSize(3, this.data_);
                }
                int serializedSize = size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof Log)) {
                    return super.equals(obj);
                }
                Log log = (Log) obj;
                return getAddress().equals(log.getAddress()) && getTopicsList().equals(log.getTopicsList()) && getData().equals(log.getData()) && this.unknownFields.equals(log.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAddress().hashCode();
                if (getTopicsCount() > 0) {
                    hashCode = (((hashCode * 37) + 2) * 53) + getTopicsList().hashCode();
                }
                int hashCode2 = (((((hashCode * 37) + 3) * 53) + getData().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            public static Log parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static Log parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static Log parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static Log parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static Log parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static Log parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static Log parseFrom(InputStream inputStream) throws IOException {
                return (Log) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static Log parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Log) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Log parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (Log) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static Log parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Log) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static Log parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (Log) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static Log parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (Log) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(Log log) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(log);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements LogOrBuilder {
                private ByteString address_;
                private int bitField0_;
                private ByteString data_;
                private List<ByteString> topics_;

                @Override
                public ByteString getAddress() {
                    return this.address_;
                }

                @Override
                public ByteString getData() {
                    return this.data_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_TransactionInfo_Log_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_TransactionInfo_Log_fieldAccessorTable.ensureFieldAccessorsInitialized(Log.class, Builder.class);
                }

                private Builder() {
                    this.address_ = ByteString.EMPTY;
                    this.topics_ = Collections.emptyList();
                    this.data_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.address_ = ByteString.EMPTY;
                    this.topics_ = Collections.emptyList();
                    this.data_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = Log.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.address_ = ByteString.EMPTY;
                    this.topics_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    this.data_ = ByteString.EMPTY;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_TransactionInfo_Log_descriptor;
                }

                @Override
                public Log getDefaultInstanceForType() {
                    return Log.getDefaultInstance();
                }

                @Override
                public Log build() {
                    Log buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public Log buildPartial() {
                    Log log = new Log(this);
                    log.address_ = this.address_;
                    if ((this.bitField0_ & 2) == 2) {
                        this.topics_ = Collections.unmodifiableList(this.topics_);
                        this.bitField0_ &= -3;
                    }
                    log.topics_ = this.topics_;
                    log.data_ = this.data_;
                    log.bitField0_ = 0;
                    onBuilt();
                    return log;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof Log) {
                        return mergeFrom((Log) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(Log log) {
                    if (log == Log.getDefaultInstance()) {
                        return this;
                    }
                    if (log.getAddress() != ByteString.EMPTY) {
                        setAddress(log.getAddress());
                    }
                    if (!log.topics_.isEmpty()) {
                        if (this.topics_.isEmpty()) {
                            this.topics_ = log.topics_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureTopicsIsMutable();
                            this.topics_.addAll(log.topics_);
                        }
                        onChanged();
                    }
                    if (log.getData() != ByteString.EMPTY) {
                        setData(log.getData());
                    }
                    mergeUnknownFields(log.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.TransactionInfo.Log.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TransactionInfo.Log.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TransactionInfo$Log$Builder");
                }

                public Builder setAddress(ByteString byteString) {
                    byteString.getClass();
                    this.address_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearAddress() {
                    this.address_ = Log.getDefaultInstance().getAddress();
                    onChanged();
                    return this;
                }

                private void ensureTopicsIsMutable() {
                    if ((this.bitField0_ & 2) != 2) {
                        this.topics_ = new ArrayList(this.topics_);
                        this.bitField0_ |= 2;
                    }
                }

                @Override
                public List<ByteString> getTopicsList() {
                    return Collections.unmodifiableList(this.topics_);
                }

                @Override
                public int getTopicsCount() {
                    return this.topics_.size();
                }

                @Override
                public ByteString getTopics(int i) {
                    return this.topics_.get(i);
                }

                public Builder setTopics(int i, ByteString byteString) {
                    byteString.getClass();
                    ensureTopicsIsMutable();
                    this.topics_.set(i, byteString);
                    onChanged();
                    return this;
                }

                public Builder addTopics(ByteString byteString) {
                    byteString.getClass();
                    ensureTopicsIsMutable();
                    this.topics_.add(byteString);
                    onChanged();
                    return this;
                }

                public Builder addAllTopics(Iterable<? extends ByteString> iterable) {
                    ensureTopicsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.topics_);
                    onChanged();
                    return this;
                }

                public Builder clearTopics() {
                    this.topics_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                    return this;
                }

                public Builder setData(ByteString byteString) {
                    byteString.getClass();
                    this.data_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearData() {
                    this.data_ = Log.getDefaultInstance().getData();
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public int getContractResultCount() {
            return this.contractResult_.size();
        }

        @Override
        public ByteString getContractResult(int i) {
            return this.contractResult_.get(i);
        }

        @Override
        public ResourceReceipt getReceipt() {
            ResourceReceipt resourceReceipt = this.receipt_;
            return resourceReceipt == null ? ResourceReceipt.getDefaultInstance() : resourceReceipt;
        }

        @Override
        public ResourceReceiptOrBuilder getReceiptOrBuilder() {
            return getReceipt();
        }

        @Override
        public int getLogCount() {
            return this.log_.size();
        }

        @Override
        public Log getLog(int i) {
            return this.log_.get(i);
        }

        @Override
        public LogOrBuilder getLogOrBuilder(int i) {
            return this.log_.get(i);
        }

        @Override
        public code getResult() {
            code valueOf = code.valueOf(this.result_);
            return valueOf == null ? code.UNRECOGNIZED : valueOf;
        }

        @Override
        public String getAssetIssueID() {
            Object obj = this.assetIssueID_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.assetIssueID_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getAssetIssueIDBytes() {
            Object obj = this.assetIssueID_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.assetIssueID_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        public int getInternalTransactionsCount() {
            return this.internalTransactions_.size();
        }

        @Override
        public InternalTransaction getInternalTransactions(int i) {
            return this.internalTransactions_.get(i);
        }

        @Override
        public InternalTransactionOrBuilder getInternalTransactionsOrBuilder(int i) {
            return this.internalTransactions_.get(i);
        }

        @Override
        public int getOrderDetailsCount() {
            return this.orderDetails_.size();
        }

        @Override
        public MarketOrderDetail getOrderDetails(int i) {
            return this.orderDetails_.get(i);
        }

        @Override
        public MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i) {
            return this.orderDetails_.get(i);
        }

        public static final class CancelUnfreezeV2AmountDefaultEntryHolder {
            static final MapEntry<String, Long> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_TransactionInfo_CancelUnfreezeV2AmountEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);

            private CancelUnfreezeV2AmountDefaultEntryHolder() {
            }
        }

        public MapField<String, Long> internalGetCancelUnfreezeV2Amount() {
            MapField<String, Long> mapField = this.cancelUnfreezeV2Amount_;
            return mapField == null ? MapField.emptyMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry) : mapField;
        }

        @Override
        public int getCancelUnfreezeV2AmountCount() {
            return internalGetCancelUnfreezeV2Amount().getMap().size();
        }

        @Override
        public boolean containsCancelUnfreezeV2Amount(String str) {
            str.getClass();
            return internalGetCancelUnfreezeV2Amount().getMap().containsKey(str);
        }

        @Override
        @Deprecated
        public Map<String, Long> getCancelUnfreezeV2Amount() {
            return getCancelUnfreezeV2AmountMap();
        }

        @Override
        public Map<String, Long> getCancelUnfreezeV2AmountMap() {
            return internalGetCancelUnfreezeV2Amount().getMap();
        }

        @Override
        public long getCancelUnfreezeV2AmountOrDefault(String str, long j) {
            str.getClass();
            Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
            return map.containsKey(str) ? map.get(str).longValue() : j;
        }

        @Override
        public long getCancelUnfreezeV2AmountOrThrow(String str) {
            str.getClass();
            Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
            if (!map.containsKey(str)) {
                throw new IllegalArgumentException();
            }
            return map.get(str).longValue();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.id_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.id_);
            }
            long j = this.fee_;
            if (j != 0) {
                codedOutputStream.writeInt64(2, j);
            }
            long j2 = this.blockNumber_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(3, j2);
            }
            long j3 = this.blockTimeStamp_;
            if (j3 != 0) {
                codedOutputStream.writeInt64(4, j3);
            }
            for (int i = 0; i < this.contractResult_.size(); i++) {
                codedOutputStream.writeBytes(5, this.contractResult_.get(i));
            }
            if (!this.contractAddress_.isEmpty()) {
                codedOutputStream.writeBytes(6, this.contractAddress_);
            }
            if (this.receipt_ != null) {
                codedOutputStream.writeMessage(7, getReceipt());
            }
            for (int i2 = 0; i2 < this.log_.size(); i2++) {
                codedOutputStream.writeMessage(8, this.log_.get(i2));
            }
            if (this.result_ != code.SUCESS.getNumber()) {
                codedOutputStream.writeEnum(9, this.result_);
            }
            if (!this.resMessage_.isEmpty()) {
                codedOutputStream.writeBytes(10, this.resMessage_);
            }
            if (!getAssetIssueIDBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 14, this.assetIssueID_);
            }
            long j4 = this.withdrawAmount_;
            if (j4 != 0) {
                codedOutputStream.writeInt64(15, j4);
            }
            long j5 = this.unfreezeAmount_;
            if (j5 != 0) {
                codedOutputStream.writeInt64(16, j5);
            }
            for (int i3 = 0; i3 < this.internalTransactions_.size(); i3++) {
                codedOutputStream.writeMessage(17, this.internalTransactions_.get(i3));
            }
            long j6 = this.exchangeReceivedAmount_;
            if (j6 != 0) {
                codedOutputStream.writeInt64(18, j6);
            }
            long j7 = this.exchangeInjectAnotherAmount_;
            if (j7 != 0) {
                codedOutputStream.writeInt64(19, j7);
            }
            long j8 = this.exchangeWithdrawAnotherAmount_;
            if (j8 != 0) {
                codedOutputStream.writeInt64(20, j8);
            }
            long j9 = this.exchangeId_;
            if (j9 != 0) {
                codedOutputStream.writeInt64(21, j9);
            }
            long j10 = this.shieldedTransactionFee_;
            if (j10 != 0) {
                codedOutputStream.writeInt64(22, j10);
            }
            if (!this.orderId_.isEmpty()) {
                codedOutputStream.writeBytes(25, this.orderId_);
            }
            for (int i4 = 0; i4 < this.orderDetails_.size(); i4++) {
                codedOutputStream.writeMessage(26, this.orderDetails_.get(i4));
            }
            long j11 = this.packingFee_;
            if (j11 != 0) {
                codedOutputStream.writeInt64(27, j11);
            }
            long j12 = this.withdrawExpireAmount_;
            if (j12 != 0) {
                codedOutputStream.writeInt64(28, j12);
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetCancelUnfreezeV2Amount(), CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry, 29);
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.id_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.id_) : 0;
            long j = this.fee_;
            if (j != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
            }
            long j2 = this.blockNumber_;
            if (j2 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(3, j2);
            }
            long j3 = this.blockTimeStamp_;
            if (j3 != 0) {
                computeBytesSize += CodedOutputStream.computeInt64Size(4, j3);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.contractResult_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.contractResult_.get(i3));
            }
            int size = computeBytesSize + i2 + getContractResultList().size();
            if (!this.contractAddress_.isEmpty()) {
                size += CodedOutputStream.computeBytesSize(6, this.contractAddress_);
            }
            if (this.receipt_ != null) {
                size += CodedOutputStream.computeMessageSize(7, getReceipt());
            }
            for (int i4 = 0; i4 < this.log_.size(); i4++) {
                size += CodedOutputStream.computeMessageSize(8, this.log_.get(i4));
            }
            if (this.result_ != code.SUCESS.getNumber()) {
                size += CodedOutputStream.computeEnumSize(9, this.result_);
            }
            if (!this.resMessage_.isEmpty()) {
                size += CodedOutputStream.computeBytesSize(10, this.resMessage_);
            }
            if (!getAssetIssueIDBytes().isEmpty()) {
                size += GeneratedMessageV3.computeStringSize(14, this.assetIssueID_);
            }
            long j4 = this.withdrawAmount_;
            if (j4 != 0) {
                size += CodedOutputStream.computeInt64Size(15, j4);
            }
            long j5 = this.unfreezeAmount_;
            if (j5 != 0) {
                size += CodedOutputStream.computeInt64Size(16, j5);
            }
            for (int i5 = 0; i5 < this.internalTransactions_.size(); i5++) {
                size += CodedOutputStream.computeMessageSize(17, this.internalTransactions_.get(i5));
            }
            long j6 = this.exchangeReceivedAmount_;
            if (j6 != 0) {
                size += CodedOutputStream.computeInt64Size(18, j6);
            }
            long j7 = this.exchangeInjectAnotherAmount_;
            if (j7 != 0) {
                size += CodedOutputStream.computeInt64Size(19, j7);
            }
            long j8 = this.exchangeWithdrawAnotherAmount_;
            if (j8 != 0) {
                size += CodedOutputStream.computeInt64Size(20, j8);
            }
            long j9 = this.exchangeId_;
            if (j9 != 0) {
                size += CodedOutputStream.computeInt64Size(21, j9);
            }
            long j10 = this.shieldedTransactionFee_;
            if (j10 != 0) {
                size += CodedOutputStream.computeInt64Size(22, j10);
            }
            if (!this.orderId_.isEmpty()) {
                size += CodedOutputStream.computeBytesSize(25, this.orderId_);
            }
            for (int i6 = 0; i6 < this.orderDetails_.size(); i6++) {
                size += CodedOutputStream.computeMessageSize(26, this.orderDetails_.get(i6));
            }
            long j11 = this.packingFee_;
            if (j11 != 0) {
                size += CodedOutputStream.computeInt64Size(27, j11);
            }
            long j12 = this.withdrawExpireAmount_;
            if (j12 != 0) {
                size += CodedOutputStream.computeInt64Size(28, j12);
            }
            for (Map.Entry<String, Long> entry : internalGetCancelUnfreezeV2Amount().getMap().entrySet()) {
                size += CodedOutputStream.computeMessageSize(29, CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build());
            }
            int serializedSize = size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof TransactionInfo)) {
                return super.equals(obj);
            }
            TransactionInfo transactionInfo = (TransactionInfo) obj;
            boolean z = getId().equals(transactionInfo.getId()) && getFee() == transactionInfo.getFee() && getBlockNumber() == transactionInfo.getBlockNumber() && getBlockTimeStamp() == transactionInfo.getBlockTimeStamp() && getContractResultList().equals(transactionInfo.getContractResultList()) && getContractAddress().equals(transactionInfo.getContractAddress()) && hasReceipt() == transactionInfo.hasReceipt();
            if (!hasReceipt() ? z : !(!z || !getReceipt().equals(transactionInfo.getReceipt()))) {
                if (getLogList().equals(transactionInfo.getLogList()) && this.result_ == transactionInfo.result_ && getResMessage().equals(transactionInfo.getResMessage()) && getAssetIssueID().equals(transactionInfo.getAssetIssueID()) && getWithdrawAmount() == transactionInfo.getWithdrawAmount() && getUnfreezeAmount() == transactionInfo.getUnfreezeAmount() && getInternalTransactionsList().equals(transactionInfo.getInternalTransactionsList()) && getExchangeReceivedAmount() == transactionInfo.getExchangeReceivedAmount() && getExchangeInjectAnotherAmount() == transactionInfo.getExchangeInjectAnotherAmount() && getExchangeWithdrawAnotherAmount() == transactionInfo.getExchangeWithdrawAnotherAmount() && getExchangeId() == transactionInfo.getExchangeId() && getShieldedTransactionFee() == transactionInfo.getShieldedTransactionFee() && getOrderId().equals(transactionInfo.getOrderId()) && getOrderDetailsList().equals(transactionInfo.getOrderDetailsList()) && getPackingFee() == transactionInfo.getPackingFee() && getWithdrawExpireAmount() == transactionInfo.getWithdrawExpireAmount() && internalGetCancelUnfreezeV2Amount().equals(transactionInfo.internalGetCancelUnfreezeV2Amount()) && this.unknownFields.equals(transactionInfo.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getId().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getFee())) * 37) + 3) * 53) + Internal.hashLong(getBlockNumber())) * 37) + 4) * 53) + Internal.hashLong(getBlockTimeStamp());
            if (getContractResultCount() > 0) {
                hashCode = (((hashCode * 37) + 5) * 53) + getContractResultList().hashCode();
            }
            int hashCode2 = (((hashCode * 37) + 6) * 53) + getContractAddress().hashCode();
            if (hasReceipt()) {
                hashCode2 = (((hashCode2 * 37) + 7) * 53) + getReceipt().hashCode();
            }
            if (getLogCount() > 0) {
                hashCode2 = (((hashCode2 * 37) + 8) * 53) + getLogList().hashCode();
            }
            int hashCode3 = (((((((((((((((((((hashCode2 * 37) + 9) * 53) + this.result_) * 37) + 10) * 53) + getResMessage().hashCode()) * 37) + 14) * 53) + getAssetIssueID().hashCode()) * 37) + 15) * 53) + Internal.hashLong(getWithdrawAmount())) * 37) + 16) * 53) + Internal.hashLong(getUnfreezeAmount());
            if (getInternalTransactionsCount() > 0) {
                hashCode3 = (((hashCode3 * 37) + 17) * 53) + getInternalTransactionsList().hashCode();
            }
            int hashLong = (((((((((((((((((((((((hashCode3 * 37) + 18) * 53) + Internal.hashLong(getExchangeReceivedAmount())) * 37) + 19) * 53) + Internal.hashLong(getExchangeInjectAnotherAmount())) * 37) + 20) * 53) + Internal.hashLong(getExchangeWithdrawAnotherAmount())) * 37) + 21) * 53) + Internal.hashLong(getExchangeId())) * 37) + 22) * 53) + Internal.hashLong(getShieldedTransactionFee())) * 37) + 25) * 53) + getOrderId().hashCode();
            if (getOrderDetailsCount() > 0) {
                hashLong = (((hashLong * 37) + 26) * 53) + getOrderDetailsList().hashCode();
            }
            int hashLong2 = (((((((hashLong * 37) + 27) * 53) + Internal.hashLong(getPackingFee())) * 37) + 28) * 53) + Internal.hashLong(getWithdrawExpireAmount());
            if (!internalGetCancelUnfreezeV2Amount().getMap().isEmpty()) {
                hashLong2 = (((hashLong2 * 37) + 29) * 53) + internalGetCancelUnfreezeV2Amount().hashCode();
            }
            int hashCode4 = (hashLong2 * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode4;
            return hashCode4;
        }

        public static TransactionInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static TransactionInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static TransactionInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TransactionInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TransactionInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TransactionInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TransactionInfo parseFrom(InputStream inputStream) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static TransactionInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TransactionInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static TransactionInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TransactionInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static TransactionInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(TransactionInfo transactionInfo) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(transactionInfo);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TransactionInfoOrBuilder {
            private Object assetIssueID_;
            private int bitField0_;
            private long blockNumber_;
            private long blockTimeStamp_;
            private MapField<String, Long> cancelUnfreezeV2Amount_;
            private ByteString contractAddress_;
            private List<ByteString> contractResult_;
            private long exchangeId_;
            private long exchangeInjectAnotherAmount_;
            private long exchangeReceivedAmount_;
            private long exchangeWithdrawAnotherAmount_;
            private long fee_;
            private ByteString id_;
            private RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> internalTransactionsBuilder_;
            private List<InternalTransaction> internalTransactions_;
            private RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> logBuilder_;
            private List<Log> log_;
            private RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> orderDetailsBuilder_;
            private List<MarketOrderDetail> orderDetails_;
            private ByteString orderId_;
            private long packingFee_;
            private SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> receiptBuilder_;
            private ResourceReceipt receipt_;
            private ByteString resMessage_;
            private int result_;
            private long shieldedTransactionFee_;
            private long unfreezeAmount_;
            private long withdrawAmount_;
            private long withdrawExpireAmount_;

            @Override
            public long getBlockNumber() {
                return this.blockNumber_;
            }

            @Override
            public long getBlockTimeStamp() {
                return this.blockTimeStamp_;
            }

            @Override
            public ByteString getContractAddress() {
                return this.contractAddress_;
            }

            @Override
            public long getExchangeId() {
                return this.exchangeId_;
            }

            @Override
            public long getExchangeInjectAnotherAmount() {
                return this.exchangeInjectAnotherAmount_;
            }

            @Override
            public long getExchangeReceivedAmount() {
                return this.exchangeReceivedAmount_;
            }

            @Override
            public long getExchangeWithdrawAnotherAmount() {
                return this.exchangeWithdrawAnotherAmount_;
            }

            @Override
            public long getFee() {
                return this.fee_;
            }

            @Override
            public ByteString getId() {
                return this.id_;
            }

            @Override
            public ByteString getOrderId() {
                return this.orderId_;
            }

            @Override
            public long getPackingFee() {
                return this.packingFee_;
            }

            @Override
            public ByteString getResMessage() {
                return this.resMessage_;
            }

            @Override
            public int getResultValue() {
                return this.result_;
            }

            @Override
            public long getShieldedTransactionFee() {
                return this.shieldedTransactionFee_;
            }

            @Override
            public long getUnfreezeAmount() {
                return this.unfreezeAmount_;
            }

            @Override
            public long getWithdrawAmount() {
                return this.withdrawAmount_;
            }

            @Override
            public long getWithdrawExpireAmount() {
                return this.withdrawExpireAmount_;
            }

            @Override
            public boolean hasReceipt() {
                return (this.receiptBuilder_ == null && this.receipt_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TransactionInfo_descriptor;
            }

            @Override
            protected MapField internalGetMapField(int i) {
                if (i == 29) {
                    return internalGetCancelUnfreezeV2Amount();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected MapField internalGetMutableMapField(int i) {
                if (i == 29) {
                    return internalGetMutableCancelUnfreezeV2Amount();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TransactionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TransactionInfo.class, Builder.class);
            }

            private Builder() {
                this.id_ = ByteString.EMPTY;
                this.contractResult_ = Collections.emptyList();
                this.contractAddress_ = ByteString.EMPTY;
                this.receipt_ = null;
                this.log_ = Collections.emptyList();
                this.result_ = 0;
                this.resMessage_ = ByteString.EMPTY;
                this.assetIssueID_ = "";
                this.internalTransactions_ = Collections.emptyList();
                this.orderId_ = ByteString.EMPTY;
                this.orderDetails_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.id_ = ByteString.EMPTY;
                this.contractResult_ = Collections.emptyList();
                this.contractAddress_ = ByteString.EMPTY;
                this.receipt_ = null;
                this.log_ = Collections.emptyList();
                this.result_ = 0;
                this.resMessage_ = ByteString.EMPTY;
                this.assetIssueID_ = "";
                this.internalTransactions_ = Collections.emptyList();
                this.orderId_ = ByteString.EMPTY;
                this.orderDetails_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TransactionInfo.alwaysUseFieldBuilders) {
                    getLogFieldBuilder();
                    getInternalTransactionsFieldBuilder();
                    getOrderDetailsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.id_ = ByteString.EMPTY;
                this.fee_ = 0L;
                this.blockNumber_ = 0L;
                this.blockTimeStamp_ = 0L;
                this.contractResult_ = Collections.emptyList();
                this.bitField0_ &= -17;
                this.contractAddress_ = ByteString.EMPTY;
                if (this.receiptBuilder_ == null) {
                    this.receipt_ = null;
                } else {
                    this.receipt_ = null;
                    this.receiptBuilder_ = null;
                }
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.log_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                this.result_ = 0;
                this.resMessage_ = ByteString.EMPTY;
                this.assetIssueID_ = "";
                this.withdrawAmount_ = 0L;
                this.unfreezeAmount_ = 0L;
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV32 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    this.internalTransactions_ = Collections.emptyList();
                    this.bitField0_ &= -8193;
                } else {
                    repeatedFieldBuilderV32.clear();
                }
                this.exchangeReceivedAmount_ = 0L;
                this.exchangeInjectAnotherAmount_ = 0L;
                this.exchangeWithdrawAnotherAmount_ = 0L;
                this.exchangeId_ = 0L;
                this.shieldedTransactionFee_ = 0L;
                this.orderId_ = ByteString.EMPTY;
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV33 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    this.orderDetails_ = Collections.emptyList();
                    this.bitField0_ &= -1048577;
                } else {
                    repeatedFieldBuilderV33.clear();
                }
                this.packingFee_ = 0L;
                this.withdrawExpireAmount_ = 0L;
                internalGetMutableCancelUnfreezeV2Amount().clear();
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_TransactionInfo_descriptor;
            }

            @Override
            public TransactionInfo getDefaultInstanceForType() {
                return TransactionInfo.getDefaultInstance();
            }

            @Override
            public TransactionInfo build() {
                TransactionInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public TransactionInfo buildPartial() {
                TransactionInfo transactionInfo = new TransactionInfo(this);
                transactionInfo.id_ = this.id_;
                transactionInfo.fee_ = this.fee_;
                transactionInfo.blockNumber_ = this.blockNumber_;
                transactionInfo.blockTimeStamp_ = this.blockTimeStamp_;
                if ((this.bitField0_ & 16) == 16) {
                    this.contractResult_ = Collections.unmodifiableList(this.contractResult_);
                    this.bitField0_ &= -17;
                }
                transactionInfo.contractResult_ = this.contractResult_;
                transactionInfo.contractAddress_ = this.contractAddress_;
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 == null) {
                    transactionInfo.receipt_ = this.receipt_;
                } else {
                    transactionInfo.receipt_ = singleFieldBuilderV3.build();
                }
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 128) == 128) {
                        this.log_ = Collections.unmodifiableList(this.log_);
                        this.bitField0_ &= -129;
                    }
                    transactionInfo.log_ = this.log_;
                } else {
                    transactionInfo.log_ = repeatedFieldBuilderV3.build();
                }
                transactionInfo.result_ = this.result_;
                transactionInfo.resMessage_ = this.resMessage_;
                transactionInfo.assetIssueID_ = this.assetIssueID_;
                transactionInfo.withdrawAmount_ = this.withdrawAmount_;
                transactionInfo.unfreezeAmount_ = this.unfreezeAmount_;
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV32 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    if ((this.bitField0_ & 8192) == 8192) {
                        this.internalTransactions_ = Collections.unmodifiableList(this.internalTransactions_);
                        this.bitField0_ &= -8193;
                    }
                    transactionInfo.internalTransactions_ = this.internalTransactions_;
                } else {
                    transactionInfo.internalTransactions_ = repeatedFieldBuilderV32.build();
                }
                transactionInfo.exchangeReceivedAmount_ = this.exchangeReceivedAmount_;
                transactionInfo.exchangeInjectAnotherAmount_ = this.exchangeInjectAnotherAmount_;
                transactionInfo.exchangeWithdrawAnotherAmount_ = this.exchangeWithdrawAnotherAmount_;
                transactionInfo.exchangeId_ = this.exchangeId_;
                transactionInfo.shieldedTransactionFee_ = this.shieldedTransactionFee_;
                transactionInfo.orderId_ = this.orderId_;
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV33 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    if ((this.bitField0_ & 1048576) == 1048576) {
                        this.orderDetails_ = Collections.unmodifiableList(this.orderDetails_);
                        this.bitField0_ &= -1048577;
                    }
                    transactionInfo.orderDetails_ = this.orderDetails_;
                } else {
                    transactionInfo.orderDetails_ = repeatedFieldBuilderV33.build();
                }
                transactionInfo.packingFee_ = this.packingFee_;
                transactionInfo.withdrawExpireAmount_ = this.withdrawExpireAmount_;
                transactionInfo.cancelUnfreezeV2Amount_ = internalGetCancelUnfreezeV2Amount();
                transactionInfo.cancelUnfreezeV2Amount_.makeImmutable();
                transactionInfo.bitField0_ = 0;
                onBuilt();
                return transactionInfo;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof TransactionInfo) {
                    return mergeFrom((TransactionInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(TransactionInfo transactionInfo) {
                if (transactionInfo == TransactionInfo.getDefaultInstance()) {
                    return this;
                }
                if (transactionInfo.getId() != ByteString.EMPTY) {
                    setId(transactionInfo.getId());
                }
                if (transactionInfo.getFee() != 0) {
                    setFee(transactionInfo.getFee());
                }
                if (transactionInfo.getBlockNumber() != 0) {
                    setBlockNumber(transactionInfo.getBlockNumber());
                }
                if (transactionInfo.getBlockTimeStamp() != 0) {
                    setBlockTimeStamp(transactionInfo.getBlockTimeStamp());
                }
                if (!transactionInfo.contractResult_.isEmpty()) {
                    if (this.contractResult_.isEmpty()) {
                        this.contractResult_ = transactionInfo.contractResult_;
                        this.bitField0_ &= -17;
                    } else {
                        ensureContractResultIsMutable();
                        this.contractResult_.addAll(transactionInfo.contractResult_);
                    }
                    onChanged();
                }
                if (transactionInfo.getContractAddress() != ByteString.EMPTY) {
                    setContractAddress(transactionInfo.getContractAddress());
                }
                if (transactionInfo.hasReceipt()) {
                    mergeReceipt(transactionInfo.getReceipt());
                }
                if (this.logBuilder_ == null) {
                    if (!transactionInfo.log_.isEmpty()) {
                        if (this.log_.isEmpty()) {
                            this.log_ = transactionInfo.log_;
                            this.bitField0_ &= -129;
                        } else {
                            ensureLogIsMutable();
                            this.log_.addAll(transactionInfo.log_);
                        }
                        onChanged();
                    }
                } else if (!transactionInfo.log_.isEmpty()) {
                    if (!this.logBuilder_.isEmpty()) {
                        this.logBuilder_.addAllMessages(transactionInfo.log_);
                    } else {
                        this.logBuilder_.dispose();
                        this.logBuilder_ = null;
                        this.log_ = transactionInfo.log_;
                        this.bitField0_ &= -129;
                        this.logBuilder_ = TransactionInfo.alwaysUseFieldBuilders ? getLogFieldBuilder() : null;
                    }
                }
                if (transactionInfo.result_ != 0) {
                    setResultValue(transactionInfo.getResultValue());
                }
                if (transactionInfo.getResMessage() != ByteString.EMPTY) {
                    setResMessage(transactionInfo.getResMessage());
                }
                if (!transactionInfo.getAssetIssueID().isEmpty()) {
                    this.assetIssueID_ = transactionInfo.assetIssueID_;
                    onChanged();
                }
                if (transactionInfo.getWithdrawAmount() != 0) {
                    setWithdrawAmount(transactionInfo.getWithdrawAmount());
                }
                if (transactionInfo.getUnfreezeAmount() != 0) {
                    setUnfreezeAmount(transactionInfo.getUnfreezeAmount());
                }
                if (this.internalTransactionsBuilder_ == null) {
                    if (!transactionInfo.internalTransactions_.isEmpty()) {
                        if (this.internalTransactions_.isEmpty()) {
                            this.internalTransactions_ = transactionInfo.internalTransactions_;
                            this.bitField0_ &= -8193;
                        } else {
                            ensureInternalTransactionsIsMutable();
                            this.internalTransactions_.addAll(transactionInfo.internalTransactions_);
                        }
                        onChanged();
                    }
                } else if (!transactionInfo.internalTransactions_.isEmpty()) {
                    if (!this.internalTransactionsBuilder_.isEmpty()) {
                        this.internalTransactionsBuilder_.addAllMessages(transactionInfo.internalTransactions_);
                    } else {
                        this.internalTransactionsBuilder_.dispose();
                        this.internalTransactionsBuilder_ = null;
                        this.internalTransactions_ = transactionInfo.internalTransactions_;
                        this.bitField0_ &= -8193;
                        this.internalTransactionsBuilder_ = TransactionInfo.alwaysUseFieldBuilders ? getInternalTransactionsFieldBuilder() : null;
                    }
                }
                if (transactionInfo.getExchangeReceivedAmount() != 0) {
                    setExchangeReceivedAmount(transactionInfo.getExchangeReceivedAmount());
                }
                if (transactionInfo.getExchangeInjectAnotherAmount() != 0) {
                    setExchangeInjectAnotherAmount(transactionInfo.getExchangeInjectAnotherAmount());
                }
                if (transactionInfo.getExchangeWithdrawAnotherAmount() != 0) {
                    setExchangeWithdrawAnotherAmount(transactionInfo.getExchangeWithdrawAnotherAmount());
                }
                if (transactionInfo.getExchangeId() != 0) {
                    setExchangeId(transactionInfo.getExchangeId());
                }
                if (transactionInfo.getShieldedTransactionFee() != 0) {
                    setShieldedTransactionFee(transactionInfo.getShieldedTransactionFee());
                }
                if (transactionInfo.getOrderId() != ByteString.EMPTY) {
                    setOrderId(transactionInfo.getOrderId());
                }
                if (this.orderDetailsBuilder_ == null) {
                    if (!transactionInfo.orderDetails_.isEmpty()) {
                        if (this.orderDetails_.isEmpty()) {
                            this.orderDetails_ = transactionInfo.orderDetails_;
                            this.bitField0_ &= -1048577;
                        } else {
                            ensureOrderDetailsIsMutable();
                            this.orderDetails_.addAll(transactionInfo.orderDetails_);
                        }
                        onChanged();
                    }
                } else if (!transactionInfo.orderDetails_.isEmpty()) {
                    if (!this.orderDetailsBuilder_.isEmpty()) {
                        this.orderDetailsBuilder_.addAllMessages(transactionInfo.orderDetails_);
                    } else {
                        this.orderDetailsBuilder_.dispose();
                        this.orderDetailsBuilder_ = null;
                        this.orderDetails_ = transactionInfo.orderDetails_;
                        this.bitField0_ &= -1048577;
                        this.orderDetailsBuilder_ = TransactionInfo.alwaysUseFieldBuilders ? getOrderDetailsFieldBuilder() : null;
                    }
                }
                if (transactionInfo.getPackingFee() != 0) {
                    setPackingFee(transactionInfo.getPackingFee());
                }
                if (transactionInfo.getWithdrawExpireAmount() != 0) {
                    setWithdrawExpireAmount(transactionInfo.getWithdrawExpireAmount());
                }
                internalGetMutableCancelUnfreezeV2Amount().mergeFrom(transactionInfo.internalGetCancelUnfreezeV2Amount());
                mergeUnknownFields(transactionInfo.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.TransactionInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TransactionInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TransactionInfo$Builder");
            }

            public Builder setId(ByteString byteString) {
                byteString.getClass();
                this.id_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearId() {
                this.id_ = TransactionInfo.getDefaultInstance().getId();
                onChanged();
                return this;
            }

            public Builder setFee(long j) {
                this.fee_ = j;
                onChanged();
                return this;
            }

            public Builder clearFee() {
                this.fee_ = 0L;
                onChanged();
                return this;
            }

            public Builder setBlockNumber(long j) {
                this.blockNumber_ = j;
                onChanged();
                return this;
            }

            public Builder clearBlockNumber() {
                this.blockNumber_ = 0L;
                onChanged();
                return this;
            }

            public Builder setBlockTimeStamp(long j) {
                this.blockTimeStamp_ = j;
                onChanged();
                return this;
            }

            public Builder clearBlockTimeStamp() {
                this.blockTimeStamp_ = 0L;
                onChanged();
                return this;
            }

            private void ensureContractResultIsMutable() {
                if ((this.bitField0_ & 16) != 16) {
                    this.contractResult_ = new ArrayList(this.contractResult_);
                    this.bitField0_ |= 16;
                }
            }

            @Override
            public List<ByteString> getContractResultList() {
                return Collections.unmodifiableList(this.contractResult_);
            }

            @Override
            public int getContractResultCount() {
                return this.contractResult_.size();
            }

            @Override
            public ByteString getContractResult(int i) {
                return this.contractResult_.get(i);
            }

            public Builder setContractResult(int i, ByteString byteString) {
                byteString.getClass();
                ensureContractResultIsMutable();
                this.contractResult_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addContractResult(ByteString byteString) {
                byteString.getClass();
                ensureContractResultIsMutable();
                this.contractResult_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllContractResult(Iterable<? extends ByteString> iterable) {
                ensureContractResultIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.contractResult_);
                onChanged();
                return this;
            }

            public Builder clearContractResult() {
                this.contractResult_ = Collections.emptyList();
                this.bitField0_ &= -17;
                onChanged();
                return this;
            }

            public Builder setContractAddress(ByteString byteString) {
                byteString.getClass();
                this.contractAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearContractAddress() {
                this.contractAddress_ = TransactionInfo.getDefaultInstance().getContractAddress();
                onChanged();
                return this;
            }

            @Override
            public ResourceReceipt getReceipt() {
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 == null) {
                    ResourceReceipt resourceReceipt = this.receipt_;
                    return resourceReceipt == null ? ResourceReceipt.getDefaultInstance() : resourceReceipt;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setReceipt(ResourceReceipt resourceReceipt) {
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 == null) {
                    resourceReceipt.getClass();
                    this.receipt_ = resourceReceipt;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(resourceReceipt);
                }
                return this;
            }

            public Builder setReceipt(ResourceReceipt.Builder builder) {
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.receipt_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeReceipt(ResourceReceipt resourceReceipt) {
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 == null) {
                    ResourceReceipt resourceReceipt2 = this.receipt_;
                    if (resourceReceipt2 != null) {
                        this.receipt_ = ResourceReceipt.newBuilder(resourceReceipt2).mergeFrom(resourceReceipt).buildPartial();
                    } else {
                        this.receipt_ = resourceReceipt;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(resourceReceipt);
                }
                return this;
            }

            public Builder clearReceipt() {
                if (this.receiptBuilder_ == null) {
                    this.receipt_ = null;
                    onChanged();
                } else {
                    this.receipt_ = null;
                    this.receiptBuilder_ = null;
                }
                return this;
            }

            public ResourceReceipt.Builder getReceiptBuilder() {
                onChanged();
                return getReceiptFieldBuilder().getBuilder();
            }

            @Override
            public ResourceReceiptOrBuilder getReceiptOrBuilder() {
                SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> singleFieldBuilderV3 = this.receiptBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                ResourceReceipt resourceReceipt = this.receipt_;
                return resourceReceipt == null ? ResourceReceipt.getDefaultInstance() : resourceReceipt;
            }

            private SingleFieldBuilderV3<ResourceReceipt, ResourceReceipt.Builder, ResourceReceiptOrBuilder> getReceiptFieldBuilder() {
                if (this.receiptBuilder_ == null) {
                    this.receiptBuilder_ = new SingleFieldBuilderV3<>(getReceipt(), getParentForChildren(), isClean());
                    this.receipt_ = null;
                }
                return this.receiptBuilder_;
            }

            private void ensureLogIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.log_ = new ArrayList(this.log_);
                    this.bitField0_ |= 128;
                }
            }

            @Override
            public List<Log> getLogList() {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.log_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getLogCount() {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.log_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Log getLog(int i) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.log_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setLog(int i, Log log) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    log.getClass();
                    ensureLogIsMutable();
                    this.log_.set(i, log);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, log);
                }
                return this;
            }

            public Builder setLog(int i, Log.Builder builder) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureLogIsMutable();
                    this.log_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addLog(Log log) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    log.getClass();
                    ensureLogIsMutable();
                    this.log_.add(log);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(log);
                }
                return this;
            }

            public Builder addLog(int i, Log log) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    log.getClass();
                    ensureLogIsMutable();
                    this.log_.add(i, log);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, log);
                }
                return this;
            }

            public Builder addLog(Log.Builder builder) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureLogIsMutable();
                    this.log_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addLog(int i, Log.Builder builder) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureLogIsMutable();
                    this.log_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllLog(Iterable<? extends Log> iterable) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureLogIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.log_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearLog() {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.log_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeLog(int i) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureLogIsMutable();
                    this.log_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Log.Builder getLogBuilder(int i) {
                return getLogFieldBuilder().getBuilder(i);
            }

            @Override
            public LogOrBuilder getLogOrBuilder(int i) {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.log_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends LogOrBuilder> getLogOrBuilderList() {
                RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> repeatedFieldBuilderV3 = this.logBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.log_);
            }

            public Log.Builder addLogBuilder() {
                return getLogFieldBuilder().addBuilder(Log.getDefaultInstance());
            }

            public Log.Builder addLogBuilder(int i) {
                return getLogFieldBuilder().addBuilder(i, Log.getDefaultInstance());
            }

            public List<Log.Builder> getLogBuilderList() {
                return getLogFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Log, Log.Builder, LogOrBuilder> getLogFieldBuilder() {
                if (this.logBuilder_ == null) {
                    this.logBuilder_ = new RepeatedFieldBuilderV3<>(this.log_, (this.bitField0_ & 128) == 128, getParentForChildren(), isClean());
                    this.log_ = null;
                }
                return this.logBuilder_;
            }

            public Builder setResultValue(int i) {
                this.result_ = i;
                onChanged();
                return this;
            }

            @Override
            public code getResult() {
                code valueOf = code.valueOf(this.result_);
                return valueOf == null ? code.UNRECOGNIZED : valueOf;
            }

            public Builder setResult(code codeVar) {
                codeVar.getClass();
                this.result_ = codeVar.getNumber();
                onChanged();
                return this;
            }

            public Builder clearResult() {
                this.result_ = 0;
                onChanged();
                return this;
            }

            public Builder setResMessage(ByteString byteString) {
                byteString.getClass();
                this.resMessage_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearResMessage() {
                this.resMessage_ = TransactionInfo.getDefaultInstance().getResMessage();
                onChanged();
                return this;
            }

            @Override
            public String getAssetIssueID() {
                Object obj = this.assetIssueID_;
                if (!(obj instanceof String)) {
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.assetIssueID_ = stringUtf8;
                    return stringUtf8;
                }
                return (String) obj;
            }

            @Override
            public ByteString getAssetIssueIDBytes() {
                Object obj = this.assetIssueID_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.assetIssueID_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            public Builder setAssetIssueID(String str) {
                str.getClass();
                this.assetIssueID_ = str;
                onChanged();
                return this;
            }

            public Builder clearAssetIssueID() {
                this.assetIssueID_ = TransactionInfo.getDefaultInstance().getAssetIssueID();
                onChanged();
                return this;
            }

            public Builder setAssetIssueIDBytes(ByteString byteString) {
                byteString.getClass();
                TransactionInfo.checkByteStringIsUtf8(byteString);
                this.assetIssueID_ = byteString;
                onChanged();
                return this;
            }

            public Builder setWithdrawAmount(long j) {
                this.withdrawAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearWithdrawAmount() {
                this.withdrawAmount_ = 0L;
                onChanged();
                return this;
            }

            public Builder setUnfreezeAmount(long j) {
                this.unfreezeAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearUnfreezeAmount() {
                this.unfreezeAmount_ = 0L;
                onChanged();
                return this;
            }

            private void ensureInternalTransactionsIsMutable() {
                if ((this.bitField0_ & 8192) != 8192) {
                    this.internalTransactions_ = new ArrayList(this.internalTransactions_);
                    this.bitField0_ |= 8192;
                }
            }

            @Override
            public List<InternalTransaction> getInternalTransactionsList() {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.internalTransactions_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getInternalTransactionsCount() {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.internalTransactions_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public InternalTransaction getInternalTransactions(int i) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.internalTransactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setInternalTransactions(int i, InternalTransaction internalTransaction) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    internalTransaction.getClass();
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.set(i, internalTransaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, internalTransaction);
                }
                return this;
            }

            public Builder setInternalTransactions(int i, InternalTransaction.Builder builder) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addInternalTransactions(InternalTransaction internalTransaction) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    internalTransaction.getClass();
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.add(internalTransaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(internalTransaction);
                }
                return this;
            }

            public Builder addInternalTransactions(int i, InternalTransaction internalTransaction) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    internalTransaction.getClass();
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.add(i, internalTransaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, internalTransaction);
                }
                return this;
            }

            public Builder addInternalTransactions(InternalTransaction.Builder builder) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addInternalTransactions(int i, InternalTransaction.Builder builder) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllInternalTransactions(Iterable<? extends InternalTransaction> iterable) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureInternalTransactionsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.internalTransactions_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearInternalTransactions() {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.internalTransactions_ = Collections.emptyList();
                    this.bitField0_ &= -8193;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeInternalTransactions(int i) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureInternalTransactionsIsMutable();
                    this.internalTransactions_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public InternalTransaction.Builder getInternalTransactionsBuilder(int i) {
                return getInternalTransactionsFieldBuilder().getBuilder(i);
            }

            @Override
            public InternalTransactionOrBuilder getInternalTransactionsOrBuilder(int i) {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.internalTransactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends InternalTransactionOrBuilder> getInternalTransactionsOrBuilderList() {
                RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> repeatedFieldBuilderV3 = this.internalTransactionsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.internalTransactions_);
            }

            public InternalTransaction.Builder addInternalTransactionsBuilder() {
                return getInternalTransactionsFieldBuilder().addBuilder(InternalTransaction.getDefaultInstance());
            }

            public InternalTransaction.Builder addInternalTransactionsBuilder(int i) {
                return getInternalTransactionsFieldBuilder().addBuilder(i, InternalTransaction.getDefaultInstance());
            }

            public List<InternalTransaction.Builder> getInternalTransactionsBuilderList() {
                return getInternalTransactionsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<InternalTransaction, InternalTransaction.Builder, InternalTransactionOrBuilder> getInternalTransactionsFieldBuilder() {
                if (this.internalTransactionsBuilder_ == null) {
                    this.internalTransactionsBuilder_ = new RepeatedFieldBuilderV3<>(this.internalTransactions_, (this.bitField0_ & 8192) == 8192, getParentForChildren(), isClean());
                    this.internalTransactions_ = null;
                }
                return this.internalTransactionsBuilder_;
            }

            public Builder setExchangeReceivedAmount(long j) {
                this.exchangeReceivedAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearExchangeReceivedAmount() {
                this.exchangeReceivedAmount_ = 0L;
                onChanged();
                return this;
            }

            public Builder setExchangeInjectAnotherAmount(long j) {
                this.exchangeInjectAnotherAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearExchangeInjectAnotherAmount() {
                this.exchangeInjectAnotherAmount_ = 0L;
                onChanged();
                return this;
            }

            public Builder setExchangeWithdrawAnotherAmount(long j) {
                this.exchangeWithdrawAnotherAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearExchangeWithdrawAnotherAmount() {
                this.exchangeWithdrawAnotherAmount_ = 0L;
                onChanged();
                return this;
            }

            public Builder setExchangeId(long j) {
                this.exchangeId_ = j;
                onChanged();
                return this;
            }

            public Builder clearExchangeId() {
                this.exchangeId_ = 0L;
                onChanged();
                return this;
            }

            public Builder setShieldedTransactionFee(long j) {
                this.shieldedTransactionFee_ = j;
                onChanged();
                return this;
            }

            public Builder clearShieldedTransactionFee() {
                this.shieldedTransactionFee_ = 0L;
                onChanged();
                return this;
            }

            public Builder setOrderId(ByteString byteString) {
                byteString.getClass();
                this.orderId_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearOrderId() {
                this.orderId_ = TransactionInfo.getDefaultInstance().getOrderId();
                onChanged();
                return this;
            }

            private void ensureOrderDetailsIsMutable() {
                if ((this.bitField0_ & 1048576) != 1048576) {
                    this.orderDetails_ = new ArrayList(this.orderDetails_);
                    this.bitField0_ |= 1048576;
                }
            }

            @Override
            public List<MarketOrderDetail> getOrderDetailsList() {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.orderDetails_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getOrderDetailsCount() {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderDetails_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public MarketOrderDetail getOrderDetails(int i) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderDetails_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setOrderDetails(int i, MarketOrderDetail marketOrderDetail) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderDetail.getClass();
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.set(i, marketOrderDetail);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, marketOrderDetail);
                }
                return this;
            }

            public Builder setOrderDetails(int i, MarketOrderDetail.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addOrderDetails(MarketOrderDetail marketOrderDetail) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderDetail.getClass();
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.add(marketOrderDetail);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(marketOrderDetail);
                }
                return this;
            }

            public Builder addOrderDetails(int i, MarketOrderDetail marketOrderDetail) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    marketOrderDetail.getClass();
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.add(i, marketOrderDetail);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, marketOrderDetail);
                }
                return this;
            }

            public Builder addOrderDetails(MarketOrderDetail.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addOrderDetails(int i, MarketOrderDetail.Builder builder) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllOrderDetails(Iterable<? extends MarketOrderDetail> iterable) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderDetailsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.orderDetails_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearOrderDetails() {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.orderDetails_ = Collections.emptyList();
                    this.bitField0_ &= -1048577;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeOrderDetails(int i) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureOrderDetailsIsMutable();
                    this.orderDetails_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public MarketOrderDetail.Builder getOrderDetailsBuilder(int i) {
                return getOrderDetailsFieldBuilder().getBuilder(i);
            }

            @Override
            public MarketOrderDetailOrBuilder getOrderDetailsOrBuilder(int i) {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.orderDetails_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends MarketOrderDetailOrBuilder> getOrderDetailsOrBuilderList() {
                RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> repeatedFieldBuilderV3 = this.orderDetailsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.orderDetails_);
            }

            public MarketOrderDetail.Builder addOrderDetailsBuilder() {
                return getOrderDetailsFieldBuilder().addBuilder(MarketOrderDetail.getDefaultInstance());
            }

            public MarketOrderDetail.Builder addOrderDetailsBuilder(int i) {
                return getOrderDetailsFieldBuilder().addBuilder(i, MarketOrderDetail.getDefaultInstance());
            }

            public List<MarketOrderDetail.Builder> getOrderDetailsBuilderList() {
                return getOrderDetailsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<MarketOrderDetail, MarketOrderDetail.Builder, MarketOrderDetailOrBuilder> getOrderDetailsFieldBuilder() {
                if (this.orderDetailsBuilder_ == null) {
                    this.orderDetailsBuilder_ = new RepeatedFieldBuilderV3<>(this.orderDetails_, (this.bitField0_ & 1048576) == 1048576, getParentForChildren(), isClean());
                    this.orderDetails_ = null;
                }
                return this.orderDetailsBuilder_;
            }

            public Builder setPackingFee(long j) {
                this.packingFee_ = j;
                onChanged();
                return this;
            }

            public Builder clearPackingFee() {
                this.packingFee_ = 0L;
                onChanged();
                return this;
            }

            public Builder setWithdrawExpireAmount(long j) {
                this.withdrawExpireAmount_ = j;
                onChanged();
                return this;
            }

            public Builder clearWithdrawExpireAmount() {
                this.withdrawExpireAmount_ = 0L;
                onChanged();
                return this;
            }

            private MapField<String, Long> internalGetCancelUnfreezeV2Amount() {
                MapField<String, Long> mapField = this.cancelUnfreezeV2Amount_;
                return mapField == null ? MapField.emptyMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, Long> internalGetMutableCancelUnfreezeV2Amount() {
                onChanged();
                if (this.cancelUnfreezeV2Amount_ == null) {
                    this.cancelUnfreezeV2Amount_ = MapField.newMapField(CancelUnfreezeV2AmountDefaultEntryHolder.defaultEntry);
                }
                if (!this.cancelUnfreezeV2Amount_.isMutable()) {
                    this.cancelUnfreezeV2Amount_ = this.cancelUnfreezeV2Amount_.copy();
                }
                return this.cancelUnfreezeV2Amount_;
            }

            @Override
            public int getCancelUnfreezeV2AmountCount() {
                return internalGetCancelUnfreezeV2Amount().getMap().size();
            }

            @Override
            public boolean containsCancelUnfreezeV2Amount(String str) {
                str.getClass();
                return internalGetCancelUnfreezeV2Amount().getMap().containsKey(str);
            }

            @Override
            @Deprecated
            public Map<String, Long> getCancelUnfreezeV2Amount() {
                return getCancelUnfreezeV2AmountMap();
            }

            @Override
            public Map<String, Long> getCancelUnfreezeV2AmountMap() {
                return internalGetCancelUnfreezeV2Amount().getMap();
            }

            @Override
            public long getCancelUnfreezeV2AmountOrDefault(String str, long j) {
                str.getClass();
                Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                return map.containsKey(str) ? map.get(str).longValue() : j;
            }

            @Override
            public long getCancelUnfreezeV2AmountOrThrow(String str) {
                str.getClass();
                Map<String, Long> map = internalGetCancelUnfreezeV2Amount().getMap();
                if (!map.containsKey(str)) {
                    throw new IllegalArgumentException();
                }
                return map.get(str).longValue();
            }

            public Builder clearCancelUnfreezeV2Amount() {
                internalGetMutableCancelUnfreezeV2Amount().getMutableMap().clear();
                return this;
            }

            public Builder removeCancelUnfreezeV2Amount(String str) {
                str.getClass();
                internalGetMutableCancelUnfreezeV2Amount().getMutableMap().remove(str);
                return this;
            }

            @Deprecated
            public Map<String, Long> getMutableCancelUnfreezeV2Amount() {
                return internalGetMutableCancelUnfreezeV2Amount().getMutableMap();
            }

            public Builder putCancelUnfreezeV2Amount(String str, long j) {
                str.getClass();
                internalGetMutableCancelUnfreezeV2Amount().getMutableMap().put(str, Long.valueOf(j));
                return this;
            }

            public Builder putAllCancelUnfreezeV2Amount(Map<String, Long> map) {
                internalGetMutableCancelUnfreezeV2Amount().getMutableMap().putAll(map);
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class TransactionRet extends GeneratedMessageV3 implements TransactionRetOrBuilder {
        public static final int BLOCKNUMBER_FIELD_NUMBER = 1;
        public static final int BLOCKTIMESTAMP_FIELD_NUMBER = 2;
        private static final TransactionRet DEFAULT_INSTANCE = new TransactionRet();
        private static final Parser<TransactionRet> PARSER = new AbstractParser<TransactionRet>() {
            @Override
            public TransactionRet parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TransactionRet(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int TRANSACTIONINFO_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private long blockNumber_;
        private long blockTimeStamp_;
        private byte memoizedIsInitialized;
        private List<TransactionInfo> transactioninfo_;

        public static TransactionRet getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<TransactionRet> parser() {
            return PARSER;
        }

        @Override
        public long getBlockNumber() {
            return this.blockNumber_;
        }

        @Override
        public long getBlockTimeStamp() {
            return this.blockTimeStamp_;
        }

        @Override
        public TransactionRet getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<TransactionRet> getParserForType() {
            return PARSER;
        }

        @Override
        public List<TransactionInfo> getTransactioninfoList() {
            return this.transactioninfo_;
        }

        @Override
        public List<? extends TransactionInfoOrBuilder> getTransactioninfoOrBuilderList() {
            return this.transactioninfo_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private TransactionRet(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private TransactionRet() {
            this.memoizedIsInitialized = (byte) -1;
            this.blockNumber_ = 0L;
            this.blockTimeStamp_ = 0L;
            this.transactioninfo_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TransactionRet(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.blockNumber_ = codedInputStream.readInt64();
                            } else if (readTag == 16) {
                                this.blockTimeStamp_ = codedInputStream.readInt64();
                            } else if (readTag != 26) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.transactioninfo_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.transactioninfo_.add((TransactionInfo) codedInputStream.readMessage(TransactionInfo.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.transactioninfo_ = Collections.unmodifiableList(this.transactioninfo_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_TransactionRet_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_TransactionRet_fieldAccessorTable.ensureFieldAccessorsInitialized(TransactionRet.class, Builder.class);
        }

        @Override
        public int getTransactioninfoCount() {
            return this.transactioninfo_.size();
        }

        @Override
        public TransactionInfo getTransactioninfo(int i) {
            return this.transactioninfo_.get(i);
        }

        @Override
        public TransactionInfoOrBuilder getTransactioninfoOrBuilder(int i) {
            return this.transactioninfo_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.blockNumber_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            long j2 = this.blockTimeStamp_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(2, j2);
            }
            for (int i = 0; i < this.transactioninfo_.size(); i++) {
                codedOutputStream.writeMessage(3, this.transactioninfo_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.blockNumber_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            long j2 = this.blockTimeStamp_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(2, j2);
            }
            for (int i2 = 0; i2 < this.transactioninfo_.size(); i2++) {
                computeInt64Size += CodedOutputStream.computeMessageSize(3, this.transactioninfo_.get(i2));
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof TransactionRet)) {
                return super.equals(obj);
            }
            TransactionRet transactionRet = (TransactionRet) obj;
            return getBlockNumber() == transactionRet.getBlockNumber() && getBlockTimeStamp() == transactionRet.getBlockTimeStamp() && getTransactioninfoList().equals(transactionRet.getTransactioninfoList()) && this.unknownFields.equals(transactionRet.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getBlockNumber())) * 37) + 2) * 53) + Internal.hashLong(getBlockTimeStamp());
            if (getTransactioninfoCount() > 0) {
                hashCode = (((hashCode * 37) + 3) * 53) + getTransactioninfoList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static TransactionRet parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static TransactionRet parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static TransactionRet parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TransactionRet parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TransactionRet parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TransactionRet parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TransactionRet parseFrom(InputStream inputStream) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static TransactionRet parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TransactionRet parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static TransactionRet parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static TransactionRet parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static TransactionRet parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (TransactionRet) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(TransactionRet transactionRet) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(transactionRet);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TransactionRetOrBuilder {
            private int bitField0_;
            private long blockNumber_;
            private long blockTimeStamp_;
            private RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> transactioninfoBuilder_;
            private List<TransactionInfo> transactioninfo_;

            @Override
            public long getBlockNumber() {
                return this.blockNumber_;
            }

            @Override
            public long getBlockTimeStamp() {
                return this.blockTimeStamp_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_TransactionRet_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_TransactionRet_fieldAccessorTable.ensureFieldAccessorsInitialized(TransactionRet.class, Builder.class);
            }

            private Builder() {
                this.transactioninfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.transactioninfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TransactionRet.alwaysUseFieldBuilders) {
                    getTransactioninfoFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.blockNumber_ = 0L;
                this.blockTimeStamp_ = 0L;
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactioninfo_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_TransactionRet_descriptor;
            }

            @Override
            public TransactionRet getDefaultInstanceForType() {
                return TransactionRet.getDefaultInstance();
            }

            @Override
            public TransactionRet build() {
                TransactionRet buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public TransactionRet buildPartial() {
                TransactionRet transactionRet = new TransactionRet(this);
                transactionRet.blockNumber_ = this.blockNumber_;
                transactionRet.blockTimeStamp_ = this.blockTimeStamp_;
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.transactioninfo_ = Collections.unmodifiableList(this.transactioninfo_);
                        this.bitField0_ &= -5;
                    }
                    transactionRet.transactioninfo_ = this.transactioninfo_;
                } else {
                    transactionRet.transactioninfo_ = repeatedFieldBuilderV3.build();
                }
                transactionRet.bitField0_ = 0;
                onBuilt();
                return transactionRet;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof TransactionRet) {
                    return mergeFrom((TransactionRet) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(TransactionRet transactionRet) {
                if (transactionRet == TransactionRet.getDefaultInstance()) {
                    return this;
                }
                if (transactionRet.getBlockNumber() != 0) {
                    setBlockNumber(transactionRet.getBlockNumber());
                }
                if (transactionRet.getBlockTimeStamp() != 0) {
                    setBlockTimeStamp(transactionRet.getBlockTimeStamp());
                }
                if (this.transactioninfoBuilder_ == null) {
                    if (!transactionRet.transactioninfo_.isEmpty()) {
                        if (this.transactioninfo_.isEmpty()) {
                            this.transactioninfo_ = transactionRet.transactioninfo_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureTransactioninfoIsMutable();
                            this.transactioninfo_.addAll(transactionRet.transactioninfo_);
                        }
                        onChanged();
                    }
                } else if (!transactionRet.transactioninfo_.isEmpty()) {
                    if (!this.transactioninfoBuilder_.isEmpty()) {
                        this.transactioninfoBuilder_.addAllMessages(transactionRet.transactioninfo_);
                    } else {
                        this.transactioninfoBuilder_.dispose();
                        this.transactioninfoBuilder_ = null;
                        this.transactioninfo_ = transactionRet.transactioninfo_;
                        this.bitField0_ &= -5;
                        this.transactioninfoBuilder_ = TransactionRet.alwaysUseFieldBuilders ? getTransactioninfoFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(transactionRet.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.TransactionRet.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.TransactionRet.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$TransactionRet$Builder");
            }

            public Builder setBlockNumber(long j) {
                this.blockNumber_ = j;
                onChanged();
                return this;
            }

            public Builder clearBlockNumber() {
                this.blockNumber_ = 0L;
                onChanged();
                return this;
            }

            public Builder setBlockTimeStamp(long j) {
                this.blockTimeStamp_ = j;
                onChanged();
                return this;
            }

            public Builder clearBlockTimeStamp() {
                this.blockTimeStamp_ = 0L;
                onChanged();
                return this;
            }

            private void ensureTransactioninfoIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.transactioninfo_ = new ArrayList(this.transactioninfo_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<TransactionInfo> getTransactioninfoList() {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.transactioninfo_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getTransactioninfoCount() {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactioninfo_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public TransactionInfo getTransactioninfo(int i) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactioninfo_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setTransactioninfo(int i, TransactionInfo transactionInfo) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transactionInfo.getClass();
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.set(i, transactionInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, transactionInfo);
                }
                return this;
            }

            public Builder setTransactioninfo(int i, TransactionInfo.Builder builder) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addTransactioninfo(TransactionInfo transactionInfo) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transactionInfo.getClass();
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.add(transactionInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(transactionInfo);
                }
                return this;
            }

            public Builder addTransactioninfo(int i, TransactionInfo transactionInfo) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transactionInfo.getClass();
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.add(i, transactionInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, transactionInfo);
                }
                return this;
            }

            public Builder addTransactioninfo(TransactionInfo.Builder builder) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addTransactioninfo(int i, TransactionInfo.Builder builder) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllTransactioninfo(Iterable<? extends TransactionInfo> iterable) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactioninfoIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.transactioninfo_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearTransactioninfo() {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactioninfo_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeTransactioninfo(int i) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactioninfoIsMutable();
                    this.transactioninfo_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public TransactionInfo.Builder getTransactioninfoBuilder(int i) {
                return getTransactioninfoFieldBuilder().getBuilder(i);
            }

            @Override
            public TransactionInfoOrBuilder getTransactioninfoOrBuilder(int i) {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactioninfo_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends TransactionInfoOrBuilder> getTransactioninfoOrBuilderList() {
                RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> repeatedFieldBuilderV3 = this.transactioninfoBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.transactioninfo_);
            }

            public TransactionInfo.Builder addTransactioninfoBuilder() {
                return getTransactioninfoFieldBuilder().addBuilder(TransactionInfo.getDefaultInstance());
            }

            public TransactionInfo.Builder addTransactioninfoBuilder(int i) {
                return getTransactioninfoFieldBuilder().addBuilder(i, TransactionInfo.getDefaultInstance());
            }

            public List<TransactionInfo.Builder> getTransactioninfoBuilderList() {
                return getTransactioninfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<TransactionInfo, TransactionInfo.Builder, TransactionInfoOrBuilder> getTransactioninfoFieldBuilder() {
                if (this.transactioninfoBuilder_ == null) {
                    this.transactioninfoBuilder_ = new RepeatedFieldBuilderV3<>(this.transactioninfo_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.transactioninfo_ = null;
                }
                return this.transactioninfoBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Transactions extends GeneratedMessageV3 implements TransactionsOrBuilder {
        private static final Transactions DEFAULT_INSTANCE = new Transactions();
        private static final Parser<Transactions> PARSER = new AbstractParser<Transactions>() {
            @Override
            public Transactions parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Transactions(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int TRANSACTIONS_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private List<Transaction> transactions_;

        public static Transactions getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Transactions> parser() {
            return PARSER;
        }

        @Override
        public Transactions getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Transactions> getParserForType() {
            return PARSER;
        }

        @Override
        public List<Transaction> getTransactionsList() {
            return this.transactions_;
        }

        @Override
        public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
            return this.transactions_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Transactions(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Transactions() {
            this.memoizedIsInitialized = (byte) -1;
            this.transactions_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Transactions(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 10) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.transactions_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.transactions_.add((Transaction) codedInputStream.readMessage(Transaction.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Transactions_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Transactions_fieldAccessorTable.ensureFieldAccessorsInitialized(Transactions.class, Builder.class);
        }

        @Override
        public int getTransactionsCount() {
            return this.transactions_.size();
        }

        @Override
        public Transaction getTransactions(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public TransactionOrBuilder getTransactionsOrBuilder(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.transactions_.size(); i++) {
                codedOutputStream.writeMessage(1, this.transactions_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.transactions_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.transactions_.get(i3));
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Transactions)) {
                return super.equals(obj);
            }
            Transactions transactions = (Transactions) obj;
            return getTransactionsList().equals(transactions.getTransactionsList()) && this.unknownFields.equals(transactions.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getTransactionsCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getTransactionsList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Transactions parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Transactions parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Transactions parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Transactions parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Transactions parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Transactions parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Transactions parseFrom(InputStream inputStream) throws IOException {
            return (Transactions) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Transactions parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transactions) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Transactions parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Transactions) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Transactions parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transactions) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Transactions parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Transactions) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Transactions parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Transactions) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Transactions transactions) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(transactions);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements TransactionsOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> transactionsBuilder_;
            private List<Transaction> transactions_;

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Transactions_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Transactions_fieldAccessorTable.ensureFieldAccessorsInitialized(Transactions.class, Builder.class);
            }

            private Builder() {
                this.transactions_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.transactions_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Transactions.alwaysUseFieldBuilders) {
                    getTransactionsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Transactions_descriptor;
            }

            @Override
            public Transactions getDefaultInstanceForType() {
                return Transactions.getDefaultInstance();
            }

            @Override
            public Transactions build() {
                Transactions buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Transactions buildPartial() {
                Transactions transactions = new Transactions(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                        this.bitField0_ &= -2;
                    }
                    transactions.transactions_ = this.transactions_;
                } else {
                    transactions.transactions_ = repeatedFieldBuilderV3.build();
                }
                onBuilt();
                return transactions;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Transactions) {
                    return mergeFrom((Transactions) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Transactions transactions) {
                if (transactions == Transactions.getDefaultInstance()) {
                    return this;
                }
                if (this.transactionsBuilder_ == null) {
                    if (!transactions.transactions_.isEmpty()) {
                        if (this.transactions_.isEmpty()) {
                            this.transactions_ = transactions.transactions_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureTransactionsIsMutable();
                            this.transactions_.addAll(transactions.transactions_);
                        }
                        onChanged();
                    }
                } else if (!transactions.transactions_.isEmpty()) {
                    if (!this.transactionsBuilder_.isEmpty()) {
                        this.transactionsBuilder_.addAllMessages(transactions.transactions_);
                    } else {
                        this.transactionsBuilder_.dispose();
                        this.transactionsBuilder_ = null;
                        this.transactions_ = transactions.transactions_;
                        this.bitField0_ &= -2;
                        this.transactionsBuilder_ = Transactions.alwaysUseFieldBuilders ? getTransactionsFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(transactions.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Transactions.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Transactions.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Transactions$Builder");
            }

            private void ensureTransactionsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.transactions_ = new ArrayList(this.transactions_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<Transaction> getTransactionsList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.transactions_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getTransactionsCount() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Transaction getTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, transaction);
                }
                return this;
            }

            public Builder setTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addTransactions(Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(transaction);
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, transaction);
                }
                return this;
            }

            public Builder addTransactions(Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllTransactions(Iterable<? extends Transaction> iterable) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.transactions_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearTransactions() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Transaction.Builder getTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().getBuilder(i);
            }

            @Override
            public TransactionOrBuilder getTransactionsOrBuilder(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.transactions_);
            }

            public Transaction.Builder addTransactionsBuilder() {
                return getTransactionsFieldBuilder().addBuilder(Transaction.getDefaultInstance());
            }

            public Transaction.Builder addTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().addBuilder(i, Transaction.getDefaultInstance());
            }

            public List<Transaction.Builder> getTransactionsBuilderList() {
                return getTransactionsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> getTransactionsFieldBuilder() {
                if (this.transactionsBuilder_ == null) {
                    this.transactionsBuilder_ = new RepeatedFieldBuilderV3<>(this.transactions_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.transactions_ = null;
                }
                return this.transactionsBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class BlockHeader extends GeneratedMessageV3 implements BlockHeaderOrBuilder {
        private static final BlockHeader DEFAULT_INSTANCE = new BlockHeader();
        private static final Parser<BlockHeader> PARSER = new AbstractParser<BlockHeader>() {
            @Override
            public BlockHeader parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new BlockHeader(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int RAW_DATA_FIELD_NUMBER = 1;
        public static final int WITNESS_SIGNATURE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private raw rawData_;
        private ByteString witnessSignature_;

        public interface rawOrBuilder extends MessageOrBuilder {
            ByteString getAccountStateRoot();

            long getNumber();

            ByteString getParentHash();

            long getTimestamp();

            ByteString getTxTrieRoot();

            int getVersion();

            ByteString getWitnessAddress();

            long getWitnessId();
        }

        public static BlockHeader getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<BlockHeader> parser() {
            return PARSER;
        }

        @Override
        public BlockHeader getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<BlockHeader> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getWitnessSignature() {
            return this.witnessSignature_;
        }

        @Override
        public boolean hasRawData() {
            return this.rawData_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private BlockHeader(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private BlockHeader() {
            this.memoizedIsInitialized = (byte) -1;
            this.witnessSignature_ = ByteString.EMPTY;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private BlockHeader(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                raw rawVar = this.rawData_;
                                raw.Builder builder = rawVar != null ? rawVar.toBuilder() : null;
                                raw rawVar2 = (raw) codedInputStream.readMessage(raw.parser(), extensionRegistryLite);
                                this.rawData_ = rawVar2;
                                if (builder != null) {
                                    builder.mergeFrom(rawVar2);
                                    this.rawData_ = builder.buildPartial();
                                }
                            } else if (readTag != 18) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.witnessSignature_ = codedInputStream.readBytes();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_BlockHeader_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_BlockHeader_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockHeader.class, Builder.class);
        }

        public static final class raw extends GeneratedMessageV3 implements rawOrBuilder {
            public static final int ACCOUNTSTATEROOT_FIELD_NUMBER = 11;
            public static final int NUMBER_FIELD_NUMBER = 7;
            public static final int PARENTHASH_FIELD_NUMBER = 3;
            public static final int TIMESTAMP_FIELD_NUMBER = 1;
            public static final int TXTRIEROOT_FIELD_NUMBER = 2;
            public static final int VERSION_FIELD_NUMBER = 10;
            public static final int WITNESS_ADDRESS_FIELD_NUMBER = 9;
            public static final int WITNESS_ID_FIELD_NUMBER = 8;
            private static final long serialVersionUID = 0;
            private ByteString accountStateRoot_;
            private byte memoizedIsInitialized;
            private long number_;
            private ByteString parentHash_;
            private long timestamp_;
            private ByteString txTrieRoot_;
            private int version_;
            private ByteString witnessAddress_;
            private long witnessId_;
            private static final raw DEFAULT_INSTANCE = new raw();
            private static final Parser<raw> PARSER = new AbstractParser<raw>() {
                @Override
                public raw parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new raw(codedInputStream, extensionRegistryLite);
                }
            };

            public static raw getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<raw> parser() {
                return PARSER;
            }

            @Override
            public ByteString getAccountStateRoot() {
                return this.accountStateRoot_;
            }

            @Override
            public raw getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getNumber() {
                return this.number_;
            }

            @Override
            public ByteString getParentHash() {
                return this.parentHash_;
            }

            @Override
            public Parser<raw> getParserForType() {
                return PARSER;
            }

            @Override
            public long getTimestamp() {
                return this.timestamp_;
            }

            @Override
            public ByteString getTxTrieRoot() {
                return this.txTrieRoot_;
            }

            @Override
            public int getVersion() {
                return this.version_;
            }

            @Override
            public ByteString getWitnessAddress() {
                return this.witnessAddress_;
            }

            @Override
            public long getWitnessId() {
                return this.witnessId_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private raw(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private raw() {
                this.memoizedIsInitialized = (byte) -1;
                this.timestamp_ = 0L;
                this.txTrieRoot_ = ByteString.EMPTY;
                this.parentHash_ = ByteString.EMPTY;
                this.number_ = 0L;
                this.witnessId_ = 0L;
                this.witnessAddress_ = ByteString.EMPTY;
                this.version_ = 0;
                this.accountStateRoot_ = ByteString.EMPTY;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private raw(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 8) {
                                    this.timestamp_ = codedInputStream.readInt64();
                                } else if (readTag == 18) {
                                    this.txTrieRoot_ = codedInputStream.readBytes();
                                } else if (readTag == 26) {
                                    this.parentHash_ = codedInputStream.readBytes();
                                } else if (readTag == 56) {
                                    this.number_ = codedInputStream.readInt64();
                                } else if (readTag == 64) {
                                    this.witnessId_ = codedInputStream.readInt64();
                                } else if (readTag == 74) {
                                    this.witnessAddress_ = codedInputStream.readBytes();
                                } else if (readTag == 80) {
                                    this.version_ = codedInputStream.readInt32();
                                } else if (readTag != 90) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.accountStateRoot_ = codedInputStream.readBytes();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_BlockHeader_raw_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_BlockHeader_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.timestamp_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                if (!this.txTrieRoot_.isEmpty()) {
                    codedOutputStream.writeBytes(2, this.txTrieRoot_);
                }
                if (!this.parentHash_.isEmpty()) {
                    codedOutputStream.writeBytes(3, this.parentHash_);
                }
                long j2 = this.number_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(7, j2);
                }
                long j3 = this.witnessId_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(8, j3);
                }
                if (!this.witnessAddress_.isEmpty()) {
                    codedOutputStream.writeBytes(9, this.witnessAddress_);
                }
                int i = this.version_;
                if (i != 0) {
                    codedOutputStream.writeInt32(10, i);
                }
                if (!this.accountStateRoot_.isEmpty()) {
                    codedOutputStream.writeBytes(11, this.accountStateRoot_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.timestamp_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                if (!this.txTrieRoot_.isEmpty()) {
                    computeInt64Size += CodedOutputStream.computeBytesSize(2, this.txTrieRoot_);
                }
                if (!this.parentHash_.isEmpty()) {
                    computeInt64Size += CodedOutputStream.computeBytesSize(3, this.parentHash_);
                }
                long j2 = this.number_;
                if (j2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(7, j2);
                }
                long j3 = this.witnessId_;
                if (j3 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt64Size(8, j3);
                }
                if (!this.witnessAddress_.isEmpty()) {
                    computeInt64Size += CodedOutputStream.computeBytesSize(9, this.witnessAddress_);
                }
                int i2 = this.version_;
                if (i2 != 0) {
                    computeInt64Size += CodedOutputStream.computeInt32Size(10, i2);
                }
                if (!this.accountStateRoot_.isEmpty()) {
                    computeInt64Size += CodedOutputStream.computeBytesSize(11, this.accountStateRoot_);
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof raw)) {
                    return super.equals(obj);
                }
                raw rawVar = (raw) obj;
                return getTimestamp() == rawVar.getTimestamp() && getTxTrieRoot().equals(rawVar.getTxTrieRoot()) && getParentHash().equals(rawVar.getParentHash()) && getNumber() == rawVar.getNumber() && getWitnessId() == rawVar.getWitnessId() && getWitnessAddress().equals(rawVar.getWitnessAddress()) && getVersion() == rawVar.getVersion() && getAccountStateRoot().equals(rawVar.getAccountStateRoot()) && this.unknownFields.equals(rawVar.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getTimestamp())) * 37) + 2) * 53) + getTxTrieRoot().hashCode()) * 37) + 3) * 53) + getParentHash().hashCode()) * 37) + 7) * 53) + Internal.hashLong(getNumber())) * 37) + 8) * 53) + Internal.hashLong(getWitnessId())) * 37) + 9) * 53) + getWitnessAddress().hashCode()) * 37) + 10) * 53) + getVersion()) * 37) + 11) * 53) + getAccountStateRoot().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static raw parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static raw parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static raw parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static raw parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static raw parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static raw parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static raw parseFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static raw parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static raw parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static raw parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static raw parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (raw) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(raw rawVar) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(rawVar);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements rawOrBuilder {
                private ByteString accountStateRoot_;
                private long number_;
                private ByteString parentHash_;
                private long timestamp_;
                private ByteString txTrieRoot_;
                private int version_;
                private ByteString witnessAddress_;
                private long witnessId_;

                @Override
                public ByteString getAccountStateRoot() {
                    return this.accountStateRoot_;
                }

                @Override
                public long getNumber() {
                    return this.number_;
                }

                @Override
                public ByteString getParentHash() {
                    return this.parentHash_;
                }

                @Override
                public long getTimestamp() {
                    return this.timestamp_;
                }

                @Override
                public ByteString getTxTrieRoot() {
                    return this.txTrieRoot_;
                }

                @Override
                public int getVersion() {
                    return this.version_;
                }

                @Override
                public ByteString getWitnessAddress() {
                    return this.witnessAddress_;
                }

                @Override
                public long getWitnessId() {
                    return this.witnessId_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_BlockHeader_raw_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_BlockHeader_raw_fieldAccessorTable.ensureFieldAccessorsInitialized(raw.class, Builder.class);
                }

                private Builder() {
                    this.txTrieRoot_ = ByteString.EMPTY;
                    this.parentHash_ = ByteString.EMPTY;
                    this.witnessAddress_ = ByteString.EMPTY;
                    this.accountStateRoot_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.txTrieRoot_ = ByteString.EMPTY;
                    this.parentHash_ = ByteString.EMPTY;
                    this.witnessAddress_ = ByteString.EMPTY;
                    this.accountStateRoot_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = raw.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.timestamp_ = 0L;
                    this.txTrieRoot_ = ByteString.EMPTY;
                    this.parentHash_ = ByteString.EMPTY;
                    this.number_ = 0L;
                    this.witnessId_ = 0L;
                    this.witnessAddress_ = ByteString.EMPTY;
                    this.version_ = 0;
                    this.accountStateRoot_ = ByteString.EMPTY;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_BlockHeader_raw_descriptor;
                }

                @Override
                public raw getDefaultInstanceForType() {
                    return raw.getDefaultInstance();
                }

                @Override
                public raw build() {
                    raw buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public raw buildPartial() {
                    raw rawVar = new raw(this);
                    rawVar.timestamp_ = this.timestamp_;
                    rawVar.txTrieRoot_ = this.txTrieRoot_;
                    rawVar.parentHash_ = this.parentHash_;
                    rawVar.number_ = this.number_;
                    rawVar.witnessId_ = this.witnessId_;
                    rawVar.witnessAddress_ = this.witnessAddress_;
                    rawVar.version_ = this.version_;
                    rawVar.accountStateRoot_ = this.accountStateRoot_;
                    onBuilt();
                    return rawVar;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof raw) {
                        return mergeFrom((raw) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(raw rawVar) {
                    if (rawVar == raw.getDefaultInstance()) {
                        return this;
                    }
                    if (rawVar.getTimestamp() != 0) {
                        setTimestamp(rawVar.getTimestamp());
                    }
                    if (rawVar.getTxTrieRoot() != ByteString.EMPTY) {
                        setTxTrieRoot(rawVar.getTxTrieRoot());
                    }
                    if (rawVar.getParentHash() != ByteString.EMPTY) {
                        setParentHash(rawVar.getParentHash());
                    }
                    if (rawVar.getNumber() != 0) {
                        setNumber(rawVar.getNumber());
                    }
                    if (rawVar.getWitnessId() != 0) {
                        setWitnessId(rawVar.getWitnessId());
                    }
                    if (rawVar.getWitnessAddress() != ByteString.EMPTY) {
                        setWitnessAddress(rawVar.getWitnessAddress());
                    }
                    if (rawVar.getVersion() != 0) {
                        setVersion(rawVar.getVersion());
                    }
                    if (rawVar.getAccountStateRoot() != ByteString.EMPTY) {
                        setAccountStateRoot(rawVar.getAccountStateRoot());
                    }
                    mergeUnknownFields(rawVar.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.BlockHeader.raw.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.BlockHeader.raw.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$BlockHeader$raw$Builder");
                }

                public Builder setTimestamp(long j) {
                    this.timestamp_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearTimestamp() {
                    this.timestamp_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setTxTrieRoot(ByteString byteString) {
                    byteString.getClass();
                    this.txTrieRoot_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearTxTrieRoot() {
                    this.txTrieRoot_ = raw.getDefaultInstance().getTxTrieRoot();
                    onChanged();
                    return this;
                }

                public Builder setParentHash(ByteString byteString) {
                    byteString.getClass();
                    this.parentHash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearParentHash() {
                    this.parentHash_ = raw.getDefaultInstance().getParentHash();
                    onChanged();
                    return this;
                }

                public Builder setNumber(long j) {
                    this.number_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearNumber() {
                    this.number_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setWitnessId(long j) {
                    this.witnessId_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearWitnessId() {
                    this.witnessId_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setWitnessAddress(ByteString byteString) {
                    byteString.getClass();
                    this.witnessAddress_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearWitnessAddress() {
                    this.witnessAddress_ = raw.getDefaultInstance().getWitnessAddress();
                    onChanged();
                    return this;
                }

                public Builder setVersion(int i) {
                    this.version_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearVersion() {
                    this.version_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setAccountStateRoot(ByteString byteString) {
                    byteString.getClass();
                    this.accountStateRoot_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearAccountStateRoot() {
                    this.accountStateRoot_ = raw.getDefaultInstance().getAccountStateRoot();
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public raw getRawData() {
            raw rawVar = this.rawData_;
            return rawVar == null ? raw.getDefaultInstance() : rawVar;
        }

        @Override
        public rawOrBuilder getRawDataOrBuilder() {
            return getRawData();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.rawData_ != null) {
                codedOutputStream.writeMessage(1, getRawData());
            }
            if (!this.witnessSignature_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.witnessSignature_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.rawData_ != null ? CodedOutputStream.computeMessageSize(1, getRawData()) : 0;
            if (!this.witnessSignature_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(2, this.witnessSignature_);
            }
            int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof BlockHeader)) {
                return super.equals(obj);
            }
            BlockHeader blockHeader = (BlockHeader) obj;
            boolean z = hasRawData() == blockHeader.hasRawData();
            if (!hasRawData() ? z : !(!z || !getRawData().equals(blockHeader.getRawData()))) {
                if (getWitnessSignature().equals(blockHeader.getWitnessSignature()) && this.unknownFields.equals(blockHeader.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasRawData()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getRawData().hashCode();
            }
            int hashCode2 = (((((hashCode * 37) + 2) * 53) + getWitnessSignature().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static BlockHeader parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static BlockHeader parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static BlockHeader parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static BlockHeader parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static BlockHeader parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static BlockHeader parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static BlockHeader parseFrom(InputStream inputStream) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static BlockHeader parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static BlockHeader parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static BlockHeader parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static BlockHeader parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static BlockHeader parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockHeader) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(BlockHeader blockHeader) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockHeader);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockHeaderOrBuilder {
            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> rawDataBuilder_;
            private raw rawData_;
            private ByteString witnessSignature_;

            @Override
            public ByteString getWitnessSignature() {
                return this.witnessSignature_;
            }

            @Override
            public boolean hasRawData() {
                return (this.rawDataBuilder_ == null && this.rawData_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_BlockHeader_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_BlockHeader_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockHeader.class, Builder.class);
            }

            private Builder() {
                this.rawData_ = null;
                this.witnessSignature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.rawData_ = null;
                this.witnessSignature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = BlockHeader.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                this.witnessSignature_ = ByteString.EMPTY;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_BlockHeader_descriptor;
            }

            @Override
            public BlockHeader getDefaultInstanceForType() {
                return BlockHeader.getDefaultInstance();
            }

            @Override
            public BlockHeader build() {
                BlockHeader buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public BlockHeader buildPartial() {
                BlockHeader blockHeader = new BlockHeader(this);
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockHeader.rawData_ = this.rawData_;
                } else {
                    blockHeader.rawData_ = singleFieldBuilderV3.build();
                }
                blockHeader.witnessSignature_ = this.witnessSignature_;
                onBuilt();
                return blockHeader;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof BlockHeader) {
                    return mergeFrom((BlockHeader) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(BlockHeader blockHeader) {
                if (blockHeader == BlockHeader.getDefaultInstance()) {
                    return this;
                }
                if (blockHeader.hasRawData()) {
                    mergeRawData(blockHeader.getRawData());
                }
                if (blockHeader.getWitnessSignature() != ByteString.EMPTY) {
                    setWitnessSignature(blockHeader.getWitnessSignature());
                }
                mergeUnknownFields(blockHeader.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.BlockHeader.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.BlockHeader.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$BlockHeader$Builder");
            }

            @Override
            public raw getRawData() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar = this.rawData_;
                    return rawVar == null ? raw.getDefaultInstance() : rawVar;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    rawVar.getClass();
                    this.rawData_ = rawVar;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(rawVar);
                }
                return this;
            }

            public Builder setRawData(raw.Builder builder) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.rawData_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeRawData(raw rawVar) {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 == null) {
                    raw rawVar2 = this.rawData_;
                    if (rawVar2 != null) {
                        this.rawData_ = raw.newBuilder(rawVar2).mergeFrom(rawVar).buildPartial();
                    } else {
                        this.rawData_ = rawVar;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(rawVar);
                }
                return this;
            }

            public Builder clearRawData() {
                if (this.rawDataBuilder_ == null) {
                    this.rawData_ = null;
                    onChanged();
                } else {
                    this.rawData_ = null;
                    this.rawDataBuilder_ = null;
                }
                return this;
            }

            public raw.Builder getRawDataBuilder() {
                onChanged();
                return getRawDataFieldBuilder().getBuilder();
            }

            @Override
            public rawOrBuilder getRawDataOrBuilder() {
                SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> singleFieldBuilderV3 = this.rawDataBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                raw rawVar = this.rawData_;
                return rawVar == null ? raw.getDefaultInstance() : rawVar;
            }

            private SingleFieldBuilderV3<raw, raw.Builder, rawOrBuilder> getRawDataFieldBuilder() {
                if (this.rawDataBuilder_ == null) {
                    this.rawDataBuilder_ = new SingleFieldBuilderV3<>(getRawData(), getParentForChildren(), isClean());
                    this.rawData_ = null;
                }
                return this.rawDataBuilder_;
            }

            public Builder setWitnessSignature(ByteString byteString) {
                byteString.getClass();
                this.witnessSignature_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearWitnessSignature() {
                this.witnessSignature_ = BlockHeader.getDefaultInstance().getWitnessSignature();
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Block extends GeneratedMessageV3 implements BlockOrBuilder {
        public static final int BLOCK_HEADER_FIELD_NUMBER = 2;
        private static final Block DEFAULT_INSTANCE = new Block();
        private static final Parser<Block> PARSER = new AbstractParser<Block>() {
            @Override
            public Block parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Block(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int TRANSACTIONS_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private BlockHeader blockHeader_;
        private byte memoizedIsInitialized;
        private List<Transaction> transactions_;

        public static Block getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Block> parser() {
            return PARSER;
        }

        @Override
        public Block getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Block> getParserForType() {
            return PARSER;
        }

        @Override
        public List<Transaction> getTransactionsList() {
            return this.transactions_;
        }

        @Override
        public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
            return this.transactions_;
        }

        @Override
        public boolean hasBlockHeader() {
            return this.blockHeader_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Block(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Block() {
            this.memoizedIsInitialized = (byte) -1;
            this.transactions_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Block(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                if (!(z2 & true)) {
                                    this.transactions_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.transactions_.add((Transaction) codedInputStream.readMessage(Transaction.parser(), extensionRegistryLite));
                            } else if (readTag != 18) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                BlockHeader blockHeader = this.blockHeader_;
                                BlockHeader.Builder builder = blockHeader != null ? blockHeader.toBuilder() : null;
                                BlockHeader blockHeader2 = (BlockHeader) codedInputStream.readMessage(BlockHeader.parser(), extensionRegistryLite);
                                this.blockHeader_ = blockHeader2;
                                if (builder != null) {
                                    builder.mergeFrom(blockHeader2);
                                    this.blockHeader_ = builder.buildPartial();
                                }
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Block_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Block_fieldAccessorTable.ensureFieldAccessorsInitialized(Block.class, Builder.class);
        }

        @Override
        public int getTransactionsCount() {
            return this.transactions_.size();
        }

        @Override
        public Transaction getTransactions(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public TransactionOrBuilder getTransactionsOrBuilder(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public BlockHeader getBlockHeader() {
            BlockHeader blockHeader = this.blockHeader_;
            return blockHeader == null ? BlockHeader.getDefaultInstance() : blockHeader;
        }

        @Override
        public BlockHeaderOrBuilder getBlockHeaderOrBuilder() {
            return getBlockHeader();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.transactions_.size(); i++) {
                codedOutputStream.writeMessage(1, this.transactions_.get(i));
            }
            if (this.blockHeader_ != null) {
                codedOutputStream.writeMessage(2, getBlockHeader());
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.transactions_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.transactions_.get(i3));
            }
            if (this.blockHeader_ != null) {
                i2 += CodedOutputStream.computeMessageSize(2, getBlockHeader());
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Block)) {
                return super.equals(obj);
            }
            Block block = (Block) obj;
            boolean z = getTransactionsList().equals(block.getTransactionsList()) && hasBlockHeader() == block.hasBlockHeader();
            if (!hasBlockHeader() ? z : !(!z || !getBlockHeader().equals(block.getBlockHeader()))) {
                if (this.unknownFields.equals(block.unknownFields)) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getTransactionsCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getTransactionsList().hashCode();
            }
            if (hasBlockHeader()) {
                hashCode = (((hashCode * 37) + 2) * 53) + getBlockHeader().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Block parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Block parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Block parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Block parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Block parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Block parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Block parseFrom(InputStream inputStream) throws IOException {
            return (Block) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Block parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Block) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Block parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Block) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Block parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Block) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Block parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Block) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Block parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Block) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Block block) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(block);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockOrBuilder {
            private int bitField0_;
            private SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> blockHeaderBuilder_;
            private BlockHeader blockHeader_;
            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> transactionsBuilder_;
            private List<Transaction> transactions_;

            @Override
            public boolean hasBlockHeader() {
                return (this.blockHeaderBuilder_ == null && this.blockHeader_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Block_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Block_fieldAccessorTable.ensureFieldAccessorsInitialized(Block.class, Builder.class);
            }

            private Builder() {
                this.transactions_ = Collections.emptyList();
                this.blockHeader_ = null;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.transactions_ = Collections.emptyList();
                this.blockHeader_ = null;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Block.alwaysUseFieldBuilders) {
                    getTransactionsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                if (this.blockHeaderBuilder_ == null) {
                    this.blockHeader_ = null;
                } else {
                    this.blockHeader_ = null;
                    this.blockHeaderBuilder_ = null;
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Block_descriptor;
            }

            @Override
            public Block getDefaultInstanceForType() {
                return Block.getDefaultInstance();
            }

            @Override
            public Block build() {
                Block buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Block buildPartial() {
                Block block = new Block(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                        this.bitField0_ &= -2;
                    }
                    block.transactions_ = this.transactions_;
                } else {
                    block.transactions_ = repeatedFieldBuilderV3.build();
                }
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 == null) {
                    block.blockHeader_ = this.blockHeader_;
                } else {
                    block.blockHeader_ = singleFieldBuilderV3.build();
                }
                block.bitField0_ = 0;
                onBuilt();
                return block;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Block) {
                    return mergeFrom((Block) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Block block) {
                if (block == Block.getDefaultInstance()) {
                    return this;
                }
                if (this.transactionsBuilder_ == null) {
                    if (!block.transactions_.isEmpty()) {
                        if (this.transactions_.isEmpty()) {
                            this.transactions_ = block.transactions_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureTransactionsIsMutable();
                            this.transactions_.addAll(block.transactions_);
                        }
                        onChanged();
                    }
                } else if (!block.transactions_.isEmpty()) {
                    if (!this.transactionsBuilder_.isEmpty()) {
                        this.transactionsBuilder_.addAllMessages(block.transactions_);
                    } else {
                        this.transactionsBuilder_.dispose();
                        this.transactionsBuilder_ = null;
                        this.transactions_ = block.transactions_;
                        this.bitField0_ &= -2;
                        this.transactionsBuilder_ = Block.alwaysUseFieldBuilders ? getTransactionsFieldBuilder() : null;
                    }
                }
                if (block.hasBlockHeader()) {
                    mergeBlockHeader(block.getBlockHeader());
                }
                mergeUnknownFields(block.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Block.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Block.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Block$Builder");
            }

            private void ensureTransactionsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.transactions_ = new ArrayList(this.transactions_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<Transaction> getTransactionsList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.transactions_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getTransactionsCount() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Transaction getTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, transaction);
                }
                return this;
            }

            public Builder setTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addTransactions(Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(transaction);
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, transaction);
                }
                return this;
            }

            public Builder addTransactions(Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllTransactions(Iterable<? extends Transaction> iterable) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.transactions_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearTransactions() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Transaction.Builder getTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().getBuilder(i);
            }

            @Override
            public TransactionOrBuilder getTransactionsOrBuilder(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.transactions_);
            }

            public Transaction.Builder addTransactionsBuilder() {
                return getTransactionsFieldBuilder().addBuilder(Transaction.getDefaultInstance());
            }

            public Transaction.Builder addTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().addBuilder(i, Transaction.getDefaultInstance());
            }

            public List<Transaction.Builder> getTransactionsBuilderList() {
                return getTransactionsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> getTransactionsFieldBuilder() {
                if (this.transactionsBuilder_ == null) {
                    this.transactionsBuilder_ = new RepeatedFieldBuilderV3<>(this.transactions_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.transactions_ = null;
                }
                return this.transactionsBuilder_;
            }

            @Override
            public BlockHeader getBlockHeader() {
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockHeader blockHeader = this.blockHeader_;
                    return blockHeader == null ? BlockHeader.getDefaultInstance() : blockHeader;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setBlockHeader(BlockHeader blockHeader) {
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockHeader.getClass();
                    this.blockHeader_ = blockHeader;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(blockHeader);
                }
                return this;
            }

            public Builder setBlockHeader(BlockHeader.Builder builder) {
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.blockHeader_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeBlockHeader(BlockHeader blockHeader) {
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockHeader blockHeader2 = this.blockHeader_;
                    if (blockHeader2 != null) {
                        this.blockHeader_ = BlockHeader.newBuilder(blockHeader2).mergeFrom(blockHeader).buildPartial();
                    } else {
                        this.blockHeader_ = blockHeader;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(blockHeader);
                }
                return this;
            }

            public Builder clearBlockHeader() {
                if (this.blockHeaderBuilder_ == null) {
                    this.blockHeader_ = null;
                    onChanged();
                } else {
                    this.blockHeader_ = null;
                    this.blockHeaderBuilder_ = null;
                }
                return this;
            }

            public BlockHeader.Builder getBlockHeaderBuilder() {
                onChanged();
                return getBlockHeaderFieldBuilder().getBuilder();
            }

            @Override
            public BlockHeaderOrBuilder getBlockHeaderOrBuilder() {
                SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> singleFieldBuilderV3 = this.blockHeaderBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                BlockHeader blockHeader = this.blockHeader_;
                return blockHeader == null ? BlockHeader.getDefaultInstance() : blockHeader;
            }

            private SingleFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> getBlockHeaderFieldBuilder() {
                if (this.blockHeaderBuilder_ == null) {
                    this.blockHeaderBuilder_ = new SingleFieldBuilderV3<>(getBlockHeader(), getParentForChildren(), isClean());
                    this.blockHeader_ = null;
                }
                return this.blockHeaderBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class ChainInventory extends GeneratedMessageV3 implements ChainInventoryOrBuilder {
        public static final int IDS_FIELD_NUMBER = 1;
        public static final int REMAIN_NUM_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private List<BlockId> ids_;
        private byte memoizedIsInitialized;
        private long remainNum_;
        private static final ChainInventory DEFAULT_INSTANCE = new ChainInventory();
        private static final Parser<ChainInventory> PARSER = new AbstractParser<ChainInventory>() {
            @Override
            public ChainInventory parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new ChainInventory(codedInputStream, extensionRegistryLite);
            }
        };

        public interface BlockIdOrBuilder extends MessageOrBuilder {
            ByteString getHash();

            long getNumber();
        }

        public static ChainInventory getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<ChainInventory> parser() {
            return PARSER;
        }

        @Override
        public ChainInventory getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<BlockId> getIdsList() {
            return this.ids_;
        }

        @Override
        public List<? extends BlockIdOrBuilder> getIdsOrBuilderList() {
            return this.ids_;
        }

        @Override
        public Parser<ChainInventory> getParserForType() {
            return PARSER;
        }

        @Override
        public long getRemainNum() {
            return this.remainNum_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private ChainInventory(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private ChainInventory() {
            this.memoizedIsInitialized = (byte) -1;
            this.ids_ = Collections.emptyList();
            this.remainNum_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ChainInventory(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                if (!(z2 & true)) {
                                    this.ids_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.ids_.add((BlockId) codedInputStream.readMessage(BlockId.parser(), extensionRegistryLite));
                            } else if (readTag != 16) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.remainNum_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.ids_ = Collections.unmodifiableList(this.ids_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_ChainInventory_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_ChainInventory_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainInventory.class, Builder.class);
        }

        public static final class BlockId extends GeneratedMessageV3 implements BlockIdOrBuilder {
            public static final int HASH_FIELD_NUMBER = 1;
            public static final int NUMBER_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private ByteString hash_;
            private byte memoizedIsInitialized;
            private long number_;
            private static final BlockId DEFAULT_INSTANCE = new BlockId();
            private static final Parser<BlockId> PARSER = new AbstractParser<BlockId>() {
                @Override
                public BlockId parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new BlockId(codedInputStream, extensionRegistryLite);
                }
            };

            public static BlockId getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<BlockId> parser() {
                return PARSER;
            }

            @Override
            public BlockId getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public ByteString getHash() {
                return this.hash_;
            }

            @Override
            public long getNumber() {
                return this.number_;
            }

            @Override
            public Parser<BlockId> getParserForType() {
                return PARSER;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private BlockId(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private BlockId() {
                this.memoizedIsInitialized = (byte) -1;
                this.hash_ = ByteString.EMPTY;
                this.number_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private BlockId(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.hash_ = codedInputStream.readBytes();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.number_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_ChainInventory_BlockId_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_ChainInventory_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.hash_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.hash_);
                }
                long j = this.number_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.hash_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.hash_) : 0;
                long j = this.number_;
                if (j != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
                }
                int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof BlockId)) {
                    return super.equals(obj);
                }
                BlockId blockId = (BlockId) obj;
                return getHash().equals(blockId.getHash()) && getNumber() == blockId.getNumber() && this.unknownFields.equals(blockId.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getHash().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getNumber())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static BlockId parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static BlockId parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static BlockId parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static BlockId parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static BlockId parseFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static BlockId parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(BlockId blockId) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockId);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockIdOrBuilder {
                private ByteString hash_;
                private long number_;

                @Override
                public ByteString getHash() {
                    return this.hash_;
                }

                @Override
                public long getNumber() {
                    return this.number_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_ChainInventory_BlockId_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_ChainInventory_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
                }

                private Builder() {
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = BlockId.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.hash_ = ByteString.EMPTY;
                    this.number_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_ChainInventory_BlockId_descriptor;
                }

                @Override
                public BlockId getDefaultInstanceForType() {
                    return BlockId.getDefaultInstance();
                }

                @Override
                public BlockId build() {
                    BlockId buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public BlockId buildPartial() {
                    BlockId blockId = new BlockId(this);
                    blockId.hash_ = this.hash_;
                    blockId.number_ = this.number_;
                    onBuilt();
                    return blockId;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof BlockId) {
                        return mergeFrom((BlockId) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(BlockId blockId) {
                    if (blockId == BlockId.getDefaultInstance()) {
                        return this;
                    }
                    if (blockId.getHash() != ByteString.EMPTY) {
                        setHash(blockId.getHash());
                    }
                    if (blockId.getNumber() != 0) {
                        setNumber(blockId.getNumber());
                    }
                    mergeUnknownFields(blockId.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.ChainInventory.BlockId.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.ChainInventory.BlockId.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$ChainInventory$BlockId$Builder");
                }

                public Builder setHash(ByteString byteString) {
                    byteString.getClass();
                    this.hash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearHash() {
                    this.hash_ = BlockId.getDefaultInstance().getHash();
                    onChanged();
                    return this;
                }

                public Builder setNumber(long j) {
                    this.number_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearNumber() {
                    this.number_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public int getIdsCount() {
            return this.ids_.size();
        }

        @Override
        public BlockId getIds(int i) {
            return this.ids_.get(i);
        }

        @Override
        public BlockIdOrBuilder getIdsOrBuilder(int i) {
            return this.ids_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.ids_.size(); i++) {
                codedOutputStream.writeMessage(1, this.ids_.get(i));
            }
            long j = this.remainNum_;
            if (j != 0) {
                codedOutputStream.writeInt64(2, j);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.ids_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.ids_.get(i3));
            }
            long j = this.remainNum_;
            if (j != 0) {
                i2 += CodedOutputStream.computeInt64Size(2, j);
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof ChainInventory)) {
                return super.equals(obj);
            }
            ChainInventory chainInventory = (ChainInventory) obj;
            return getIdsList().equals(chainInventory.getIdsList()) && getRemainNum() == chainInventory.getRemainNum() && this.unknownFields.equals(chainInventory.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getIdsCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getIdsList().hashCode();
            }
            int hashLong = (((((hashCode * 37) + 2) * 53) + Internal.hashLong(getRemainNum())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashLong;
            return hashLong;
        }

        public static ChainInventory parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static ChainInventory parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static ChainInventory parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static ChainInventory parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static ChainInventory parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static ChainInventory parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static ChainInventory parseFrom(InputStream inputStream) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static ChainInventory parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ChainInventory parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static ChainInventory parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static ChainInventory parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static ChainInventory parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (ChainInventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(ChainInventory chainInventory) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(chainInventory);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ChainInventoryOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> idsBuilder_;
            private List<BlockId> ids_;
            private long remainNum_;

            @Override
            public long getRemainNum() {
                return this.remainNum_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_ChainInventory_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_ChainInventory_fieldAccessorTable.ensureFieldAccessorsInitialized(ChainInventory.class, Builder.class);
            }

            private Builder() {
                this.ids_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.ids_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ChainInventory.alwaysUseFieldBuilders) {
                    getIdsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ids_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                this.remainNum_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_ChainInventory_descriptor;
            }

            @Override
            public ChainInventory getDefaultInstanceForType() {
                return ChainInventory.getDefaultInstance();
            }

            @Override
            public ChainInventory build() {
                ChainInventory buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public ChainInventory buildPartial() {
                ChainInventory chainInventory = new ChainInventory(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.ids_ = Collections.unmodifiableList(this.ids_);
                        this.bitField0_ &= -2;
                    }
                    chainInventory.ids_ = this.ids_;
                } else {
                    chainInventory.ids_ = repeatedFieldBuilderV3.build();
                }
                chainInventory.remainNum_ = this.remainNum_;
                chainInventory.bitField0_ = 0;
                onBuilt();
                return chainInventory;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof ChainInventory) {
                    return mergeFrom((ChainInventory) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(ChainInventory chainInventory) {
                if (chainInventory == ChainInventory.getDefaultInstance()) {
                    return this;
                }
                if (this.idsBuilder_ == null) {
                    if (!chainInventory.ids_.isEmpty()) {
                        if (this.ids_.isEmpty()) {
                            this.ids_ = chainInventory.ids_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureIdsIsMutable();
                            this.ids_.addAll(chainInventory.ids_);
                        }
                        onChanged();
                    }
                } else if (!chainInventory.ids_.isEmpty()) {
                    if (!this.idsBuilder_.isEmpty()) {
                        this.idsBuilder_.addAllMessages(chainInventory.ids_);
                    } else {
                        this.idsBuilder_.dispose();
                        this.idsBuilder_ = null;
                        this.ids_ = chainInventory.ids_;
                        this.bitField0_ &= -2;
                        this.idsBuilder_ = ChainInventory.alwaysUseFieldBuilders ? getIdsFieldBuilder() : null;
                    }
                }
                if (chainInventory.getRemainNum() != 0) {
                    setRemainNum(chainInventory.getRemainNum());
                }
                mergeUnknownFields(chainInventory.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.ChainInventory.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.ChainInventory.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$ChainInventory$Builder");
            }

            private void ensureIdsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.ids_ = new ArrayList(this.ids_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<BlockId> getIdsList() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.ids_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getIdsCount() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public BlockId getIds(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setIds(int i, BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.set(i, blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, blockId);
                }
                return this;
            }

            public Builder setIds(int i, BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addIds(BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.add(blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(blockId);
                }
                return this;
            }

            public Builder addIds(int i, BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.add(i, blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, blockId);
                }
                return this;
            }

            public Builder addIds(BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addIds(int i, BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllIds(Iterable<? extends BlockId> iterable) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.ids_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearIds() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ids_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeIds(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public BlockId.Builder getIdsBuilder(int i) {
                return getIdsFieldBuilder().getBuilder(i);
            }

            @Override
            public BlockIdOrBuilder getIdsOrBuilder(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends BlockIdOrBuilder> getIdsOrBuilderList() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.ids_);
            }

            public BlockId.Builder addIdsBuilder() {
                return getIdsFieldBuilder().addBuilder(BlockId.getDefaultInstance());
            }

            public BlockId.Builder addIdsBuilder(int i) {
                return getIdsFieldBuilder().addBuilder(i, BlockId.getDefaultInstance());
            }

            public List<BlockId.Builder> getIdsBuilderList() {
                return getIdsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> getIdsFieldBuilder() {
                if (this.idsBuilder_ == null) {
                    this.idsBuilder_ = new RepeatedFieldBuilderV3<>(this.ids_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.ids_ = null;
                }
                return this.idsBuilder_;
            }

            public Builder setRemainNum(long j) {
                this.remainNum_ = j;
                onChanged();
                return this;
            }

            public Builder clearRemainNum() {
                this.remainNum_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class BlockInventory extends GeneratedMessageV3 implements BlockInventoryOrBuilder {
        public static final int IDS_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private List<BlockId> ids_;
        private byte memoizedIsInitialized;
        private int type_;
        private static final BlockInventory DEFAULT_INSTANCE = new BlockInventory();
        private static final Parser<BlockInventory> PARSER = new AbstractParser<BlockInventory>() {
            @Override
            public BlockInventory parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new BlockInventory(codedInputStream, extensionRegistryLite);
            }
        };

        public interface BlockIdOrBuilder extends MessageOrBuilder {
            ByteString getHash();

            long getNumber();
        }

        public static BlockInventory getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<BlockInventory> parser() {
            return PARSER;
        }

        @Override
        public BlockInventory getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<BlockId> getIdsList() {
            return this.ids_;
        }

        @Override
        public List<? extends BlockIdOrBuilder> getIdsOrBuilderList() {
            return this.ids_;
        }

        @Override
        public Parser<BlockInventory> getParserForType() {
            return PARSER;
        }

        @Override
        public int getTypeValue() {
            return this.type_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private BlockInventory(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private BlockInventory() {
            this.memoizedIsInitialized = (byte) -1;
            this.ids_ = Collections.emptyList();
            this.type_ = 0;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private BlockInventory(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 10) {
                                if (!(z2 & true)) {
                                    this.ids_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.ids_.add((BlockId) codedInputStream.readMessage(BlockId.parser(), extensionRegistryLite));
                            } else if (readTag != 16) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.type_ = codedInputStream.readEnum();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.ids_ = Collections.unmodifiableList(this.ids_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_BlockInventory_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_BlockInventory_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockInventory.class, Builder.class);
        }

        public enum Type implements ProtocolMessageEnum {
            SYNC(0),
            ADVTISE(1),
            FETCH(2),
            UNRECOGNIZED(-1);
            
            public static final int ADVTISE_VALUE = 1;
            public static final int FETCH_VALUE = 2;
            public static final int SYNC_VALUE = 0;
            private final int value;
            private static final Internal.EnumLiteMap<Type> internalValueMap = new Internal.EnumLiteMap<Type>() {
                @Override
                public Type findValueByNumber(int i) {
                    return Type.forNumber(i);
                }
            };
            private static final Type[] VALUES = values();

            public static Type forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            return null;
                        }
                        return FETCH;
                    }
                    return ADVTISE;
                }
                return SYNC;
            }

            public static Internal.EnumLiteMap<Type> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static Type valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return BlockInventory.getDescriptor().getEnumTypes().get(0);
            }

            public static Type valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            Type(int i) {
                this.value = i;
            }
        }

        public static final class BlockId extends GeneratedMessageV3 implements BlockIdOrBuilder {
            public static final int HASH_FIELD_NUMBER = 1;
            public static final int NUMBER_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private ByteString hash_;
            private byte memoizedIsInitialized;
            private long number_;
            private static final BlockId DEFAULT_INSTANCE = new BlockId();
            private static final Parser<BlockId> PARSER = new AbstractParser<BlockId>() {
                @Override
                public BlockId parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new BlockId(codedInputStream, extensionRegistryLite);
                }
            };

            public static BlockId getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<BlockId> parser() {
                return PARSER;
            }

            @Override
            public BlockId getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public ByteString getHash() {
                return this.hash_;
            }

            @Override
            public long getNumber() {
                return this.number_;
            }

            @Override
            public Parser<BlockId> getParserForType() {
                return PARSER;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private BlockId(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private BlockId() {
                this.memoizedIsInitialized = (byte) -1;
                this.hash_ = ByteString.EMPTY;
                this.number_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private BlockId(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.hash_ = codedInputStream.readBytes();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.number_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_BlockInventory_BlockId_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_BlockInventory_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.hash_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.hash_);
                }
                long j = this.number_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.hash_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.hash_) : 0;
                long j = this.number_;
                if (j != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
                }
                int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof BlockId)) {
                    return super.equals(obj);
                }
                BlockId blockId = (BlockId) obj;
                return getHash().equals(blockId.getHash()) && getNumber() == blockId.getNumber() && this.unknownFields.equals(blockId.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getHash().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getNumber())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static BlockId parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static BlockId parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static BlockId parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static BlockId parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static BlockId parseFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static BlockId parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(BlockId blockId) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockId);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockIdOrBuilder {
                private ByteString hash_;
                private long number_;

                @Override
                public ByteString getHash() {
                    return this.hash_;
                }

                @Override
                public long getNumber() {
                    return this.number_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_BlockInventory_BlockId_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_BlockInventory_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
                }

                private Builder() {
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = BlockId.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.hash_ = ByteString.EMPTY;
                    this.number_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_BlockInventory_BlockId_descriptor;
                }

                @Override
                public BlockId getDefaultInstanceForType() {
                    return BlockId.getDefaultInstance();
                }

                @Override
                public BlockId build() {
                    BlockId buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public BlockId buildPartial() {
                    BlockId blockId = new BlockId(this);
                    blockId.hash_ = this.hash_;
                    blockId.number_ = this.number_;
                    onBuilt();
                    return blockId;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof BlockId) {
                        return mergeFrom((BlockId) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(BlockId blockId) {
                    if (blockId == BlockId.getDefaultInstance()) {
                        return this;
                    }
                    if (blockId.getHash() != ByteString.EMPTY) {
                        setHash(blockId.getHash());
                    }
                    if (blockId.getNumber() != 0) {
                        setNumber(blockId.getNumber());
                    }
                    mergeUnknownFields(blockId.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.BlockInventory.BlockId.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.BlockInventory.BlockId.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$BlockInventory$BlockId$Builder");
                }

                public Builder setHash(ByteString byteString) {
                    byteString.getClass();
                    this.hash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearHash() {
                    this.hash_ = BlockId.getDefaultInstance().getHash();
                    onChanged();
                    return this;
                }

                public Builder setNumber(long j) {
                    this.number_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearNumber() {
                    this.number_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public int getIdsCount() {
            return this.ids_.size();
        }

        @Override
        public BlockId getIds(int i) {
            return this.ids_.get(i);
        }

        @Override
        public BlockIdOrBuilder getIdsOrBuilder(int i) {
            return this.ids_.get(i);
        }

        @Override
        public Type getType() {
            Type valueOf = Type.valueOf(this.type_);
            return valueOf == null ? Type.UNRECOGNIZED : valueOf;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            for (int i = 0; i < this.ids_.size(); i++) {
                codedOutputStream.writeMessage(1, this.ids_.get(i));
            }
            if (this.type_ != Type.SYNC.getNumber()) {
                codedOutputStream.writeEnum(2, this.type_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.ids_.size(); i3++) {
                i2 += CodedOutputStream.computeMessageSize(1, this.ids_.get(i3));
            }
            if (this.type_ != Type.SYNC.getNumber()) {
                i2 += CodedOutputStream.computeEnumSize(2, this.type_);
            }
            int serializedSize = i2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof BlockInventory)) {
                return super.equals(obj);
            }
            BlockInventory blockInventory = (BlockInventory) obj;
            return getIdsList().equals(blockInventory.getIdsList()) && this.type_ == blockInventory.type_ && this.unknownFields.equals(blockInventory.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (getIdsCount() > 0) {
                hashCode = (((hashCode * 37) + 1) * 53) + getIdsList().hashCode();
            }
            int hashCode2 = (((((hashCode * 37) + 2) * 53) + this.type_) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static BlockInventory parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static BlockInventory parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static BlockInventory parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static BlockInventory parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static BlockInventory parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static BlockInventory parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static BlockInventory parseFrom(InputStream inputStream) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static BlockInventory parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static BlockInventory parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static BlockInventory parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static BlockInventory parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static BlockInventory parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (BlockInventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(BlockInventory blockInventory) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockInventory);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockInventoryOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> idsBuilder_;
            private List<BlockId> ids_;
            private int type_;

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_BlockInventory_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_BlockInventory_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockInventory.class, Builder.class);
            }

            private Builder() {
                this.ids_ = Collections.emptyList();
                this.type_ = 0;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.ids_ = Collections.emptyList();
                this.type_ = 0;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (BlockInventory.alwaysUseFieldBuilders) {
                    getIdsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ids_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                this.type_ = 0;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_BlockInventory_descriptor;
            }

            @Override
            public BlockInventory getDefaultInstanceForType() {
                return BlockInventory.getDefaultInstance();
            }

            @Override
            public BlockInventory build() {
                BlockInventory buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public BlockInventory buildPartial() {
                BlockInventory blockInventory = new BlockInventory(this);
                int i = this.bitField0_;
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((i & 1) == 1) {
                        this.ids_ = Collections.unmodifiableList(this.ids_);
                        this.bitField0_ &= -2;
                    }
                    blockInventory.ids_ = this.ids_;
                } else {
                    blockInventory.ids_ = repeatedFieldBuilderV3.build();
                }
                blockInventory.type_ = this.type_;
                blockInventory.bitField0_ = 0;
                onBuilt();
                return blockInventory;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof BlockInventory) {
                    return mergeFrom((BlockInventory) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(BlockInventory blockInventory) {
                if (blockInventory == BlockInventory.getDefaultInstance()) {
                    return this;
                }
                if (this.idsBuilder_ == null) {
                    if (!blockInventory.ids_.isEmpty()) {
                        if (this.ids_.isEmpty()) {
                            this.ids_ = blockInventory.ids_;
                            this.bitField0_ &= -2;
                        } else {
                            ensureIdsIsMutable();
                            this.ids_.addAll(blockInventory.ids_);
                        }
                        onChanged();
                    }
                } else if (!blockInventory.ids_.isEmpty()) {
                    if (!this.idsBuilder_.isEmpty()) {
                        this.idsBuilder_.addAllMessages(blockInventory.ids_);
                    } else {
                        this.idsBuilder_.dispose();
                        this.idsBuilder_ = null;
                        this.ids_ = blockInventory.ids_;
                        this.bitField0_ &= -2;
                        this.idsBuilder_ = BlockInventory.alwaysUseFieldBuilders ? getIdsFieldBuilder() : null;
                    }
                }
                if (blockInventory.type_ != 0) {
                    setTypeValue(blockInventory.getTypeValue());
                }
                mergeUnknownFields(blockInventory.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.BlockInventory.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.BlockInventory.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$BlockInventory$Builder");
            }

            private void ensureIdsIsMutable() {
                if ((this.bitField0_ & 1) != 1) {
                    this.ids_ = new ArrayList(this.ids_);
                    this.bitField0_ |= 1;
                }
            }

            @Override
            public List<BlockId> getIdsList() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.ids_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getIdsCount() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public BlockId getIds(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setIds(int i, BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.set(i, blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, blockId);
                }
                return this;
            }

            public Builder setIds(int i, BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addIds(BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.add(blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(blockId);
                }
                return this;
            }

            public Builder addIds(int i, BlockId blockId) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockId.getClass();
                    ensureIdsIsMutable();
                    this.ids_.add(i, blockId);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, blockId);
                }
                return this;
            }

            public Builder addIds(BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addIds(int i, BlockId.Builder builder) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllIds(Iterable<? extends BlockId> iterable) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.ids_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearIds() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.ids_ = Collections.emptyList();
                    this.bitField0_ &= -2;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeIds(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureIdsIsMutable();
                    this.ids_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public BlockId.Builder getIdsBuilder(int i) {
                return getIdsFieldBuilder().getBuilder(i);
            }

            @Override
            public BlockIdOrBuilder getIdsOrBuilder(int i) {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.ids_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends BlockIdOrBuilder> getIdsOrBuilderList() {
                RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> repeatedFieldBuilderV3 = this.idsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.ids_);
            }

            public BlockId.Builder addIdsBuilder() {
                return getIdsFieldBuilder().addBuilder(BlockId.getDefaultInstance());
            }

            public BlockId.Builder addIdsBuilder(int i) {
                return getIdsFieldBuilder().addBuilder(i, BlockId.getDefaultInstance());
            }

            public List<BlockId.Builder> getIdsBuilderList() {
                return getIdsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> getIdsFieldBuilder() {
                if (this.idsBuilder_ == null) {
                    this.idsBuilder_ = new RepeatedFieldBuilderV3<>(this.ids_, (this.bitField0_ & 1) == 1, getParentForChildren(), isClean());
                    this.ids_ = null;
                }
                return this.idsBuilder_;
            }

            public Builder setTypeValue(int i) {
                this.type_ = i;
                onChanged();
                return this;
            }

            @Override
            public Type getType() {
                Type valueOf = Type.valueOf(this.type_);
                return valueOf == null ? Type.UNRECOGNIZED : valueOf;
            }

            public Builder setType(Type type) {
                type.getClass();
                this.type_ = type.getNumber();
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.type_ = 0;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Inventory extends GeneratedMessageV3 implements InventoryOrBuilder {
        public static final int IDS_FIELD_NUMBER = 2;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private List<ByteString> ids_;
        private byte memoizedIsInitialized;
        private int type_;
        private static final Inventory DEFAULT_INSTANCE = new Inventory();
        private static final Parser<Inventory> PARSER = new AbstractParser<Inventory>() {
            @Override
            public Inventory parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Inventory(codedInputStream, extensionRegistryLite);
            }
        };

        public static Inventory getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Inventory> parser() {
            return PARSER;
        }

        @Override
        public Inventory getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<ByteString> getIdsList() {
            return this.ids_;
        }

        @Override
        public Parser<Inventory> getParserForType() {
            return PARSER;
        }

        @Override
        public int getTypeValue() {
            return this.type_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Inventory(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Inventory() {
            this.memoizedIsInitialized = (byte) -1;
            this.type_ = 0;
            this.ids_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Inventory(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.type_ = codedInputStream.readEnum();
                            } else if (readTag != 18) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.ids_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.ids_.add(codedInputStream.readBytes());
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.ids_ = Collections.unmodifiableList(this.ids_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Inventory_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Inventory_fieldAccessorTable.ensureFieldAccessorsInitialized(Inventory.class, Builder.class);
        }

        public enum InventoryType implements ProtocolMessageEnum {
            TRX(0),
            BLOCK(1),
            UNRECOGNIZED(-1);
            
            public static final int BLOCK_VALUE = 1;
            public static final int TRX_VALUE = 0;
            private final int value;
            private static final Internal.EnumLiteMap<InventoryType> internalValueMap = new Internal.EnumLiteMap<InventoryType>() {
                @Override
                public InventoryType findValueByNumber(int i) {
                    return InventoryType.forNumber(i);
                }
            };
            private static final InventoryType[] VALUES = values();

            public static InventoryType forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        return null;
                    }
                    return BLOCK;
                }
                return TRX;
            }

            public static Internal.EnumLiteMap<InventoryType> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static InventoryType valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return Inventory.getDescriptor().getEnumTypes().get(0);
            }

            public static InventoryType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            InventoryType(int i) {
                this.value = i;
            }
        }

        @Override
        public InventoryType getType() {
            InventoryType valueOf = InventoryType.valueOf(this.type_);
            return valueOf == null ? InventoryType.UNRECOGNIZED : valueOf;
        }

        @Override
        public int getIdsCount() {
            return this.ids_.size();
        }

        @Override
        public ByteString getIds(int i) {
            return this.ids_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.type_ != InventoryType.TRX.getNumber()) {
                codedOutputStream.writeEnum(1, this.type_);
            }
            for (int i = 0; i < this.ids_.size(); i++) {
                codedOutputStream.writeBytes(2, this.ids_.get(i));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeEnumSize = this.type_ != InventoryType.TRX.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.ids_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.ids_.get(i3));
            }
            int size = computeEnumSize + i2 + getIdsList().size() + this.unknownFields.getSerializedSize();
            this.memoizedSize = size;
            return size;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Inventory)) {
                return super.equals(obj);
            }
            Inventory inventory = (Inventory) obj;
            return this.type_ == inventory.type_ && getIdsList().equals(inventory.getIdsList()) && this.unknownFields.equals(inventory.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_;
            if (getIdsCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getIdsList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Inventory parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Inventory parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Inventory parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Inventory parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Inventory parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Inventory parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Inventory parseFrom(InputStream inputStream) throws IOException {
            return (Inventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Inventory parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Inventory) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Inventory parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Inventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Inventory parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Inventory) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Inventory parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Inventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Inventory parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Inventory) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Inventory inventory) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(inventory);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements InventoryOrBuilder {
            private int bitField0_;
            private List<ByteString> ids_;
            private int type_;

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Inventory_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Inventory_fieldAccessorTable.ensureFieldAccessorsInitialized(Inventory.class, Builder.class);
            }

            private Builder() {
                this.type_ = 0;
                this.ids_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.type_ = 0;
                this.ids_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = Inventory.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.type_ = 0;
                this.ids_ = Collections.emptyList();
                this.bitField0_ &= -3;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Inventory_descriptor;
            }

            @Override
            public Inventory getDefaultInstanceForType() {
                return Inventory.getDefaultInstance();
            }

            @Override
            public Inventory build() {
                Inventory buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Inventory buildPartial() {
                Inventory inventory = new Inventory(this);
                inventory.type_ = this.type_;
                if ((this.bitField0_ & 2) == 2) {
                    this.ids_ = Collections.unmodifiableList(this.ids_);
                    this.bitField0_ &= -3;
                }
                inventory.ids_ = this.ids_;
                inventory.bitField0_ = 0;
                onBuilt();
                return inventory;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Inventory) {
                    return mergeFrom((Inventory) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Inventory inventory) {
                if (inventory == Inventory.getDefaultInstance()) {
                    return this;
                }
                if (inventory.type_ != 0) {
                    setTypeValue(inventory.getTypeValue());
                }
                if (!inventory.ids_.isEmpty()) {
                    if (this.ids_.isEmpty()) {
                        this.ids_ = inventory.ids_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureIdsIsMutable();
                        this.ids_.addAll(inventory.ids_);
                    }
                    onChanged();
                }
                mergeUnknownFields(inventory.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Inventory.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Inventory.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Inventory$Builder");
            }

            public Builder setTypeValue(int i) {
                this.type_ = i;
                onChanged();
                return this;
            }

            @Override
            public InventoryType getType() {
                InventoryType valueOf = InventoryType.valueOf(this.type_);
                return valueOf == null ? InventoryType.UNRECOGNIZED : valueOf;
            }

            public Builder setType(InventoryType inventoryType) {
                inventoryType.getClass();
                this.type_ = inventoryType.getNumber();
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.type_ = 0;
                onChanged();
                return this;
            }

            private void ensureIdsIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.ids_ = new ArrayList(this.ids_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<ByteString> getIdsList() {
                return Collections.unmodifiableList(this.ids_);
            }

            @Override
            public int getIdsCount() {
                return this.ids_.size();
            }

            @Override
            public ByteString getIds(int i) {
                return this.ids_.get(i);
            }

            public Builder setIds(int i, ByteString byteString) {
                byteString.getClass();
                ensureIdsIsMutable();
                this.ids_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addIds(ByteString byteString) {
                byteString.getClass();
                ensureIdsIsMutable();
                this.ids_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllIds(Iterable<? extends ByteString> iterable) {
                ensureIdsIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.ids_);
                onChanged();
                return this;
            }

            public Builder clearIds() {
                this.ids_ = Collections.emptyList();
                this.bitField0_ &= -3;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class Items extends GeneratedMessageV3 implements ItemsOrBuilder {
        public static final int BLOCKS_FIELD_NUMBER = 2;
        public static final int BLOCK_HEADERS_FIELD_NUMBER = 3;
        private static final Items DEFAULT_INSTANCE = new Items();
        private static final Parser<Items> PARSER = new AbstractParser<Items>() {
            @Override
            public Items parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new Items(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int TRANSACTIONS_FIELD_NUMBER = 4;
        public static final int TYPE_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private List<BlockHeader> blockHeaders_;
        private List<Block> blocks_;
        private byte memoizedIsInitialized;
        private List<Transaction> transactions_;
        private int type_;

        public static Items getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<Items> parser() {
            return PARSER;
        }

        @Override
        public List<BlockHeader> getBlockHeadersList() {
            return this.blockHeaders_;
        }

        @Override
        public List<? extends BlockHeaderOrBuilder> getBlockHeadersOrBuilderList() {
            return this.blockHeaders_;
        }

        @Override
        public List<Block> getBlocksList() {
            return this.blocks_;
        }

        @Override
        public List<? extends BlockOrBuilder> getBlocksOrBuilderList() {
            return this.blocks_;
        }

        @Override
        public Items getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<Items> getParserForType() {
            return PARSER;
        }

        @Override
        public List<Transaction> getTransactionsList() {
            return this.transactions_;
        }

        @Override
        public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
            return this.transactions_;
        }

        @Override
        public int getTypeValue() {
            return this.type_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private Items(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private Items() {
            this.memoizedIsInitialized = (byte) -1;
            this.type_ = 0;
            this.blocks_ = Collections.emptyList();
            this.blockHeaders_ = Collections.emptyList();
            this.transactions_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Items(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag == 8) {
                                this.type_ = codedInputStream.readEnum();
                            } else if (readTag == 18) {
                                if (!(z2 & true)) {
                                    this.blocks_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.blocks_.add((Block) codedInputStream.readMessage(Block.parser(), extensionRegistryLite));
                            } else if (readTag == 26) {
                                if (!(z2 & true)) {
                                    this.blockHeaders_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.blockHeaders_.add((BlockHeader) codedInputStream.readMessage(BlockHeader.parser(), extensionRegistryLite));
                            } else if (readTag != 34) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                if (!(z2 & true)) {
                                    this.transactions_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.transactions_.add((Transaction) codedInputStream.readMessage(Transaction.parser(), extensionRegistryLite));
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.blocks_ = Collections.unmodifiableList(this.blocks_);
                    }
                    if (z2 & true) {
                        this.blockHeaders_ = Collections.unmodifiableList(this.blockHeaders_);
                    }
                    if (z2 & true) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_Items_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_Items_fieldAccessorTable.ensureFieldAccessorsInitialized(Items.class, Builder.class);
        }

        public enum ItemType implements ProtocolMessageEnum {
            ERR(0),
            TRX(1),
            BLOCK(2),
            BLOCKHEADER(3),
            UNRECOGNIZED(-1);
            
            public static final int BLOCKHEADER_VALUE = 3;
            public static final int BLOCK_VALUE = 2;
            public static final int ERR_VALUE = 0;
            public static final int TRX_VALUE = 1;
            private final int value;
            private static final Internal.EnumLiteMap<ItemType> internalValueMap = new Internal.EnumLiteMap<ItemType>() {
                @Override
                public ItemType findValueByNumber(int i) {
                    return ItemType.forNumber(i);
                }
            };
            private static final ItemType[] VALUES = values();

            public static ItemType forNumber(int i) {
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            if (i != 3) {
                                return null;
                            }
                            return BLOCKHEADER;
                        }
                        return BLOCK;
                    }
                    return TRX;
                }
                return ERR;
            }

            public static Internal.EnumLiteMap<ItemType> internalGetValueMap() {
                return internalValueMap;
            }

            @Override
            public final int getNumber() {
                if (this != UNRECOGNIZED) {
                    return this.value;
                }
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            }

            @Deprecated
            public static ItemType valueOf(int i) {
                return forNumber(i);
            }

            @Override
            public final Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(ordinal());
            }

            @Override
            public final Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final Descriptors.EnumDescriptor getDescriptor() {
                return Items.getDescriptor().getEnumTypes().get(0);
            }

            public static ItemType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
                if (enumValueDescriptor.getType() == getDescriptor()) {
                    return enumValueDescriptor.getIndex() == -1 ? UNRECOGNIZED : VALUES[enumValueDescriptor.getIndex()];
                }
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }

            ItemType(int i) {
                this.value = i;
            }
        }

        @Override
        public ItemType getType() {
            ItemType valueOf = ItemType.valueOf(this.type_);
            return valueOf == null ? ItemType.UNRECOGNIZED : valueOf;
        }

        @Override
        public int getBlocksCount() {
            return this.blocks_.size();
        }

        @Override
        public Block getBlocks(int i) {
            return this.blocks_.get(i);
        }

        @Override
        public BlockOrBuilder getBlocksOrBuilder(int i) {
            return this.blocks_.get(i);
        }

        @Override
        public int getBlockHeadersCount() {
            return this.blockHeaders_.size();
        }

        @Override
        public BlockHeader getBlockHeaders(int i) {
            return this.blockHeaders_.get(i);
        }

        @Override
        public BlockHeaderOrBuilder getBlockHeadersOrBuilder(int i) {
            return this.blockHeaders_.get(i);
        }

        @Override
        public int getTransactionsCount() {
            return this.transactions_.size();
        }

        @Override
        public Transaction getTransactions(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public TransactionOrBuilder getTransactionsOrBuilder(int i) {
            return this.transactions_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.type_ != ItemType.ERR.getNumber()) {
                codedOutputStream.writeEnum(1, this.type_);
            }
            for (int i = 0; i < this.blocks_.size(); i++) {
                codedOutputStream.writeMessage(2, this.blocks_.get(i));
            }
            for (int i2 = 0; i2 < this.blockHeaders_.size(); i2++) {
                codedOutputStream.writeMessage(3, this.blockHeaders_.get(i2));
            }
            for (int i3 = 0; i3 < this.transactions_.size(); i3++) {
                codedOutputStream.writeMessage(4, this.transactions_.get(i3));
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeEnumSize = this.type_ != ItemType.ERR.getNumber() ? CodedOutputStream.computeEnumSize(1, this.type_) : 0;
            for (int i2 = 0; i2 < this.blocks_.size(); i2++) {
                computeEnumSize += CodedOutputStream.computeMessageSize(2, this.blocks_.get(i2));
            }
            for (int i3 = 0; i3 < this.blockHeaders_.size(); i3++) {
                computeEnumSize += CodedOutputStream.computeMessageSize(3, this.blockHeaders_.get(i3));
            }
            for (int i4 = 0; i4 < this.transactions_.size(); i4++) {
                computeEnumSize += CodedOutputStream.computeMessageSize(4, this.transactions_.get(i4));
            }
            int serializedSize = computeEnumSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof Items)) {
                return super.equals(obj);
            }
            Items items = (Items) obj;
            return this.type_ == items.type_ && getBlocksList().equals(items.getBlocksList()) && getBlockHeadersList().equals(items.getBlockHeadersList()) && getTransactionsList().equals(items.getTransactionsList()) && this.unknownFields.equals(items.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.type_;
            if (getBlocksCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getBlocksList().hashCode();
            }
            if (getBlockHeadersCount() > 0) {
                hashCode = (((hashCode * 37) + 3) * 53) + getBlockHeadersList().hashCode();
            }
            if (getTransactionsCount() > 0) {
                hashCode = (((hashCode * 37) + 4) * 53) + getTransactionsList().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static Items parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static Items parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static Items parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static Items parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static Items parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static Items parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Items parseFrom(InputStream inputStream) throws IOException {
            return (Items) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static Items parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Items) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Items parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (Items) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static Items parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Items) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static Items parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (Items) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static Items parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (Items) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(Items items) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(items);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ItemsOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> blockHeadersBuilder_;
            private List<BlockHeader> blockHeaders_;
            private RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> blocksBuilder_;
            private List<Block> blocks_;
            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> transactionsBuilder_;
            private List<Transaction> transactions_;
            private int type_;

            @Override
            public int getTypeValue() {
                return this.type_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_Items_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_Items_fieldAccessorTable.ensureFieldAccessorsInitialized(Items.class, Builder.class);
            }

            private Builder() {
                this.type_ = 0;
                this.blocks_ = Collections.emptyList();
                this.blockHeaders_ = Collections.emptyList();
                this.transactions_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.type_ = 0;
                this.blocks_ = Collections.emptyList();
                this.blockHeaders_ = Collections.emptyList();
                this.transactions_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (Items.alwaysUseFieldBuilders) {
                    getBlocksFieldBuilder();
                    getBlockHeadersFieldBuilder();
                    getTransactionsFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.type_ = 0;
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.blocks_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV32 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    this.blockHeaders_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilderV32.clear();
                }
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV33 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                } else {
                    repeatedFieldBuilderV33.clear();
                }
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_Items_descriptor;
            }

            @Override
            public Items getDefaultInstanceForType() {
                return Items.getDefaultInstance();
            }

            @Override
            public Items build() {
                Items buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public Items buildPartial() {
                Items items = new Items(this);
                items.type_ = this.type_;
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.blocks_ = Collections.unmodifiableList(this.blocks_);
                        this.bitField0_ &= -3;
                    }
                    items.blocks_ = this.blocks_;
                } else {
                    items.blocks_ = repeatedFieldBuilderV3.build();
                }
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV32 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV32 == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.blockHeaders_ = Collections.unmodifiableList(this.blockHeaders_);
                        this.bitField0_ &= -5;
                    }
                    items.blockHeaders_ = this.blockHeaders_;
                } else {
                    items.blockHeaders_ = repeatedFieldBuilderV32.build();
                }
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV33 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV33 == null) {
                    if ((this.bitField0_ & 8) == 8) {
                        this.transactions_ = Collections.unmodifiableList(this.transactions_);
                        this.bitField0_ &= -9;
                    }
                    items.transactions_ = this.transactions_;
                } else {
                    items.transactions_ = repeatedFieldBuilderV33.build();
                }
                items.bitField0_ = 0;
                onBuilt();
                return items;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof Items) {
                    return mergeFrom((Items) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(Items items) {
                if (items == Items.getDefaultInstance()) {
                    return this;
                }
                if (items.type_ != 0) {
                    setTypeValue(items.getTypeValue());
                }
                if (this.blocksBuilder_ == null) {
                    if (!items.blocks_.isEmpty()) {
                        if (this.blocks_.isEmpty()) {
                            this.blocks_ = items.blocks_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureBlocksIsMutable();
                            this.blocks_.addAll(items.blocks_);
                        }
                        onChanged();
                    }
                } else if (!items.blocks_.isEmpty()) {
                    if (!this.blocksBuilder_.isEmpty()) {
                        this.blocksBuilder_.addAllMessages(items.blocks_);
                    } else {
                        this.blocksBuilder_.dispose();
                        this.blocksBuilder_ = null;
                        this.blocks_ = items.blocks_;
                        this.bitField0_ &= -3;
                        this.blocksBuilder_ = Items.alwaysUseFieldBuilders ? getBlocksFieldBuilder() : null;
                    }
                }
                if (this.blockHeadersBuilder_ == null) {
                    if (!items.blockHeaders_.isEmpty()) {
                        if (this.blockHeaders_.isEmpty()) {
                            this.blockHeaders_ = items.blockHeaders_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureBlockHeadersIsMutable();
                            this.blockHeaders_.addAll(items.blockHeaders_);
                        }
                        onChanged();
                    }
                } else if (!items.blockHeaders_.isEmpty()) {
                    if (!this.blockHeadersBuilder_.isEmpty()) {
                        this.blockHeadersBuilder_.addAllMessages(items.blockHeaders_);
                    } else {
                        this.blockHeadersBuilder_.dispose();
                        this.blockHeadersBuilder_ = null;
                        this.blockHeaders_ = items.blockHeaders_;
                        this.bitField0_ &= -5;
                        this.blockHeadersBuilder_ = Items.alwaysUseFieldBuilders ? getBlockHeadersFieldBuilder() : null;
                    }
                }
                if (this.transactionsBuilder_ == null) {
                    if (!items.transactions_.isEmpty()) {
                        if (this.transactions_.isEmpty()) {
                            this.transactions_ = items.transactions_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureTransactionsIsMutable();
                            this.transactions_.addAll(items.transactions_);
                        }
                        onChanged();
                    }
                } else if (!items.transactions_.isEmpty()) {
                    if (!this.transactionsBuilder_.isEmpty()) {
                        this.transactionsBuilder_.addAllMessages(items.transactions_);
                    } else {
                        this.transactionsBuilder_.dispose();
                        this.transactionsBuilder_ = null;
                        this.transactions_ = items.transactions_;
                        this.bitField0_ &= -9;
                        this.transactionsBuilder_ = Items.alwaysUseFieldBuilders ? getTransactionsFieldBuilder() : null;
                    }
                }
                mergeUnknownFields(items.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.Items.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.Items.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$Items$Builder");
            }

            public Builder setTypeValue(int i) {
                this.type_ = i;
                onChanged();
                return this;
            }

            @Override
            public ItemType getType() {
                ItemType valueOf = ItemType.valueOf(this.type_);
                return valueOf == null ? ItemType.UNRECOGNIZED : valueOf;
            }

            public Builder setType(ItemType itemType) {
                itemType.getClass();
                this.type_ = itemType.getNumber();
                onChanged();
                return this;
            }

            public Builder clearType() {
                this.type_ = 0;
                onChanged();
                return this;
            }

            private void ensureBlocksIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.blocks_ = new ArrayList(this.blocks_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<Block> getBlocksList() {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.blocks_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getBlocksCount() {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blocks_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Block getBlocks(int i) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blocks_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setBlocks(int i, Block block) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    block.getClass();
                    ensureBlocksIsMutable();
                    this.blocks_.set(i, block);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, block);
                }
                return this;
            }

            public Builder setBlocks(int i, Block.Builder builder) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlocksIsMutable();
                    this.blocks_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addBlocks(Block block) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    block.getClass();
                    ensureBlocksIsMutable();
                    this.blocks_.add(block);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(block);
                }
                return this;
            }

            public Builder addBlocks(int i, Block block) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    block.getClass();
                    ensureBlocksIsMutable();
                    this.blocks_.add(i, block);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, block);
                }
                return this;
            }

            public Builder addBlocks(Block.Builder builder) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlocksIsMutable();
                    this.blocks_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addBlocks(int i, Block.Builder builder) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlocksIsMutable();
                    this.blocks_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllBlocks(Iterable<? extends Block> iterable) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlocksIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.blocks_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearBlocks() {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.blocks_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeBlocks(int i) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlocksIsMutable();
                    this.blocks_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Block.Builder getBlocksBuilder(int i) {
                return getBlocksFieldBuilder().getBuilder(i);
            }

            @Override
            public BlockOrBuilder getBlocksOrBuilder(int i) {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blocks_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends BlockOrBuilder> getBlocksOrBuilderList() {
                RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> repeatedFieldBuilderV3 = this.blocksBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.blocks_);
            }

            public Block.Builder addBlocksBuilder() {
                return getBlocksFieldBuilder().addBuilder(Block.getDefaultInstance());
            }

            public Block.Builder addBlocksBuilder(int i) {
                return getBlocksFieldBuilder().addBuilder(i, Block.getDefaultInstance());
            }

            public List<Block.Builder> getBlocksBuilderList() {
                return getBlocksFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Block, Block.Builder, BlockOrBuilder> getBlocksFieldBuilder() {
                if (this.blocksBuilder_ == null) {
                    this.blocksBuilder_ = new RepeatedFieldBuilderV3<>(this.blocks_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.blocks_ = null;
                }
                return this.blocksBuilder_;
            }

            private void ensureBlockHeadersIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.blockHeaders_ = new ArrayList(this.blockHeaders_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<BlockHeader> getBlockHeadersList() {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.blockHeaders_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getBlockHeadersCount() {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blockHeaders_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public BlockHeader getBlockHeaders(int i) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blockHeaders_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setBlockHeaders(int i, BlockHeader blockHeader) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockHeader.getClass();
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.set(i, blockHeader);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, blockHeader);
                }
                return this;
            }

            public Builder setBlockHeaders(int i, BlockHeader.Builder builder) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addBlockHeaders(BlockHeader blockHeader) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockHeader.getClass();
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.add(blockHeader);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(blockHeader);
                }
                return this;
            }

            public Builder addBlockHeaders(int i, BlockHeader blockHeader) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    blockHeader.getClass();
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.add(i, blockHeader);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, blockHeader);
                }
                return this;
            }

            public Builder addBlockHeaders(BlockHeader.Builder builder) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addBlockHeaders(int i, BlockHeader.Builder builder) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllBlockHeaders(Iterable<? extends BlockHeader> iterable) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlockHeadersIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.blockHeaders_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearBlockHeaders() {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.blockHeaders_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeBlockHeaders(int i) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureBlockHeadersIsMutable();
                    this.blockHeaders_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public BlockHeader.Builder getBlockHeadersBuilder(int i) {
                return getBlockHeadersFieldBuilder().getBuilder(i);
            }

            @Override
            public BlockHeaderOrBuilder getBlockHeadersOrBuilder(int i) {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.blockHeaders_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends BlockHeaderOrBuilder> getBlockHeadersOrBuilderList() {
                RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> repeatedFieldBuilderV3 = this.blockHeadersBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.blockHeaders_);
            }

            public BlockHeader.Builder addBlockHeadersBuilder() {
                return getBlockHeadersFieldBuilder().addBuilder(BlockHeader.getDefaultInstance());
            }

            public BlockHeader.Builder addBlockHeadersBuilder(int i) {
                return getBlockHeadersFieldBuilder().addBuilder(i, BlockHeader.getDefaultInstance());
            }

            public List<BlockHeader.Builder> getBlockHeadersBuilderList() {
                return getBlockHeadersFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<BlockHeader, BlockHeader.Builder, BlockHeaderOrBuilder> getBlockHeadersFieldBuilder() {
                if (this.blockHeadersBuilder_ == null) {
                    this.blockHeadersBuilder_ = new RepeatedFieldBuilderV3<>(this.blockHeaders_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.blockHeaders_ = null;
                }
                return this.blockHeadersBuilder_;
            }

            private void ensureTransactionsIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.transactions_ = new ArrayList(this.transactions_);
                    this.bitField0_ |= 8;
                }
            }

            @Override
            public List<Transaction> getTransactionsList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.transactions_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getTransactionsCount() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public Transaction getTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, transaction);
                }
                return this;
            }

            public Builder setTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addTransactions(Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(transaction);
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction transaction) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    transaction.getClass();
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, transaction);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, transaction);
                }
                return this;
            }

            public Builder addTransactions(Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addTransactions(int i, Transaction.Builder builder) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllTransactions(Iterable<? extends Transaction> iterable) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.transactions_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearTransactions() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.transactions_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeTransactions(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureTransactionsIsMutable();
                    this.transactions_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Transaction.Builder getTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().getBuilder(i);
            }

            @Override
            public TransactionOrBuilder getTransactionsOrBuilder(int i) {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.transactions_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends TransactionOrBuilder> getTransactionsOrBuilderList() {
                RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> repeatedFieldBuilderV3 = this.transactionsBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.transactions_);
            }

            public Transaction.Builder addTransactionsBuilder() {
                return getTransactionsFieldBuilder().addBuilder(Transaction.getDefaultInstance());
            }

            public Transaction.Builder addTransactionsBuilder(int i) {
                return getTransactionsFieldBuilder().addBuilder(i, Transaction.getDefaultInstance());
            }

            public List<Transaction.Builder> getTransactionsBuilderList() {
                return getTransactionsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<Transaction, Transaction.Builder, TransactionOrBuilder> getTransactionsFieldBuilder() {
                if (this.transactionsBuilder_ == null) {
                    this.transactionsBuilder_ = new RepeatedFieldBuilderV3<>(this.transactions_, (this.bitField0_ & 8) == 8, getParentForChildren(), isClean());
                    this.transactions_ = null;
                }
                return this.transactionsBuilder_;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class DynamicProperties extends GeneratedMessageV3 implements DynamicPropertiesOrBuilder {
        public static final int LAST_SOLIDITY_BLOCK_NUM_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private long lastSolidityBlockNum_;
        private byte memoizedIsInitialized;
        private static final DynamicProperties DEFAULT_INSTANCE = new DynamicProperties();
        private static final Parser<DynamicProperties> PARSER = new AbstractParser<DynamicProperties>() {
            @Override
            public DynamicProperties parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DynamicProperties(codedInputStream, extensionRegistryLite);
            }
        };

        public static DynamicProperties getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<DynamicProperties> parser() {
            return PARSER;
        }

        @Override
        public DynamicProperties getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getLastSolidityBlockNum() {
            return this.lastSolidityBlockNum_;
        }

        @Override
        public Parser<DynamicProperties> getParserForType() {
            return PARSER;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private DynamicProperties(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private DynamicProperties() {
            this.memoizedIsInitialized = (byte) -1;
            this.lastSolidityBlockNum_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DynamicProperties(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 8) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.lastSolidityBlockNum_ = codedInputStream.readInt64();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_DynamicProperties_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_DynamicProperties_fieldAccessorTable.ensureFieldAccessorsInitialized(DynamicProperties.class, Builder.class);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.lastSolidityBlockNum_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.lastSolidityBlockNum_;
            int computeInt64Size = (j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0) + this.unknownFields.getSerializedSize();
            this.memoizedSize = computeInt64Size;
            return computeInt64Size;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof DynamicProperties)) {
                return super.equals(obj);
            }
            DynamicProperties dynamicProperties = (DynamicProperties) obj;
            return getLastSolidityBlockNum() == dynamicProperties.getLastSolidityBlockNum() && this.unknownFields.equals(dynamicProperties.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getLastSolidityBlockNum())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static DynamicProperties parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static DynamicProperties parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static DynamicProperties parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DynamicProperties parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DynamicProperties parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DynamicProperties parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DynamicProperties parseFrom(InputStream inputStream) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static DynamicProperties parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DynamicProperties parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static DynamicProperties parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DynamicProperties parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static DynamicProperties parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DynamicProperties) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(DynamicProperties dynamicProperties) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(dynamicProperties);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DynamicPropertiesOrBuilder {
            private long lastSolidityBlockNum_;

            @Override
            public long getLastSolidityBlockNum() {
                return this.lastSolidityBlockNum_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_DynamicProperties_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_DynamicProperties_fieldAccessorTable.ensureFieldAccessorsInitialized(DynamicProperties.class, Builder.class);
            }

            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = DynamicProperties.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.lastSolidityBlockNum_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_DynamicProperties_descriptor;
            }

            @Override
            public DynamicProperties getDefaultInstanceForType() {
                return DynamicProperties.getDefaultInstance();
            }

            @Override
            public DynamicProperties build() {
                DynamicProperties buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public DynamicProperties buildPartial() {
                DynamicProperties dynamicProperties = new DynamicProperties(this);
                dynamicProperties.lastSolidityBlockNum_ = this.lastSolidityBlockNum_;
                onBuilt();
                return dynamicProperties;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof DynamicProperties) {
                    return mergeFrom((DynamicProperties) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(DynamicProperties dynamicProperties) {
                if (dynamicProperties == DynamicProperties.getDefaultInstance()) {
                    return this;
                }
                if (dynamicProperties.getLastSolidityBlockNum() != 0) {
                    setLastSolidityBlockNum(dynamicProperties.getLastSolidityBlockNum());
                }
                mergeUnknownFields(dynamicProperties.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.DynamicProperties.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.DynamicProperties.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$DynamicProperties$Builder");
            }

            public Builder setLastSolidityBlockNum(long j) {
                this.lastSolidityBlockNum_ = j;
                onChanged();
                return this;
            }

            public Builder clearLastSolidityBlockNum() {
                this.lastSolidityBlockNum_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class DisconnectMessage extends GeneratedMessageV3 implements DisconnectMessageOrBuilder {
        private static final DisconnectMessage DEFAULT_INSTANCE = new DisconnectMessage();
        private static final Parser<DisconnectMessage> PARSER = new AbstractParser<DisconnectMessage>() {
            @Override
            public DisconnectMessage parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DisconnectMessage(codedInputStream, extensionRegistryLite);
            }
        };
        public static final int REASON_FIELD_NUMBER = 1;
        private static final long serialVersionUID = 0;
        private byte memoizedIsInitialized;
        private int reason_;

        public static DisconnectMessage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<DisconnectMessage> parser() {
            return PARSER;
        }

        @Override
        public DisconnectMessage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public Parser<DisconnectMessage> getParserForType() {
            return PARSER;
        }

        @Override
        public int getReasonValue() {
            return this.reason_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private DisconnectMessage(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private DisconnectMessage() {
            this.memoizedIsInitialized = (byte) -1;
            this.reason_ = 0;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DisconnectMessage(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        if (readTag != 0) {
                            if (readTag != 8) {
                                if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                }
                            } else {
                                this.reason_ = codedInputStream.readEnum();
                            }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_DisconnectMessage_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_DisconnectMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(DisconnectMessage.class, Builder.class);
        }

        @Override
        public ReasonCode getReason() {
            ReasonCode valueOf = ReasonCode.valueOf(this.reason_);
            return valueOf == null ? ReasonCode.UNRECOGNIZED : valueOf;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.reason_ != ReasonCode.REQUESTED.getNumber()) {
                codedOutputStream.writeEnum(1, this.reason_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeEnumSize = (this.reason_ != ReasonCode.REQUESTED.getNumber() ? CodedOutputStream.computeEnumSize(1, this.reason_) : 0) + this.unknownFields.getSerializedSize();
            this.memoizedSize = computeEnumSize;
            return computeEnumSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof DisconnectMessage)) {
                return super.equals(obj);
            }
            DisconnectMessage disconnectMessage = (DisconnectMessage) obj;
            return this.reason_ == disconnectMessage.reason_ && this.unknownFields.equals(disconnectMessage.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + this.reason_) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode;
            return hashCode;
        }

        public static DisconnectMessage parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static DisconnectMessage parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static DisconnectMessage parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DisconnectMessage parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DisconnectMessage parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DisconnectMessage parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DisconnectMessage parseFrom(InputStream inputStream) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static DisconnectMessage parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DisconnectMessage parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static DisconnectMessage parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DisconnectMessage parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static DisconnectMessage parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DisconnectMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(DisconnectMessage disconnectMessage) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(disconnectMessage);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DisconnectMessageOrBuilder {
            private int reason_;

            @Override
            public int getReasonValue() {
                return this.reason_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_DisconnectMessage_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_DisconnectMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(DisconnectMessage.class, Builder.class);
            }

            private Builder() {
                this.reason_ = 0;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.reason_ = 0;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = DisconnectMessage.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.reason_ = 0;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_DisconnectMessage_descriptor;
            }

            @Override
            public DisconnectMessage getDefaultInstanceForType() {
                return DisconnectMessage.getDefaultInstance();
            }

            @Override
            public DisconnectMessage build() {
                DisconnectMessage buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public DisconnectMessage buildPartial() {
                DisconnectMessage disconnectMessage = new DisconnectMessage(this);
                disconnectMessage.reason_ = this.reason_;
                onBuilt();
                return disconnectMessage;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof DisconnectMessage) {
                    return mergeFrom((DisconnectMessage) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(DisconnectMessage disconnectMessage) {
                if (disconnectMessage == DisconnectMessage.getDefaultInstance()) {
                    return this;
                }
                if (disconnectMessage.reason_ != 0) {
                    setReasonValue(disconnectMessage.getReasonValue());
                }
                mergeUnknownFields(disconnectMessage.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.DisconnectMessage.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.DisconnectMessage.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$DisconnectMessage$Builder");
            }

            public Builder setReasonValue(int i) {
                this.reason_ = i;
                onChanged();
                return this;
            }

            @Override
            public ReasonCode getReason() {
                ReasonCode valueOf = ReasonCode.valueOf(this.reason_);
                return valueOf == null ? ReasonCode.UNRECOGNIZED : valueOf;
            }

            public Builder setReason(ReasonCode reasonCode) {
                reasonCode.getClass();
                this.reason_ = reasonCode.getNumber();
                onChanged();
                return this;
            }

            public Builder clearReason() {
                this.reason_ = 0;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class HelloMessage extends GeneratedMessageV3 implements HelloMessageOrBuilder {
        public static final int ADDRESS_FIELD_NUMBER = 7;
        public static final int FROM_FIELD_NUMBER = 1;
        public static final int GENESISBLOCKID_FIELD_NUMBER = 4;
        public static final int HEADBLOCKID_FIELD_NUMBER = 6;
        public static final int LOWESTBLOCKNUM_FIELD_NUMBER = 10;
        public static final int NODETYPE_FIELD_NUMBER = 9;
        public static final int SIGNATURE_FIELD_NUMBER = 8;
        public static final int SOLIDBLOCKID_FIELD_NUMBER = 5;
        public static final int TIMESTAMP_FIELD_NUMBER = 3;
        public static final int VERSION_FIELD_NUMBER = 2;
        private static final long serialVersionUID = 0;
        private ByteString address_;
        private Discover.Endpoint from_;
        private BlockId genesisBlockId_;
        private BlockId headBlockId_;
        private long lowestBlockNum_;
        private byte memoizedIsInitialized;
        private int nodeType_;
        private ByteString signature_;
        private BlockId solidBlockId_;
        private long timestamp_;
        private int version_;
        private static final HelloMessage DEFAULT_INSTANCE = new HelloMessage();
        private static final Parser<HelloMessage> PARSER = new AbstractParser<HelloMessage>() {
            @Override
            public HelloMessage parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new HelloMessage(codedInputStream, extensionRegistryLite);
            }
        };

        public interface BlockIdOrBuilder extends MessageOrBuilder {
            ByteString getHash();

            long getNumber();
        }

        public static HelloMessage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<HelloMessage> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAddress() {
            return this.address_;
        }

        @Override
        public HelloMessage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public long getLowestBlockNum() {
            return this.lowestBlockNum_;
        }

        @Override
        public int getNodeType() {
            return this.nodeType_;
        }

        @Override
        public Parser<HelloMessage> getParserForType() {
            return PARSER;
        }

        @Override
        public ByteString getSignature() {
            return this.signature_;
        }

        @Override
        public long getTimestamp() {
            return this.timestamp_;
        }

        @Override
        public int getVersion() {
            return this.version_;
        }

        @Override
        public boolean hasFrom() {
            return this.from_ != null;
        }

        @Override
        public boolean hasGenesisBlockId() {
            return this.genesisBlockId_ != null;
        }

        @Override
        public boolean hasHeadBlockId() {
            return this.headBlockId_ != null;
        }

        @Override
        public boolean hasSolidBlockId() {
            return this.solidBlockId_ != null;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private HelloMessage(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private HelloMessage() {
            this.memoizedIsInitialized = (byte) -1;
            this.version_ = 0;
            this.timestamp_ = 0L;
            this.address_ = ByteString.EMPTY;
            this.signature_ = ByteString.EMPTY;
            this.nodeType_ = 0;
            this.lowestBlockNum_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private HelloMessage(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 10:
                                    Discover.Endpoint endpoint = this.from_;
                                    Discover.Endpoint.Builder builder = endpoint != null ? endpoint.toBuilder() : null;
                                    Discover.Endpoint endpoint2 = (Discover.Endpoint) codedInputStream.readMessage(Discover.Endpoint.parser(), extensionRegistryLite);
                                    this.from_ = endpoint2;
                                    if (builder != null) {
                                        builder.mergeFrom(endpoint2);
                                        this.from_ = builder.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 16:
                                    this.version_ = codedInputStream.readInt32();
                                    continue;
                                case 24:
                                    this.timestamp_ = codedInputStream.readInt64();
                                    continue;
                                case 34:
                                    BlockId blockId = this.genesisBlockId_;
                                    BlockId.Builder builder2 = blockId != null ? blockId.toBuilder() : null;
                                    BlockId blockId2 = (BlockId) codedInputStream.readMessage(BlockId.parser(), extensionRegistryLite);
                                    this.genesisBlockId_ = blockId2;
                                    if (builder2 != null) {
                                        builder2.mergeFrom(blockId2);
                                        this.genesisBlockId_ = builder2.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 42:
                                    BlockId blockId3 = this.solidBlockId_;
                                    BlockId.Builder builder3 = blockId3 != null ? blockId3.toBuilder() : null;
                                    BlockId blockId4 = (BlockId) codedInputStream.readMessage(BlockId.parser(), extensionRegistryLite);
                                    this.solidBlockId_ = blockId4;
                                    if (builder3 != null) {
                                        builder3.mergeFrom(blockId4);
                                        this.solidBlockId_ = builder3.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 50:
                                    BlockId blockId5 = this.headBlockId_;
                                    BlockId.Builder builder4 = blockId5 != null ? blockId5.toBuilder() : null;
                                    BlockId blockId6 = (BlockId) codedInputStream.readMessage(BlockId.parser(), extensionRegistryLite);
                                    this.headBlockId_ = blockId6;
                                    if (builder4 != null) {
                                        builder4.mergeFrom(blockId6);
                                        this.headBlockId_ = builder4.buildPartial();
                                    } else {
                                        continue;
                                    }
                                case 58:
                                    this.address_ = codedInputStream.readBytes();
                                    continue;
                                case 66:
                                    this.signature_ = codedInputStream.readBytes();
                                    continue;
                                case 72:
                                    this.nodeType_ = codedInputStream.readInt32();
                                    continue;
                                case 80:
                                    this.lowestBlockNum_ = codedInputStream.readInt64();
                                    continue;
                                default:
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        }
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_HelloMessage_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_HelloMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(HelloMessage.class, Builder.class);
        }

        public static final class BlockId extends GeneratedMessageV3 implements BlockIdOrBuilder {
            public static final int HASH_FIELD_NUMBER = 1;
            public static final int NUMBER_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private ByteString hash_;
            private byte memoizedIsInitialized;
            private long number_;
            private static final BlockId DEFAULT_INSTANCE = new BlockId();
            private static final Parser<BlockId> PARSER = new AbstractParser<BlockId>() {
                @Override
                public BlockId parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new BlockId(codedInputStream, extensionRegistryLite);
                }
            };

            public static BlockId getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<BlockId> parser() {
                return PARSER;
            }

            @Override
            public BlockId getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public ByteString getHash() {
                return this.hash_;
            }

            @Override
            public long getNumber() {
                return this.number_;
            }

            @Override
            public Parser<BlockId> getParserForType() {
                return PARSER;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private BlockId(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private BlockId() {
                this.memoizedIsInitialized = (byte) -1;
                this.hash_ = ByteString.EMPTY;
                this.number_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private BlockId(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.hash_ = codedInputStream.readBytes();
                                    } else if (readTag != 16) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.number_ = codedInputStream.readInt64();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_HelloMessage_BlockId_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_HelloMessage_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!this.hash_.isEmpty()) {
                    codedOutputStream.writeBytes(1, this.hash_);
                }
                long j = this.number_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeBytesSize = !this.hash_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.hash_) : 0;
                long j = this.number_;
                if (j != 0) {
                    computeBytesSize += CodedOutputStream.computeInt64Size(2, j);
                }
                int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof BlockId)) {
                    return super.equals(obj);
                }
                BlockId blockId = (BlockId) obj;
                return getHash().equals(blockId.getHash()) && getNumber() == blockId.getNumber() && this.unknownFields.equals(blockId.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getHash().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getNumber())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static BlockId parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static BlockId parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static BlockId parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static BlockId parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static BlockId parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static BlockId parseFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static BlockId parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static BlockId parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static BlockId parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (BlockId) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(BlockId blockId) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(blockId);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements BlockIdOrBuilder {
                private ByteString hash_;
                private long number_;

                @Override
                public ByteString getHash() {
                    return this.hash_;
                }

                @Override
                public long getNumber() {
                    return this.number_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_HelloMessage_BlockId_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_HelloMessage_BlockId_fieldAccessorTable.ensureFieldAccessorsInitialized(BlockId.class, Builder.class);
                }

                private Builder() {
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.hash_ = ByteString.EMPTY;
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = BlockId.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.hash_ = ByteString.EMPTY;
                    this.number_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_HelloMessage_BlockId_descriptor;
                }

                @Override
                public BlockId getDefaultInstanceForType() {
                    return BlockId.getDefaultInstance();
                }

                @Override
                public BlockId build() {
                    BlockId buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public BlockId buildPartial() {
                    BlockId blockId = new BlockId(this);
                    blockId.hash_ = this.hash_;
                    blockId.number_ = this.number_;
                    onBuilt();
                    return blockId;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof BlockId) {
                        return mergeFrom((BlockId) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(BlockId blockId) {
                    if (blockId == BlockId.getDefaultInstance()) {
                        return this;
                    }
                    if (blockId.getHash() != ByteString.EMPTY) {
                        setHash(blockId.getHash());
                    }
                    if (blockId.getNumber() != 0) {
                        setNumber(blockId.getNumber());
                    }
                    mergeUnknownFields(blockId.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.HelloMessage.BlockId.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.HelloMessage.BlockId.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$HelloMessage$BlockId$Builder");
                }

                public Builder setHash(ByteString byteString) {
                    byteString.getClass();
                    this.hash_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder clearHash() {
                    this.hash_ = BlockId.getDefaultInstance().getHash();
                    onChanged();
                    return this;
                }

                public Builder setNumber(long j) {
                    this.number_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearNumber() {
                    this.number_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public Discover.Endpoint getFrom() {
            Discover.Endpoint endpoint = this.from_;
            return endpoint == null ? Discover.Endpoint.getDefaultInstance() : endpoint;
        }

        @Override
        public Discover.EndpointOrBuilder getFromOrBuilder() {
            return getFrom();
        }

        @Override
        public BlockId getGenesisBlockId() {
            BlockId blockId = this.genesisBlockId_;
            return blockId == null ? BlockId.getDefaultInstance() : blockId;
        }

        @Override
        public BlockIdOrBuilder getGenesisBlockIdOrBuilder() {
            return getGenesisBlockId();
        }

        @Override
        public BlockId getSolidBlockId() {
            BlockId blockId = this.solidBlockId_;
            return blockId == null ? BlockId.getDefaultInstance() : blockId;
        }

        @Override
        public BlockIdOrBuilder getSolidBlockIdOrBuilder() {
            return getSolidBlockId();
        }

        @Override
        public BlockId getHeadBlockId() {
            BlockId blockId = this.headBlockId_;
            return blockId == null ? BlockId.getDefaultInstance() : blockId;
        }

        @Override
        public BlockIdOrBuilder getHeadBlockIdOrBuilder() {
            return getHeadBlockId();
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (this.from_ != null) {
                codedOutputStream.writeMessage(1, getFrom());
            }
            int i = this.version_;
            if (i != 0) {
                codedOutputStream.writeInt32(2, i);
            }
            long j = this.timestamp_;
            if (j != 0) {
                codedOutputStream.writeInt64(3, j);
            }
            if (this.genesisBlockId_ != null) {
                codedOutputStream.writeMessage(4, getGenesisBlockId());
            }
            if (this.solidBlockId_ != null) {
                codedOutputStream.writeMessage(5, getSolidBlockId());
            }
            if (this.headBlockId_ != null) {
                codedOutputStream.writeMessage(6, getHeadBlockId());
            }
            if (!this.address_.isEmpty()) {
                codedOutputStream.writeBytes(7, this.address_);
            }
            if (!this.signature_.isEmpty()) {
                codedOutputStream.writeBytes(8, this.signature_);
            }
            int i2 = this.nodeType_;
            if (i2 != 0) {
                codedOutputStream.writeInt32(9, i2);
            }
            long j2 = this.lowestBlockNum_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(10, j2);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeMessageSize = this.from_ != null ? CodedOutputStream.computeMessageSize(1, getFrom()) : 0;
            int i2 = this.version_;
            if (i2 != 0) {
                computeMessageSize += CodedOutputStream.computeInt32Size(2, i2);
            }
            long j = this.timestamp_;
            if (j != 0) {
                computeMessageSize += CodedOutputStream.computeInt64Size(3, j);
            }
            if (this.genesisBlockId_ != null) {
                computeMessageSize += CodedOutputStream.computeMessageSize(4, getGenesisBlockId());
            }
            if (this.solidBlockId_ != null) {
                computeMessageSize += CodedOutputStream.computeMessageSize(5, getSolidBlockId());
            }
            if (this.headBlockId_ != null) {
                computeMessageSize += CodedOutputStream.computeMessageSize(6, getHeadBlockId());
            }
            if (!this.address_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(7, this.address_);
            }
            if (!this.signature_.isEmpty()) {
                computeMessageSize += CodedOutputStream.computeBytesSize(8, this.signature_);
            }
            int i3 = this.nodeType_;
            if (i3 != 0) {
                computeMessageSize += CodedOutputStream.computeInt32Size(9, i3);
            }
            long j2 = this.lowestBlockNum_;
            if (j2 != 0) {
                computeMessageSize += CodedOutputStream.computeInt64Size(10, j2);
            }
            int serializedSize = computeMessageSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(java.lang.Object r8) {
            


return true;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.HelloMessage.equals(java.lang.Object):boolean");
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = 779 + getDescriptor().hashCode();
            if (hasFrom()) {
                hashCode = (((hashCode * 37) + 1) * 53) + getFrom().hashCode();
            }
            int version = (((((((hashCode * 37) + 2) * 53) + getVersion()) * 37) + 3) * 53) + Internal.hashLong(getTimestamp());
            if (hasGenesisBlockId()) {
                version = (((version * 37) + 4) * 53) + getGenesisBlockId().hashCode();
            }
            if (hasSolidBlockId()) {
                version = (((version * 37) + 5) * 53) + getSolidBlockId().hashCode();
            }
            if (hasHeadBlockId()) {
                version = (((version * 37) + 6) * 53) + getHeadBlockId().hashCode();
            }
            int hashCode2 = (((((((((((((((((version * 37) + 7) * 53) + getAddress().hashCode()) * 37) + 8) * 53) + getSignature().hashCode()) * 37) + 9) * 53) + getNodeType()) * 37) + 10) * 53) + Internal.hashLong(getLowestBlockNum())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static HelloMessage parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static HelloMessage parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static HelloMessage parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static HelloMessage parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static HelloMessage parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static HelloMessage parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static HelloMessage parseFrom(InputStream inputStream) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static HelloMessage parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static HelloMessage parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static HelloMessage parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static HelloMessage parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static HelloMessage parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (HelloMessage) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(HelloMessage helloMessage) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(helloMessage);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements HelloMessageOrBuilder {
            private ByteString address_;
            private SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> fromBuilder_;
            private Discover.Endpoint from_;
            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> genesisBlockIdBuilder_;
            private BlockId genesisBlockId_;
            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> headBlockIdBuilder_;
            private BlockId headBlockId_;
            private long lowestBlockNum_;
            private int nodeType_;
            private ByteString signature_;
            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> solidBlockIdBuilder_;
            private BlockId solidBlockId_;
            private long timestamp_;
            private int version_;

            @Override
            public ByteString getAddress() {
                return this.address_;
            }

            @Override
            public long getLowestBlockNum() {
                return this.lowestBlockNum_;
            }

            @Override
            public int getNodeType() {
                return this.nodeType_;
            }

            @Override
            public ByteString getSignature() {
                return this.signature_;
            }

            @Override
            public long getTimestamp() {
                return this.timestamp_;
            }

            @Override
            public int getVersion() {
                return this.version_;
            }

            @Override
            public boolean hasFrom() {
                return (this.fromBuilder_ == null && this.from_ == null) ? false : true;
            }

            @Override
            public boolean hasGenesisBlockId() {
                return (this.genesisBlockIdBuilder_ == null && this.genesisBlockId_ == null) ? false : true;
            }

            @Override
            public boolean hasHeadBlockId() {
                return (this.headBlockIdBuilder_ == null && this.headBlockId_ == null) ? false : true;
            }

            @Override
            public boolean hasSolidBlockId() {
                return (this.solidBlockIdBuilder_ == null && this.solidBlockId_ == null) ? false : true;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_HelloMessage_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_HelloMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(HelloMessage.class, Builder.class);
            }

            private Builder() {
                this.from_ = null;
                this.genesisBlockId_ = null;
                this.solidBlockId_ = null;
                this.headBlockId_ = null;
                this.address_ = ByteString.EMPTY;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.from_ = null;
                this.genesisBlockId_ = null;
                this.solidBlockId_ = null;
                this.headBlockId_ = null;
                this.address_ = ByteString.EMPTY;
                this.signature_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = HelloMessage.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                if (this.fromBuilder_ == null) {
                    this.from_ = null;
                } else {
                    this.from_ = null;
                    this.fromBuilder_ = null;
                }
                this.version_ = 0;
                this.timestamp_ = 0L;
                if (this.genesisBlockIdBuilder_ == null) {
                    this.genesisBlockId_ = null;
                } else {
                    this.genesisBlockId_ = null;
                    this.genesisBlockIdBuilder_ = null;
                }
                if (this.solidBlockIdBuilder_ == null) {
                    this.solidBlockId_ = null;
                } else {
                    this.solidBlockId_ = null;
                    this.solidBlockIdBuilder_ = null;
                }
                if (this.headBlockIdBuilder_ == null) {
                    this.headBlockId_ = null;
                } else {
                    this.headBlockId_ = null;
                    this.headBlockIdBuilder_ = null;
                }
                this.address_ = ByteString.EMPTY;
                this.signature_ = ByteString.EMPTY;
                this.nodeType_ = 0;
                this.lowestBlockNum_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_HelloMessage_descriptor;
            }

            @Override
            public HelloMessage getDefaultInstanceForType() {
                return HelloMessage.getDefaultInstance();
            }

            @Override
            public HelloMessage build() {
                HelloMessage buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public HelloMessage buildPartial() {
                HelloMessage helloMessage = new HelloMessage(this);
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 == null) {
                    helloMessage.from_ = this.from_;
                } else {
                    helloMessage.from_ = singleFieldBuilderV3.build();
                }
                helloMessage.version_ = this.version_;
                helloMessage.timestamp_ = this.timestamp_;
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV32 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV32 == null) {
                    helloMessage.genesisBlockId_ = this.genesisBlockId_;
                } else {
                    helloMessage.genesisBlockId_ = singleFieldBuilderV32.build();
                }
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV33 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV33 == null) {
                    helloMessage.solidBlockId_ = this.solidBlockId_;
                } else {
                    helloMessage.solidBlockId_ = singleFieldBuilderV33.build();
                }
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV34 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV34 == null) {
                    helloMessage.headBlockId_ = this.headBlockId_;
                } else {
                    helloMessage.headBlockId_ = singleFieldBuilderV34.build();
                }
                helloMessage.address_ = this.address_;
                helloMessage.signature_ = this.signature_;
                helloMessage.nodeType_ = this.nodeType_;
                helloMessage.lowestBlockNum_ = this.lowestBlockNum_;
                onBuilt();
                return helloMessage;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof HelloMessage) {
                    return mergeFrom((HelloMessage) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(HelloMessage helloMessage) {
                if (helloMessage == HelloMessage.getDefaultInstance()) {
                    return this;
                }
                if (helloMessage.hasFrom()) {
                    mergeFrom(helloMessage.getFrom());
                }
                if (helloMessage.getVersion() != 0) {
                    setVersion(helloMessage.getVersion());
                }
                if (helloMessage.getTimestamp() != 0) {
                    setTimestamp(helloMessage.getTimestamp());
                }
                if (helloMessage.hasGenesisBlockId()) {
                    mergeGenesisBlockId(helloMessage.getGenesisBlockId());
                }
                if (helloMessage.hasSolidBlockId()) {
                    mergeSolidBlockId(helloMessage.getSolidBlockId());
                }
                if (helloMessage.hasHeadBlockId()) {
                    mergeHeadBlockId(helloMessage.getHeadBlockId());
                }
                if (helloMessage.getAddress() != ByteString.EMPTY) {
                    setAddress(helloMessage.getAddress());
                }
                if (helloMessage.getSignature() != ByteString.EMPTY) {
                    setSignature(helloMessage.getSignature());
                }
                if (helloMessage.getNodeType() != 0) {
                    setNodeType(helloMessage.getNodeType());
                }
                if (helloMessage.getLowestBlockNum() != 0) {
                    setLowestBlockNum(helloMessage.getLowestBlockNum());
                }
                mergeUnknownFields(helloMessage.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.HelloMessage.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.HelloMessage.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$HelloMessage$Builder");
            }

            @Override
            public Discover.Endpoint getFrom() {
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Discover.Endpoint endpoint = this.from_;
                    return endpoint == null ? Discover.Endpoint.getDefaultInstance() : endpoint;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setFrom(Discover.Endpoint endpoint) {
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 == null) {
                    endpoint.getClass();
                    this.from_ = endpoint;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(endpoint);
                }
                return this;
            }

            public Builder setFrom(Discover.Endpoint.Builder builder) {
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.from_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeFrom(Discover.Endpoint endpoint) {
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 == null) {
                    Discover.Endpoint endpoint2 = this.from_;
                    if (endpoint2 != null) {
                        this.from_ = Discover.Endpoint.newBuilder(endpoint2).mergeFrom(endpoint).buildPartial();
                    } else {
                        this.from_ = endpoint;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(endpoint);
                }
                return this;
            }

            public Builder clearFrom() {
                if (this.fromBuilder_ == null) {
                    this.from_ = null;
                    onChanged();
                } else {
                    this.from_ = null;
                    this.fromBuilder_ = null;
                }
                return this;
            }

            public Discover.Endpoint.Builder getFromBuilder() {
                onChanged();
                return getFromFieldBuilder().getBuilder();
            }

            @Override
            public Discover.EndpointOrBuilder getFromOrBuilder() {
                SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> singleFieldBuilderV3 = this.fromBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                Discover.Endpoint endpoint = this.from_;
                return endpoint == null ? Discover.Endpoint.getDefaultInstance() : endpoint;
            }

            private SingleFieldBuilderV3<Discover.Endpoint, Discover.Endpoint.Builder, Discover.EndpointOrBuilder> getFromFieldBuilder() {
                if (this.fromBuilder_ == null) {
                    this.fromBuilder_ = new SingleFieldBuilderV3<>(getFrom(), getParentForChildren(), isClean());
                    this.from_ = null;
                }
                return this.fromBuilder_;
            }

            public Builder setVersion(int i) {
                this.version_ = i;
                onChanged();
                return this;
            }

            public Builder clearVersion() {
                this.version_ = 0;
                onChanged();
                return this;
            }

            public Builder setTimestamp(long j) {
                this.timestamp_ = j;
                onChanged();
                return this;
            }

            public Builder clearTimestamp() {
                this.timestamp_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public BlockId getGenesisBlockId() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId = this.genesisBlockId_;
                    return blockId == null ? BlockId.getDefaultInstance() : blockId;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setGenesisBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockId.getClass();
                    this.genesisBlockId_ = blockId;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(blockId);
                }
                return this;
            }

            public Builder setGenesisBlockId(BlockId.Builder builder) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.genesisBlockId_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeGenesisBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId2 = this.genesisBlockId_;
                    if (blockId2 != null) {
                        this.genesisBlockId_ = BlockId.newBuilder(blockId2).mergeFrom(blockId).buildPartial();
                    } else {
                        this.genesisBlockId_ = blockId;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(blockId);
                }
                return this;
            }

            public Builder clearGenesisBlockId() {
                if (this.genesisBlockIdBuilder_ == null) {
                    this.genesisBlockId_ = null;
                    onChanged();
                } else {
                    this.genesisBlockId_ = null;
                    this.genesisBlockIdBuilder_ = null;
                }
                return this;
            }

            public BlockId.Builder getGenesisBlockIdBuilder() {
                onChanged();
                return getGenesisBlockIdFieldBuilder().getBuilder();
            }

            @Override
            public BlockIdOrBuilder getGenesisBlockIdOrBuilder() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.genesisBlockIdBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                BlockId blockId = this.genesisBlockId_;
                return blockId == null ? BlockId.getDefaultInstance() : blockId;
            }

            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> getGenesisBlockIdFieldBuilder() {
                if (this.genesisBlockIdBuilder_ == null) {
                    this.genesisBlockIdBuilder_ = new SingleFieldBuilderV3<>(getGenesisBlockId(), getParentForChildren(), isClean());
                    this.genesisBlockId_ = null;
                }
                return this.genesisBlockIdBuilder_;
            }

            @Override
            public BlockId getSolidBlockId() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId = this.solidBlockId_;
                    return blockId == null ? BlockId.getDefaultInstance() : blockId;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setSolidBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockId.getClass();
                    this.solidBlockId_ = blockId;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(blockId);
                }
                return this;
            }

            public Builder setSolidBlockId(BlockId.Builder builder) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.solidBlockId_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeSolidBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId2 = this.solidBlockId_;
                    if (blockId2 != null) {
                        this.solidBlockId_ = BlockId.newBuilder(blockId2).mergeFrom(blockId).buildPartial();
                    } else {
                        this.solidBlockId_ = blockId;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(blockId);
                }
                return this;
            }

            public Builder clearSolidBlockId() {
                if (this.solidBlockIdBuilder_ == null) {
                    this.solidBlockId_ = null;
                    onChanged();
                } else {
                    this.solidBlockId_ = null;
                    this.solidBlockIdBuilder_ = null;
                }
                return this;
            }

            public BlockId.Builder getSolidBlockIdBuilder() {
                onChanged();
                return getSolidBlockIdFieldBuilder().getBuilder();
            }

            @Override
            public BlockIdOrBuilder getSolidBlockIdOrBuilder() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.solidBlockIdBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                BlockId blockId = this.solidBlockId_;
                return blockId == null ? BlockId.getDefaultInstance() : blockId;
            }

            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> getSolidBlockIdFieldBuilder() {
                if (this.solidBlockIdBuilder_ == null) {
                    this.solidBlockIdBuilder_ = new SingleFieldBuilderV3<>(getSolidBlockId(), getParentForChildren(), isClean());
                    this.solidBlockId_ = null;
                }
                return this.solidBlockIdBuilder_;
            }

            @Override
            public BlockId getHeadBlockId() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId = this.headBlockId_;
                    return blockId == null ? BlockId.getDefaultInstance() : blockId;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public Builder setHeadBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    blockId.getClass();
                    this.headBlockId_ = blockId;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(blockId);
                }
                return this;
            }

            public Builder setHeadBlockId(BlockId.Builder builder) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    this.headBlockId_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(builder.build());
                }
                return this;
            }

            public Builder mergeHeadBlockId(BlockId blockId) {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV3 == null) {
                    BlockId blockId2 = this.headBlockId_;
                    if (blockId2 != null) {
                        this.headBlockId_ = BlockId.newBuilder(blockId2).mergeFrom(blockId).buildPartial();
                    } else {
                        this.headBlockId_ = blockId;
                    }
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(blockId);
                }
                return this;
            }

            public Builder clearHeadBlockId() {
                if (this.headBlockIdBuilder_ == null) {
                    this.headBlockId_ = null;
                    onChanged();
                } else {
                    this.headBlockId_ = null;
                    this.headBlockIdBuilder_ = null;
                }
                return this;
            }

            public BlockId.Builder getHeadBlockIdBuilder() {
                onChanged();
                return getHeadBlockIdFieldBuilder().getBuilder();
            }

            @Override
            public BlockIdOrBuilder getHeadBlockIdOrBuilder() {
                SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> singleFieldBuilderV3 = this.headBlockIdBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                BlockId blockId = this.headBlockId_;
                return blockId == null ? BlockId.getDefaultInstance() : blockId;
            }

            private SingleFieldBuilderV3<BlockId, BlockId.Builder, BlockIdOrBuilder> getHeadBlockIdFieldBuilder() {
                if (this.headBlockIdBuilder_ == null) {
                    this.headBlockIdBuilder_ = new SingleFieldBuilderV3<>(getHeadBlockId(), getParentForChildren(), isClean());
                    this.headBlockId_ = null;
                }
                return this.headBlockIdBuilder_;
            }

            public Builder setAddress(ByteString byteString) {
                byteString.getClass();
                this.address_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAddress() {
                this.address_ = HelloMessage.getDefaultInstance().getAddress();
                onChanged();
                return this;
            }

            public Builder setSignature(ByteString byteString) {
                byteString.getClass();
                this.signature_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearSignature() {
                this.signature_ = HelloMessage.getDefaultInstance().getSignature();
                onChanged();
                return this;
            }

            public Builder setNodeType(int i) {
                this.nodeType_ = i;
                onChanged();
                return this;
            }

            public Builder clearNodeType() {
                this.nodeType_ = 0;
                onChanged();
                return this;
            }

            public Builder setLowestBlockNum(long j) {
                this.lowestBlockNum_ = j;
                onChanged();
                return this;
            }

            public Builder clearLowestBlockNum() {
                this.lowestBlockNum_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class InternalTransaction extends GeneratedMessageV3 implements InternalTransactionOrBuilder {
        public static final int CALLER_ADDRESS_FIELD_NUMBER = 2;
        public static final int CALLVALUEINFO_FIELD_NUMBER = 4;
        public static final int EXTRA_FIELD_NUMBER = 7;
        public static final int HASH_FIELD_NUMBER = 1;
        public static final int NOTE_FIELD_NUMBER = 5;
        public static final int REJECTED_FIELD_NUMBER = 6;
        public static final int TRANSFERTO_ADDRESS_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0;
        private int bitField0_;
        private List<CallValueInfo> callValueInfo_;
        private ByteString callerAddress_;
        private volatile Object extra_;
        private ByteString hash_;
        private byte memoizedIsInitialized;
        private ByteString note_;
        private boolean rejected_;
        private ByteString transferToAddress_;
        private static final InternalTransaction DEFAULT_INSTANCE = new InternalTransaction();
        private static final Parser<InternalTransaction> PARSER = new AbstractParser<InternalTransaction>() {
            @Override
            public InternalTransaction parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new InternalTransaction(codedInputStream, extensionRegistryLite);
            }
        };

        public interface CallValueInfoOrBuilder extends MessageOrBuilder {
            long getCallValue();

            String getTokenId();

            ByteString getTokenIdBytes();
        }

        public static InternalTransaction getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<InternalTransaction> parser() {
            return PARSER;
        }

        @Override
        public List<CallValueInfo> getCallValueInfoList() {
            return this.callValueInfo_;
        }

        @Override
        public List<? extends CallValueInfoOrBuilder> getCallValueInfoOrBuilderList() {
            return this.callValueInfo_;
        }

        @Override
        public ByteString getCallerAddress() {
            return this.callerAddress_;
        }

        @Override
        public InternalTransaction getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public ByteString getHash() {
            return this.hash_;
        }

        @Override
        public ByteString getNote() {
            return this.note_;
        }

        @Override
        public Parser<InternalTransaction> getParserForType() {
            return PARSER;
        }

        @Override
        public boolean getRejected() {
            return this.rejected_;
        }

        @Override
        public ByteString getTransferToAddress() {
            return this.transferToAddress_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private InternalTransaction(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private InternalTransaction() {
            this.memoizedIsInitialized = (byte) -1;
            this.hash_ = ByteString.EMPTY;
            this.callerAddress_ = ByteString.EMPTY;
            this.transferToAddress_ = ByteString.EMPTY;
            this.callValueInfo_ = Collections.emptyList();
            this.note_ = ByteString.EMPTY;
            this.rejected_ = false;
            this.extra_ = "";
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private InternalTransaction(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.hash_ = codedInputStream.readBytes();
                                } else if (readTag == 18) {
                                    this.callerAddress_ = codedInputStream.readBytes();
                                } else if (readTag == 26) {
                                    this.transferToAddress_ = codedInputStream.readBytes();
                                } else if (readTag == 34) {
                                    if (!(z2 & true)) {
                                        this.callValueInfo_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.callValueInfo_.add((CallValueInfo) codedInputStream.readMessage(CallValueInfo.parser(), extensionRegistryLite));
                                } else if (readTag == 42) {
                                    this.note_ = codedInputStream.readBytes();
                                } else if (readTag == 48) {
                                    this.rejected_ = codedInputStream.readBool();
                                } else if (readTag != 58) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.extra_ = codedInputStream.readStringRequireUtf8();
                                }
                            }
                            z = true;
                        } catch (IOException e) {
                            throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                        }
                    } catch (InvalidProtocolBufferException e2) {
                        throw e2.setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.callValueInfo_ = Collections.unmodifiableList(this.callValueInfo_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_InternalTransaction_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_InternalTransaction_fieldAccessorTable.ensureFieldAccessorsInitialized(InternalTransaction.class, Builder.class);
        }

        public static final class CallValueInfo extends GeneratedMessageV3 implements CallValueInfoOrBuilder {
            public static final int CALLVALUE_FIELD_NUMBER = 1;
            private static final CallValueInfo DEFAULT_INSTANCE = new CallValueInfo();
            private static final Parser<CallValueInfo> PARSER = new AbstractParser<CallValueInfo>() {
                @Override
                public CallValueInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new CallValueInfo(codedInputStream, extensionRegistryLite);
                }
            };
            public static final int TOKENID_FIELD_NUMBER = 2;
            private static final long serialVersionUID = 0;
            private long callValue_;
            private byte memoizedIsInitialized;
            private volatile Object tokenId_;

            public static CallValueInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<CallValueInfo> parser() {
                return PARSER;
            }

            @Override
            public long getCallValue() {
                return this.callValue_;
            }

            @Override
            public CallValueInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public Parser<CallValueInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private CallValueInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private CallValueInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.callValue_ = 0L;
                this.tokenId_ = "";
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private CallValueInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 8) {
                                        this.callValue_ = codedInputStream.readInt64();
                                    } else if (readTag != 18) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.tokenId_ = codedInputStream.readStringRequireUtf8();
                                    }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_InternalTransaction_CallValueInfo_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_InternalTransaction_CallValueInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CallValueInfo.class, Builder.class);
            }

            @Override
            public String getTokenId() {
                Object obj = this.tokenId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.tokenId_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getTokenIdBytes() {
                Object obj = this.tokenId_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.tokenId_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                long j = this.callValue_;
                if (j != 0) {
                    codedOutputStream.writeInt64(1, j);
                }
                if (!getTokenIdBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 2, this.tokenId_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                long j = this.callValue_;
                int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
                if (!getTokenIdBytes().isEmpty()) {
                    computeInt64Size += GeneratedMessageV3.computeStringSize(2, this.tokenId_);
                }
                int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof CallValueInfo)) {
                    return super.equals(obj);
                }
                CallValueInfo callValueInfo = (CallValueInfo) obj;
                return getCallValue() == callValueInfo.getCallValue() && getTokenId().equals(callValueInfo.getTokenId()) && this.unknownFields.equals(callValueInfo.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getCallValue())) * 37) + 2) * 53) + getTokenId().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static CallValueInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static CallValueInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static CallValueInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static CallValueInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static CallValueInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static CallValueInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static CallValueInfo parseFrom(InputStream inputStream) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static CallValueInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static CallValueInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static CallValueInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static CallValueInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static CallValueInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (CallValueInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(CallValueInfo callValueInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(callValueInfo);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements CallValueInfoOrBuilder {
                private long callValue_;
                private Object tokenId_;

                @Override
                public long getCallValue() {
                    return this.callValue_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_InternalTransaction_CallValueInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_InternalTransaction_CallValueInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CallValueInfo.class, Builder.class);
                }

                private Builder() {
                    this.tokenId_ = "";
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.tokenId_ = "";
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = CallValueInfo.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.callValue_ = 0L;
                    this.tokenId_ = "";
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_InternalTransaction_CallValueInfo_descriptor;
                }

                @Override
                public CallValueInfo getDefaultInstanceForType() {
                    return CallValueInfo.getDefaultInstance();
                }

                @Override
                public CallValueInfo build() {
                    CallValueInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public CallValueInfo buildPartial() {
                    CallValueInfo callValueInfo = new CallValueInfo(this);
                    callValueInfo.callValue_ = this.callValue_;
                    callValueInfo.tokenId_ = this.tokenId_;
                    onBuilt();
                    return callValueInfo;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof CallValueInfo) {
                        return mergeFrom((CallValueInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(CallValueInfo callValueInfo) {
                    if (callValueInfo == CallValueInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (callValueInfo.getCallValue() != 0) {
                        setCallValue(callValueInfo.getCallValue());
                    }
                    if (!callValueInfo.getTokenId().isEmpty()) {
                        this.tokenId_ = callValueInfo.tokenId_;
                        onChanged();
                    }
                    mergeUnknownFields(callValueInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.InternalTransaction.CallValueInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.InternalTransaction.CallValueInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$InternalTransaction$CallValueInfo$Builder");
                }

                public Builder setCallValue(long j) {
                    this.callValue_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearCallValue() {
                    this.callValue_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public String getTokenId() {
                    Object obj = this.tokenId_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.tokenId_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getTokenIdBytes() {
                    Object obj = this.tokenId_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.tokenId_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setTokenId(String str) {
                    str.getClass();
                    this.tokenId_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearTokenId() {
                    this.tokenId_ = CallValueInfo.getDefaultInstance().getTokenId();
                    onChanged();
                    return this;
                }

                public Builder setTokenIdBytes(ByteString byteString) {
                    byteString.getClass();
                    CallValueInfo.checkByteStringIsUtf8(byteString);
                    this.tokenId_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        @Override
        public int getCallValueInfoCount() {
            return this.callValueInfo_.size();
        }

        @Override
        public CallValueInfo getCallValueInfo(int i) {
            return this.callValueInfo_.get(i);
        }

        @Override
        public CallValueInfoOrBuilder getCallValueInfoOrBuilder(int i) {
            return this.callValueInfo_.get(i);
        }

        @Override
        public String getExtra() {
            Object obj = this.extra_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.extra_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getExtraBytes() {
            Object obj = this.extra_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.extra_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.hash_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.hash_);
            }
            if (!this.callerAddress_.isEmpty()) {
                codedOutputStream.writeBytes(2, this.callerAddress_);
            }
            if (!this.transferToAddress_.isEmpty()) {
                codedOutputStream.writeBytes(3, this.transferToAddress_);
            }
            for (int i = 0; i < this.callValueInfo_.size(); i++) {
                codedOutputStream.writeMessage(4, this.callValueInfo_.get(i));
            }
            if (!this.note_.isEmpty()) {
                codedOutputStream.writeBytes(5, this.note_);
            }
            boolean z = this.rejected_;
            if (z) {
                codedOutputStream.writeBool(6, z);
            }
            if (!getExtraBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 7, this.extra_);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.hash_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.hash_) : 0;
            if (!this.callerAddress_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, this.callerAddress_);
            }
            if (!this.transferToAddress_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, this.transferToAddress_);
            }
            for (int i2 = 0; i2 < this.callValueInfo_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(4, this.callValueInfo_.get(i2));
            }
            if (!this.note_.isEmpty()) {
                computeBytesSize += CodedOutputStream.computeBytesSize(5, this.note_);
            }
            boolean z = this.rejected_;
            if (z) {
                computeBytesSize += CodedOutputStream.computeBoolSize(6, z);
            }
            if (!getExtraBytes().isEmpty()) {
                computeBytesSize += GeneratedMessageV3.computeStringSize(7, this.extra_);
            }
            int serializedSize = computeBytesSize + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof InternalTransaction)) {
                return super.equals(obj);
            }
            InternalTransaction internalTransaction = (InternalTransaction) obj;
            return getHash().equals(internalTransaction.getHash()) && getCallerAddress().equals(internalTransaction.getCallerAddress()) && getTransferToAddress().equals(internalTransaction.getTransferToAddress()) && getCallValueInfoList().equals(internalTransaction.getCallValueInfoList()) && getNote().equals(internalTransaction.getNote()) && getRejected() == internalTransaction.getRejected() && getExtra().equals(internalTransaction.getExtra()) && this.unknownFields.equals(internalTransaction.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getHash().hashCode()) * 37) + 2) * 53) + getCallerAddress().hashCode()) * 37) + 3) * 53) + getTransferToAddress().hashCode();
            if (getCallValueInfoCount() > 0) {
                hashCode = (((hashCode * 37) + 4) * 53) + getCallValueInfoList().hashCode();
            }
            int hashCode2 = (((((((((((((hashCode * 37) + 5) * 53) + getNote().hashCode()) * 37) + 6) * 53) + Internal.hashBoolean(getRejected())) * 37) + 7) * 53) + getExtra().hashCode()) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        public static InternalTransaction parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static InternalTransaction parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static InternalTransaction parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static InternalTransaction parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static InternalTransaction parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static InternalTransaction parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static InternalTransaction parseFrom(InputStream inputStream) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static InternalTransaction parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static InternalTransaction parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static InternalTransaction parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static InternalTransaction parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static InternalTransaction parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (InternalTransaction) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(InternalTransaction internalTransaction) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(internalTransaction);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements InternalTransactionOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> callValueInfoBuilder_;
            private List<CallValueInfo> callValueInfo_;
            private ByteString callerAddress_;
            private Object extra_;
            private ByteString hash_;
            private ByteString note_;
            private boolean rejected_;
            private ByteString transferToAddress_;

            @Override
            public ByteString getCallerAddress() {
                return this.callerAddress_;
            }

            @Override
            public ByteString getHash() {
                return this.hash_;
            }

            @Override
            public ByteString getNote() {
                return this.note_;
            }

            @Override
            public boolean getRejected() {
                return this.rejected_;
            }

            @Override
            public ByteString getTransferToAddress() {
                return this.transferToAddress_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_InternalTransaction_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_InternalTransaction_fieldAccessorTable.ensureFieldAccessorsInitialized(InternalTransaction.class, Builder.class);
            }

            private Builder() {
                this.hash_ = ByteString.EMPTY;
                this.callerAddress_ = ByteString.EMPTY;
                this.transferToAddress_ = ByteString.EMPTY;
                this.callValueInfo_ = Collections.emptyList();
                this.note_ = ByteString.EMPTY;
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.hash_ = ByteString.EMPTY;
                this.callerAddress_ = ByteString.EMPTY;
                this.transferToAddress_ = ByteString.EMPTY;
                this.callValueInfo_ = Collections.emptyList();
                this.note_ = ByteString.EMPTY;
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (InternalTransaction.alwaysUseFieldBuilders) {
                    getCallValueInfoFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                this.hash_ = ByteString.EMPTY;
                this.callerAddress_ = ByteString.EMPTY;
                this.transferToAddress_ = ByteString.EMPTY;
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.callValueInfo_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                this.note_ = ByteString.EMPTY;
                this.rejected_ = false;
                this.extra_ = "";
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_InternalTransaction_descriptor;
            }

            @Override
            public InternalTransaction getDefaultInstanceForType() {
                return InternalTransaction.getDefaultInstance();
            }

            @Override
            public InternalTransaction build() {
                InternalTransaction buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public InternalTransaction buildPartial() {
                InternalTransaction internalTransaction = new InternalTransaction(this);
                internalTransaction.hash_ = this.hash_;
                internalTransaction.callerAddress_ = this.callerAddress_;
                internalTransaction.transferToAddress_ = this.transferToAddress_;
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 8) == 8) {
                        this.callValueInfo_ = Collections.unmodifiableList(this.callValueInfo_);
                        this.bitField0_ &= -9;
                    }
                    internalTransaction.callValueInfo_ = this.callValueInfo_;
                } else {
                    internalTransaction.callValueInfo_ = repeatedFieldBuilderV3.build();
                }
                internalTransaction.note_ = this.note_;
                internalTransaction.rejected_ = this.rejected_;
                internalTransaction.extra_ = this.extra_;
                internalTransaction.bitField0_ = 0;
                onBuilt();
                return internalTransaction;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof InternalTransaction) {
                    return mergeFrom((InternalTransaction) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(InternalTransaction internalTransaction) {
                if (internalTransaction == InternalTransaction.getDefaultInstance()) {
                    return this;
                }
                if (internalTransaction.getHash() != ByteString.EMPTY) {
                    setHash(internalTransaction.getHash());
                }
                if (internalTransaction.getCallerAddress() != ByteString.EMPTY) {
                    setCallerAddress(internalTransaction.getCallerAddress());
                }
                if (internalTransaction.getTransferToAddress() != ByteString.EMPTY) {
                    setTransferToAddress(internalTransaction.getTransferToAddress());
                }
                if (this.callValueInfoBuilder_ == null) {
                    if (!internalTransaction.callValueInfo_.isEmpty()) {
                        if (this.callValueInfo_.isEmpty()) {
                            this.callValueInfo_ = internalTransaction.callValueInfo_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureCallValueInfoIsMutable();
                            this.callValueInfo_.addAll(internalTransaction.callValueInfo_);
                        }
                        onChanged();
                    }
                } else if (!internalTransaction.callValueInfo_.isEmpty()) {
                    if (!this.callValueInfoBuilder_.isEmpty()) {
                        this.callValueInfoBuilder_.addAllMessages(internalTransaction.callValueInfo_);
                    } else {
                        this.callValueInfoBuilder_.dispose();
                        this.callValueInfoBuilder_ = null;
                        this.callValueInfo_ = internalTransaction.callValueInfo_;
                        this.bitField0_ &= -9;
                        this.callValueInfoBuilder_ = InternalTransaction.alwaysUseFieldBuilders ? getCallValueInfoFieldBuilder() : null;
                    }
                }
                if (internalTransaction.getNote() != ByteString.EMPTY) {
                    setNote(internalTransaction.getNote());
                }
                if (internalTransaction.getRejected()) {
                    setRejected(internalTransaction.getRejected());
                }
                if (!internalTransaction.getExtra().isEmpty()) {
                    this.extra_ = internalTransaction.extra_;
                    onChanged();
                }
                mergeUnknownFields(internalTransaction.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.InternalTransaction.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.InternalTransaction.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$InternalTransaction$Builder");
            }

            public Builder setHash(ByteString byteString) {
                byteString.getClass();
                this.hash_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearHash() {
                this.hash_ = InternalTransaction.getDefaultInstance().getHash();
                onChanged();
                return this;
            }

            public Builder setCallerAddress(ByteString byteString) {
                byteString.getClass();
                this.callerAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearCallerAddress() {
                this.callerAddress_ = InternalTransaction.getDefaultInstance().getCallerAddress();
                onChanged();
                return this;
            }

            public Builder setTransferToAddress(ByteString byteString) {
                byteString.getClass();
                this.transferToAddress_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearTransferToAddress() {
                this.transferToAddress_ = InternalTransaction.getDefaultInstance().getTransferToAddress();
                onChanged();
                return this;
            }

            private void ensureCallValueInfoIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.callValueInfo_ = new ArrayList(this.callValueInfo_);
                    this.bitField0_ |= 8;
                }
            }

            @Override
            public List<CallValueInfo> getCallValueInfoList() {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return Collections.unmodifiableList(this.callValueInfo_);
                }
                return repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public int getCallValueInfoCount() {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.callValueInfo_.size();
                }
                return repeatedFieldBuilderV3.getCount();
            }

            @Override
            public CallValueInfo getCallValueInfo(int i) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.callValueInfo_.get(i);
                }
                return repeatedFieldBuilderV3.getMessage(i);
            }

            public Builder setCallValueInfo(int i, CallValueInfo callValueInfo) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    callValueInfo.getClass();
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.set(i, callValueInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, callValueInfo);
                }
                return this;
            }

            public Builder setCallValueInfo(int i, CallValueInfo.Builder builder) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder addCallValueInfo(CallValueInfo callValueInfo) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    callValueInfo.getClass();
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.add(callValueInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(callValueInfo);
                }
                return this;
            }

            public Builder addCallValueInfo(int i, CallValueInfo callValueInfo) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    callValueInfo.getClass();
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.add(i, callValueInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, callValueInfo);
                }
                return this;
            }

            public Builder addCallValueInfo(CallValueInfo.Builder builder) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addCallValueInfo(int i, CallValueInfo.Builder builder) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addAllCallValueInfo(Iterable<? extends CallValueInfo> iterable) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureCallValueInfoIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.callValueInfo_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder clearCallValueInfo() {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.callValueInfo_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder removeCallValueInfo(int i) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensureCallValueInfoIsMutable();
                    this.callValueInfo_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public CallValueInfo.Builder getCallValueInfoBuilder(int i) {
                return getCallValueInfoFieldBuilder().getBuilder(i);
            }

            @Override
            public CallValueInfoOrBuilder getCallValueInfoOrBuilder(int i) {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    return this.callValueInfo_.get(i);
                }
                return repeatedFieldBuilderV3.getMessageOrBuilder(i);
            }

            @Override
            public List<? extends CallValueInfoOrBuilder> getCallValueInfoOrBuilderList() {
                RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> repeatedFieldBuilderV3 = this.callValueInfoBuilder_;
                if (repeatedFieldBuilderV3 != null) {
                    return repeatedFieldBuilderV3.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.callValueInfo_);
            }

            public CallValueInfo.Builder addCallValueInfoBuilder() {
                return getCallValueInfoFieldBuilder().addBuilder(CallValueInfo.getDefaultInstance());
            }

            public CallValueInfo.Builder addCallValueInfoBuilder(int i) {
                return getCallValueInfoFieldBuilder().addBuilder(i, CallValueInfo.getDefaultInstance());
            }

            public List<CallValueInfo.Builder> getCallValueInfoBuilderList() {
                return getCallValueInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<CallValueInfo, CallValueInfo.Builder, CallValueInfoOrBuilder> getCallValueInfoFieldBuilder() {
                if (this.callValueInfoBuilder_ == null) {
                    this.callValueInfoBuilder_ = new RepeatedFieldBuilderV3<>(this.callValueInfo_, (this.bitField0_ & 8) == 8, getParentForChildren(), isClean());
                    this.callValueInfo_ = null;
                }
                return this.callValueInfoBuilder_;
            }

            public Builder setNote(ByteString byteString) {
                byteString.getClass();
                this.note_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearNote() {
                this.note_ = InternalTransaction.getDefaultInstance().getNote();
                onChanged();
                return this;
            }

            public Builder setRejected(boolean z) {
                this.rejected_ = z;
                onChanged();
                return this;
            }

            public Builder clearRejected() {
                this.rejected_ = false;
                onChanged();
                return this;
            }

            @Override
            public String getExtra() {
                Object obj = this.extra_;
                if (!(obj instanceof String)) {
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.extra_ = stringUtf8;
                    return stringUtf8;
                }
                return (String) obj;
            }

            @Override
            public ByteString getExtraBytes() {
                Object obj = this.extra_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.extra_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            public Builder setExtra(String str) {
                str.getClass();
                this.extra_ = str;
                onChanged();
                return this;
            }

            public Builder clearExtra() {
                this.extra_ = InternalTransaction.getDefaultInstance().getExtra();
                onChanged();
                return this;
            }

            public Builder setExtraBytes(ByteString byteString) {
                byteString.getClass();
                InternalTransaction.checkByteStringIsUtf8(byteString);
                this.extra_ = byteString;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class DelegatedResourceAccountIndex extends GeneratedMessageV3 implements DelegatedResourceAccountIndexOrBuilder {
        public static final int ACCOUNT_FIELD_NUMBER = 1;
        public static final int FROMACCOUNTS_FIELD_NUMBER = 2;
        public static final int TIMESTAMP_FIELD_NUMBER = 4;
        public static final int TOACCOUNTS_FIELD_NUMBER = 3;
        private static final long serialVersionUID = 0;
        private ByteString account_;
        private int bitField0_;
        private List<ByteString> fromAccounts_;
        private byte memoizedIsInitialized;
        private long timestamp_;
        private List<ByteString> toAccounts_;
        private static final DelegatedResourceAccountIndex DEFAULT_INSTANCE = new DelegatedResourceAccountIndex();
        private static final Parser<DelegatedResourceAccountIndex> PARSER = new AbstractParser<DelegatedResourceAccountIndex>() {
            @Override
            public DelegatedResourceAccountIndex parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DelegatedResourceAccountIndex(codedInputStream, extensionRegistryLite);
            }
        };

        public static DelegatedResourceAccountIndex getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<DelegatedResourceAccountIndex> parser() {
            return PARSER;
        }

        @Override
        public ByteString getAccount() {
            return this.account_;
        }

        @Override
        public DelegatedResourceAccountIndex getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public List<ByteString> getFromAccountsList() {
            return this.fromAccounts_;
        }

        @Override
        public Parser<DelegatedResourceAccountIndex> getParserForType() {
            return PARSER;
        }

        @Override
        public long getTimestamp() {
            return this.timestamp_;
        }

        @Override
        public List<ByteString> getToAccountsList() {
            return this.toAccounts_;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        private DelegatedResourceAccountIndex(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private DelegatedResourceAccountIndex() {
            this.memoizedIsInitialized = (byte) -1;
            this.account_ = ByteString.EMPTY;
            this.fromAccounts_ = Collections.emptyList();
            this.toAccounts_ = Collections.emptyList();
            this.timestamp_ = 0L;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DelegatedResourceAccountIndex(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                if (z) {
                    break;
                }
                try {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            if (readTag != 0) {
                                if (readTag == 10) {
                                    this.account_ = codedInputStream.readBytes();
                                } else if (readTag == 18) {
                                    if (!(z2 & true)) {
                                        this.fromAccounts_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.fromAccounts_.add(codedInputStream.readBytes());
                                } else if (readTag == 26) {
                                    if (!(z2 & true)) {
                                        this.toAccounts_ = new ArrayList();
                                        z2 |= true;
                                    }
                                    this.toAccounts_.add(codedInputStream.readBytes());
                                } else if (readTag != 32) {
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                    }
                                } else {
                                    this.timestamp_ = codedInputStream.readInt64();
                                }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        }
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if (z2 & true) {
                        this.fromAccounts_ = Collections.unmodifiableList(this.fromAccounts_);
                    }
                    if (z2 & true) {
                        this.toAccounts_ = Collections.unmodifiableList(this.toAccounts_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_DelegatedResourceAccountIndex_descriptor;
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_DelegatedResourceAccountIndex_fieldAccessorTable.ensureFieldAccessorsInitialized(DelegatedResourceAccountIndex.class, Builder.class);
        }

        @Override
        public int getFromAccountsCount() {
            return this.fromAccounts_.size();
        }

        @Override
        public ByteString getFromAccounts(int i) {
            return this.fromAccounts_.get(i);
        }

        @Override
        public int getToAccountsCount() {
            return this.toAccounts_.size();
        }

        @Override
        public ByteString getToAccounts(int i) {
            return this.toAccounts_.get(i);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            if (!this.account_.isEmpty()) {
                codedOutputStream.writeBytes(1, this.account_);
            }
            for (int i = 0; i < this.fromAccounts_.size(); i++) {
                codedOutputStream.writeBytes(2, this.fromAccounts_.get(i));
            }
            for (int i2 = 0; i2 < this.toAccounts_.size(); i2++) {
                codedOutputStream.writeBytes(3, this.toAccounts_.get(i2));
            }
            long j = this.timestamp_;
            if (j != 0) {
                codedOutputStream.writeInt64(4, j);
            }
            this.unknownFields.writeTo(codedOutputStream);
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = !this.account_.isEmpty() ? CodedOutputStream.computeBytesSize(1, this.account_) : 0;
            int i2 = 0;
            for (int i3 = 0; i3 < this.fromAccounts_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.fromAccounts_.get(i3));
            }
            int size = computeBytesSize + i2 + getFromAccountsList().size();
            int i4 = 0;
            for (int i5 = 0; i5 < this.toAccounts_.size(); i5++) {
                i4 += CodedOutputStream.computeBytesSizeNoTag(this.toAccounts_.get(i5));
            }
            int size2 = size + i4 + getToAccountsList().size();
            long j = this.timestamp_;
            if (j != 0) {
                size2 += CodedOutputStream.computeInt64Size(4, j);
            }
            int serializedSize = size2 + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof DelegatedResourceAccountIndex)) {
                return super.equals(obj);
            }
            DelegatedResourceAccountIndex delegatedResourceAccountIndex = (DelegatedResourceAccountIndex) obj;
            return getAccount().equals(delegatedResourceAccountIndex.getAccount()) && getFromAccountsList().equals(delegatedResourceAccountIndex.getFromAccountsList()) && getToAccountsList().equals(delegatedResourceAccountIndex.getToAccountsList()) && getTimestamp() == delegatedResourceAccountIndex.getTimestamp() && this.unknownFields.equals(delegatedResourceAccountIndex.unknownFields);
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getAccount().hashCode();
            if (getFromAccountsCount() > 0) {
                hashCode = (((hashCode * 37) + 2) * 53) + getFromAccountsList().hashCode();
            }
            if (getToAccountsCount() > 0) {
                hashCode = (((hashCode * 37) + 3) * 53) + getToAccountsList().hashCode();
            }
            int hashLong = (((((hashCode * 37) + 4) * 53) + Internal.hashLong(getTimestamp())) * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashLong;
            return hashLong;
        }

        public static DelegatedResourceAccountIndex parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static DelegatedResourceAccountIndex parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static DelegatedResourceAccountIndex parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DelegatedResourceAccountIndex parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DelegatedResourceAccountIndex parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DelegatedResourceAccountIndex parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DelegatedResourceAccountIndex parseFrom(InputStream inputStream) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static DelegatedResourceAccountIndex parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DelegatedResourceAccountIndex parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static DelegatedResourceAccountIndex parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static DelegatedResourceAccountIndex parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static DelegatedResourceAccountIndex parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (DelegatedResourceAccountIndex) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(DelegatedResourceAccountIndex delegatedResourceAccountIndex) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(delegatedResourceAccountIndex);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DelegatedResourceAccountIndexOrBuilder {
            private ByteString account_;
            private int bitField0_;
            private List<ByteString> fromAccounts_;
            private long timestamp_;
            private List<ByteString> toAccounts_;

            @Override
            public ByteString getAccount() {
                return this.account_;
            }

            @Override
            public long getTimestamp() {
                return this.timestamp_;
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_DelegatedResourceAccountIndex_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_DelegatedResourceAccountIndex_fieldAccessorTable.ensureFieldAccessorsInitialized(DelegatedResourceAccountIndex.class, Builder.class);
            }

            private Builder() {
                this.account_ = ByteString.EMPTY;
                this.fromAccounts_ = Collections.emptyList();
                this.toAccounts_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.account_ = ByteString.EMPTY;
                this.fromAccounts_ = Collections.emptyList();
                this.toAccounts_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean unused = DelegatedResourceAccountIndex.alwaysUseFieldBuilders;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.account_ = ByteString.EMPTY;
                this.fromAccounts_ = Collections.emptyList();
                this.bitField0_ &= -3;
                this.toAccounts_ = Collections.emptyList();
                this.bitField0_ &= -5;
                this.timestamp_ = 0L;
                return this;
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_DelegatedResourceAccountIndex_descriptor;
            }

            @Override
            public DelegatedResourceAccountIndex getDefaultInstanceForType() {
                return DelegatedResourceAccountIndex.getDefaultInstance();
            }

            @Override
            public DelegatedResourceAccountIndex build() {
                DelegatedResourceAccountIndex buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public DelegatedResourceAccountIndex buildPartial() {
                DelegatedResourceAccountIndex delegatedResourceAccountIndex = new DelegatedResourceAccountIndex(this);
                delegatedResourceAccountIndex.account_ = this.account_;
                if ((this.bitField0_ & 2) == 2) {
                    this.fromAccounts_ = Collections.unmodifiableList(this.fromAccounts_);
                    this.bitField0_ &= -3;
                }
                delegatedResourceAccountIndex.fromAccounts_ = this.fromAccounts_;
                if ((this.bitField0_ & 4) == 4) {
                    this.toAccounts_ = Collections.unmodifiableList(this.toAccounts_);
                    this.bitField0_ &= -5;
                }
                delegatedResourceAccountIndex.toAccounts_ = this.toAccounts_;
                delegatedResourceAccountIndex.timestamp_ = this.timestamp_;
                delegatedResourceAccountIndex.bitField0_ = 0;
                onBuilt();
                return delegatedResourceAccountIndex;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof DelegatedResourceAccountIndex) {
                    return mergeFrom((DelegatedResourceAccountIndex) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(DelegatedResourceAccountIndex delegatedResourceAccountIndex) {
                if (delegatedResourceAccountIndex == DelegatedResourceAccountIndex.getDefaultInstance()) {
                    return this;
                }
                if (delegatedResourceAccountIndex.getAccount() != ByteString.EMPTY) {
                    setAccount(delegatedResourceAccountIndex.getAccount());
                }
                if (!delegatedResourceAccountIndex.fromAccounts_.isEmpty()) {
                    if (this.fromAccounts_.isEmpty()) {
                        this.fromAccounts_ = delegatedResourceAccountIndex.fromAccounts_;
                        this.bitField0_ &= -3;
                    } else {
                        ensureFromAccountsIsMutable();
                        this.fromAccounts_.addAll(delegatedResourceAccountIndex.fromAccounts_);
                    }
                    onChanged();
                }
                if (!delegatedResourceAccountIndex.toAccounts_.isEmpty()) {
                    if (this.toAccounts_.isEmpty()) {
                        this.toAccounts_ = delegatedResourceAccountIndex.toAccounts_;
                        this.bitField0_ &= -5;
                    } else {
                        ensureToAccountsIsMutable();
                        this.toAccounts_.addAll(delegatedResourceAccountIndex.toAccounts_);
                    }
                    onChanged();
                }
                if (delegatedResourceAccountIndex.getTimestamp() != 0) {
                    setTimestamp(delegatedResourceAccountIndex.getTimestamp());
                }
                mergeUnknownFields(delegatedResourceAccountIndex.unknownFields);
                onChanged();
                return this;
            }

            @Override
            public org.tron.protos.Protocol.DelegatedResourceAccountIndex.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.DelegatedResourceAccountIndex.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$DelegatedResourceAccountIndex$Builder");
            }

            public Builder setAccount(ByteString byteString) {
                byteString.getClass();
                this.account_ = byteString;
                onChanged();
                return this;
            }

            public Builder clearAccount() {
                this.account_ = DelegatedResourceAccountIndex.getDefaultInstance().getAccount();
                onChanged();
                return this;
            }

            private void ensureFromAccountsIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.fromAccounts_ = new ArrayList(this.fromAccounts_);
                    this.bitField0_ |= 2;
                }
            }

            @Override
            public List<ByteString> getFromAccountsList() {
                return Collections.unmodifiableList(this.fromAccounts_);
            }

            @Override
            public int getFromAccountsCount() {
                return this.fromAccounts_.size();
            }

            @Override
            public ByteString getFromAccounts(int i) {
                return this.fromAccounts_.get(i);
            }

            public Builder setFromAccounts(int i, ByteString byteString) {
                byteString.getClass();
                ensureFromAccountsIsMutable();
                this.fromAccounts_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addFromAccounts(ByteString byteString) {
                byteString.getClass();
                ensureFromAccountsIsMutable();
                this.fromAccounts_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllFromAccounts(Iterable<? extends ByteString> iterable) {
                ensureFromAccountsIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.fromAccounts_);
                onChanged();
                return this;
            }

            public Builder clearFromAccounts() {
                this.fromAccounts_ = Collections.emptyList();
                this.bitField0_ &= -3;
                onChanged();
                return this;
            }

            private void ensureToAccountsIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.toAccounts_ = new ArrayList(this.toAccounts_);
                    this.bitField0_ |= 4;
                }
            }

            @Override
            public List<ByteString> getToAccountsList() {
                return Collections.unmodifiableList(this.toAccounts_);
            }

            @Override
            public int getToAccountsCount() {
                return this.toAccounts_.size();
            }

            @Override
            public ByteString getToAccounts(int i) {
                return this.toAccounts_.get(i);
            }

            public Builder setToAccounts(int i, ByteString byteString) {
                byteString.getClass();
                ensureToAccountsIsMutable();
                this.toAccounts_.set(i, byteString);
                onChanged();
                return this;
            }

            public Builder addToAccounts(ByteString byteString) {
                byteString.getClass();
                ensureToAccountsIsMutable();
                this.toAccounts_.add(byteString);
                onChanged();
                return this;
            }

            public Builder addAllToAccounts(Iterable<? extends ByteString> iterable) {
                ensureToAccountsIsMutable();
                AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.toAccounts_);
                onChanged();
                return this;
            }

            public Builder clearToAccounts() {
                this.toAccounts_ = Collections.emptyList();
                this.bitField0_ &= -5;
                onChanged();
                return this;
            }

            public Builder setTimestamp(long j) {
                this.timestamp_ = j;
                onChanged();
                return this;
            }

            public Builder clearTimestamp() {
                this.timestamp_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }
        }
    }

    public static final class NodeInfo extends GeneratedMessageV3 implements NodeInfoOrBuilder {
        public static final int ACTIVECONNECTCOUNT_FIELD_NUMBER = 5;
        public static final int BEGINSYNCNUM_FIELD_NUMBER = 1;
        public static final int BLOCK_FIELD_NUMBER = 2;
        public static final int CHEATWITNESSINFOMAP_FIELD_NUMBER = 11;
        public static final int CONFIGNODEINFO_FIELD_NUMBER = 9;
        public static final int CURRENTCONNECTCOUNT_FIELD_NUMBER = 4;
        public static final int MACHINEINFO_FIELD_NUMBER = 10;
        public static final int PASSIVECONNECTCOUNT_FIELD_NUMBER = 6;
        public static final int PEERINFOLIST_FIELD_NUMBER = 8;
        public static final int SOLIDITYBLOCK_FIELD_NUMBER = 3;
        public static final int TOTALFLOW_FIELD_NUMBER = 7;
        private static final long serialVersionUID = 0;
        private int activeConnectCount_;
        private long beginSyncNum_;
        private int bitField0_;
        private volatile Object block_;
        private MapField<String, String> cheatWitnessInfoMap_;
        private ConfigNodeInfo configNodeInfo_;
        private int currentConnectCount_;
        private MachineInfo machineInfo_;
        private byte memoizedIsInitialized;
        private int passiveConnectCount_;
        private List<PeerInfo> peerInfoList_;
        private volatile Object solidityBlock_;
        private long totalFlow_;
        private static final NodeInfo DEFAULT_INSTANCE = new NodeInfo();
        private static final Parser<NodeInfo> PARSER = new AbstractParser<NodeInfo>() {
            @Override
            public NodeInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new NodeInfo(codedInputStream, extensionRegistryLite);
            }
        };

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements NodeInfoOrBuilder {
            private int activeConnectCount_;
            private long beginSyncNum_;
            private int bitField0_;
            private Object block_;
            private MapField<String, String> cheatWitnessInfoMap_;
            private SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> configNodeInfoBuilder_;
            private ConfigNodeInfo configNodeInfo_;
            private int currentConnectCount_;
            private SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> machineInfoBuilder_;
            private MachineInfo machineInfo_;
            private int passiveConnectCount_;
            private RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> peerInfoListBuilder_;
            private List<PeerInfo> peerInfoList_;
            private Object solidityBlock_;
            private long totalFlow_;

            private Builder() {
                this.block_ = "";
                this.solidityBlock_ = "";
                this.peerInfoList_ = Collections.emptyList();
                this.configNodeInfo_ = null;
                this.machineInfo_ = null;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                super(builderParent);
                this.block_ = "";
                this.solidityBlock_ = "";
                this.peerInfoList_ = Collections.emptyList();
                this.configNodeInfo_ = null;
                this.machineInfo_ = null;
                maybeForceBuilderInitialization();
            }

            private void ensurePeerInfoListIsMutable() {
                if ((this.bitField0_ & 128) != 128) {
                    this.peerInfoList_ = new ArrayList(this.peerInfoList_);
                    this.bitField0_ |= 128;
                }
            }

            private SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> getConfigNodeInfoFieldBuilder() {
                if (this.configNodeInfoBuilder_ == null) {
                    this.configNodeInfoBuilder_ = new SingleFieldBuilderV3<>(getConfigNodeInfo(), getParentForChildren(), isClean());
                    this.configNodeInfo_ = null;
                }
                return this.configNodeInfoBuilder_;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_NodeInfo_descriptor;
            }

            private SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> getMachineInfoFieldBuilder() {
                if (this.machineInfoBuilder_ == null) {
                    this.machineInfoBuilder_ = new SingleFieldBuilderV3<>(getMachineInfo(), getParentForChildren(), isClean());
                    this.machineInfo_ = null;
                }
                return this.machineInfoBuilder_;
            }

            private RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> getPeerInfoListFieldBuilder() {
                if (this.peerInfoListBuilder_ == null) {
                    this.peerInfoListBuilder_ = new RepeatedFieldBuilderV3<>(this.peerInfoList_, (this.bitField0_ & 128) == 128, getParentForChildren(), isClean());
                    this.peerInfoList_ = null;
                }
                return this.peerInfoListBuilder_;
            }

            private MapField<String, String> internalGetCheatWitnessInfoMap() {
                MapField<String, String> mapField = this.cheatWitnessInfoMap_;
                return mapField == null ? MapField.emptyMapField(CheatWitnessInfoMapDefaultEntryHolder.defaultEntry) : mapField;
            }

            private MapField<String, String> internalGetMutableCheatWitnessInfoMap() {
                onChanged();
                if (this.cheatWitnessInfoMap_ == null) {
                    this.cheatWitnessInfoMap_ = MapField.newMapField(CheatWitnessInfoMapDefaultEntryHolder.defaultEntry);
                }
                if (!this.cheatWitnessInfoMap_.isMutable()) {
                    this.cheatWitnessInfoMap_ = this.cheatWitnessInfoMap_.copy();
                }
                return this.cheatWitnessInfoMap_;
            }

            private void maybeForceBuilderInitialization() {
                if (NodeInfo.alwaysUseFieldBuilders) {
                    getPeerInfoListFieldBuilder();
                }
            }

            public Builder addAllPeerInfoList(Iterable<? extends PeerInfo> iterable) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePeerInfoListIsMutable();
                    AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.peerInfoList_);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addAllMessages(iterable);
                }
                return this;
            }

            public Builder addPeerInfoList(int i, PeerInfo.Builder builder) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, builder.build());
                }
                return this;
            }

            public Builder addPeerInfoList(int i, PeerInfo peerInfo) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    peerInfo.getClass();
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.add(i, peerInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(i, peerInfo);
                }
                return this;
            }

            public Builder addPeerInfoList(PeerInfo.Builder builder) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(builder.build());
                }
                return this;
            }

            public Builder addPeerInfoList(PeerInfo peerInfo) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    peerInfo.getClass();
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.add(peerInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.addMessage(peerInfo);
                }
                return this;
            }

            public PeerInfo.Builder addPeerInfoListBuilder() {
                return getPeerInfoListFieldBuilder().addBuilder(PeerInfo.getDefaultInstance());
            }

            public PeerInfo.Builder addPeerInfoListBuilder(int i) {
                return getPeerInfoListFieldBuilder().addBuilder(i, PeerInfo.getDefaultInstance());
            }

            @Override
            public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.addRepeatedField(fieldDescriptor, obj);
            }

            @Override
            public NodeInfo build() {
                NodeInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            @Override
            public NodeInfo buildPartial() {
                List<PeerInfo> build;
                NodeInfo nodeInfo = new NodeInfo(this);
                nodeInfo.beginSyncNum_ = this.beginSyncNum_;
                nodeInfo.block_ = this.block_;
                nodeInfo.solidityBlock_ = this.solidityBlock_;
                nodeInfo.currentConnectCount_ = this.currentConnectCount_;
                nodeInfo.activeConnectCount_ = this.activeConnectCount_;
                nodeInfo.passiveConnectCount_ = this.passiveConnectCount_;
                nodeInfo.totalFlow_ = this.totalFlow_;
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    if ((this.bitField0_ & 128) == 128) {
                        this.peerInfoList_ = Collections.unmodifiableList(this.peerInfoList_);
                        this.bitField0_ &= -129;
                    }
                    build = this.peerInfoList_;
                } else {
                    build = repeatedFieldBuilderV3.build();
                }
                nodeInfo.peerInfoList_ = build;
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                nodeInfo.configNodeInfo_ = singleFieldBuilderV3 == null ? this.configNodeInfo_ : singleFieldBuilderV3.build();
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV32 = this.machineInfoBuilder_;
                nodeInfo.machineInfo_ = singleFieldBuilderV32 == null ? this.machineInfo_ : singleFieldBuilderV32.build();
                nodeInfo.cheatWitnessInfoMap_ = internalGetCheatWitnessInfoMap();
                nodeInfo.cheatWitnessInfoMap_.makeImmutable();
                nodeInfo.bitField0_ = 0;
                onBuilt();
                return nodeInfo;
            }

            @Override
            public Builder clear() {
                super.clear();
                this.beginSyncNum_ = 0L;
                this.block_ = "";
                this.solidityBlock_ = "";
                this.currentConnectCount_ = 0;
                this.activeConnectCount_ = 0;
                this.passiveConnectCount_ = 0;
                this.totalFlow_ = 0L;
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.peerInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                this.configNodeInfo_ = null;
                if (singleFieldBuilderV3 != null) {
                    this.configNodeInfoBuilder_ = null;
                }
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV32 = this.machineInfoBuilder_;
                this.machineInfo_ = null;
                if (singleFieldBuilderV32 != null) {
                    this.machineInfoBuilder_ = null;
                }
                internalGetMutableCheatWitnessInfoMap().clear();
                return this;
            }

            public Builder clearActiveConnectCount() {
                this.activeConnectCount_ = 0;
                onChanged();
                return this;
            }

            public Builder clearBeginSyncNum() {
                this.beginSyncNum_ = 0L;
                onChanged();
                return this;
            }

            public Builder clearBlock() {
                this.block_ = NodeInfo.getDefaultInstance().getBlock();
                onChanged();
                return this;
            }

            public Builder clearCheatWitnessInfoMap() {
                internalGetMutableCheatWitnessInfoMap().getMutableMap().clear();
                return this;
            }

            public Builder clearConfigNodeInfo() {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                this.configNodeInfo_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.configNodeInfoBuilder_ = null;
                }
                return this;
            }

            public Builder clearCurrentConnectCount() {
                this.currentConnectCount_ = 0;
                onChanged();
                return this;
            }

            @Override
            public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                return (Builder) super.clearField(fieldDescriptor);
            }

            public Builder clearMachineInfo() {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                this.machineInfo_ = null;
                if (singleFieldBuilderV3 == null) {
                    onChanged();
                } else {
                    this.machineInfoBuilder_ = null;
                }
                return this;
            }

            @Override
            public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                return (Builder) super.clearOneof(oneofDescriptor);
            }

            public Builder clearPassiveConnectCount() {
                this.passiveConnectCount_ = 0;
                onChanged();
                return this;
            }

            public Builder clearPeerInfoList() {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    this.peerInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -129;
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.clear();
                }
                return this;
            }

            public Builder clearSolidityBlock() {
                this.solidityBlock_ = NodeInfo.getDefaultInstance().getSolidityBlock();
                onChanged();
                return this;
            }

            public Builder clearTotalFlow() {
                this.totalFlow_ = 0L;
                onChanged();
                return this;
            }

            @Override
            public Builder clone() {
                return (Builder) super.clone();
            }

            @Override
            public boolean containsCheatWitnessInfoMap(String str) {
                str.getClass();
                return internalGetCheatWitnessInfoMap().getMap().containsKey(str);
            }

            @Override
            public int getActiveConnectCount() {
                return this.activeConnectCount_;
            }

            @Override
            public long getBeginSyncNum() {
                return this.beginSyncNum_;
            }

            @Override
            public String getBlock() {
                Object obj = this.block_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.block_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getBlockBytes() {
                Object obj = this.block_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.block_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            @Deprecated
            public Map<String, String> getCheatWitnessInfoMap() {
                return getCheatWitnessInfoMapMap();
            }

            @Override
            public int getCheatWitnessInfoMapCount() {
                return internalGetCheatWitnessInfoMap().getMap().size();
            }

            @Override
            public Map<String, String> getCheatWitnessInfoMapMap() {
                return internalGetCheatWitnessInfoMap().getMap();
            }

            @Override
            public String getCheatWitnessInfoMapOrDefault(String str, String str2) {
                str.getClass();
                Map<String, String> map = internalGetCheatWitnessInfoMap().getMap();
                return map.containsKey(str) ? map.get(str) : str2;
            }

            @Override
            public String getCheatWitnessInfoMapOrThrow(String str) {
                str.getClass();
                Map<String, String> map = internalGetCheatWitnessInfoMap().getMap();
                if (map.containsKey(str)) {
                    return map.get(str);
                }
                throw new IllegalArgumentException();
            }

            @Override
            public ConfigNodeInfo getConfigNodeInfo() {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    ConfigNodeInfo configNodeInfo = this.configNodeInfo_;
                    return configNodeInfo == null ? ConfigNodeInfo.getDefaultInstance() : configNodeInfo;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public ConfigNodeInfo.Builder getConfigNodeInfoBuilder() {
                onChanged();
                return getConfigNodeInfoFieldBuilder().getBuilder();
            }

            @Override
            public ConfigNodeInfoOrBuilder getConfigNodeInfoOrBuilder() {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                ConfigNodeInfo configNodeInfo = this.configNodeInfo_;
                return configNodeInfo == null ? ConfigNodeInfo.getDefaultInstance() : configNodeInfo;
            }

            @Override
            public int getCurrentConnectCount() {
                return this.currentConnectCount_;
            }

            @Override
            public NodeInfo getDefaultInstanceForType() {
                return NodeInfo.getDefaultInstance();
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return Protocol.internal_static_protocol_NodeInfo_descriptor;
            }

            @Override
            public MachineInfo getMachineInfo() {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    MachineInfo machineInfo = this.machineInfo_;
                    return machineInfo == null ? MachineInfo.getDefaultInstance() : machineInfo;
                }
                return singleFieldBuilderV3.getMessage();
            }

            public MachineInfo.Builder getMachineInfoBuilder() {
                onChanged();
                return getMachineInfoFieldBuilder().getBuilder();
            }

            @Override
            public MachineInfoOrBuilder getMachineInfoOrBuilder() {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                if (singleFieldBuilderV3 != null) {
                    return singleFieldBuilderV3.getMessageOrBuilder();
                }
                MachineInfo machineInfo = this.machineInfo_;
                return machineInfo == null ? MachineInfo.getDefaultInstance() : machineInfo;
            }

            @Deprecated
            public Map<String, String> getMutableCheatWitnessInfoMap() {
                return internalGetMutableCheatWitnessInfoMap().getMutableMap();
            }

            @Override
            public int getPassiveConnectCount() {
                return this.passiveConnectCount_;
            }

            @Override
            public PeerInfo getPeerInfoList(int i) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                return repeatedFieldBuilderV3 == null ? this.peerInfoList_.get(i) : repeatedFieldBuilderV3.getMessage(i);
            }

            public PeerInfo.Builder getPeerInfoListBuilder(int i) {
                return getPeerInfoListFieldBuilder().getBuilder(i);
            }

            public List<PeerInfo.Builder> getPeerInfoListBuilderList() {
                return getPeerInfoListFieldBuilder().getBuilderList();
            }

            @Override
            public int getPeerInfoListCount() {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                return repeatedFieldBuilderV3 == null ? this.peerInfoList_.size() : repeatedFieldBuilderV3.getCount();
            }

            @Override
            public List<PeerInfo> getPeerInfoListList() {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.peerInfoList_) : repeatedFieldBuilderV3.getMessageList();
            }

            @Override
            public PeerInfoOrBuilder getPeerInfoListOrBuilder(int i) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                return (PeerInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.peerInfoList_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
            }

            @Override
            public List<? extends PeerInfoOrBuilder> getPeerInfoListOrBuilderList() {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.peerInfoList_);
            }

            @Override
            public String getSolidityBlock() {
                Object obj = this.solidityBlock_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.solidityBlock_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getSolidityBlockBytes() {
                Object obj = this.solidityBlock_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.solidityBlock_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public long getTotalFlow() {
                return this.totalFlow_;
            }

            @Override
            public boolean hasConfigNodeInfo() {
                return (this.configNodeInfoBuilder_ == null && this.configNodeInfo_ == null) ? false : true;
            }

            @Override
            public boolean hasMachineInfo() {
                return (this.machineInfoBuilder_ == null && this.machineInfo_ == null) ? false : true;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_NodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NodeInfo.class, Builder.class);
            }

            @Override
            protected MapField internalGetMapField(int i) {
                if (i == 11) {
                    return internalGetCheatWitnessInfoMap();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            protected MapField internalGetMutableMapField(int i) {
                if (i == 11) {
                    return internalGetMutableCheatWitnessInfoMap();
                }
                throw new RuntimeException("Invalid map field number: " + i);
            }

            @Override
            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeConfigNodeInfo(ConfigNodeInfo configNodeInfo) {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    ConfigNodeInfo configNodeInfo2 = this.configNodeInfo_;
                    if (configNodeInfo2 != null) {
                        configNodeInfo = ConfigNodeInfo.newBuilder(configNodeInfo2).mergeFrom(configNodeInfo).buildPartial();
                    }
                    this.configNodeInfo_ = configNodeInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(configNodeInfo);
                }
                return this;
            }

            @Override
            public org.tron.protos.Protocol.NodeInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$Builder");
            }

            @Override
            public Builder mergeFrom(Message message) {
                if (message instanceof NodeInfo) {
                    return mergeFrom((NodeInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public Builder mergeFrom(NodeInfo nodeInfo) {
                if (nodeInfo == NodeInfo.getDefaultInstance()) {
                    return this;
                }
                if (nodeInfo.getBeginSyncNum() != 0) {
                    setBeginSyncNum(nodeInfo.getBeginSyncNum());
                }
                if (!nodeInfo.getBlock().isEmpty()) {
                    this.block_ = nodeInfo.block_;
                    onChanged();
                }
                if (!nodeInfo.getSolidityBlock().isEmpty()) {
                    this.solidityBlock_ = nodeInfo.solidityBlock_;
                    onChanged();
                }
                if (nodeInfo.getCurrentConnectCount() != 0) {
                    setCurrentConnectCount(nodeInfo.getCurrentConnectCount());
                }
                if (nodeInfo.getActiveConnectCount() != 0) {
                    setActiveConnectCount(nodeInfo.getActiveConnectCount());
                }
                if (nodeInfo.getPassiveConnectCount() != 0) {
                    setPassiveConnectCount(nodeInfo.getPassiveConnectCount());
                }
                if (nodeInfo.getTotalFlow() != 0) {
                    setTotalFlow(nodeInfo.getTotalFlow());
                }
                if (this.peerInfoListBuilder_ == null) {
                    if (!nodeInfo.peerInfoList_.isEmpty()) {
                        if (this.peerInfoList_.isEmpty()) {
                            this.peerInfoList_ = nodeInfo.peerInfoList_;
                            this.bitField0_ &= -129;
                        } else {
                            ensurePeerInfoListIsMutable();
                            this.peerInfoList_.addAll(nodeInfo.peerInfoList_);
                        }
                        onChanged();
                    }
                } else if (!nodeInfo.peerInfoList_.isEmpty()) {
                    if (this.peerInfoListBuilder_.isEmpty()) {
                        this.peerInfoListBuilder_.dispose();
                        this.peerInfoListBuilder_ = null;
                        this.peerInfoList_ = nodeInfo.peerInfoList_;
                        this.bitField0_ &= -129;
                        this.peerInfoListBuilder_ = NodeInfo.alwaysUseFieldBuilders ? getPeerInfoListFieldBuilder() : null;
                    } else {
                        this.peerInfoListBuilder_.addAllMessages(nodeInfo.peerInfoList_);
                    }
                }
                if (nodeInfo.hasConfigNodeInfo()) {
                    mergeConfigNodeInfo(nodeInfo.getConfigNodeInfo());
                }
                if (nodeInfo.hasMachineInfo()) {
                    mergeMachineInfo(nodeInfo.getMachineInfo());
                }
                internalGetMutableCheatWitnessInfoMap().mergeFrom(nodeInfo.internalGetCheatWitnessInfoMap());
                mergeUnknownFields(nodeInfo.unknownFields);
                onChanged();
                return this;
            }

            public Builder mergeMachineInfo(MachineInfo machineInfo) {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    MachineInfo machineInfo2 = this.machineInfo_;
                    if (machineInfo2 != null) {
                        machineInfo = MachineInfo.newBuilder(machineInfo2).mergeFrom(machineInfo).buildPartial();
                    }
                    this.machineInfo_ = machineInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.mergeFrom(machineInfo);
                }
                return this;
            }

            @Override
            public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.mergeUnknownFields(unknownFieldSet);
            }

            public Builder putAllCheatWitnessInfoMap(Map<String, String> map) {
                internalGetMutableCheatWitnessInfoMap().getMutableMap().putAll(map);
                return this;
            }

            public Builder putCheatWitnessInfoMap(String str, String str2) {
                str.getClass();
                str2.getClass();
                internalGetMutableCheatWitnessInfoMap().getMutableMap().put(str, str2);
                return this;
            }

            public Builder removeCheatWitnessInfoMap(String str) {
                str.getClass();
                internalGetMutableCheatWitnessInfoMap().getMutableMap().remove(str);
                return this;
            }

            public Builder removePeerInfoList(int i) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.remove(i);
                }
                return this;
            }

            public Builder setActiveConnectCount(int i) {
                this.activeConnectCount_ = i;
                onChanged();
                return this;
            }

            public Builder setBeginSyncNum(long j) {
                this.beginSyncNum_ = j;
                onChanged();
                return this;
            }

            public Builder setBlock(String str) {
                str.getClass();
                this.block_ = str;
                onChanged();
                return this;
            }

            public Builder setBlockBytes(ByteString byteString) {
                byteString.getClass();
                NodeInfo.checkByteStringIsUtf8(byteString);
                this.block_ = byteString;
                onChanged();
                return this;
            }

            public Builder setConfigNodeInfo(ConfigNodeInfo.Builder builder) {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                ConfigNodeInfo build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.configNodeInfo_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setConfigNodeInfo(ConfigNodeInfo configNodeInfo) {
                SingleFieldBuilderV3<ConfigNodeInfo, ConfigNodeInfo.Builder, ConfigNodeInfoOrBuilder> singleFieldBuilderV3 = this.configNodeInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    configNodeInfo.getClass();
                    this.configNodeInfo_ = configNodeInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(configNodeInfo);
                }
                return this;
            }

            public Builder setCurrentConnectCount(int i) {
                this.currentConnectCount_ = i;
                onChanged();
                return this;
            }

            @Override
            public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                return (Builder) super.setField(fieldDescriptor, obj);
            }

            public Builder setMachineInfo(MachineInfo.Builder builder) {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                MachineInfo build = builder.build();
                if (singleFieldBuilderV3 == null) {
                    this.machineInfo_ = build;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(build);
                }
                return this;
            }

            public Builder setMachineInfo(MachineInfo machineInfo) {
                SingleFieldBuilderV3<MachineInfo, MachineInfo.Builder, MachineInfoOrBuilder> singleFieldBuilderV3 = this.machineInfoBuilder_;
                if (singleFieldBuilderV3 == null) {
                    machineInfo.getClass();
                    this.machineInfo_ = machineInfo;
                    onChanged();
                } else {
                    singleFieldBuilderV3.setMessage(machineInfo);
                }
                return this;
            }

            public Builder setPassiveConnectCount(int i) {
                this.passiveConnectCount_ = i;
                onChanged();
                return this;
            }

            public Builder setPeerInfoList(int i, PeerInfo.Builder builder) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, builder.build());
                }
                return this;
            }

            public Builder setPeerInfoList(int i, PeerInfo peerInfo) {
                RepeatedFieldBuilderV3<PeerInfo, PeerInfo.Builder, PeerInfoOrBuilder> repeatedFieldBuilderV3 = this.peerInfoListBuilder_;
                if (repeatedFieldBuilderV3 == null) {
                    peerInfo.getClass();
                    ensurePeerInfoListIsMutable();
                    this.peerInfoList_.set(i, peerInfo);
                    onChanged();
                } else {
                    repeatedFieldBuilderV3.setMessage(i, peerInfo);
                }
                return this;
            }

            @Override
            public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
            }

            public Builder setSolidityBlock(String str) {
                str.getClass();
                this.solidityBlock_ = str;
                onChanged();
                return this;
            }

            public Builder setSolidityBlockBytes(ByteString byteString) {
                byteString.getClass();
                NodeInfo.checkByteStringIsUtf8(byteString);
                this.solidityBlock_ = byteString;
                onChanged();
                return this;
            }

            public Builder setTotalFlow(long j) {
                this.totalFlow_ = j;
                onChanged();
                return this;
            }

            @Override
            public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
            }
        }

        public static final class CheatWitnessInfoMapDefaultEntryHolder {
            static final MapEntry<String, String> defaultEntry = MapEntry.newDefaultInstance(Protocol.internal_static_protocol_NodeInfo_CheatWitnessInfoMapEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");

            private CheatWitnessInfoMapDefaultEntryHolder() {
            }
        }

        public interface ConfigNodeInfoOrBuilder extends MessageOrBuilder {
            int getActiveNodeSize();

            long getAllowAdaptiveEnergy();

            long getAllowCreationOfContracts();

            int getBackupListenPort();

            int getBackupMemberSize();

            int getBackupPriority();

            String getCodeVersion();

            ByteString getCodeVersionBytes();

            int getDbVersion();

            boolean getDiscoverEnable();

            int getListenPort();

            int getMaxConnectCount();

            double getMaxTimeRatio();

            int getMinParticipationRate();

            double getMinTimeRatio();

            String getP2PVersion();

            ByteString getP2PVersionBytes();

            int getPassiveNodeSize();

            int getSameIpMaxConnectCount();

            int getSendNodeSize();

            boolean getSupportConstant();
        }

        public interface MachineInfoOrBuilder extends MessageOrBuilder {
            int getCpuCount();

            double getCpuRate();

            int getDeadLockThreadCount();

            MachineInfo.DeadLockThreadInfo getDeadLockThreadInfoList(int i);

            int getDeadLockThreadInfoListCount();

            List<MachineInfo.DeadLockThreadInfo> getDeadLockThreadInfoListList();

            MachineInfo.DeadLockThreadInfoOrBuilder getDeadLockThreadInfoListOrBuilder(int i);

            List<? extends MachineInfo.DeadLockThreadInfoOrBuilder> getDeadLockThreadInfoListOrBuilderList();

            long getFreeMemory();

            String getJavaVersion();

            ByteString getJavaVersionBytes();

            long getJvmFreeMemory();

            long getJvmTotalMemory();

            MachineInfo.MemoryDescInfo getMemoryDescInfoList(int i);

            int getMemoryDescInfoListCount();

            List<MachineInfo.MemoryDescInfo> getMemoryDescInfoListList();

            MachineInfo.MemoryDescInfoOrBuilder getMemoryDescInfoListOrBuilder(int i);

            List<? extends MachineInfo.MemoryDescInfoOrBuilder> getMemoryDescInfoListOrBuilderList();

            String getOsName();

            ByteString getOsNameBytes();

            double getProcessCpuRate();

            int getThreadCount();

            long getTotalMemory();
        }

        public interface PeerInfoOrBuilder extends MessageOrBuilder {
            double getAvgLatency();

            int getBlockInPorcSize();

            long getConnectTime();

            int getDisconnectTimes();

            long getHeadBlockTimeWeBothHave();

            String getHeadBlockWeBothHave();

            ByteString getHeadBlockWeBothHaveBytes();

            String getHost();

            ByteString getHostBytes();

            long getInFlow();

            boolean getIsActive();

            long getLastBlockUpdateTime();

            String getLastSyncBlock();

            ByteString getLastSyncBlockBytes();

            String getLocalDisconnectReason();

            ByteString getLocalDisconnectReasonBytes();

            boolean getNeedSyncFromPeer();

            boolean getNeedSyncFromUs();

            int getNodeCount();

            String getNodeId();

            ByteString getNodeIdBytes();

            int getPort();

            long getRemainNum();

            String getRemoteDisconnectReason();

            ByteString getRemoteDisconnectReasonBytes();

            int getScore();

            int getSyncBlockRequestedSize();

            boolean getSyncFlag();

            int getSyncToFetchSize();

            long getSyncToFetchSizePeekNum();

            long getUnFetchSynNum();
        }

        public static NodeInfo getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public MapField<String, String> internalGetCheatWitnessInfoMap() {
            MapField<String, String> mapField = this.cheatWitnessInfoMap_;
            return mapField == null ? MapField.emptyMapField(CheatWitnessInfoMapDefaultEntryHolder.defaultEntry) : mapField;
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(NodeInfo nodeInfo) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(nodeInfo);
        }

        public static NodeInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
        }

        public static NodeInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static NodeInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static NodeInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static NodeInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
        }

        public static NodeInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
        }

        public static NodeInfo parseFrom(InputStream inputStream) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
        }

        public static NodeInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return (NodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
        }

        public static NodeInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer);
        }

        public static NodeInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
        }

        public static NodeInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static NodeInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static Parser<NodeInfo> parser() {
            return PARSER;
        }

        @Override
        public boolean containsCheatWitnessInfoMap(String str) {
            str.getClass();
            return internalGetCheatWitnessInfoMap().getMap().containsKey(str);
        }

        @Override
        public boolean equals(Object obj) {
            boolean z;
            if (obj == this) {
                return true;
            }
            if (obj instanceof NodeInfo) {
                NodeInfo nodeInfo = (NodeInfo) obj;
                boolean z2 = getBeginSyncNum() == nodeInfo.getBeginSyncNum() && getBlock().equals(nodeInfo.getBlock()) && getSolidityBlock().equals(nodeInfo.getSolidityBlock()) && getCurrentConnectCount() == nodeInfo.getCurrentConnectCount() && getActiveConnectCount() == nodeInfo.getActiveConnectCount() && getPassiveConnectCount() == nodeInfo.getPassiveConnectCount() && getTotalFlow() == nodeInfo.getTotalFlow() && getPeerInfoListList().equals(nodeInfo.getPeerInfoListList()) && hasConfigNodeInfo() == nodeInfo.hasConfigNodeInfo();
                if (!hasConfigNodeInfo() ? z2 : !(!z2 || !getConfigNodeInfo().equals(nodeInfo.getConfigNodeInfo()))) {
                    if (hasMachineInfo() == nodeInfo.hasMachineInfo()) {
                        z = true;
                        if (hasMachineInfo() ? z : !(!z || !getMachineInfo().equals(nodeInfo.getMachineInfo()))) {
                            if (!internalGetCheatWitnessInfoMap().equals(nodeInfo.internalGetCheatWitnessInfoMap()) && this.unknownFields.equals(nodeInfo.unknownFields)) {
                                return true;
                            }
                        }
                        return false;
                    }
                }
                z = false;
                if (hasMachineInfo()) {
                    return false;
                }
                if (!internalGetCheatWitnessInfoMap().equals(nodeInfo.internalGetCheatWitnessInfoMap())) {
                }
                return false;
            }
            return super.equals(obj);
        }

        @Override
        public int getActiveConnectCount() {
            return this.activeConnectCount_;
        }

        @Override
        public long getBeginSyncNum() {
            return this.beginSyncNum_;
        }

        @Override
        public String getBlock() {
            Object obj = this.block_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.block_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getBlockBytes() {
            Object obj = this.block_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.block_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        @Deprecated
        public Map<String, String> getCheatWitnessInfoMap() {
            return getCheatWitnessInfoMapMap();
        }

        @Override
        public int getCheatWitnessInfoMapCount() {
            return internalGetCheatWitnessInfoMap().getMap().size();
        }

        @Override
        public Map<String, String> getCheatWitnessInfoMapMap() {
            return internalGetCheatWitnessInfoMap().getMap();
        }

        @Override
        public String getCheatWitnessInfoMapOrDefault(String str, String str2) {
            str.getClass();
            Map<String, String> map = internalGetCheatWitnessInfoMap().getMap();
            return map.containsKey(str) ? map.get(str) : str2;
        }

        @Override
        public String getCheatWitnessInfoMapOrThrow(String str) {
            str.getClass();
            Map<String, String> map = internalGetCheatWitnessInfoMap().getMap();
            if (map.containsKey(str)) {
                return map.get(str);
            }
            throw new IllegalArgumentException();
        }

        @Override
        public ConfigNodeInfo getConfigNodeInfo() {
            ConfigNodeInfo configNodeInfo = this.configNodeInfo_;
            return configNodeInfo == null ? ConfigNodeInfo.getDefaultInstance() : configNodeInfo;
        }

        @Override
        public ConfigNodeInfoOrBuilder getConfigNodeInfoOrBuilder() {
            return getConfigNodeInfo();
        }

        @Override
        public int getCurrentConnectCount() {
            return this.currentConnectCount_;
        }

        @Override
        public NodeInfo getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        @Override
        public MachineInfo getMachineInfo() {
            MachineInfo machineInfo = this.machineInfo_;
            return machineInfo == null ? MachineInfo.getDefaultInstance() : machineInfo;
        }

        @Override
        public MachineInfoOrBuilder getMachineInfoOrBuilder() {
            return getMachineInfo();
        }

        @Override
        public Parser<NodeInfo> getParserForType() {
            return PARSER;
        }

        @Override
        public int getPassiveConnectCount() {
            return this.passiveConnectCount_;
        }

        @Override
        public PeerInfo getPeerInfoList(int i) {
            return this.peerInfoList_.get(i);
        }

        @Override
        public int getPeerInfoListCount() {
            return this.peerInfoList_.size();
        }

        @Override
        public List<PeerInfo> getPeerInfoListList() {
            return this.peerInfoList_;
        }

        @Override
        public PeerInfoOrBuilder getPeerInfoListOrBuilder(int i) {
            return this.peerInfoList_.get(i);
        }

        @Override
        public List<? extends PeerInfoOrBuilder> getPeerInfoListOrBuilderList() {
            return this.peerInfoList_;
        }

        @Override
        public int getSerializedSize() {
            int i = this.memoizedSize;
            if (i != -1) {
                return i;
            }
            long j = this.beginSyncNum_;
            int computeInt64Size = j != 0 ? CodedOutputStream.computeInt64Size(1, j) : 0;
            if (!getBlockBytes().isEmpty()) {
                computeInt64Size += GeneratedMessageV3.computeStringSize(2, this.block_);
            }
            if (!getSolidityBlockBytes().isEmpty()) {
                computeInt64Size += GeneratedMessageV3.computeStringSize(3, this.solidityBlock_);
            }
            int i2 = this.currentConnectCount_;
            if (i2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt32Size(4, i2);
            }
            int i3 = this.activeConnectCount_;
            if (i3 != 0) {
                computeInt64Size += CodedOutputStream.computeInt32Size(5, i3);
            }
            int i4 = this.passiveConnectCount_;
            if (i4 != 0) {
                computeInt64Size += CodedOutputStream.computeInt32Size(6, i4);
            }
            long j2 = this.totalFlow_;
            if (j2 != 0) {
                computeInt64Size += CodedOutputStream.computeInt64Size(7, j2);
            }
            for (int i5 = 0; i5 < this.peerInfoList_.size(); i5++) {
                computeInt64Size += CodedOutputStream.computeMessageSize(8, this.peerInfoList_.get(i5));
            }
            if (this.configNodeInfo_ != null) {
                computeInt64Size += CodedOutputStream.computeMessageSize(9, getConfigNodeInfo());
            }
            if (this.machineInfo_ != null) {
                computeInt64Size += CodedOutputStream.computeMessageSize(10, getMachineInfo());
            }
            for (Map.Entry<String, String> entry : internalGetCheatWitnessInfoMap().getMap().entrySet()) {
                computeInt64Size += CodedOutputStream.computeMessageSize(11, CheatWitnessInfoMapDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build());
            }
            int serializedSize = computeInt64Size + this.unknownFields.getSerializedSize();
            this.memoizedSize = serializedSize;
            return serializedSize;
        }

        @Override
        public String getSolidityBlock() {
            Object obj = this.solidityBlock_;
            if (obj instanceof String) {
                return (String) obj;
            }
            String stringUtf8 = ((ByteString) obj).toStringUtf8();
            this.solidityBlock_ = stringUtf8;
            return stringUtf8;
        }

        @Override
        public ByteString getSolidityBlockBytes() {
            Object obj = this.solidityBlock_;
            if (obj instanceof String) {
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.solidityBlock_ = copyFromUtf8;
                return copyFromUtf8;
            }
            return (ByteString) obj;
        }

        @Override
        public long getTotalFlow() {
            return this.totalFlow_;
        }

        @Override
        public boolean hasConfigNodeInfo() {
            return this.configNodeInfo_ != null;
        }

        @Override
        public boolean hasMachineInfo() {
            return this.machineInfo_ != null;
        }

        @Override
        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            }
            int hashCode = ((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + Internal.hashLong(getBeginSyncNum())) * 37) + 2) * 53) + getBlock().hashCode()) * 37) + 3) * 53) + getSolidityBlock().hashCode()) * 37) + 4) * 53) + getCurrentConnectCount()) * 37) + 5) * 53) + getActiveConnectCount()) * 37) + 6) * 53) + getPassiveConnectCount()) * 37) + 7) * 53) + Internal.hashLong(getTotalFlow());
            if (getPeerInfoListCount() > 0) {
                hashCode = (((hashCode * 37) + 8) * 53) + getPeerInfoListList().hashCode();
            }
            if (hasConfigNodeInfo()) {
                hashCode = (((hashCode * 37) + 9) * 53) + getConfigNodeInfo().hashCode();
            }
            if (hasMachineInfo()) {
                hashCode = (((hashCode * 37) + 10) * 53) + getMachineInfo().hashCode();
            }
            if (!internalGetCheatWitnessInfoMap().getMap().isEmpty()) {
                hashCode = (((hashCode * 37) + 11) * 53) + internalGetCheatWitnessInfoMap().hashCode();
            }
            int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
            this.memoizedHashCode = hashCode2;
            return hashCode2;
        }

        @Override
        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b == 1) {
                return true;
            }
            if (b == 0) {
                return false;
            }
            this.memoizedIsInitialized = (byte) 1;
            return true;
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        @Override
        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            long j = this.beginSyncNum_;
            if (j != 0) {
                codedOutputStream.writeInt64(1, j);
            }
            if (!getBlockBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 2, this.block_);
            }
            if (!getSolidityBlockBytes().isEmpty()) {
                GeneratedMessageV3.writeString(codedOutputStream, 3, this.solidityBlock_);
            }
            int i = this.currentConnectCount_;
            if (i != 0) {
                codedOutputStream.writeInt32(4, i);
            }
            int i2 = this.activeConnectCount_;
            if (i2 != 0) {
                codedOutputStream.writeInt32(5, i2);
            }
            int i3 = this.passiveConnectCount_;
            if (i3 != 0) {
                codedOutputStream.writeInt32(6, i3);
            }
            long j2 = this.totalFlow_;
            if (j2 != 0) {
                codedOutputStream.writeInt64(7, j2);
            }
            for (int i4 = 0; i4 < this.peerInfoList_.size(); i4++) {
                codedOutputStream.writeMessage(8, this.peerInfoList_.get(i4));
            }
            if (this.configNodeInfo_ != null) {
                codedOutputStream.writeMessage(9, getConfigNodeInfo());
            }
            if (this.machineInfo_ != null) {
                codedOutputStream.writeMessage(10, getMachineInfo());
            }
            GeneratedMessageV3.serializeStringMapTo(codedOutputStream, internalGetCheatWitnessInfoMap(), CheatWitnessInfoMapDefaultEntryHolder.defaultEntry, 11);
            this.unknownFields.writeTo(codedOutputStream);
        }

        private NodeInfo(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = (byte) -1;
        }

        private NodeInfo() {
            this.memoizedIsInitialized = (byte) -1;
            this.beginSyncNum_ = 0L;
            this.block_ = "";
            this.solidityBlock_ = "";
            this.currentConnectCount_ = 0;
            this.activeConnectCount_ = 0;
            this.passiveConnectCount_ = 0;
            this.totalFlow_ = 0L;
            this.peerInfoList_ = Collections.emptyList();
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private NodeInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this();
            extensionRegistryLite.getClass();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (true) {
                ?? r3 = 128;
                if (z) {
                    return;
                }
                try {
                    try {
                        int readTag = codedInputStream.readTag();
                        switch (readTag) {
                            case 0:
                                break;
                            case 8:
                                this.beginSyncNum_ = codedInputStream.readInt64();
                                continue;
                            case 18:
                                this.block_ = codedInputStream.readStringRequireUtf8();
                                continue;
                            case 26:
                                this.solidityBlock_ = codedInputStream.readStringRequireUtf8();
                                continue;
                            case 32:
                                this.currentConnectCount_ = codedInputStream.readInt32();
                                continue;
                            case 40:
                                this.activeConnectCount_ = codedInputStream.readInt32();
                                continue;
                            case 48:
                                this.passiveConnectCount_ = codedInputStream.readInt32();
                                continue;
                            case 56:
                                this.totalFlow_ = codedInputStream.readInt64();
                                continue;
                            case 66:
                                if (!(z2 & true)) {
                                    this.peerInfoList_ = new ArrayList();
                                    z2 |= true;
                                }
                                this.peerInfoList_.add((PeerInfo) codedInputStream.readMessage(PeerInfo.parser(), extensionRegistryLite));
                                continue;
                            case 74:
                                ConfigNodeInfo configNodeInfo = this.configNodeInfo_;
                                ConfigNodeInfo.Builder builder = configNodeInfo != null ? configNodeInfo.toBuilder() : null;
                                ConfigNodeInfo configNodeInfo2 = (ConfigNodeInfo) codedInputStream.readMessage(ConfigNodeInfo.parser(), extensionRegistryLite);
                                this.configNodeInfo_ = configNodeInfo2;
                                if (builder != null) {
                                    builder.mergeFrom(configNodeInfo2);
                                    this.configNodeInfo_ = builder.buildPartial();
                                } else {
                                    continue;
                                }
                            case 82:
                                MachineInfo machineInfo = this.machineInfo_;
                                MachineInfo.Builder builder2 = machineInfo != null ? machineInfo.toBuilder() : null;
                                MachineInfo machineInfo2 = (MachineInfo) codedInputStream.readMessage(MachineInfo.parser(), extensionRegistryLite);
                                this.machineInfo_ = machineInfo2;
                                if (builder2 != null) {
                                    builder2.mergeFrom(machineInfo2);
                                    this.machineInfo_ = builder2.buildPartial();
                                } else {
                                    continue;
                                }
                            case 90:
                                if (!(z2 & true)) {
                                    this.cheatWitnessInfoMap_ = MapField.newMapField(CheatWitnessInfoMapDefaultEntryHolder.defaultEntry);
                                    z2 |= true;
                                }
                                MapEntry mapEntry = (MapEntry) codedInputStream.readMessage(CheatWitnessInfoMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistryLite);
                                this.cheatWitnessInfoMap_.getMutableMap().put((String) mapEntry.getKey(), (String) mapEntry.getValue());
                                continue;
                            default:
                                r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                if (r3 == 0) {
                                    break;
                                } else {
                                    continue;
                                }
                        }
                        z = true;
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(this);
                    } catch (IOException e2) {
                        throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                    }
                } finally {
                    if ((z2 & true) == r3) {
                        this.peerInfoList_ = Collections.unmodifiableList(this.peerInfoList_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                }
            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return Protocol.internal_static_protocol_NodeInfo_descriptor;
        }

        @Override
        protected MapField internalGetMapField(int i) {
            if (i == 11) {
                return internalGetCheatWitnessInfoMap();
            }
            throw new RuntimeException("Invalid map field number: " + i);
        }

        @Override
        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return Protocol.internal_static_protocol_NodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(NodeInfo.class, Builder.class);
        }

        public static final class PeerInfo extends GeneratedMessageV3 implements PeerInfoOrBuilder {
            public static final int AVGLATENCY_FIELD_NUMBER = 12;
            public static final int BLOCKINPORCSIZE_FIELD_NUMBER = 17;
            public static final int CONNECTTIME_FIELD_NUMBER = 11;
            public static final int DISCONNECTTIMES_FIELD_NUMBER = 23;
            public static final int HEADBLOCKTIMEWEBOTHHAVE_FIELD_NUMBER = 5;
            public static final int HEADBLOCKWEBOTHHAVE_FIELD_NUMBER = 18;
            public static final int HOST_FIELD_NUMBER = 8;
            public static final int INFLOW_FIELD_NUMBER = 22;
            public static final int ISACTIVE_FIELD_NUMBER = 19;
            public static final int LASTBLOCKUPDATETIME_FIELD_NUMBER = 3;
            public static final int LASTSYNCBLOCK_FIELD_NUMBER = 1;
            public static final int LOCALDISCONNECTREASON_FIELD_NUMBER = 24;
            public static final int NEEDSYNCFROMPEER_FIELD_NUMBER = 6;
            public static final int NEEDSYNCFROMUS_FIELD_NUMBER = 7;
            public static final int NODECOUNT_FIELD_NUMBER = 21;
            public static final int NODEID_FIELD_NUMBER = 10;
            public static final int PORT_FIELD_NUMBER = 9;
            public static final int REMAINNUM_FIELD_NUMBER = 2;
            public static final int REMOTEDISCONNECTREASON_FIELD_NUMBER = 25;
            public static final int SCORE_FIELD_NUMBER = 20;
            public static final int SYNCBLOCKREQUESTEDSIZE_FIELD_NUMBER = 15;
            public static final int SYNCFLAG_FIELD_NUMBER = 4;
            public static final int SYNCTOFETCHSIZEPEEKNUM_FIELD_NUMBER = 14;
            public static final int SYNCTOFETCHSIZE_FIELD_NUMBER = 13;
            public static final int UNFETCHSYNNUM_FIELD_NUMBER = 16;
            private static final long serialVersionUID = 0;
            private double avgLatency_;
            private int blockInPorcSize_;
            private long connectTime_;
            private int disconnectTimes_;
            private long headBlockTimeWeBothHave_;
            private volatile Object headBlockWeBothHave_;
            private volatile Object host_;
            private long inFlow_;
            private boolean isActive_;
            private long lastBlockUpdateTime_;
            private volatile Object lastSyncBlock_;
            private volatile Object localDisconnectReason_;
            private byte memoizedIsInitialized;
            private boolean needSyncFromPeer_;
            private boolean needSyncFromUs_;
            private int nodeCount_;
            private volatile Object nodeId_;
            private int port_;
            private long remainNum_;
            private volatile Object remoteDisconnectReason_;
            private int score_;
            private int syncBlockRequestedSize_;
            private boolean syncFlag_;
            private long syncToFetchSizePeekNum_;
            private int syncToFetchSize_;
            private long unFetchSynNum_;
            private static final PeerInfo DEFAULT_INSTANCE = new PeerInfo();
            private static final Parser<PeerInfo> PARSER = new AbstractParser<PeerInfo>() {
                @Override
                public PeerInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new PeerInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static PeerInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<PeerInfo> parser() {
                return PARSER;
            }

            @Override
            public double getAvgLatency() {
                return this.avgLatency_;
            }

            @Override
            public int getBlockInPorcSize() {
                return this.blockInPorcSize_;
            }

            @Override
            public long getConnectTime() {
                return this.connectTime_;
            }

            @Override
            public PeerInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public int getDisconnectTimes() {
                return this.disconnectTimes_;
            }

            @Override
            public long getHeadBlockTimeWeBothHave() {
                return this.headBlockTimeWeBothHave_;
            }

            @Override
            public long getInFlow() {
                return this.inFlow_;
            }

            @Override
            public boolean getIsActive() {
                return this.isActive_;
            }

            @Override
            public long getLastBlockUpdateTime() {
                return this.lastBlockUpdateTime_;
            }

            @Override
            public boolean getNeedSyncFromPeer() {
                return this.needSyncFromPeer_;
            }

            @Override
            public boolean getNeedSyncFromUs() {
                return this.needSyncFromUs_;
            }

            @Override
            public int getNodeCount() {
                return this.nodeCount_;
            }

            @Override
            public Parser<PeerInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getPort() {
                return this.port_;
            }

            @Override
            public long getRemainNum() {
                return this.remainNum_;
            }

            @Override
            public int getScore() {
                return this.score_;
            }

            @Override
            public int getSyncBlockRequestedSize() {
                return this.syncBlockRequestedSize_;
            }

            @Override
            public boolean getSyncFlag() {
                return this.syncFlag_;
            }

            @Override
            public int getSyncToFetchSize() {
                return this.syncToFetchSize_;
            }

            @Override
            public long getSyncToFetchSizePeekNum() {
                return this.syncToFetchSizePeekNum_;
            }

            @Override
            public long getUnFetchSynNum() {
                return this.unFetchSynNum_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private PeerInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private PeerInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.lastSyncBlock_ = "";
                this.remainNum_ = 0L;
                this.lastBlockUpdateTime_ = 0L;
                this.syncFlag_ = false;
                this.headBlockTimeWeBothHave_ = 0L;
                this.needSyncFromPeer_ = false;
                this.needSyncFromUs_ = false;
                this.host_ = "";
                this.port_ = 0;
                this.nodeId_ = "";
                this.connectTime_ = 0L;
                this.avgLatency_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.syncToFetchSize_ = 0;
                this.syncToFetchSizePeekNum_ = 0L;
                this.syncBlockRequestedSize_ = 0;
                this.unFetchSynNum_ = 0L;
                this.blockInPorcSize_ = 0;
                this.headBlockWeBothHave_ = "";
                this.isActive_ = false;
                this.score_ = 0;
                this.nodeCount_ = 0;
                this.inFlow_ = 0L;
                this.disconnectTimes_ = 0;
                this.localDisconnectReason_ = "";
                this.remoteDisconnectReason_ = "";
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private PeerInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 10:
                                    this.lastSyncBlock_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 16:
                                    this.remainNum_ = codedInputStream.readInt64();
                                    continue;
                                case 24:
                                    this.lastBlockUpdateTime_ = codedInputStream.readInt64();
                                    continue;
                                case 32:
                                    this.syncFlag_ = codedInputStream.readBool();
                                    continue;
                                case 40:
                                    this.headBlockTimeWeBothHave_ = codedInputStream.readInt64();
                                    continue;
                                case 48:
                                    this.needSyncFromPeer_ = codedInputStream.readBool();
                                    continue;
                                case 56:
                                    this.needSyncFromUs_ = codedInputStream.readBool();
                                    continue;
                                case 66:
                                    this.host_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 72:
                                    this.port_ = codedInputStream.readInt32();
                                    continue;
                                case 82:
                                    this.nodeId_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 88:
                                    this.connectTime_ = codedInputStream.readInt64();
                                    continue;
                                case 97:
                                    this.avgLatency_ = codedInputStream.readDouble();
                                    continue;
                                case 104:
                                    this.syncToFetchSize_ = codedInputStream.readInt32();
                                    continue;
                                case 112:
                                    this.syncToFetchSizePeekNum_ = codedInputStream.readInt64();
                                    continue;
                                case 120:
                                    this.syncBlockRequestedSize_ = codedInputStream.readInt32();
                                    continue;
                                case 128:
                                    this.unFetchSynNum_ = codedInputStream.readInt64();
                                    continue;
                                case 136:
                                    this.blockInPorcSize_ = codedInputStream.readInt32();
                                    continue;
                                case 146:
                                    this.headBlockWeBothHave_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 152:
                                    this.isActive_ = codedInputStream.readBool();
                                    continue;
                                case 160:
                                    this.score_ = codedInputStream.readInt32();
                                    continue;
                                case 168:
                                    this.nodeCount_ = codedInputStream.readInt32();
                                    continue;
                                case Opcodes.ARETURN:
                                    this.inFlow_ = codedInputStream.readInt64();
                                    continue;
                                case Opcodes.INVOKESTATIC:
                                    this.disconnectTimes_ = codedInputStream.readInt32();
                                    continue;
                                case 194:
                                    this.localDisconnectReason_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 202:
                                    this.remoteDisconnectReason_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                default:
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_NodeInfo_PeerInfo_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_NodeInfo_PeerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PeerInfo.class, Builder.class);
            }

            @Override
            public String getLastSyncBlock() {
                Object obj = this.lastSyncBlock_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lastSyncBlock_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getLastSyncBlockBytes() {
                Object obj = this.lastSyncBlock_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.lastSyncBlock_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getHost() {
                Object obj = this.host_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.host_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getHostBytes() {
                Object obj = this.host_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.host_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getNodeId() {
                Object obj = this.nodeId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.nodeId_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getNodeIdBytes() {
                Object obj = this.nodeId_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.nodeId_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getHeadBlockWeBothHave() {
                Object obj = this.headBlockWeBothHave_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.headBlockWeBothHave_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getHeadBlockWeBothHaveBytes() {
                Object obj = this.headBlockWeBothHave_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.headBlockWeBothHave_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getLocalDisconnectReason() {
                Object obj = this.localDisconnectReason_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.localDisconnectReason_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getLocalDisconnectReasonBytes() {
                Object obj = this.localDisconnectReason_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.localDisconnectReason_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getRemoteDisconnectReason() {
                Object obj = this.remoteDisconnectReason_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.remoteDisconnectReason_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getRemoteDisconnectReasonBytes() {
                Object obj = this.remoteDisconnectReason_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.remoteDisconnectReason_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!getLastSyncBlockBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 1, this.lastSyncBlock_);
                }
                long j = this.remainNum_;
                if (j != 0) {
                    codedOutputStream.writeInt64(2, j);
                }
                long j2 = this.lastBlockUpdateTime_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(3, j2);
                }
                boolean z = this.syncFlag_;
                if (z) {
                    codedOutputStream.writeBool(4, z);
                }
                long j3 = this.headBlockTimeWeBothHave_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(5, j3);
                }
                boolean z2 = this.needSyncFromPeer_;
                if (z2) {
                    codedOutputStream.writeBool(6, z2);
                }
                boolean z3 = this.needSyncFromUs_;
                if (z3) {
                    codedOutputStream.writeBool(7, z3);
                }
                if (!getHostBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 8, this.host_);
                }
                int i = this.port_;
                if (i != 0) {
                    codedOutputStream.writeInt32(9, i);
                }
                if (!getNodeIdBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 10, this.nodeId_);
                }
                long j4 = this.connectTime_;
                if (j4 != 0) {
                    codedOutputStream.writeInt64(11, j4);
                }
                double d = this.avgLatency_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(12, d);
                }
                int i2 = this.syncToFetchSize_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(13, i2);
                }
                long j5 = this.syncToFetchSizePeekNum_;
                if (j5 != 0) {
                    codedOutputStream.writeInt64(14, j5);
                }
                int i3 = this.syncBlockRequestedSize_;
                if (i3 != 0) {
                    codedOutputStream.writeInt32(15, i3);
                }
                long j6 = this.unFetchSynNum_;
                if (j6 != 0) {
                    codedOutputStream.writeInt64(16, j6);
                }
                int i4 = this.blockInPorcSize_;
                if (i4 != 0) {
                    codedOutputStream.writeInt32(17, i4);
                }
                if (!getHeadBlockWeBothHaveBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 18, this.headBlockWeBothHave_);
                }
                boolean z4 = this.isActive_;
                if (z4) {
                    codedOutputStream.writeBool(19, z4);
                }
                int i5 = this.score_;
                if (i5 != 0) {
                    codedOutputStream.writeInt32(20, i5);
                }
                int i6 = this.nodeCount_;
                if (i6 != 0) {
                    codedOutputStream.writeInt32(21, i6);
                }
                long j7 = this.inFlow_;
                if (j7 != 0) {
                    codedOutputStream.writeInt64(22, j7);
                }
                int i7 = this.disconnectTimes_;
                if (i7 != 0) {
                    codedOutputStream.writeInt32(23, i7);
                }
                if (!getLocalDisconnectReasonBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 24, this.localDisconnectReason_);
                }
                if (!getRemoteDisconnectReasonBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 25, this.remoteDisconnectReason_);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeStringSize = !getLastSyncBlockBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.lastSyncBlock_) : 0;
                long j = this.remainNum_;
                if (j != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(2, j);
                }
                long j2 = this.lastBlockUpdateTime_;
                if (j2 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(3, j2);
                }
                boolean z = this.syncFlag_;
                if (z) {
                    computeStringSize += CodedOutputStream.computeBoolSize(4, z);
                }
                long j3 = this.headBlockTimeWeBothHave_;
                if (j3 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(5, j3);
                }
                boolean z2 = this.needSyncFromPeer_;
                if (z2) {
                    computeStringSize += CodedOutputStream.computeBoolSize(6, z2);
                }
                boolean z3 = this.needSyncFromUs_;
                if (z3) {
                    computeStringSize += CodedOutputStream.computeBoolSize(7, z3);
                }
                if (!getHostBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(8, this.host_);
                }
                int i2 = this.port_;
                if (i2 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(9, i2);
                }
                if (!getNodeIdBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(10, this.nodeId_);
                }
                long j4 = this.connectTime_;
                if (j4 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(11, j4);
                }
                double d = this.avgLatency_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeStringSize += CodedOutputStream.computeDoubleSize(12, d);
                }
                int i3 = this.syncToFetchSize_;
                if (i3 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(13, i3);
                }
                long j5 = this.syncToFetchSizePeekNum_;
                if (j5 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(14, j5);
                }
                int i4 = this.syncBlockRequestedSize_;
                if (i4 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(15, i4);
                }
                long j6 = this.unFetchSynNum_;
                if (j6 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(16, j6);
                }
                int i5 = this.blockInPorcSize_;
                if (i5 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(17, i5);
                }
                if (!getHeadBlockWeBothHaveBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(18, this.headBlockWeBothHave_);
                }
                boolean z4 = this.isActive_;
                if (z4) {
                    computeStringSize += CodedOutputStream.computeBoolSize(19, z4);
                }
                int i6 = this.score_;
                if (i6 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(20, i6);
                }
                int i7 = this.nodeCount_;
                if (i7 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(21, i7);
                }
                long j7 = this.inFlow_;
                if (j7 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(22, j7);
                }
                int i8 = this.disconnectTimes_;
                if (i8 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(23, i8);
                }
                if (!getLocalDisconnectReasonBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(24, this.localDisconnectReason_);
                }
                if (!getRemoteDisconnectReasonBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(25, this.remoteDisconnectReason_);
                }
                int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof PeerInfo)) {
                    return super.equals(obj);
                }
                PeerInfo peerInfo = (PeerInfo) obj;
                return getLastSyncBlock().equals(peerInfo.getLastSyncBlock()) && getRemainNum() == peerInfo.getRemainNum() && getLastBlockUpdateTime() == peerInfo.getLastBlockUpdateTime() && getSyncFlag() == peerInfo.getSyncFlag() && getHeadBlockTimeWeBothHave() == peerInfo.getHeadBlockTimeWeBothHave() && getNeedSyncFromPeer() == peerInfo.getNeedSyncFromPeer() && getNeedSyncFromUs() == peerInfo.getNeedSyncFromUs() && getHost().equals(peerInfo.getHost()) && getPort() == peerInfo.getPort() && getNodeId().equals(peerInfo.getNodeId()) && getConnectTime() == peerInfo.getConnectTime() && Double.doubleToLongBits(getAvgLatency()) == Double.doubleToLongBits(peerInfo.getAvgLatency()) && getSyncToFetchSize() == peerInfo.getSyncToFetchSize() && getSyncToFetchSizePeekNum() == peerInfo.getSyncToFetchSizePeekNum() && getSyncBlockRequestedSize() == peerInfo.getSyncBlockRequestedSize() && getUnFetchSynNum() == peerInfo.getUnFetchSynNum() && getBlockInPorcSize() == peerInfo.getBlockInPorcSize() && getHeadBlockWeBothHave().equals(peerInfo.getHeadBlockWeBothHave()) && getIsActive() == peerInfo.getIsActive() && getScore() == peerInfo.getScore() && getNodeCount() == peerInfo.getNodeCount() && getInFlow() == peerInfo.getInFlow() && getDisconnectTimes() == peerInfo.getDisconnectTimes() && getLocalDisconnectReason().equals(peerInfo.getLocalDisconnectReason()) && getRemoteDisconnectReason().equals(peerInfo.getRemoteDisconnectReason()) && this.unknownFields.equals(peerInfo.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getLastSyncBlock().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getRemainNum())) * 37) + 3) * 53) + Internal.hashLong(getLastBlockUpdateTime())) * 37) + 4) * 53) + Internal.hashBoolean(getSyncFlag())) * 37) + 5) * 53) + Internal.hashLong(getHeadBlockTimeWeBothHave())) * 37) + 6) * 53) + Internal.hashBoolean(getNeedSyncFromPeer())) * 37) + 7) * 53) + Internal.hashBoolean(getNeedSyncFromUs())) * 37) + 8) * 53) + getHost().hashCode()) * 37) + 9) * 53) + getPort()) * 37) + 10) * 53) + getNodeId().hashCode()) * 37) + 11) * 53) + Internal.hashLong(getConnectTime())) * 37) + 12) * 53) + Internal.hashLong(Double.doubleToLongBits(getAvgLatency()))) * 37) + 13) * 53) + getSyncToFetchSize()) * 37) + 14) * 53) + Internal.hashLong(getSyncToFetchSizePeekNum())) * 37) + 15) * 53) + getSyncBlockRequestedSize()) * 37) + 16) * 53) + Internal.hashLong(getUnFetchSynNum())) * 37) + 17) * 53) + getBlockInPorcSize()) * 37) + 18) * 53) + getHeadBlockWeBothHave().hashCode()) * 37) + 19) * 53) + Internal.hashBoolean(getIsActive())) * 37) + 20) * 53) + getScore()) * 37) + 21) * 53) + getNodeCount()) * 37) + 22) * 53) + Internal.hashLong(getInFlow())) * 37) + 23) * 53) + getDisconnectTimes()) * 37) + 24) * 53) + getLocalDisconnectReason().hashCode()) * 37) + 25) * 53) + getRemoteDisconnectReason().hashCode()) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static PeerInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static PeerInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static PeerInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static PeerInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static PeerInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static PeerInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static PeerInfo parseFrom(InputStream inputStream) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static PeerInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static PeerInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static PeerInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static PeerInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static PeerInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (PeerInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(PeerInfo peerInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(peerInfo);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements PeerInfoOrBuilder {
                private double avgLatency_;
                private int blockInPorcSize_;
                private long connectTime_;
                private int disconnectTimes_;
                private long headBlockTimeWeBothHave_;
                private Object headBlockWeBothHave_;
                private Object host_;
                private long inFlow_;
                private boolean isActive_;
                private long lastBlockUpdateTime_;
                private Object lastSyncBlock_;
                private Object localDisconnectReason_;
                private boolean needSyncFromPeer_;
                private boolean needSyncFromUs_;
                private int nodeCount_;
                private Object nodeId_;
                private int port_;
                private long remainNum_;
                private Object remoteDisconnectReason_;
                private int score_;
                private int syncBlockRequestedSize_;
                private boolean syncFlag_;
                private long syncToFetchSizePeekNum_;
                private int syncToFetchSize_;
                private long unFetchSynNum_;

                @Override
                public double getAvgLatency() {
                    return this.avgLatency_;
                }

                @Override
                public int getBlockInPorcSize() {
                    return this.blockInPorcSize_;
                }

                @Override
                public long getConnectTime() {
                    return this.connectTime_;
                }

                @Override
                public int getDisconnectTimes() {
                    return this.disconnectTimes_;
                }

                @Override
                public long getHeadBlockTimeWeBothHave() {
                    return this.headBlockTimeWeBothHave_;
                }

                @Override
                public long getInFlow() {
                    return this.inFlow_;
                }

                @Override
                public boolean getIsActive() {
                    return this.isActive_;
                }

                @Override
                public long getLastBlockUpdateTime() {
                    return this.lastBlockUpdateTime_;
                }

                @Override
                public boolean getNeedSyncFromPeer() {
                    return this.needSyncFromPeer_;
                }

                @Override
                public boolean getNeedSyncFromUs() {
                    return this.needSyncFromUs_;
                }

                @Override
                public int getNodeCount() {
                    return this.nodeCount_;
                }

                @Override
                public int getPort() {
                    return this.port_;
                }

                @Override
                public long getRemainNum() {
                    return this.remainNum_;
                }

                @Override
                public int getScore() {
                    return this.score_;
                }

                @Override
                public int getSyncBlockRequestedSize() {
                    return this.syncBlockRequestedSize_;
                }

                @Override
                public boolean getSyncFlag() {
                    return this.syncFlag_;
                }

                @Override
                public int getSyncToFetchSize() {
                    return this.syncToFetchSize_;
                }

                @Override
                public long getSyncToFetchSizePeekNum() {
                    return this.syncToFetchSizePeekNum_;
                }

                @Override
                public long getUnFetchSynNum() {
                    return this.unFetchSynNum_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_NodeInfo_PeerInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_NodeInfo_PeerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(PeerInfo.class, Builder.class);
                }

                private Builder() {
                    this.lastSyncBlock_ = "";
                    this.host_ = "";
                    this.nodeId_ = "";
                    this.headBlockWeBothHave_ = "";
                    this.localDisconnectReason_ = "";
                    this.remoteDisconnectReason_ = "";
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.lastSyncBlock_ = "";
                    this.host_ = "";
                    this.nodeId_ = "";
                    this.headBlockWeBothHave_ = "";
                    this.localDisconnectReason_ = "";
                    this.remoteDisconnectReason_ = "";
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = PeerInfo.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.lastSyncBlock_ = "";
                    this.remainNum_ = 0L;
                    this.lastBlockUpdateTime_ = 0L;
                    this.syncFlag_ = false;
                    this.headBlockTimeWeBothHave_ = 0L;
                    this.needSyncFromPeer_ = false;
                    this.needSyncFromUs_ = false;
                    this.host_ = "";
                    this.port_ = 0;
                    this.nodeId_ = "";
                    this.connectTime_ = 0L;
                    this.avgLatency_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.syncToFetchSize_ = 0;
                    this.syncToFetchSizePeekNum_ = 0L;
                    this.syncBlockRequestedSize_ = 0;
                    this.unFetchSynNum_ = 0L;
                    this.blockInPorcSize_ = 0;
                    this.headBlockWeBothHave_ = "";
                    this.isActive_ = false;
                    this.score_ = 0;
                    this.nodeCount_ = 0;
                    this.inFlow_ = 0L;
                    this.disconnectTimes_ = 0;
                    this.localDisconnectReason_ = "";
                    this.remoteDisconnectReason_ = "";
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_NodeInfo_PeerInfo_descriptor;
                }

                @Override
                public PeerInfo getDefaultInstanceForType() {
                    return PeerInfo.getDefaultInstance();
                }

                @Override
                public PeerInfo build() {
                    PeerInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public PeerInfo buildPartial() {
                    PeerInfo peerInfo = new PeerInfo(this);
                    peerInfo.lastSyncBlock_ = this.lastSyncBlock_;
                    peerInfo.remainNum_ = this.remainNum_;
                    peerInfo.lastBlockUpdateTime_ = this.lastBlockUpdateTime_;
                    peerInfo.syncFlag_ = this.syncFlag_;
                    peerInfo.headBlockTimeWeBothHave_ = this.headBlockTimeWeBothHave_;
                    peerInfo.needSyncFromPeer_ = this.needSyncFromPeer_;
                    peerInfo.needSyncFromUs_ = this.needSyncFromUs_;
                    peerInfo.host_ = this.host_;
                    peerInfo.port_ = this.port_;
                    peerInfo.nodeId_ = this.nodeId_;
                    peerInfo.connectTime_ = this.connectTime_;
                    peerInfo.avgLatency_ = this.avgLatency_;
                    peerInfo.syncToFetchSize_ = this.syncToFetchSize_;
                    peerInfo.syncToFetchSizePeekNum_ = this.syncToFetchSizePeekNum_;
                    peerInfo.syncBlockRequestedSize_ = this.syncBlockRequestedSize_;
                    peerInfo.unFetchSynNum_ = this.unFetchSynNum_;
                    peerInfo.blockInPorcSize_ = this.blockInPorcSize_;
                    peerInfo.headBlockWeBothHave_ = this.headBlockWeBothHave_;
                    peerInfo.isActive_ = this.isActive_;
                    peerInfo.score_ = this.score_;
                    peerInfo.nodeCount_ = this.nodeCount_;
                    peerInfo.inFlow_ = this.inFlow_;
                    peerInfo.disconnectTimes_ = this.disconnectTimes_;
                    peerInfo.localDisconnectReason_ = this.localDisconnectReason_;
                    peerInfo.remoteDisconnectReason_ = this.remoteDisconnectReason_;
                    onBuilt();
                    return peerInfo;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof PeerInfo) {
                        return mergeFrom((PeerInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(PeerInfo peerInfo) {
                    if (peerInfo == PeerInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (!peerInfo.getLastSyncBlock().isEmpty()) {
                        this.lastSyncBlock_ = peerInfo.lastSyncBlock_;
                        onChanged();
                    }
                    if (peerInfo.getRemainNum() != 0) {
                        setRemainNum(peerInfo.getRemainNum());
                    }
                    if (peerInfo.getLastBlockUpdateTime() != 0) {
                        setLastBlockUpdateTime(peerInfo.getLastBlockUpdateTime());
                    }
                    if (peerInfo.getSyncFlag()) {
                        setSyncFlag(peerInfo.getSyncFlag());
                    }
                    if (peerInfo.getHeadBlockTimeWeBothHave() != 0) {
                        setHeadBlockTimeWeBothHave(peerInfo.getHeadBlockTimeWeBothHave());
                    }
                    if (peerInfo.getNeedSyncFromPeer()) {
                        setNeedSyncFromPeer(peerInfo.getNeedSyncFromPeer());
                    }
                    if (peerInfo.getNeedSyncFromUs()) {
                        setNeedSyncFromUs(peerInfo.getNeedSyncFromUs());
                    }
                    if (!peerInfo.getHost().isEmpty()) {
                        this.host_ = peerInfo.host_;
                        onChanged();
                    }
                    if (peerInfo.getPort() != 0) {
                        setPort(peerInfo.getPort());
                    }
                    if (!peerInfo.getNodeId().isEmpty()) {
                        this.nodeId_ = peerInfo.nodeId_;
                        onChanged();
                    }
                    if (peerInfo.getConnectTime() != 0) {
                        setConnectTime(peerInfo.getConnectTime());
                    }
                    if (peerInfo.getAvgLatency() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setAvgLatency(peerInfo.getAvgLatency());
                    }
                    if (peerInfo.getSyncToFetchSize() != 0) {
                        setSyncToFetchSize(peerInfo.getSyncToFetchSize());
                    }
                    if (peerInfo.getSyncToFetchSizePeekNum() != 0) {
                        setSyncToFetchSizePeekNum(peerInfo.getSyncToFetchSizePeekNum());
                    }
                    if (peerInfo.getSyncBlockRequestedSize() != 0) {
                        setSyncBlockRequestedSize(peerInfo.getSyncBlockRequestedSize());
                    }
                    if (peerInfo.getUnFetchSynNum() != 0) {
                        setUnFetchSynNum(peerInfo.getUnFetchSynNum());
                    }
                    if (peerInfo.getBlockInPorcSize() != 0) {
                        setBlockInPorcSize(peerInfo.getBlockInPorcSize());
                    }
                    if (!peerInfo.getHeadBlockWeBothHave().isEmpty()) {
                        this.headBlockWeBothHave_ = peerInfo.headBlockWeBothHave_;
                        onChanged();
                    }
                    if (peerInfo.getIsActive()) {
                        setIsActive(peerInfo.getIsActive());
                    }
                    if (peerInfo.getScore() != 0) {
                        setScore(peerInfo.getScore());
                    }
                    if (peerInfo.getNodeCount() != 0) {
                        setNodeCount(peerInfo.getNodeCount());
                    }
                    if (peerInfo.getInFlow() != 0) {
                        setInFlow(peerInfo.getInFlow());
                    }
                    if (peerInfo.getDisconnectTimes() != 0) {
                        setDisconnectTimes(peerInfo.getDisconnectTimes());
                    }
                    if (!peerInfo.getLocalDisconnectReason().isEmpty()) {
                        this.localDisconnectReason_ = peerInfo.localDisconnectReason_;
                        onChanged();
                    }
                    if (!peerInfo.getRemoteDisconnectReason().isEmpty()) {
                        this.remoteDisconnectReason_ = peerInfo.remoteDisconnectReason_;
                        onChanged();
                    }
                    mergeUnknownFields(peerInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.NodeInfo.PeerInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.PeerInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$PeerInfo$Builder");
                }

                @Override
                public String getLastSyncBlock() {
                    Object obj = this.lastSyncBlock_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.lastSyncBlock_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getLastSyncBlockBytes() {
                    Object obj = this.lastSyncBlock_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.lastSyncBlock_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setLastSyncBlock(String str) {
                    str.getClass();
                    this.lastSyncBlock_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearLastSyncBlock() {
                    this.lastSyncBlock_ = PeerInfo.getDefaultInstance().getLastSyncBlock();
                    onChanged();
                    return this;
                }

                public Builder setLastSyncBlockBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.lastSyncBlock_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setRemainNum(long j) {
                    this.remainNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearRemainNum() {
                    this.remainNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setLastBlockUpdateTime(long j) {
                    this.lastBlockUpdateTime_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearLastBlockUpdateTime() {
                    this.lastBlockUpdateTime_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setSyncFlag(boolean z) {
                    this.syncFlag_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearSyncFlag() {
                    this.syncFlag_ = false;
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockTimeWeBothHave(long j) {
                    this.headBlockTimeWeBothHave_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearHeadBlockTimeWeBothHave() {
                    this.headBlockTimeWeBothHave_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setNeedSyncFromPeer(boolean z) {
                    this.needSyncFromPeer_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearNeedSyncFromPeer() {
                    this.needSyncFromPeer_ = false;
                    onChanged();
                    return this;
                }

                public Builder setNeedSyncFromUs(boolean z) {
                    this.needSyncFromUs_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearNeedSyncFromUs() {
                    this.needSyncFromUs_ = false;
                    onChanged();
                    return this;
                }

                @Override
                public String getHost() {
                    Object obj = this.host_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.host_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getHostBytes() {
                    Object obj = this.host_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.host_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setHost(String str) {
                    str.getClass();
                    this.host_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearHost() {
                    this.host_ = PeerInfo.getDefaultInstance().getHost();
                    onChanged();
                    return this;
                }

                public Builder setHostBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.host_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setPort(int i) {
                    this.port_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearPort() {
                    this.port_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public String getNodeId() {
                    Object obj = this.nodeId_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.nodeId_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getNodeIdBytes() {
                    Object obj = this.nodeId_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.nodeId_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setNodeId(String str) {
                    str.getClass();
                    this.nodeId_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearNodeId() {
                    this.nodeId_ = PeerInfo.getDefaultInstance().getNodeId();
                    onChanged();
                    return this;
                }

                public Builder setNodeIdBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.nodeId_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setConnectTime(long j) {
                    this.connectTime_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearConnectTime() {
                    this.connectTime_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setAvgLatency(double d) {
                    this.avgLatency_ = d;
                    onChanged();
                    return this;
                }

                public Builder clearAvgLatency() {
                    this.avgLatency_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder setSyncToFetchSize(int i) {
                    this.syncToFetchSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearSyncToFetchSize() {
                    this.syncToFetchSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setSyncToFetchSizePeekNum(long j) {
                    this.syncToFetchSizePeekNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearSyncToFetchSizePeekNum() {
                    this.syncToFetchSizePeekNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setSyncBlockRequestedSize(int i) {
                    this.syncBlockRequestedSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearSyncBlockRequestedSize() {
                    this.syncBlockRequestedSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setUnFetchSynNum(long j) {
                    this.unFetchSynNum_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearUnFetchSynNum() {
                    this.unFetchSynNum_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setBlockInPorcSize(int i) {
                    this.blockInPorcSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearBlockInPorcSize() {
                    this.blockInPorcSize_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public String getHeadBlockWeBothHave() {
                    Object obj = this.headBlockWeBothHave_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.headBlockWeBothHave_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getHeadBlockWeBothHaveBytes() {
                    Object obj = this.headBlockWeBothHave_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.headBlockWeBothHave_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setHeadBlockWeBothHave(String str) {
                    str.getClass();
                    this.headBlockWeBothHave_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearHeadBlockWeBothHave() {
                    this.headBlockWeBothHave_ = PeerInfo.getDefaultInstance().getHeadBlockWeBothHave();
                    onChanged();
                    return this;
                }

                public Builder setHeadBlockWeBothHaveBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.headBlockWeBothHave_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setIsActive(boolean z) {
                    this.isActive_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearIsActive() {
                    this.isActive_ = false;
                    onChanged();
                    return this;
                }

                public Builder setScore(int i) {
                    this.score_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearScore() {
                    this.score_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setNodeCount(int i) {
                    this.nodeCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearNodeCount() {
                    this.nodeCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setInFlow(long j) {
                    this.inFlow_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearInFlow() {
                    this.inFlow_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setDisconnectTimes(int i) {
                    this.disconnectTimes_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearDisconnectTimes() {
                    this.disconnectTimes_ = 0;
                    onChanged();
                    return this;
                }

                @Override
                public String getLocalDisconnectReason() {
                    Object obj = this.localDisconnectReason_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.localDisconnectReason_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getLocalDisconnectReasonBytes() {
                    Object obj = this.localDisconnectReason_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.localDisconnectReason_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setLocalDisconnectReason(String str) {
                    str.getClass();
                    this.localDisconnectReason_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearLocalDisconnectReason() {
                    this.localDisconnectReason_ = PeerInfo.getDefaultInstance().getLocalDisconnectReason();
                    onChanged();
                    return this;
                }

                public Builder setLocalDisconnectReasonBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.localDisconnectReason_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public String getRemoteDisconnectReason() {
                    Object obj = this.remoteDisconnectReason_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.remoteDisconnectReason_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getRemoteDisconnectReasonBytes() {
                    Object obj = this.remoteDisconnectReason_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.remoteDisconnectReason_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setRemoteDisconnectReason(String str) {
                    str.getClass();
                    this.remoteDisconnectReason_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearRemoteDisconnectReason() {
                    this.remoteDisconnectReason_ = PeerInfo.getDefaultInstance().getRemoteDisconnectReason();
                    onChanged();
                    return this;
                }

                public Builder setRemoteDisconnectReasonBytes(ByteString byteString) {
                    byteString.getClass();
                    PeerInfo.checkByteStringIsUtf8(byteString);
                    this.remoteDisconnectReason_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class ConfigNodeInfo extends GeneratedMessageV3 implements ConfigNodeInfoOrBuilder {
            public static final int ACTIVENODESIZE_FIELD_NUMBER = 5;
            public static final int ALLOWADAPTIVEENERGY_FIELD_NUMBER = 19;
            public static final int ALLOWCREATIONOFCONTRACTS_FIELD_NUMBER = 18;
            public static final int BACKUPLISTENPORT_FIELD_NUMBER = 10;
            public static final int BACKUPMEMBERSIZE_FIELD_NUMBER = 11;
            public static final int BACKUPPRIORITY_FIELD_NUMBER = 12;
            public static final int CODEVERSION_FIELD_NUMBER = 1;
            public static final int DBVERSION_FIELD_NUMBER = 13;
            public static final int DISCOVERENABLE_FIELD_NUMBER = 4;
            public static final int LISTENPORT_FIELD_NUMBER = 3;
            public static final int MAXCONNECTCOUNT_FIELD_NUMBER = 8;
            public static final int MAXTIMERATIO_FIELD_NUMBER = 17;
            public static final int MINPARTICIPATIONRATE_FIELD_NUMBER = 14;
            public static final int MINTIMERATIO_FIELD_NUMBER = 16;
            public static final int P2PVERSION_FIELD_NUMBER = 2;
            public static final int PASSIVENODESIZE_FIELD_NUMBER = 6;
            public static final int SAMEIPMAXCONNECTCOUNT_FIELD_NUMBER = 9;
            public static final int SENDNODESIZE_FIELD_NUMBER = 7;
            public static final int SUPPORTCONSTANT_FIELD_NUMBER = 15;
            private static final long serialVersionUID = 0;
            private int activeNodeSize_;
            private long allowAdaptiveEnergy_;
            private long allowCreationOfContracts_;
            private int backupListenPort_;
            private int backupMemberSize_;
            private int backupPriority_;
            private volatile Object codeVersion_;
            private int dbVersion_;
            private boolean discoverEnable_;
            private int listenPort_;
            private int maxConnectCount_;
            private double maxTimeRatio_;
            private byte memoizedIsInitialized;
            private int minParticipationRate_;
            private double minTimeRatio_;
            private volatile Object p2PVersion_;
            private int passiveNodeSize_;
            private int sameIpMaxConnectCount_;
            private int sendNodeSize_;
            private boolean supportConstant_;
            private static final ConfigNodeInfo DEFAULT_INSTANCE = new ConfigNodeInfo();
            private static final Parser<ConfigNodeInfo> PARSER = new AbstractParser<ConfigNodeInfo>() {
                @Override
                public ConfigNodeInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new ConfigNodeInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public static ConfigNodeInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<ConfigNodeInfo> parser() {
                return PARSER;
            }

            @Override
            public int getActiveNodeSize() {
                return this.activeNodeSize_;
            }

            @Override
            public long getAllowAdaptiveEnergy() {
                return this.allowAdaptiveEnergy_;
            }

            @Override
            public long getAllowCreationOfContracts() {
                return this.allowCreationOfContracts_;
            }

            @Override
            public int getBackupListenPort() {
                return this.backupListenPort_;
            }

            @Override
            public int getBackupMemberSize() {
                return this.backupMemberSize_;
            }

            @Override
            public int getBackupPriority() {
                return this.backupPriority_;
            }

            @Override
            public int getDbVersion() {
                return this.dbVersion_;
            }

            @Override
            public ConfigNodeInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public boolean getDiscoverEnable() {
                return this.discoverEnable_;
            }

            @Override
            public int getListenPort() {
                return this.listenPort_;
            }

            @Override
            public int getMaxConnectCount() {
                return this.maxConnectCount_;
            }

            @Override
            public double getMaxTimeRatio() {
                return this.maxTimeRatio_;
            }

            @Override
            public int getMinParticipationRate() {
                return this.minParticipationRate_;
            }

            @Override
            public double getMinTimeRatio() {
                return this.minTimeRatio_;
            }

            @Override
            public Parser<ConfigNodeInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public int getPassiveNodeSize() {
                return this.passiveNodeSize_;
            }

            @Override
            public int getSameIpMaxConnectCount() {
                return this.sameIpMaxConnectCount_;
            }

            @Override
            public int getSendNodeSize() {
                return this.sendNodeSize_;
            }

            @Override
            public boolean getSupportConstant() {
                return this.supportConstant_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private ConfigNodeInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private ConfigNodeInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.codeVersion_ = "";
                this.p2PVersion_ = "";
                this.listenPort_ = 0;
                this.discoverEnable_ = false;
                this.activeNodeSize_ = 0;
                this.passiveNodeSize_ = 0;
                this.sendNodeSize_ = 0;
                this.maxConnectCount_ = 0;
                this.sameIpMaxConnectCount_ = 0;
                this.backupListenPort_ = 0;
                this.backupMemberSize_ = 0;
                this.backupPriority_ = 0;
                this.dbVersion_ = 0;
                this.minParticipationRate_ = 0;
                this.supportConstant_ = false;
                this.minTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.maxTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.allowCreationOfContracts_ = 0L;
                this.allowAdaptiveEnergy_ = 0L;
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private ConfigNodeInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                while (!z) {
                    try {
                        try {
                            int readTag = codedInputStream.readTag();
                            switch (readTag) {
                                case 0:
                                    break;
                                case 10:
                                    this.codeVersion_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 18:
                                    this.p2PVersion_ = codedInputStream.readStringRequireUtf8();
                                    continue;
                                case 24:
                                    this.listenPort_ = codedInputStream.readInt32();
                                    continue;
                                case 32:
                                    this.discoverEnable_ = codedInputStream.readBool();
                                    continue;
                                case 40:
                                    this.activeNodeSize_ = codedInputStream.readInt32();
                                    continue;
                                case 48:
                                    this.passiveNodeSize_ = codedInputStream.readInt32();
                                    continue;
                                case 56:
                                    this.sendNodeSize_ = codedInputStream.readInt32();
                                    continue;
                                case 64:
                                    this.maxConnectCount_ = codedInputStream.readInt32();
                                    continue;
                                case 72:
                                    this.sameIpMaxConnectCount_ = codedInputStream.readInt32();
                                    continue;
                                case 80:
                                    this.backupListenPort_ = codedInputStream.readInt32();
                                    continue;
                                case 88:
                                    this.backupMemberSize_ = codedInputStream.readInt32();
                                    continue;
                                case 96:
                                    this.backupPriority_ = codedInputStream.readInt32();
                                    continue;
                                case 104:
                                    this.dbVersion_ = codedInputStream.readInt32();
                                    continue;
                                case 112:
                                    this.minParticipationRate_ = codedInputStream.readInt32();
                                    continue;
                                case 120:
                                    this.supportConstant_ = codedInputStream.readBool();
                                    continue;
                                case 129:
                                    this.minTimeRatio_ = codedInputStream.readDouble();
                                    continue;
                                case 137:
                                    this.maxTimeRatio_ = codedInputStream.readDouble();
                                    continue;
                                case 144:
                                    this.allowCreationOfContracts_ = codedInputStream.readInt64();
                                    continue;
                                case 152:
                                    this.allowAdaptiveEnergy_ = codedInputStream.readInt64();
                                    continue;
                                default:
                                    if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        break;
                                    } else {
                                        continue;
                                    }
                            }
                            z = true;
                        } catch (InvalidProtocolBufferException e) {
                            throw e.setUnfinishedMessage(this);
                        } catch (IOException e2) {
                            throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                        }
                    } finally {
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_NodeInfo_ConfigNodeInfo_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_NodeInfo_ConfigNodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ConfigNodeInfo.class, Builder.class);
            }

            @Override
            public String getCodeVersion() {
                Object obj = this.codeVersion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.codeVersion_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getCodeVersionBytes() {
                Object obj = this.codeVersion_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.codeVersion_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getP2PVersion() {
                Object obj = this.p2PVersion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.p2PVersion_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getP2PVersionBytes() {
                Object obj = this.p2PVersion_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.p2PVersion_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                if (!getCodeVersionBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 1, this.codeVersion_);
                }
                if (!getP2PVersionBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 2, this.p2PVersion_);
                }
                int i = this.listenPort_;
                if (i != 0) {
                    codedOutputStream.writeInt32(3, i);
                }
                boolean z = this.discoverEnable_;
                if (z) {
                    codedOutputStream.writeBool(4, z);
                }
                int i2 = this.activeNodeSize_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(5, i2);
                }
                int i3 = this.passiveNodeSize_;
                if (i3 != 0) {
                    codedOutputStream.writeInt32(6, i3);
                }
                int i4 = this.sendNodeSize_;
                if (i4 != 0) {
                    codedOutputStream.writeInt32(7, i4);
                }
                int i5 = this.maxConnectCount_;
                if (i5 != 0) {
                    codedOutputStream.writeInt32(8, i5);
                }
                int i6 = this.sameIpMaxConnectCount_;
                if (i6 != 0) {
                    codedOutputStream.writeInt32(9, i6);
                }
                int i7 = this.backupListenPort_;
                if (i7 != 0) {
                    codedOutputStream.writeInt32(10, i7);
                }
                int i8 = this.backupMemberSize_;
                if (i8 != 0) {
                    codedOutputStream.writeInt32(11, i8);
                }
                int i9 = this.backupPriority_;
                if (i9 != 0) {
                    codedOutputStream.writeInt32(12, i9);
                }
                int i10 = this.dbVersion_;
                if (i10 != 0) {
                    codedOutputStream.writeInt32(13, i10);
                }
                int i11 = this.minParticipationRate_;
                if (i11 != 0) {
                    codedOutputStream.writeInt32(14, i11);
                }
                boolean z2 = this.supportConstant_;
                if (z2) {
                    codedOutputStream.writeBool(15, z2);
                }
                double d = this.minTimeRatio_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(16, d);
                }
                double d2 = this.maxTimeRatio_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(17, d2);
                }
                long j = this.allowCreationOfContracts_;
                if (j != 0) {
                    codedOutputStream.writeInt64(18, j);
                }
                long j2 = this.allowAdaptiveEnergy_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(19, j2);
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int computeStringSize = !getCodeVersionBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.codeVersion_) : 0;
                if (!getP2PVersionBytes().isEmpty()) {
                    computeStringSize += GeneratedMessageV3.computeStringSize(2, this.p2PVersion_);
                }
                int i2 = this.listenPort_;
                if (i2 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(3, i2);
                }
                boolean z = this.discoverEnable_;
                if (z) {
                    computeStringSize += CodedOutputStream.computeBoolSize(4, z);
                }
                int i3 = this.activeNodeSize_;
                if (i3 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(5, i3);
                }
                int i4 = this.passiveNodeSize_;
                if (i4 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(6, i4);
                }
                int i5 = this.sendNodeSize_;
                if (i5 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(7, i5);
                }
                int i6 = this.maxConnectCount_;
                if (i6 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(8, i6);
                }
                int i7 = this.sameIpMaxConnectCount_;
                if (i7 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(9, i7);
                }
                int i8 = this.backupListenPort_;
                if (i8 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(10, i8);
                }
                int i9 = this.backupMemberSize_;
                if (i9 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(11, i9);
                }
                int i10 = this.backupPriority_;
                if (i10 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(12, i10);
                }
                int i11 = this.dbVersion_;
                if (i11 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(13, i11);
                }
                int i12 = this.minParticipationRate_;
                if (i12 != 0) {
                    computeStringSize += CodedOutputStream.computeInt32Size(14, i12);
                }
                boolean z2 = this.supportConstant_;
                if (z2) {
                    computeStringSize += CodedOutputStream.computeBoolSize(15, z2);
                }
                double d = this.minTimeRatio_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeStringSize += CodedOutputStream.computeDoubleSize(16, d);
                }
                double d2 = this.maxTimeRatio_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeStringSize += CodedOutputStream.computeDoubleSize(17, d2);
                }
                long j = this.allowCreationOfContracts_;
                if (j != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(18, j);
                }
                long j2 = this.allowAdaptiveEnergy_;
                if (j2 != 0) {
                    computeStringSize += CodedOutputStream.computeInt64Size(19, j2);
                }
                int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof ConfigNodeInfo)) {
                    return super.equals(obj);
                }
                ConfigNodeInfo configNodeInfo = (ConfigNodeInfo) obj;
                return getCodeVersion().equals(configNodeInfo.getCodeVersion()) && getP2PVersion().equals(configNodeInfo.getP2PVersion()) && getListenPort() == configNodeInfo.getListenPort() && getDiscoverEnable() == configNodeInfo.getDiscoverEnable() && getActiveNodeSize() == configNodeInfo.getActiveNodeSize() && getPassiveNodeSize() == configNodeInfo.getPassiveNodeSize() && getSendNodeSize() == configNodeInfo.getSendNodeSize() && getMaxConnectCount() == configNodeInfo.getMaxConnectCount() && getSameIpMaxConnectCount() == configNodeInfo.getSameIpMaxConnectCount() && getBackupListenPort() == configNodeInfo.getBackupListenPort() && getBackupMemberSize() == configNodeInfo.getBackupMemberSize() && getBackupPriority() == configNodeInfo.getBackupPriority() && getDbVersion() == configNodeInfo.getDbVersion() && getMinParticipationRate() == configNodeInfo.getMinParticipationRate() && getSupportConstant() == configNodeInfo.getSupportConstant() && Double.doubleToLongBits(getMinTimeRatio()) == Double.doubleToLongBits(configNodeInfo.getMinTimeRatio()) && Double.doubleToLongBits(getMaxTimeRatio()) == Double.doubleToLongBits(configNodeInfo.getMaxTimeRatio()) && getAllowCreationOfContracts() == configNodeInfo.getAllowCreationOfContracts() && getAllowAdaptiveEnergy() == configNodeInfo.getAllowAdaptiveEnergy() && this.unknownFields.equals(configNodeInfo.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getCodeVersion().hashCode()) * 37) + 2) * 53) + getP2PVersion().hashCode()) * 37) + 3) * 53) + getListenPort()) * 37) + 4) * 53) + Internal.hashBoolean(getDiscoverEnable())) * 37) + 5) * 53) + getActiveNodeSize()) * 37) + 6) * 53) + getPassiveNodeSize()) * 37) + 7) * 53) + getSendNodeSize()) * 37) + 8) * 53) + getMaxConnectCount()) * 37) + 9) * 53) + getSameIpMaxConnectCount()) * 37) + 10) * 53) + getBackupListenPort()) * 37) + 11) * 53) + getBackupMemberSize()) * 37) + 12) * 53) + getBackupPriority()) * 37) + 13) * 53) + getDbVersion()) * 37) + 14) * 53) + getMinParticipationRate()) * 37) + 15) * 53) + Internal.hashBoolean(getSupportConstant())) * 37) + 16) * 53) + Internal.hashLong(Double.doubleToLongBits(getMinTimeRatio()))) * 37) + 17) * 53) + Internal.hashLong(Double.doubleToLongBits(getMaxTimeRatio()))) * 37) + 18) * 53) + Internal.hashLong(getAllowCreationOfContracts())) * 37) + 19) * 53) + Internal.hashLong(getAllowAdaptiveEnergy())) * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode;
                return hashCode;
            }

            public static ConfigNodeInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static ConfigNodeInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static ConfigNodeInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static ConfigNodeInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static ConfigNodeInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static ConfigNodeInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static ConfigNodeInfo parseFrom(InputStream inputStream) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static ConfigNodeInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static ConfigNodeInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static ConfigNodeInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static ConfigNodeInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static ConfigNodeInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (ConfigNodeInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(ConfigNodeInfo configNodeInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(configNodeInfo);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements ConfigNodeInfoOrBuilder {
                private int activeNodeSize_;
                private long allowAdaptiveEnergy_;
                private long allowCreationOfContracts_;
                private int backupListenPort_;
                private int backupMemberSize_;
                private int backupPriority_;
                private Object codeVersion_;
                private int dbVersion_;
                private boolean discoverEnable_;
                private int listenPort_;
                private int maxConnectCount_;
                private double maxTimeRatio_;
                private int minParticipationRate_;
                private double minTimeRatio_;
                private Object p2PVersion_;
                private int passiveNodeSize_;
                private int sameIpMaxConnectCount_;
                private int sendNodeSize_;
                private boolean supportConstant_;

                @Override
                public int getActiveNodeSize() {
                    return this.activeNodeSize_;
                }

                @Override
                public long getAllowAdaptiveEnergy() {
                    return this.allowAdaptiveEnergy_;
                }

                @Override
                public long getAllowCreationOfContracts() {
                    return this.allowCreationOfContracts_;
                }

                @Override
                public int getBackupListenPort() {
                    return this.backupListenPort_;
                }

                @Override
                public int getBackupMemberSize() {
                    return this.backupMemberSize_;
                }

                @Override
                public int getBackupPriority() {
                    return this.backupPriority_;
                }

                @Override
                public int getDbVersion() {
                    return this.dbVersion_;
                }

                @Override
                public boolean getDiscoverEnable() {
                    return this.discoverEnable_;
                }

                @Override
                public int getListenPort() {
                    return this.listenPort_;
                }

                @Override
                public int getMaxConnectCount() {
                    return this.maxConnectCount_;
                }

                @Override
                public double getMaxTimeRatio() {
                    return this.maxTimeRatio_;
                }

                @Override
                public int getMinParticipationRate() {
                    return this.minParticipationRate_;
                }

                @Override
                public double getMinTimeRatio() {
                    return this.minTimeRatio_;
                }

                @Override
                public int getPassiveNodeSize() {
                    return this.passiveNodeSize_;
                }

                @Override
                public int getSameIpMaxConnectCount() {
                    return this.sameIpMaxConnectCount_;
                }

                @Override
                public int getSendNodeSize() {
                    return this.sendNodeSize_;
                }

                @Override
                public boolean getSupportConstant() {
                    return this.supportConstant_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_NodeInfo_ConfigNodeInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_NodeInfo_ConfigNodeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ConfigNodeInfo.class, Builder.class);
                }

                private Builder() {
                    this.codeVersion_ = "";
                    this.p2PVersion_ = "";
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.codeVersion_ = "";
                    this.p2PVersion_ = "";
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    boolean unused = ConfigNodeInfo.alwaysUseFieldBuilders;
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.codeVersion_ = "";
                    this.p2PVersion_ = "";
                    this.listenPort_ = 0;
                    this.discoverEnable_ = false;
                    this.activeNodeSize_ = 0;
                    this.passiveNodeSize_ = 0;
                    this.sendNodeSize_ = 0;
                    this.maxConnectCount_ = 0;
                    this.sameIpMaxConnectCount_ = 0;
                    this.backupListenPort_ = 0;
                    this.backupMemberSize_ = 0;
                    this.backupPriority_ = 0;
                    this.dbVersion_ = 0;
                    this.minParticipationRate_ = 0;
                    this.supportConstant_ = false;
                    this.minTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.maxTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.allowCreationOfContracts_ = 0L;
                    this.allowAdaptiveEnergy_ = 0L;
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_NodeInfo_ConfigNodeInfo_descriptor;
                }

                @Override
                public ConfigNodeInfo getDefaultInstanceForType() {
                    return ConfigNodeInfo.getDefaultInstance();
                }

                @Override
                public ConfigNodeInfo build() {
                    ConfigNodeInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public ConfigNodeInfo buildPartial() {
                    ConfigNodeInfo configNodeInfo = new ConfigNodeInfo(this);
                    configNodeInfo.codeVersion_ = this.codeVersion_;
                    configNodeInfo.p2PVersion_ = this.p2PVersion_;
                    configNodeInfo.listenPort_ = this.listenPort_;
                    configNodeInfo.discoverEnable_ = this.discoverEnable_;
                    configNodeInfo.activeNodeSize_ = this.activeNodeSize_;
                    configNodeInfo.passiveNodeSize_ = this.passiveNodeSize_;
                    configNodeInfo.sendNodeSize_ = this.sendNodeSize_;
                    configNodeInfo.maxConnectCount_ = this.maxConnectCount_;
                    configNodeInfo.sameIpMaxConnectCount_ = this.sameIpMaxConnectCount_;
                    configNodeInfo.backupListenPort_ = this.backupListenPort_;
                    configNodeInfo.backupMemberSize_ = this.backupMemberSize_;
                    configNodeInfo.backupPriority_ = this.backupPriority_;
                    configNodeInfo.dbVersion_ = this.dbVersion_;
                    configNodeInfo.minParticipationRate_ = this.minParticipationRate_;
                    configNodeInfo.supportConstant_ = this.supportConstant_;
                    configNodeInfo.minTimeRatio_ = this.minTimeRatio_;
                    configNodeInfo.maxTimeRatio_ = this.maxTimeRatio_;
                    configNodeInfo.allowCreationOfContracts_ = this.allowCreationOfContracts_;
                    configNodeInfo.allowAdaptiveEnergy_ = this.allowAdaptiveEnergy_;
                    onBuilt();
                    return configNodeInfo;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof ConfigNodeInfo) {
                        return mergeFrom((ConfigNodeInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(ConfigNodeInfo configNodeInfo) {
                    if (configNodeInfo == ConfigNodeInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (!configNodeInfo.getCodeVersion().isEmpty()) {
                        this.codeVersion_ = configNodeInfo.codeVersion_;
                        onChanged();
                    }
                    if (!configNodeInfo.getP2PVersion().isEmpty()) {
                        this.p2PVersion_ = configNodeInfo.p2PVersion_;
                        onChanged();
                    }
                    if (configNodeInfo.getListenPort() != 0) {
                        setListenPort(configNodeInfo.getListenPort());
                    }
                    if (configNodeInfo.getDiscoverEnable()) {
                        setDiscoverEnable(configNodeInfo.getDiscoverEnable());
                    }
                    if (configNodeInfo.getActiveNodeSize() != 0) {
                        setActiveNodeSize(configNodeInfo.getActiveNodeSize());
                    }
                    if (configNodeInfo.getPassiveNodeSize() != 0) {
                        setPassiveNodeSize(configNodeInfo.getPassiveNodeSize());
                    }
                    if (configNodeInfo.getSendNodeSize() != 0) {
                        setSendNodeSize(configNodeInfo.getSendNodeSize());
                    }
                    if (configNodeInfo.getMaxConnectCount() != 0) {
                        setMaxConnectCount(configNodeInfo.getMaxConnectCount());
                    }
                    if (configNodeInfo.getSameIpMaxConnectCount() != 0) {
                        setSameIpMaxConnectCount(configNodeInfo.getSameIpMaxConnectCount());
                    }
                    if (configNodeInfo.getBackupListenPort() != 0) {
                        setBackupListenPort(configNodeInfo.getBackupListenPort());
                    }
                    if (configNodeInfo.getBackupMemberSize() != 0) {
                        setBackupMemberSize(configNodeInfo.getBackupMemberSize());
                    }
                    if (configNodeInfo.getBackupPriority() != 0) {
                        setBackupPriority(configNodeInfo.getBackupPriority());
                    }
                    if (configNodeInfo.getDbVersion() != 0) {
                        setDbVersion(configNodeInfo.getDbVersion());
                    }
                    if (configNodeInfo.getMinParticipationRate() != 0) {
                        setMinParticipationRate(configNodeInfo.getMinParticipationRate());
                    }
                    if (configNodeInfo.getSupportConstant()) {
                        setSupportConstant(configNodeInfo.getSupportConstant());
                    }
                    if (configNodeInfo.getMinTimeRatio() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setMinTimeRatio(configNodeInfo.getMinTimeRatio());
                    }
                    if (configNodeInfo.getMaxTimeRatio() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setMaxTimeRatio(configNodeInfo.getMaxTimeRatio());
                    }
                    if (configNodeInfo.getAllowCreationOfContracts() != 0) {
                        setAllowCreationOfContracts(configNodeInfo.getAllowCreationOfContracts());
                    }
                    if (configNodeInfo.getAllowAdaptiveEnergy() != 0) {
                        setAllowAdaptiveEnergy(configNodeInfo.getAllowAdaptiveEnergy());
                    }
                    mergeUnknownFields(configNodeInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.NodeInfo.ConfigNodeInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.ConfigNodeInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$ConfigNodeInfo$Builder");
                }

                @Override
                public String getCodeVersion() {
                    Object obj = this.codeVersion_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.codeVersion_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getCodeVersionBytes() {
                    Object obj = this.codeVersion_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.codeVersion_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setCodeVersion(String str) {
                    str.getClass();
                    this.codeVersion_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearCodeVersion() {
                    this.codeVersion_ = ConfigNodeInfo.getDefaultInstance().getCodeVersion();
                    onChanged();
                    return this;
                }

                public Builder setCodeVersionBytes(ByteString byteString) {
                    byteString.getClass();
                    ConfigNodeInfo.checkByteStringIsUtf8(byteString);
                    this.codeVersion_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public String getP2PVersion() {
                    Object obj = this.p2PVersion_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.p2PVersion_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getP2PVersionBytes() {
                    Object obj = this.p2PVersion_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.p2PVersion_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setP2PVersion(String str) {
                    str.getClass();
                    this.p2PVersion_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearP2PVersion() {
                    this.p2PVersion_ = ConfigNodeInfo.getDefaultInstance().getP2PVersion();
                    onChanged();
                    return this;
                }

                public Builder setP2PVersionBytes(ByteString byteString) {
                    byteString.getClass();
                    ConfigNodeInfo.checkByteStringIsUtf8(byteString);
                    this.p2PVersion_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setListenPort(int i) {
                    this.listenPort_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearListenPort() {
                    this.listenPort_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setDiscoverEnable(boolean z) {
                    this.discoverEnable_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearDiscoverEnable() {
                    this.discoverEnable_ = false;
                    onChanged();
                    return this;
                }

                public Builder setActiveNodeSize(int i) {
                    this.activeNodeSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearActiveNodeSize() {
                    this.activeNodeSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setPassiveNodeSize(int i) {
                    this.passiveNodeSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearPassiveNodeSize() {
                    this.passiveNodeSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setSendNodeSize(int i) {
                    this.sendNodeSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearSendNodeSize() {
                    this.sendNodeSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setMaxConnectCount(int i) {
                    this.maxConnectCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearMaxConnectCount() {
                    this.maxConnectCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setSameIpMaxConnectCount(int i) {
                    this.sameIpMaxConnectCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearSameIpMaxConnectCount() {
                    this.sameIpMaxConnectCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setBackupListenPort(int i) {
                    this.backupListenPort_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearBackupListenPort() {
                    this.backupListenPort_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setBackupMemberSize(int i) {
                    this.backupMemberSize_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearBackupMemberSize() {
                    this.backupMemberSize_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setBackupPriority(int i) {
                    this.backupPriority_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearBackupPriority() {
                    this.backupPriority_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setDbVersion(int i) {
                    this.dbVersion_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearDbVersion() {
                    this.dbVersion_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setMinParticipationRate(int i) {
                    this.minParticipationRate_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearMinParticipationRate() {
                    this.minParticipationRate_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setSupportConstant(boolean z) {
                    this.supportConstant_ = z;
                    onChanged();
                    return this;
                }

                public Builder clearSupportConstant() {
                    this.supportConstant_ = false;
                    onChanged();
                    return this;
                }

                public Builder setMinTimeRatio(double d) {
                    this.minTimeRatio_ = d;
                    onChanged();
                    return this;
                }

                public Builder clearMinTimeRatio() {
                    this.minTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder setMaxTimeRatio(double d) {
                    this.maxTimeRatio_ = d;
                    onChanged();
                    return this;
                }

                public Builder clearMaxTimeRatio() {
                    this.maxTimeRatio_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                public Builder setAllowCreationOfContracts(long j) {
                    this.allowCreationOfContracts_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearAllowCreationOfContracts() {
                    this.allowCreationOfContracts_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setAllowAdaptiveEnergy(long j) {
                    this.allowAdaptiveEnergy_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearAllowAdaptiveEnergy() {
                    this.allowAdaptiveEnergy_ = 0L;
                    onChanged();
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }
            }
        }

        public static final class MachineInfo extends GeneratedMessageV3 implements MachineInfoOrBuilder {
            public static final int CPUCOUNT_FIELD_NUMBER = 3;
            public static final int CPURATE_FIELD_NUMBER = 6;
            public static final int DEADLOCKTHREADCOUNT_FIELD_NUMBER = 2;
            public static final int DEADLOCKTHREADINFOLIST_FIELD_NUMBER = 13;
            public static final int FREEMEMORY_FIELD_NUMBER = 5;
            public static final int JAVAVERSION_FIELD_NUMBER = 7;
            public static final int JVMFREEMEMORY_FIELD_NUMBER = 10;
            public static final int JVMTOTALMEMORY_FIELD_NUMBER = 9;
            public static final int MEMORYDESCINFOLIST_FIELD_NUMBER = 12;
            public static final int OSNAME_FIELD_NUMBER = 8;
            public static final int PROCESSCPURATE_FIELD_NUMBER = 11;
            public static final int THREADCOUNT_FIELD_NUMBER = 1;
            public static final int TOTALMEMORY_FIELD_NUMBER = 4;
            private static final long serialVersionUID = 0;
            private int bitField0_;
            private int cpuCount_;
            private double cpuRate_;
            private int deadLockThreadCount_;
            private List<DeadLockThreadInfo> deadLockThreadInfoList_;
            private long freeMemory_;
            private volatile Object javaVersion_;
            private long jvmFreeMemory_;
            private long jvmTotalMemory_;
            private byte memoizedIsInitialized;
            private List<MemoryDescInfo> memoryDescInfoList_;
            private volatile Object osName_;
            private double processCpuRate_;
            private int threadCount_;
            private long totalMemory_;
            private static final MachineInfo DEFAULT_INSTANCE = new MachineInfo();
            private static final Parser<MachineInfo> PARSER = new AbstractParser<MachineInfo>() {
                @Override
                public MachineInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return new MachineInfo(codedInputStream, extensionRegistryLite);
                }
            };

            public interface DeadLockThreadInfoOrBuilder extends MessageOrBuilder {
                long getBlockTime();

                String getLockName();

                ByteString getLockNameBytes();

                String getLockOwner();

                ByteString getLockOwnerBytes();

                String getName();

                ByteString getNameBytes();

                String getStackTrace();

                ByteString getStackTraceBytes();

                String getState();

                ByteString getStateBytes();

                long getWaitTime();
            }

            public interface MemoryDescInfoOrBuilder extends MessageOrBuilder {
                long getInitSize();

                long getMaxSize();

                String getName();

                ByteString getNameBytes();

                double getUseRate();

                long getUseSize();
            }

            public static MachineInfo getDefaultInstance() {
                return DEFAULT_INSTANCE;
            }

            public static Parser<MachineInfo> parser() {
                return PARSER;
            }

            @Override
            public int getCpuCount() {
                return this.cpuCount_;
            }

            @Override
            public double getCpuRate() {
                return this.cpuRate_;
            }

            @Override
            public int getDeadLockThreadCount() {
                return this.deadLockThreadCount_;
            }

            @Override
            public List<DeadLockThreadInfo> getDeadLockThreadInfoListList() {
                return this.deadLockThreadInfoList_;
            }

            @Override
            public List<? extends DeadLockThreadInfoOrBuilder> getDeadLockThreadInfoListOrBuilderList() {
                return this.deadLockThreadInfoList_;
            }

            @Override
            public MachineInfo getDefaultInstanceForType() {
                return DEFAULT_INSTANCE;
            }

            @Override
            public long getFreeMemory() {
                return this.freeMemory_;
            }

            @Override
            public long getJvmFreeMemory() {
                return this.jvmFreeMemory_;
            }

            @Override
            public long getJvmTotalMemory() {
                return this.jvmTotalMemory_;
            }

            @Override
            public List<MemoryDescInfo> getMemoryDescInfoListList() {
                return this.memoryDescInfoList_;
            }

            @Override
            public List<? extends MemoryDescInfoOrBuilder> getMemoryDescInfoListOrBuilderList() {
                return this.memoryDescInfoList_;
            }

            @Override
            public Parser<MachineInfo> getParserForType() {
                return PARSER;
            }

            @Override
            public double getProcessCpuRate() {
                return this.processCpuRate_;
            }

            @Override
            public int getThreadCount() {
                return this.threadCount_;
            }

            @Override
            public long getTotalMemory() {
                return this.totalMemory_;
            }

            @Override
            public final boolean isInitialized() {
                byte b = this.memoizedIsInitialized;
                if (b == 1) {
                    return true;
                }
                if (b == 0) {
                    return false;
                }
                this.memoizedIsInitialized = (byte) 1;
                return true;
            }

            private MachineInfo(GeneratedMessageV3.Builder<?> builder) {
                super(builder);
                this.memoizedIsInitialized = (byte) -1;
            }

            private MachineInfo() {
                this.memoizedIsInitialized = (byte) -1;
                this.threadCount_ = 0;
                this.deadLockThreadCount_ = 0;
                this.cpuCount_ = 0;
                this.totalMemory_ = 0L;
                this.freeMemory_ = 0L;
                this.cpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.javaVersion_ = "";
                this.osName_ = "";
                this.jvmTotalMemory_ = 0L;
                this.jvmFreeMemory_ = 0L;
                this.processCpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                this.memoryDescInfoList_ = Collections.emptyList();
                this.deadLockThreadInfoList_ = Collections.emptyList();
            }

            @Override
            public final UnknownFieldSet getUnknownFields() {
                return this.unknownFields;
            }

            private MachineInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                this();
                extensionRegistryLite.getClass();
                UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                boolean z = false;
                boolean z2 = false;
                while (true) {
                    ?? r3 = 4096;
                    if (z) {
                        return;
                    }
                    try {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                switch (readTag) {
                                    case 0:
                                        break;
                                    case 8:
                                        this.threadCount_ = codedInputStream.readInt32();
                                        continue;
                                    case 16:
                                        this.deadLockThreadCount_ = codedInputStream.readInt32();
                                        continue;
                                    case 24:
                                        this.cpuCount_ = codedInputStream.readInt32();
                                        continue;
                                    case 32:
                                        this.totalMemory_ = codedInputStream.readInt64();
                                        continue;
                                    case 40:
                                        this.freeMemory_ = codedInputStream.readInt64();
                                        continue;
                                    case 49:
                                        this.cpuRate_ = codedInputStream.readDouble();
                                        continue;
                                    case 58:
                                        this.javaVersion_ = codedInputStream.readStringRequireUtf8();
                                        continue;
                                    case 66:
                                        this.osName_ = codedInputStream.readStringRequireUtf8();
                                        continue;
                                    case 72:
                                        this.jvmTotalMemory_ = codedInputStream.readInt64();
                                        continue;
                                    case 80:
                                        this.jvmFreeMemory_ = codedInputStream.readInt64();
                                        continue;
                                    case 89:
                                        this.processCpuRate_ = codedInputStream.readDouble();
                                        continue;
                                    case 98:
                                        if (!(z2 & true)) {
                                            this.memoryDescInfoList_ = new ArrayList();
                                            z2 |= true;
                                        }
                                        this.memoryDescInfoList_.add((MemoryDescInfo) codedInputStream.readMessage(MemoryDescInfo.parser(), extensionRegistryLite));
                                        continue;
                                    case 106:
                                        if (!(z2 & true)) {
                                            this.deadLockThreadInfoList_ = new ArrayList();
                                            z2 |= true;
                                        }
                                        this.deadLockThreadInfoList_.add((DeadLockThreadInfo) codedInputStream.readMessage(DeadLockThreadInfo.parser(), extensionRegistryLite));
                                        continue;
                                    default:
                                        r3 = parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag);
                                        if (r3 == 0) {
                                            break;
                                        } else {
                                            continue;
                                        }
                                }
                                z = true;
                            } catch (IOException e) {
                                throw new InvalidProtocolBufferException(e).setUnfinishedMessage(this);
                            }
                        } catch (InvalidProtocolBufferException e2) {
                            throw e2.setUnfinishedMessage(this);
                        }
                    } finally {
                        if (z2 & true) {
                            this.memoryDescInfoList_ = Collections.unmodifiableList(this.memoryDescInfoList_);
                        }
                        if ((z2 & true) == r3) {
                            this.deadLockThreadInfoList_ = Collections.unmodifiableList(this.deadLockThreadInfoList_);
                        }
                        this.unknownFields = newBuilder.build();
                        makeExtensionsImmutable();
                    }
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return Protocol.internal_static_protocol_NodeInfo_MachineInfo_descriptor;
            }

            @Override
            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return Protocol.internal_static_protocol_NodeInfo_MachineInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MachineInfo.class, Builder.class);
            }

            public static final class MemoryDescInfo extends GeneratedMessageV3 implements MemoryDescInfoOrBuilder {
                public static final int INITSIZE_FIELD_NUMBER = 2;
                public static final int MAXSIZE_FIELD_NUMBER = 4;
                public static final int NAME_FIELD_NUMBER = 1;
                public static final int USERATE_FIELD_NUMBER = 5;
                public static final int USESIZE_FIELD_NUMBER = 3;
                private static final long serialVersionUID = 0;
                private long initSize_;
                private long maxSize_;
                private byte memoizedIsInitialized;
                private volatile Object name_;
                private double useRate_;
                private long useSize_;
                private static final MemoryDescInfo DEFAULT_INSTANCE = new MemoryDescInfo();
                private static final Parser<MemoryDescInfo> PARSER = new AbstractParser<MemoryDescInfo>() {
                    @Override
                    public MemoryDescInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new MemoryDescInfo(codedInputStream, extensionRegistryLite);
                    }
                };

                public static MemoryDescInfo getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static Parser<MemoryDescInfo> parser() {
                    return PARSER;
                }

                @Override
                public MemoryDescInfo getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public long getInitSize() {
                    return this.initSize_;
                }

                @Override
                public long getMaxSize() {
                    return this.maxSize_;
                }

                @Override
                public Parser<MemoryDescInfo> getParserForType() {
                    return PARSER;
                }

                @Override
                public double getUseRate() {
                    return this.useRate_;
                }

                @Override
                public long getUseSize() {
                    return this.useSize_;
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                private MemoryDescInfo(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                private MemoryDescInfo() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.name_ = "";
                    this.initSize_ = 0L;
                    this.useSize_ = 0L;
                    this.maxSize_ = 0L;
                    this.useRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                private MemoryDescInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    while (!z) {
                        try {
                            try {
                                try {
                                    int readTag = codedInputStream.readTag();
                                    if (readTag != 0) {
                                        if (readTag == 10) {
                                            this.name_ = codedInputStream.readStringRequireUtf8();
                                        } else if (readTag == 16) {
                                            this.initSize_ = codedInputStream.readInt64();
                                        } else if (readTag == 24) {
                                            this.useSize_ = codedInputStream.readInt64();
                                        } else if (readTag == 32) {
                                            this.maxSize_ = codedInputStream.readInt64();
                                        } else if (readTag != 41) {
                                            if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                            }
                                        } else {
                                            this.useRate_ = codedInputStream.readDouble();
                                        }
                                    }
                                    z = true;
                                } catch (InvalidProtocolBufferException e) {
                                    throw e.setUnfinishedMessage(this);
                                }
                            } catch (IOException e2) {
                                throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                            }
                        } finally {
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MemoryDescInfo.class, Builder.class);
                }

                @Override
                public String getName() {
                    Object obj = this.name_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.name_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getNameBytes() {
                    Object obj = this.name_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.name_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (!getNameBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 1, this.name_);
                    }
                    long j = this.initSize_;
                    if (j != 0) {
                        codedOutputStream.writeInt64(2, j);
                    }
                    long j2 = this.useSize_;
                    if (j2 != 0) {
                        codedOutputStream.writeInt64(3, j2);
                    }
                    long j3 = this.maxSize_;
                    if (j3 != 0) {
                        codedOutputStream.writeInt64(4, j3);
                    }
                    double d = this.useRate_;
                    if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        codedOutputStream.writeDouble(5, d);
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeStringSize = !getNameBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.name_) : 0;
                    long j = this.initSize_;
                    if (j != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(2, j);
                    }
                    long j2 = this.useSize_;
                    if (j2 != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(3, j2);
                    }
                    long j3 = this.maxSize_;
                    if (j3 != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(4, j3);
                    }
                    double d = this.useRate_;
                    if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        computeStringSize += CodedOutputStream.computeDoubleSize(5, d);
                    }
                    int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (!(obj instanceof MemoryDescInfo)) {
                        return super.equals(obj);
                    }
                    MemoryDescInfo memoryDescInfo = (MemoryDescInfo) obj;
                    return getName().equals(memoryDescInfo.getName()) && getInitSize() == memoryDescInfo.getInitSize() && getUseSize() == memoryDescInfo.getUseSize() && getMaxSize() == memoryDescInfo.getMaxSize() && Double.doubleToLongBits(getUseRate()) == Double.doubleToLongBits(memoryDescInfo.getUseRate()) && this.unknownFields.equals(memoryDescInfo.unknownFields);
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getName().hashCode()) * 37) + 2) * 53) + Internal.hashLong(getInitSize())) * 37) + 3) * 53) + Internal.hashLong(getUseSize())) * 37) + 4) * 53) + Internal.hashLong(getMaxSize())) * 37) + 5) * 53) + Internal.hashLong(Double.doubleToLongBits(getUseRate()))) * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode;
                    return hashCode;
                }

                public static MemoryDescInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static MemoryDescInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static MemoryDescInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static MemoryDescInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static MemoryDescInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static MemoryDescInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static MemoryDescInfo parseFrom(InputStream inputStream) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static MemoryDescInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static MemoryDescInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static MemoryDescInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static MemoryDescInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static MemoryDescInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (MemoryDescInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(MemoryDescInfo memoryDescInfo) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(memoryDescInfo);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MemoryDescInfoOrBuilder {
                    private long initSize_;
                    private long maxSize_;
                    private Object name_;
                    private double useRate_;
                    private long useSize_;

                    @Override
                    public long getInitSize() {
                        return this.initSize_;
                    }

                    @Override
                    public long getMaxSize() {
                        return this.maxSize_;
                    }

                    @Override
                    public double getUseRate() {
                        return this.useRate_;
                    }

                    @Override
                    public long getUseSize() {
                        return this.useSize_;
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_descriptor;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MemoryDescInfo.class, Builder.class);
                    }

                    private Builder() {
                        this.name_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.name_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        boolean unused = MemoryDescInfo.alwaysUseFieldBuilders;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.name_ = "";
                        this.initSize_ = 0L;
                        this.useSize_ = 0L;
                        this.maxSize_ = 0L;
                        this.useRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                        return this;
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_MemoryDescInfo_descriptor;
                    }

                    @Override
                    public MemoryDescInfo getDefaultInstanceForType() {
                        return MemoryDescInfo.getDefaultInstance();
                    }

                    @Override
                    public MemoryDescInfo build() {
                        MemoryDescInfo buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public MemoryDescInfo buildPartial() {
                        MemoryDescInfo memoryDescInfo = new MemoryDescInfo(this);
                        memoryDescInfo.name_ = this.name_;
                        memoryDescInfo.initSize_ = this.initSize_;
                        memoryDescInfo.useSize_ = this.useSize_;
                        memoryDescInfo.maxSize_ = this.maxSize_;
                        memoryDescInfo.useRate_ = this.useRate_;
                        onBuilt();
                        return memoryDescInfo;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof MemoryDescInfo) {
                            return mergeFrom((MemoryDescInfo) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(MemoryDescInfo memoryDescInfo) {
                        if (memoryDescInfo == MemoryDescInfo.getDefaultInstance()) {
                            return this;
                        }
                        if (!memoryDescInfo.getName().isEmpty()) {
                            this.name_ = memoryDescInfo.name_;
                            onChanged();
                        }
                        if (memoryDescInfo.getInitSize() != 0) {
                            setInitSize(memoryDescInfo.getInitSize());
                        }
                        if (memoryDescInfo.getUseSize() != 0) {
                            setUseSize(memoryDescInfo.getUseSize());
                        }
                        if (memoryDescInfo.getMaxSize() != 0) {
                            setMaxSize(memoryDescInfo.getMaxSize());
                        }
                        if (memoryDescInfo.getUseRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                            setUseRate(memoryDescInfo.getUseRate());
                        }
                        mergeUnknownFields(memoryDescInfo.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public org.tron.protos.Protocol.NodeInfo.MachineInfo.MemoryDescInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.MachineInfo.MemoryDescInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$MachineInfo$MemoryDescInfo$Builder");
                    }

                    @Override
                    public String getName() {
                        Object obj = this.name_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.name_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getNameBytes() {
                        Object obj = this.name_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.name_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setName(String str) {
                        str.getClass();
                        this.name_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearName() {
                        this.name_ = MemoryDescInfo.getDefaultInstance().getName();
                        onChanged();
                        return this;
                    }

                    public Builder setNameBytes(ByteString byteString) {
                        byteString.getClass();
                        MemoryDescInfo.checkByteStringIsUtf8(byteString);
                        this.name_ = byteString;
                        onChanged();
                        return this;
                    }

                    public Builder setInitSize(long j) {
                        this.initSize_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder clearInitSize() {
                        this.initSize_ = 0L;
                        onChanged();
                        return this;
                    }

                    public Builder setUseSize(long j) {
                        this.useSize_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder clearUseSize() {
                        this.useSize_ = 0L;
                        onChanged();
                        return this;
                    }

                    public Builder setMaxSize(long j) {
                        this.maxSize_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder clearMaxSize() {
                        this.maxSize_ = 0L;
                        onChanged();
                        return this;
                    }

                    public Builder setUseRate(double d) {
                        this.useRate_ = d;
                        onChanged();
                        return this;
                    }

                    public Builder clearUseRate() {
                        this.useRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }
                }
            }

            public static final class DeadLockThreadInfo extends GeneratedMessageV3 implements DeadLockThreadInfoOrBuilder {
                public static final int BLOCKTIME_FIELD_NUMBER = 5;
                public static final int LOCKNAME_FIELD_NUMBER = 2;
                public static final int LOCKOWNER_FIELD_NUMBER = 3;
                public static final int NAME_FIELD_NUMBER = 1;
                public static final int STACKTRACE_FIELD_NUMBER = 7;
                public static final int STATE_FIELD_NUMBER = 4;
                public static final int WAITTIME_FIELD_NUMBER = 6;
                private static final long serialVersionUID = 0;
                private long blockTime_;
                private volatile Object lockName_;
                private volatile Object lockOwner_;
                private byte memoizedIsInitialized;
                private volatile Object name_;
                private volatile Object stackTrace_;
                private volatile Object state_;
                private long waitTime_;
                private static final DeadLockThreadInfo DEFAULT_INSTANCE = new DeadLockThreadInfo();
                private static final Parser<DeadLockThreadInfo> PARSER = new AbstractParser<DeadLockThreadInfo>() {
                    @Override
                    public DeadLockThreadInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                        return new DeadLockThreadInfo(codedInputStream, extensionRegistryLite);
                    }
                };

                public static DeadLockThreadInfo getDefaultInstance() {
                    return DEFAULT_INSTANCE;
                }

                public static Parser<DeadLockThreadInfo> parser() {
                    return PARSER;
                }

                @Override
                public long getBlockTime() {
                    return this.blockTime_;
                }

                @Override
                public DeadLockThreadInfo getDefaultInstanceForType() {
                    return DEFAULT_INSTANCE;
                }

                @Override
                public Parser<DeadLockThreadInfo> getParserForType() {
                    return PARSER;
                }

                @Override
                public long getWaitTime() {
                    return this.waitTime_;
                }

                @Override
                public final boolean isInitialized() {
                    byte b = this.memoizedIsInitialized;
                    if (b == 1) {
                        return true;
                    }
                    if (b == 0) {
                        return false;
                    }
                    this.memoizedIsInitialized = (byte) 1;
                    return true;
                }

                private DeadLockThreadInfo(GeneratedMessageV3.Builder<?> builder) {
                    super(builder);
                    this.memoizedIsInitialized = (byte) -1;
                }

                private DeadLockThreadInfo() {
                    this.memoizedIsInitialized = (byte) -1;
                    this.name_ = "";
                    this.lockName_ = "";
                    this.lockOwner_ = "";
                    this.state_ = "";
                    this.blockTime_ = 0L;
                    this.waitTime_ = 0L;
                    this.stackTrace_ = "";
                }

                @Override
                public final UnknownFieldSet getUnknownFields() {
                    return this.unknownFields;
                }

                private DeadLockThreadInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    this();
                    extensionRegistryLite.getClass();
                    UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
                    boolean z = false;
                    while (!z) {
                        try {
                            try {
                                int readTag = codedInputStream.readTag();
                                if (readTag != 0) {
                                    if (readTag == 10) {
                                        this.name_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag == 18) {
                                        this.lockName_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag == 26) {
                                        this.lockOwner_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag == 34) {
                                        this.state_ = codedInputStream.readStringRequireUtf8();
                                    } else if (readTag == 40) {
                                        this.blockTime_ = codedInputStream.readInt64();
                                    } else if (readTag == 48) {
                                        this.waitTime_ = codedInputStream.readInt64();
                                    } else if (readTag != 58) {
                                        if (!parseUnknownFieldProto3(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                        }
                                    } else {
                                        this.stackTrace_ = codedInputStream.readStringRequireUtf8();
                                    }
                                }
                                z = true;
                            } catch (InvalidProtocolBufferException e) {
                                throw e.setUnfinishedMessage(this);
                            } catch (IOException e2) {
                                throw new InvalidProtocolBufferException(e2).setUnfinishedMessage(this);
                            }
                        } finally {
                            this.unknownFields = newBuilder.build();
                            makeExtensionsImmutable();
                        }
                    }
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DeadLockThreadInfo.class, Builder.class);
                }

                @Override
                public String getName() {
                    Object obj = this.name_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.name_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getNameBytes() {
                    Object obj = this.name_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.name_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public String getLockName() {
                    Object obj = this.lockName_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.lockName_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getLockNameBytes() {
                    Object obj = this.lockName_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.lockName_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public String getLockOwner() {
                    Object obj = this.lockOwner_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.lockOwner_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getLockOwnerBytes() {
                    Object obj = this.lockOwner_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.lockOwner_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public String getState() {
                    Object obj = this.state_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.state_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getStateBytes() {
                    Object obj = this.state_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.state_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public String getStackTrace() {
                    Object obj = this.stackTrace_;
                    if (obj instanceof String) {
                        return (String) obj;
                    }
                    String stringUtf8 = ((ByteString) obj).toStringUtf8();
                    this.stackTrace_ = stringUtf8;
                    return stringUtf8;
                }

                @Override
                public ByteString getStackTraceBytes() {
                    Object obj = this.stackTrace_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.stackTrace_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                @Override
                public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                    if (!getNameBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 1, this.name_);
                    }
                    if (!getLockNameBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 2, this.lockName_);
                    }
                    if (!getLockOwnerBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 3, this.lockOwner_);
                    }
                    if (!getStateBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 4, this.state_);
                    }
                    long j = this.blockTime_;
                    if (j != 0) {
                        codedOutputStream.writeInt64(5, j);
                    }
                    long j2 = this.waitTime_;
                    if (j2 != 0) {
                        codedOutputStream.writeInt64(6, j2);
                    }
                    if (!getStackTraceBytes().isEmpty()) {
                        GeneratedMessageV3.writeString(codedOutputStream, 7, this.stackTrace_);
                    }
                    this.unknownFields.writeTo(codedOutputStream);
                }

                @Override
                public int getSerializedSize() {
                    int i = this.memoizedSize;
                    if (i != -1) {
                        return i;
                    }
                    int computeStringSize = !getNameBytes().isEmpty() ? GeneratedMessageV3.computeStringSize(1, this.name_) : 0;
                    if (!getLockNameBytes().isEmpty()) {
                        computeStringSize += GeneratedMessageV3.computeStringSize(2, this.lockName_);
                    }
                    if (!getLockOwnerBytes().isEmpty()) {
                        computeStringSize += GeneratedMessageV3.computeStringSize(3, this.lockOwner_);
                    }
                    if (!getStateBytes().isEmpty()) {
                        computeStringSize += GeneratedMessageV3.computeStringSize(4, this.state_);
                    }
                    long j = this.blockTime_;
                    if (j != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(5, j);
                    }
                    long j2 = this.waitTime_;
                    if (j2 != 0) {
                        computeStringSize += CodedOutputStream.computeInt64Size(6, j2);
                    }
                    if (!getStackTraceBytes().isEmpty()) {
                        computeStringSize += GeneratedMessageV3.computeStringSize(7, this.stackTrace_);
                    }
                    int serializedSize = computeStringSize + this.unknownFields.getSerializedSize();
                    this.memoizedSize = serializedSize;
                    return serializedSize;
                }

                @Override
                public boolean equals(Object obj) {
                    if (obj == this) {
                        return true;
                    }
                    if (!(obj instanceof DeadLockThreadInfo)) {
                        return super.equals(obj);
                    }
                    DeadLockThreadInfo deadLockThreadInfo = (DeadLockThreadInfo) obj;
                    return getName().equals(deadLockThreadInfo.getName()) && getLockName().equals(deadLockThreadInfo.getLockName()) && getLockOwner().equals(deadLockThreadInfo.getLockOwner()) && getState().equals(deadLockThreadInfo.getState()) && getBlockTime() == deadLockThreadInfo.getBlockTime() && getWaitTime() == deadLockThreadInfo.getWaitTime() && getStackTrace().equals(deadLockThreadInfo.getStackTrace()) && this.unknownFields.equals(deadLockThreadInfo.unknownFields);
                }

                @Override
                public int hashCode() {
                    if (this.memoizedHashCode != 0) {
                        return this.memoizedHashCode;
                    }
                    int hashCode = ((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getName().hashCode()) * 37) + 2) * 53) + getLockName().hashCode()) * 37) + 3) * 53) + getLockOwner().hashCode()) * 37) + 4) * 53) + getState().hashCode()) * 37) + 5) * 53) + Internal.hashLong(getBlockTime())) * 37) + 6) * 53) + Internal.hashLong(getWaitTime())) * 37) + 7) * 53) + getStackTrace().hashCode()) * 29) + this.unknownFields.hashCode();
                    this.memoizedHashCode = hashCode;
                    return hashCode;
                }

                public static DeadLockThreadInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer);
                }

                public static DeadLockThreadInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
                }

                public static DeadLockThreadInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString);
                }

                public static DeadLockThreadInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(byteString, extensionRegistryLite);
                }

                public static DeadLockThreadInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr);
                }

                public static DeadLockThreadInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                    return PARSER.parseFrom(bArr, extensionRegistryLite);
                }

                public static DeadLockThreadInfo parseFrom(InputStream inputStream) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
                }

                public static DeadLockThreadInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DeadLockThreadInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
                }

                public static DeadLockThreadInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
                }

                public static DeadLockThreadInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
                }

                public static DeadLockThreadInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                    return (DeadLockThreadInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
                }

                @Override
                public Builder newBuilderForType() {
                    return newBuilder();
                }

                public static Builder newBuilder() {
                    return DEFAULT_INSTANCE.toBuilder();
                }

                public static Builder newBuilder(DeadLockThreadInfo deadLockThreadInfo) {
                    return DEFAULT_INSTANCE.toBuilder().mergeFrom(deadLockThreadInfo);
                }

                @Override
                public Builder toBuilder() {
                    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
                }

                @Override
                public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                    return new Builder(builderParent);
                }

                public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements DeadLockThreadInfoOrBuilder {
                    private long blockTime_;
                    private Object lockName_;
                    private Object lockOwner_;
                    private Object name_;
                    private Object stackTrace_;
                    private Object state_;
                    private long waitTime_;

                    @Override
                    public long getBlockTime() {
                        return this.blockTime_;
                    }

                    @Override
                    public long getWaitTime() {
                        return this.waitTime_;
                    }

                    @Override
                    public final boolean isInitialized() {
                        return true;
                    }

                    public static final Descriptors.Descriptor getDescriptor() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_descriptor;
                    }

                    @Override
                    protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DeadLockThreadInfo.class, Builder.class);
                    }

                    private Builder() {
                        this.name_ = "";
                        this.lockName_ = "";
                        this.lockOwner_ = "";
                        this.state_ = "";
                        this.stackTrace_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                        super(builderParent);
                        this.name_ = "";
                        this.lockName_ = "";
                        this.lockOwner_ = "";
                        this.state_ = "";
                        this.stackTrace_ = "";
                        maybeForceBuilderInitialization();
                    }

                    private void maybeForceBuilderInitialization() {
                        boolean unused = DeadLockThreadInfo.alwaysUseFieldBuilders;
                    }

                    @Override
                    public Builder clear() {
                        super.clear();
                        this.name_ = "";
                        this.lockName_ = "";
                        this.lockOwner_ = "";
                        this.state_ = "";
                        this.blockTime_ = 0L;
                        this.waitTime_ = 0L;
                        this.stackTrace_ = "";
                        return this;
                    }

                    @Override
                    public Descriptors.Descriptor getDescriptorForType() {
                        return Protocol.internal_static_protocol_NodeInfo_MachineInfo_DeadLockThreadInfo_descriptor;
                    }

                    @Override
                    public DeadLockThreadInfo getDefaultInstanceForType() {
                        return DeadLockThreadInfo.getDefaultInstance();
                    }

                    @Override
                    public DeadLockThreadInfo build() {
                        DeadLockThreadInfo buildPartial = buildPartial();
                        if (buildPartial.isInitialized()) {
                            return buildPartial;
                        }
                        throw newUninitializedMessageException((Message) buildPartial);
                    }

                    @Override
                    public DeadLockThreadInfo buildPartial() {
                        DeadLockThreadInfo deadLockThreadInfo = new DeadLockThreadInfo(this);
                        deadLockThreadInfo.name_ = this.name_;
                        deadLockThreadInfo.lockName_ = this.lockName_;
                        deadLockThreadInfo.lockOwner_ = this.lockOwner_;
                        deadLockThreadInfo.state_ = this.state_;
                        deadLockThreadInfo.blockTime_ = this.blockTime_;
                        deadLockThreadInfo.waitTime_ = this.waitTime_;
                        deadLockThreadInfo.stackTrace_ = this.stackTrace_;
                        onBuilt();
                        return deadLockThreadInfo;
                    }

                    @Override
                    public Builder clone() {
                        return (Builder) super.clone();
                    }

                    @Override
                    public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.setField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                        return (Builder) super.clearField(fieldDescriptor);
                    }

                    @Override
                    public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                        return (Builder) super.clearOneof(oneofDescriptor);
                    }

                    @Override
                    public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                        return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                    }

                    @Override
                    public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                        return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                    }

                    @Override
                    public Builder mergeFrom(Message message) {
                        if (message instanceof DeadLockThreadInfo) {
                            return mergeFrom((DeadLockThreadInfo) message);
                        }
                        super.mergeFrom(message);
                        return this;
                    }

                    public Builder mergeFrom(DeadLockThreadInfo deadLockThreadInfo) {
                        if (deadLockThreadInfo == DeadLockThreadInfo.getDefaultInstance()) {
                            return this;
                        }
                        if (!deadLockThreadInfo.getName().isEmpty()) {
                            this.name_ = deadLockThreadInfo.name_;
                            onChanged();
                        }
                        if (!deadLockThreadInfo.getLockName().isEmpty()) {
                            this.lockName_ = deadLockThreadInfo.lockName_;
                            onChanged();
                        }
                        if (!deadLockThreadInfo.getLockOwner().isEmpty()) {
                            this.lockOwner_ = deadLockThreadInfo.lockOwner_;
                            onChanged();
                        }
                        if (!deadLockThreadInfo.getState().isEmpty()) {
                            this.state_ = deadLockThreadInfo.state_;
                            onChanged();
                        }
                        if (deadLockThreadInfo.getBlockTime() != 0) {
                            setBlockTime(deadLockThreadInfo.getBlockTime());
                        }
                        if (deadLockThreadInfo.getWaitTime() != 0) {
                            setWaitTime(deadLockThreadInfo.getWaitTime());
                        }
                        if (!deadLockThreadInfo.getStackTrace().isEmpty()) {
                            this.stackTrace_ = deadLockThreadInfo.stackTrace_;
                            onChanged();
                        }
                        mergeUnknownFields(deadLockThreadInfo.unknownFields);
                        onChanged();
                        return this;
                    }

                    @Override
                    public org.tron.protos.Protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                        


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$MachineInfo$DeadLockThreadInfo$Builder");
                    }

                    @Override
                    public String getName() {
                        Object obj = this.name_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.name_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getNameBytes() {
                        Object obj = this.name_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.name_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setName(String str) {
                        str.getClass();
                        this.name_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearName() {
                        this.name_ = DeadLockThreadInfo.getDefaultInstance().getName();
                        onChanged();
                        return this;
                    }

                    public Builder setNameBytes(ByteString byteString) {
                        byteString.getClass();
                        DeadLockThreadInfo.checkByteStringIsUtf8(byteString);
                        this.name_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public String getLockName() {
                        Object obj = this.lockName_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.lockName_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getLockNameBytes() {
                        Object obj = this.lockName_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.lockName_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setLockName(String str) {
                        str.getClass();
                        this.lockName_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearLockName() {
                        this.lockName_ = DeadLockThreadInfo.getDefaultInstance().getLockName();
                        onChanged();
                        return this;
                    }

                    public Builder setLockNameBytes(ByteString byteString) {
                        byteString.getClass();
                        DeadLockThreadInfo.checkByteStringIsUtf8(byteString);
                        this.lockName_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public String getLockOwner() {
                        Object obj = this.lockOwner_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.lockOwner_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getLockOwnerBytes() {
                        Object obj = this.lockOwner_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.lockOwner_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setLockOwner(String str) {
                        str.getClass();
                        this.lockOwner_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearLockOwner() {
                        this.lockOwner_ = DeadLockThreadInfo.getDefaultInstance().getLockOwner();
                        onChanged();
                        return this;
                    }

                    public Builder setLockOwnerBytes(ByteString byteString) {
                        byteString.getClass();
                        DeadLockThreadInfo.checkByteStringIsUtf8(byteString);
                        this.lockOwner_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public String getState() {
                        Object obj = this.state_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.state_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getStateBytes() {
                        Object obj = this.state_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.state_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setState(String str) {
                        str.getClass();
                        this.state_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearState() {
                        this.state_ = DeadLockThreadInfo.getDefaultInstance().getState();
                        onChanged();
                        return this;
                    }

                    public Builder setStateBytes(ByteString byteString) {
                        byteString.getClass();
                        DeadLockThreadInfo.checkByteStringIsUtf8(byteString);
                        this.state_ = byteString;
                        onChanged();
                        return this;
                    }

                    public Builder setBlockTime(long j) {
                        this.blockTime_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder clearBlockTime() {
                        this.blockTime_ = 0L;
                        onChanged();
                        return this;
                    }

                    public Builder setWaitTime(long j) {
                        this.waitTime_ = j;
                        onChanged();
                        return this;
                    }

                    public Builder clearWaitTime() {
                        this.waitTime_ = 0L;
                        onChanged();
                        return this;
                    }

                    @Override
                    public String getStackTrace() {
                        Object obj = this.stackTrace_;
                        if (!(obj instanceof String)) {
                            String stringUtf8 = ((ByteString) obj).toStringUtf8();
                            this.stackTrace_ = stringUtf8;
                            return stringUtf8;
                        }
                        return (String) obj;
                    }

                    @Override
                    public ByteString getStackTraceBytes() {
                        Object obj = this.stackTrace_;
                        if (obj instanceof String) {
                            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                            this.stackTrace_ = copyFromUtf8;
                            return copyFromUtf8;
                        }
                        return (ByteString) obj;
                    }

                    public Builder setStackTrace(String str) {
                        str.getClass();
                        this.stackTrace_ = str;
                        onChanged();
                        return this;
                    }

                    public Builder clearStackTrace() {
                        this.stackTrace_ = DeadLockThreadInfo.getDefaultInstance().getStackTrace();
                        onChanged();
                        return this;
                    }

                    public Builder setStackTraceBytes(ByteString byteString) {
                        byteString.getClass();
                        DeadLockThreadInfo.checkByteStringIsUtf8(byteString);
                        this.stackTrace_ = byteString;
                        onChanged();
                        return this;
                    }

                    @Override
                    public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                    }

                    @Override
                    public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                        return (Builder) super.mergeUnknownFields(unknownFieldSet);
                    }
                }
            }

            @Override
            public String getJavaVersion() {
                Object obj = this.javaVersion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.javaVersion_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getJavaVersionBytes() {
                Object obj = this.javaVersion_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.javaVersion_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public String getOsName() {
                Object obj = this.osName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.osName_ = stringUtf8;
                return stringUtf8;
            }

            @Override
            public ByteString getOsNameBytes() {
                Object obj = this.osName_;
                if (obj instanceof String) {
                    ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                    this.osName_ = copyFromUtf8;
                    return copyFromUtf8;
                }
                return (ByteString) obj;
            }

            @Override
            public int getMemoryDescInfoListCount() {
                return this.memoryDescInfoList_.size();
            }

            @Override
            public MemoryDescInfo getMemoryDescInfoList(int i) {
                return this.memoryDescInfoList_.get(i);
            }

            @Override
            public MemoryDescInfoOrBuilder getMemoryDescInfoListOrBuilder(int i) {
                return this.memoryDescInfoList_.get(i);
            }

            @Override
            public int getDeadLockThreadInfoListCount() {
                return this.deadLockThreadInfoList_.size();
            }

            @Override
            public DeadLockThreadInfo getDeadLockThreadInfoList(int i) {
                return this.deadLockThreadInfoList_.get(i);
            }

            @Override
            public DeadLockThreadInfoOrBuilder getDeadLockThreadInfoListOrBuilder(int i) {
                return this.deadLockThreadInfoList_.get(i);
            }

            @Override
            public void writeTo(CodedOutputStream codedOutputStream) throws IOException {
                int i = this.threadCount_;
                if (i != 0) {
                    codedOutputStream.writeInt32(1, i);
                }
                int i2 = this.deadLockThreadCount_;
                if (i2 != 0) {
                    codedOutputStream.writeInt32(2, i2);
                }
                int i3 = this.cpuCount_;
                if (i3 != 0) {
                    codedOutputStream.writeInt32(3, i3);
                }
                long j = this.totalMemory_;
                if (j != 0) {
                    codedOutputStream.writeInt64(4, j);
                }
                long j2 = this.freeMemory_;
                if (j2 != 0) {
                    codedOutputStream.writeInt64(5, j2);
                }
                double d = this.cpuRate_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(6, d);
                }
                if (!getJavaVersionBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 7, this.javaVersion_);
                }
                if (!getOsNameBytes().isEmpty()) {
                    GeneratedMessageV3.writeString(codedOutputStream, 8, this.osName_);
                }
                long j3 = this.jvmTotalMemory_;
                if (j3 != 0) {
                    codedOutputStream.writeInt64(9, j3);
                }
                long j4 = this.jvmFreeMemory_;
                if (j4 != 0) {
                    codedOutputStream.writeInt64(10, j4);
                }
                double d2 = this.processCpuRate_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    codedOutputStream.writeDouble(11, d2);
                }
                for (int i4 = 0; i4 < this.memoryDescInfoList_.size(); i4++) {
                    codedOutputStream.writeMessage(12, this.memoryDescInfoList_.get(i4));
                }
                for (int i5 = 0; i5 < this.deadLockThreadInfoList_.size(); i5++) {
                    codedOutputStream.writeMessage(13, this.deadLockThreadInfoList_.get(i5));
                }
                this.unknownFields.writeTo(codedOutputStream);
            }

            @Override
            public int getSerializedSize() {
                int i = this.memoizedSize;
                if (i != -1) {
                    return i;
                }
                int i2 = this.threadCount_;
                int computeInt32Size = i2 != 0 ? CodedOutputStream.computeInt32Size(1, i2) : 0;
                int i3 = this.deadLockThreadCount_;
                if (i3 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt32Size(2, i3);
                }
                int i4 = this.cpuCount_;
                if (i4 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt32Size(3, i4);
                }
                long j = this.totalMemory_;
                if (j != 0) {
                    computeInt32Size += CodedOutputStream.computeInt64Size(4, j);
                }
                long j2 = this.freeMemory_;
                if (j2 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt64Size(5, j2);
                }
                double d = this.cpuRate_;
                if (d != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt32Size += CodedOutputStream.computeDoubleSize(6, d);
                }
                if (!getJavaVersionBytes().isEmpty()) {
                    computeInt32Size += GeneratedMessageV3.computeStringSize(7, this.javaVersion_);
                }
                if (!getOsNameBytes().isEmpty()) {
                    computeInt32Size += GeneratedMessageV3.computeStringSize(8, this.osName_);
                }
                long j3 = this.jvmTotalMemory_;
                if (j3 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt64Size(9, j3);
                }
                long j4 = this.jvmFreeMemory_;
                if (j4 != 0) {
                    computeInt32Size += CodedOutputStream.computeInt64Size(10, j4);
                }
                double d2 = this.processCpuRate_;
                if (d2 != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                    computeInt32Size += CodedOutputStream.computeDoubleSize(11, d2);
                }
                for (int i5 = 0; i5 < this.memoryDescInfoList_.size(); i5++) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(12, this.memoryDescInfoList_.get(i5));
                }
                for (int i6 = 0; i6 < this.deadLockThreadInfoList_.size(); i6++) {
                    computeInt32Size += CodedOutputStream.computeMessageSize(13, this.deadLockThreadInfoList_.get(i6));
                }
                int serializedSize = computeInt32Size + this.unknownFields.getSerializedSize();
                this.memoizedSize = serializedSize;
                return serializedSize;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }
                if (!(obj instanceof MachineInfo)) {
                    return super.equals(obj);
                }
                MachineInfo machineInfo = (MachineInfo) obj;
                return getThreadCount() == machineInfo.getThreadCount() && getDeadLockThreadCount() == machineInfo.getDeadLockThreadCount() && getCpuCount() == machineInfo.getCpuCount() && getTotalMemory() == machineInfo.getTotalMemory() && getFreeMemory() == machineInfo.getFreeMemory() && Double.doubleToLongBits(getCpuRate()) == Double.doubleToLongBits(machineInfo.getCpuRate()) && getJavaVersion().equals(machineInfo.getJavaVersion()) && getOsName().equals(machineInfo.getOsName()) && getJvmTotalMemory() == machineInfo.getJvmTotalMemory() && getJvmFreeMemory() == machineInfo.getJvmFreeMemory() && Double.doubleToLongBits(getProcessCpuRate()) == Double.doubleToLongBits(machineInfo.getProcessCpuRate()) && getMemoryDescInfoListList().equals(machineInfo.getMemoryDescInfoListList()) && getDeadLockThreadInfoListList().equals(machineInfo.getDeadLockThreadInfoListList()) && this.unknownFields.equals(machineInfo.unknownFields);
            }

            @Override
            public int hashCode() {
                if (this.memoizedHashCode != 0) {
                    return this.memoizedHashCode;
                }
                int hashCode = ((((((((((((((((((((((((((((((((((((((((((((779 + getDescriptor().hashCode()) * 37) + 1) * 53) + getThreadCount()) * 37) + 2) * 53) + getDeadLockThreadCount()) * 37) + 3) * 53) + getCpuCount()) * 37) + 4) * 53) + Internal.hashLong(getTotalMemory())) * 37) + 5) * 53) + Internal.hashLong(getFreeMemory())) * 37) + 6) * 53) + Internal.hashLong(Double.doubleToLongBits(getCpuRate()))) * 37) + 7) * 53) + getJavaVersion().hashCode()) * 37) + 8) * 53) + getOsName().hashCode()) * 37) + 9) * 53) + Internal.hashLong(getJvmTotalMemory())) * 37) + 10) * 53) + Internal.hashLong(getJvmFreeMemory())) * 37) + 11) * 53) + Internal.hashLong(Double.doubleToLongBits(getProcessCpuRate()));
                if (getMemoryDescInfoListCount() > 0) {
                    hashCode = (((hashCode * 37) + 12) * 53) + getMemoryDescInfoListList().hashCode();
                }
                if (getDeadLockThreadInfoListCount() > 0) {
                    hashCode = (((hashCode * 37) + 13) * 53) + getDeadLockThreadInfoListList().hashCode();
                }
                int hashCode2 = (hashCode * 29) + this.unknownFields.hashCode();
                this.memoizedHashCode = hashCode2;
                return hashCode2;
            }

            public static MachineInfo parseFrom(ByteBuffer byteBuffer) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer);
            }

            public static MachineInfo parseFrom(ByteBuffer byteBuffer, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteBuffer, extensionRegistryLite);
            }

            public static MachineInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString);
            }

            public static MachineInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(byteString, extensionRegistryLite);
            }

            public static MachineInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr);
            }

            public static MachineInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return PARSER.parseFrom(bArr, extensionRegistryLite);
            }

            public static MachineInfo parseFrom(InputStream inputStream) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream);
            }

            public static MachineInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static MachineInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream);
            }

            public static MachineInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseDelimitedWithIOException(PARSER, inputStream, extensionRegistryLite);
            }

            public static MachineInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream);
            }

            public static MachineInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                return (MachineInfo) GeneratedMessageV3.parseWithIOException(PARSER, codedInputStream, extensionRegistryLite);
            }

            @Override
            public Builder newBuilderForType() {
                return newBuilder();
            }

            public static Builder newBuilder() {
                return DEFAULT_INSTANCE.toBuilder();
            }

            public static Builder newBuilder(MachineInfo machineInfo) {
                return DEFAULT_INSTANCE.toBuilder().mergeFrom(machineInfo);
            }

            @Override
            public Builder toBuilder() {
                return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
            }

            @Override
            public Builder newBuilderForType(GeneratedMessageV3.BuilderParent builderParent) {
                return new Builder(builderParent);
            }

            public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements MachineInfoOrBuilder {
                private int bitField0_;
                private int cpuCount_;
                private double cpuRate_;
                private int deadLockThreadCount_;
                private RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> deadLockThreadInfoListBuilder_;
                private List<DeadLockThreadInfo> deadLockThreadInfoList_;
                private long freeMemory_;
                private Object javaVersion_;
                private long jvmFreeMemory_;
                private long jvmTotalMemory_;
                private RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> memoryDescInfoListBuilder_;
                private List<MemoryDescInfo> memoryDescInfoList_;
                private Object osName_;
                private double processCpuRate_;
                private int threadCount_;
                private long totalMemory_;

                private void ensureDeadLockThreadInfoListIsMutable() {
                    if ((this.bitField0_ & 4096) != 4096) {
                        this.deadLockThreadInfoList_ = new ArrayList(this.deadLockThreadInfoList_);
                        this.bitField0_ |= 4096;
                    }
                }

                private RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> getDeadLockThreadInfoListFieldBuilder() {
                    if (this.deadLockThreadInfoListBuilder_ == null) {
                        this.deadLockThreadInfoListBuilder_ = new RepeatedFieldBuilderV3<>(this.deadLockThreadInfoList_, (this.bitField0_ & 4096) == 4096, getParentForChildren(), isClean());
                        this.deadLockThreadInfoList_ = null;
                    }
                    return this.deadLockThreadInfoListBuilder_;
                }

                private RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> getMemoryDescInfoListFieldBuilder() {
                    if (this.memoryDescInfoListBuilder_ == null) {
                        this.memoryDescInfoListBuilder_ = new RepeatedFieldBuilderV3<>(this.memoryDescInfoList_, (this.bitField0_ & 2048) == 2048, getParentForChildren(), isClean());
                        this.memoryDescInfoList_ = null;
                    }
                    return this.memoryDescInfoListBuilder_;
                }

                public Builder addAllDeadLockThreadInfoList(Iterable<? extends DeadLockThreadInfo> iterable) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDeadLockThreadInfoListIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.deadLockThreadInfoList_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder addAllMemoryDescInfoList(Iterable<? extends MemoryDescInfo> iterable) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureMemoryDescInfoListIsMutable();
                        AbstractMessageLite.Builder.addAll((Iterable) iterable, (List) this.memoryDescInfoList_);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addAllMessages(iterable);
                    }
                    return this;
                }

                public Builder addDeadLockThreadInfoList(int i, DeadLockThreadInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addDeadLockThreadInfoList(int i, DeadLockThreadInfo deadLockThreadInfo) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        deadLockThreadInfo.getClass();
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.add(i, deadLockThreadInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, deadLockThreadInfo);
                    }
                    return this;
                }

                public Builder addDeadLockThreadInfoList(DeadLockThreadInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addDeadLockThreadInfoList(DeadLockThreadInfo deadLockThreadInfo) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        deadLockThreadInfo.getClass();
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.add(deadLockThreadInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(deadLockThreadInfo);
                    }
                    return this;
                }

                public DeadLockThreadInfo.Builder addDeadLockThreadInfoListBuilder() {
                    return getDeadLockThreadInfoListFieldBuilder().addBuilder(DeadLockThreadInfo.getDefaultInstance());
                }

                public DeadLockThreadInfo.Builder addDeadLockThreadInfoListBuilder(int i) {
                    return getDeadLockThreadInfoListFieldBuilder().addBuilder(i, DeadLockThreadInfo.getDefaultInstance());
                }

                public Builder addMemoryDescInfoList(int i, MemoryDescInfo.Builder builder) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.add(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder addMemoryDescInfoList(int i, MemoryDescInfo memoryDescInfo) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        memoryDescInfo.getClass();
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.add(i, memoryDescInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(i, memoryDescInfo);
                    }
                    return this;
                }

                public Builder addMemoryDescInfoList(MemoryDescInfo.Builder builder) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.add(builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(builder.build());
                    }
                    return this;
                }

                public Builder addMemoryDescInfoList(MemoryDescInfo memoryDescInfo) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        memoryDescInfo.getClass();
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.add(memoryDescInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.addMessage(memoryDescInfo);
                    }
                    return this;
                }

                public MemoryDescInfo.Builder addMemoryDescInfoListBuilder() {
                    return getMemoryDescInfoListFieldBuilder().addBuilder(MemoryDescInfo.getDefaultInstance());
                }

                public MemoryDescInfo.Builder addMemoryDescInfoListBuilder(int i) {
                    return getMemoryDescInfoListFieldBuilder().addBuilder(i, MemoryDescInfo.getDefaultInstance());
                }

                public Builder clearDeadLockThreadInfoList() {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.deadLockThreadInfoList_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                public Builder clearMemoryDescInfoList() {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.memoryDescInfoList_ = Collections.emptyList();
                        this.bitField0_ &= -2049;
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    return this;
                }

                @Override
                public int getCpuCount() {
                    return this.cpuCount_;
                }

                @Override
                public double getCpuRate() {
                    return this.cpuRate_;
                }

                @Override
                public int getDeadLockThreadCount() {
                    return this.deadLockThreadCount_;
                }

                @Override
                public DeadLockThreadInfo getDeadLockThreadInfoList(int i) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.deadLockThreadInfoList_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                }

                public DeadLockThreadInfo.Builder getDeadLockThreadInfoListBuilder(int i) {
                    return getDeadLockThreadInfoListFieldBuilder().getBuilder(i);
                }

                public List<DeadLockThreadInfo.Builder> getDeadLockThreadInfoListBuilderList() {
                    return getDeadLockThreadInfoListFieldBuilder().getBuilderList();
                }

                @Override
                public int getDeadLockThreadInfoListCount() {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.deadLockThreadInfoList_.size() : repeatedFieldBuilderV3.getCount();
                }

                @Override
                public List<DeadLockThreadInfo> getDeadLockThreadInfoListList() {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.deadLockThreadInfoList_) : repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public DeadLockThreadInfoOrBuilder getDeadLockThreadInfoListOrBuilder(int i) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    return (DeadLockThreadInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.deadLockThreadInfoList_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                }

                @Override
                public List<? extends DeadLockThreadInfoOrBuilder> getDeadLockThreadInfoListOrBuilderList() {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.deadLockThreadInfoList_);
                }

                @Override
                public long getFreeMemory() {
                    return this.freeMemory_;
                }

                @Override
                public long getJvmFreeMemory() {
                    return this.jvmFreeMemory_;
                }

                @Override
                public long getJvmTotalMemory() {
                    return this.jvmTotalMemory_;
                }

                @Override
                public MemoryDescInfo getMemoryDescInfoList(int i) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.memoryDescInfoList_.get(i) : repeatedFieldBuilderV3.getMessage(i);
                }

                public MemoryDescInfo.Builder getMemoryDescInfoListBuilder(int i) {
                    return getMemoryDescInfoListFieldBuilder().getBuilder(i);
                }

                public List<MemoryDescInfo.Builder> getMemoryDescInfoListBuilderList() {
                    return getMemoryDescInfoListFieldBuilder().getBuilderList();
                }

                @Override
                public int getMemoryDescInfoListCount() {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? this.memoryDescInfoList_.size() : repeatedFieldBuilderV3.getCount();
                }

                @Override
                public List<MemoryDescInfo> getMemoryDescInfoListList() {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    return repeatedFieldBuilderV3 == null ? Collections.unmodifiableList(this.memoryDescInfoList_) : repeatedFieldBuilderV3.getMessageList();
                }

                @Override
                public MemoryDescInfoOrBuilder getMemoryDescInfoListOrBuilder(int i) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    return (MemoryDescInfoOrBuilder) (repeatedFieldBuilderV3 == null ? this.memoryDescInfoList_.get(i) : repeatedFieldBuilderV3.getMessageOrBuilder(i));
                }

                @Override
                public List<? extends MemoryDescInfoOrBuilder> getMemoryDescInfoListOrBuilderList() {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    return repeatedFieldBuilderV3 != null ? repeatedFieldBuilderV3.getMessageOrBuilderList() : Collections.unmodifiableList(this.memoryDescInfoList_);
                }

                @Override
                public double getProcessCpuRate() {
                    return this.processCpuRate_;
                }

                @Override
                public int getThreadCount() {
                    return this.threadCount_;
                }

                @Override
                public long getTotalMemory() {
                    return this.totalMemory_;
                }

                @Override
                public final boolean isInitialized() {
                    return true;
                }

                @Override
                public final Builder mergeUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.mergeUnknownFields(unknownFieldSet);
                }

                public Builder removeDeadLockThreadInfoList(int i) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Builder removeMemoryDescInfoList(int i) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.remove(i);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.remove(i);
                    }
                    return this;
                }

                public Builder setDeadLockThreadInfoList(int i, DeadLockThreadInfo.Builder builder) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder setDeadLockThreadInfoList(int i, DeadLockThreadInfo deadLockThreadInfo) {
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV3 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        deadLockThreadInfo.getClass();
                        ensureDeadLockThreadInfoListIsMutable();
                        this.deadLockThreadInfoList_.set(i, deadLockThreadInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, deadLockThreadInfo);
                    }
                    return this;
                }

                public Builder setMemoryDescInfoList(int i, MemoryDescInfo.Builder builder) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.set(i, builder.build());
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, builder.build());
                    }
                    return this;
                }

                public Builder setMemoryDescInfoList(int i, MemoryDescInfo memoryDescInfo) {
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        memoryDescInfo.getClass();
                        ensureMemoryDescInfoListIsMutable();
                        this.memoryDescInfoList_.set(i, memoryDescInfo);
                        onChanged();
                    } else {
                        repeatedFieldBuilderV3.setMessage(i, memoryDescInfo);
                    }
                    return this;
                }

                @Override
                public final Builder setUnknownFields(UnknownFieldSet unknownFieldSet) {
                    return (Builder) super.setUnknownFieldsProto3(unknownFieldSet);
                }

                public static final Descriptors.Descriptor getDescriptor() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_descriptor;
                }

                @Override
                protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MachineInfo.class, Builder.class);
                }

                private Builder() {
                    this.javaVersion_ = "";
                    this.osName_ = "";
                    this.memoryDescInfoList_ = Collections.emptyList();
                    this.deadLockThreadInfoList_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private Builder(GeneratedMessageV3.BuilderParent builderParent) {
                    super(builderParent);
                    this.javaVersion_ = "";
                    this.osName_ = "";
                    this.memoryDescInfoList_ = Collections.emptyList();
                    this.deadLockThreadInfoList_ = Collections.emptyList();
                    maybeForceBuilderInitialization();
                }

                private void maybeForceBuilderInitialization() {
                    if (MachineInfo.alwaysUseFieldBuilders) {
                        getMemoryDescInfoListFieldBuilder();
                        getDeadLockThreadInfoListFieldBuilder();
                    }
                }

                @Override
                public Builder clear() {
                    super.clear();
                    this.threadCount_ = 0;
                    this.deadLockThreadCount_ = 0;
                    this.cpuCount_ = 0;
                    this.totalMemory_ = 0L;
                    this.freeMemory_ = 0L;
                    this.cpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    this.javaVersion_ = "";
                    this.osName_ = "";
                    this.jvmTotalMemory_ = 0L;
                    this.jvmFreeMemory_ = 0L;
                    this.processCpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        this.memoryDescInfoList_ = Collections.emptyList();
                        this.bitField0_ &= -2049;
                    } else {
                        repeatedFieldBuilderV3.clear();
                    }
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV32 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        this.deadLockThreadInfoList_ = Collections.emptyList();
                        this.bitField0_ &= -4097;
                    } else {
                        repeatedFieldBuilderV32.clear();
                    }
                    return this;
                }

                @Override
                public Descriptors.Descriptor getDescriptorForType() {
                    return Protocol.internal_static_protocol_NodeInfo_MachineInfo_descriptor;
                }

                @Override
                public MachineInfo getDefaultInstanceForType() {
                    return MachineInfo.getDefaultInstance();
                }

                @Override
                public MachineInfo build() {
                    MachineInfo buildPartial = buildPartial();
                    if (buildPartial.isInitialized()) {
                        return buildPartial;
                    }
                    throw newUninitializedMessageException((Message) buildPartial);
                }

                @Override
                public MachineInfo buildPartial() {
                    MachineInfo machineInfo = new MachineInfo(this);
                    machineInfo.threadCount_ = this.threadCount_;
                    machineInfo.deadLockThreadCount_ = this.deadLockThreadCount_;
                    machineInfo.cpuCount_ = this.cpuCount_;
                    machineInfo.totalMemory_ = this.totalMemory_;
                    machineInfo.freeMemory_ = this.freeMemory_;
                    machineInfo.cpuRate_ = this.cpuRate_;
                    machineInfo.javaVersion_ = this.javaVersion_;
                    machineInfo.osName_ = this.osName_;
                    machineInfo.jvmTotalMemory_ = this.jvmTotalMemory_;
                    machineInfo.jvmFreeMemory_ = this.jvmFreeMemory_;
                    machineInfo.processCpuRate_ = this.processCpuRate_;
                    RepeatedFieldBuilderV3<MemoryDescInfo, MemoryDescInfo.Builder, MemoryDescInfoOrBuilder> repeatedFieldBuilderV3 = this.memoryDescInfoListBuilder_;
                    if (repeatedFieldBuilderV3 == null) {
                        if ((this.bitField0_ & 2048) == 2048) {
                            this.memoryDescInfoList_ = Collections.unmodifiableList(this.memoryDescInfoList_);
                            this.bitField0_ &= -2049;
                        }
                        machineInfo.memoryDescInfoList_ = this.memoryDescInfoList_;
                    } else {
                        machineInfo.memoryDescInfoList_ = repeatedFieldBuilderV3.build();
                    }
                    RepeatedFieldBuilderV3<DeadLockThreadInfo, DeadLockThreadInfo.Builder, DeadLockThreadInfoOrBuilder> repeatedFieldBuilderV32 = this.deadLockThreadInfoListBuilder_;
                    if (repeatedFieldBuilderV32 == null) {
                        if ((this.bitField0_ & 4096) == 4096) {
                            this.deadLockThreadInfoList_ = Collections.unmodifiableList(this.deadLockThreadInfoList_);
                            this.bitField0_ &= -4097;
                        }
                        machineInfo.deadLockThreadInfoList_ = this.deadLockThreadInfoList_;
                    } else {
                        machineInfo.deadLockThreadInfoList_ = repeatedFieldBuilderV32.build();
                    }
                    machineInfo.bitField0_ = 0;
                    onBuilt();
                    return machineInfo;
                }

                @Override
                public Builder clone() {
                    return (Builder) super.clone();
                }

                @Override
                public Builder setField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.setField(fieldDescriptor, obj);
                }

                @Override
                public Builder clearField(Descriptors.FieldDescriptor fieldDescriptor) {
                    return (Builder) super.clearField(fieldDescriptor);
                }

                @Override
                public Builder clearOneof(Descriptors.OneofDescriptor oneofDescriptor) {
                    return (Builder) super.clearOneof(oneofDescriptor);
                }

                @Override
                public Builder setRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, int i, Object obj) {
                    return (Builder) super.setRepeatedField(fieldDescriptor, i, obj);
                }

                @Override
                public Builder addRepeatedField(Descriptors.FieldDescriptor fieldDescriptor, Object obj) {
                    return (Builder) super.addRepeatedField(fieldDescriptor, obj);
                }

                @Override
                public Builder mergeFrom(Message message) {
                    if (message instanceof MachineInfo) {
                        return mergeFrom((MachineInfo) message);
                    }
                    super.mergeFrom(message);
                    return this;
                }

                public Builder mergeFrom(MachineInfo machineInfo) {
                    if (machineInfo == MachineInfo.getDefaultInstance()) {
                        return this;
                    }
                    if (machineInfo.getThreadCount() != 0) {
                        setThreadCount(machineInfo.getThreadCount());
                    }
                    if (machineInfo.getDeadLockThreadCount() != 0) {
                        setDeadLockThreadCount(machineInfo.getDeadLockThreadCount());
                    }
                    if (machineInfo.getCpuCount() != 0) {
                        setCpuCount(machineInfo.getCpuCount());
                    }
                    if (machineInfo.getTotalMemory() != 0) {
                        setTotalMemory(machineInfo.getTotalMemory());
                    }
                    if (machineInfo.getFreeMemory() != 0) {
                        setFreeMemory(machineInfo.getFreeMemory());
                    }
                    if (machineInfo.getCpuRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setCpuRate(machineInfo.getCpuRate());
                    }
                    if (!machineInfo.getJavaVersion().isEmpty()) {
                        this.javaVersion_ = machineInfo.javaVersion_;
                        onChanged();
                    }
                    if (!machineInfo.getOsName().isEmpty()) {
                        this.osName_ = machineInfo.osName_;
                        onChanged();
                    }
                    if (machineInfo.getJvmTotalMemory() != 0) {
                        setJvmTotalMemory(machineInfo.getJvmTotalMemory());
                    }
                    if (machineInfo.getJvmFreeMemory() != 0) {
                        setJvmFreeMemory(machineInfo.getJvmFreeMemory());
                    }
                    if (machineInfo.getProcessCpuRate() != FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE) {
                        setProcessCpuRate(machineInfo.getProcessCpuRate());
                    }
                    if (this.memoryDescInfoListBuilder_ == null) {
                        if (!machineInfo.memoryDescInfoList_.isEmpty()) {
                            if (this.memoryDescInfoList_.isEmpty()) {
                                this.memoryDescInfoList_ = machineInfo.memoryDescInfoList_;
                                this.bitField0_ &= -2049;
                            } else {
                                ensureMemoryDescInfoListIsMutable();
                                this.memoryDescInfoList_.addAll(machineInfo.memoryDescInfoList_);
                            }
                            onChanged();
                        }
                    } else if (!machineInfo.memoryDescInfoList_.isEmpty()) {
                        if (!this.memoryDescInfoListBuilder_.isEmpty()) {
                            this.memoryDescInfoListBuilder_.addAllMessages(machineInfo.memoryDescInfoList_);
                        } else {
                            this.memoryDescInfoListBuilder_.dispose();
                            this.memoryDescInfoListBuilder_ = null;
                            this.memoryDescInfoList_ = machineInfo.memoryDescInfoList_;
                            this.bitField0_ &= -2049;
                            this.memoryDescInfoListBuilder_ = MachineInfo.alwaysUseFieldBuilders ? getMemoryDescInfoListFieldBuilder() : null;
                        }
                    }
                    if (this.deadLockThreadInfoListBuilder_ == null) {
                        if (!machineInfo.deadLockThreadInfoList_.isEmpty()) {
                            if (this.deadLockThreadInfoList_.isEmpty()) {
                                this.deadLockThreadInfoList_ = machineInfo.deadLockThreadInfoList_;
                                this.bitField0_ &= -4097;
                            } else {
                                ensureDeadLockThreadInfoListIsMutable();
                                this.deadLockThreadInfoList_.addAll(machineInfo.deadLockThreadInfoList_);
                            }
                            onChanged();
                        }
                    } else if (!machineInfo.deadLockThreadInfoList_.isEmpty()) {
                        if (!this.deadLockThreadInfoListBuilder_.isEmpty()) {
                            this.deadLockThreadInfoListBuilder_.addAllMessages(machineInfo.deadLockThreadInfoList_);
                        } else {
                            this.deadLockThreadInfoListBuilder_.dispose();
                            this.deadLockThreadInfoListBuilder_ = null;
                            this.deadLockThreadInfoList_ = machineInfo.deadLockThreadInfoList_;
                            this.bitField0_ &= -4097;
                            this.deadLockThreadInfoListBuilder_ = MachineInfo.alwaysUseFieldBuilders ? getDeadLockThreadInfoListFieldBuilder() : null;
                        }
                    }
                    mergeUnknownFields(machineInfo.unknownFields);
                    onChanged();
                    return this;
                }

                @Override
                public org.tron.protos.Protocol.NodeInfo.MachineInfo.Builder mergeFrom(com.google.protobuf.CodedInputStream r3, com.google.protobuf.ExtensionRegistryLite r4) throws java.io.IOException {
                    


return null;

//throw new UnsupportedOperationException(
Method not decompiled: org.tron.protos.Protocol.NodeInfo.MachineInfo.Builder.mergeFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite):org.tron.protos.Protocol$NodeInfo$MachineInfo$Builder");
                }

                public Builder setThreadCount(int i) {
                    this.threadCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearThreadCount() {
                    this.threadCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setDeadLockThreadCount(int i) {
                    this.deadLockThreadCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearDeadLockThreadCount() {
                    this.deadLockThreadCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setCpuCount(int i) {
                    this.cpuCount_ = i;
                    onChanged();
                    return this;
                }

                public Builder clearCpuCount() {
                    this.cpuCount_ = 0;
                    onChanged();
                    return this;
                }

                public Builder setTotalMemory(long j) {
                    this.totalMemory_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearTotalMemory() {
                    this.totalMemory_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setFreeMemory(long j) {
                    this.freeMemory_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearFreeMemory() {
                    this.freeMemory_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setCpuRate(double d) {
                    this.cpuRate_ = d;
                    onChanged();
                    return this;
                }

                public Builder clearCpuRate() {
                    this.cpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                @Override
                public String getJavaVersion() {
                    Object obj = this.javaVersion_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.javaVersion_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getJavaVersionBytes() {
                    Object obj = this.javaVersion_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.javaVersion_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setJavaVersion(String str) {
                    str.getClass();
                    this.javaVersion_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearJavaVersion() {
                    this.javaVersion_ = MachineInfo.getDefaultInstance().getJavaVersion();
                    onChanged();
                    return this;
                }

                public Builder setJavaVersionBytes(ByteString byteString) {
                    byteString.getClass();
                    MachineInfo.checkByteStringIsUtf8(byteString);
                    this.javaVersion_ = byteString;
                    onChanged();
                    return this;
                }

                @Override
                public String getOsName() {
                    Object obj = this.osName_;
                    if (!(obj instanceof String)) {
                        String stringUtf8 = ((ByteString) obj).toStringUtf8();
                        this.osName_ = stringUtf8;
                        return stringUtf8;
                    }
                    return (String) obj;
                }

                @Override
                public ByteString getOsNameBytes() {
                    Object obj = this.osName_;
                    if (obj instanceof String) {
                        ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                        this.osName_ = copyFromUtf8;
                        return copyFromUtf8;
                    }
                    return (ByteString) obj;
                }

                public Builder setOsName(String str) {
                    str.getClass();
                    this.osName_ = str;
                    onChanged();
                    return this;
                }

                public Builder clearOsName() {
                    this.osName_ = MachineInfo.getDefaultInstance().getOsName();
                    onChanged();
                    return this;
                }

                public Builder setOsNameBytes(ByteString byteString) {
                    byteString.getClass();
                    MachineInfo.checkByteStringIsUtf8(byteString);
                    this.osName_ = byteString;
                    onChanged();
                    return this;
                }

                public Builder setJvmTotalMemory(long j) {
                    this.jvmTotalMemory_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearJvmTotalMemory() {
                    this.jvmTotalMemory_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setJvmFreeMemory(long j) {
                    this.jvmFreeMemory_ = j;
                    onChanged();
                    return this;
                }

                public Builder clearJvmFreeMemory() {
                    this.jvmFreeMemory_ = 0L;
                    onChanged();
                    return this;
                }

                public Builder setProcessCpuRate(double d) {
                    this.processCpuRate_ = d;
                    onChanged();
                    return this;
                }

                public Builder clearProcessCpuRate() {
                    this.processCpuRate_ = FirebaseRemoteConfig.DEFAULT_VALUE_FOR_DOUBLE;
                    onChanged();
                    return this;
                }

                private void ensureMemoryDescInfoListIsMutable() {
                    if ((this.bitField0_ & 2048) != 2048) {
                        this.memoryDescInfoList_ = new ArrayList(this.memoryDescInfoList_);
                        this.bitField0_ |= 2048;
                    }
                }
            }
        }
    }
}
